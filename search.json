[{"path":"/articles/recordSwapping.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Targeted Record Swapping","text":"vignette R-Package recordSwapping, can used apply record swapping algorithm micro data set. implementation procedure done purely C++ based SAS code targeted record swapping ONS (https://ec.europa.eu/eurostat/cros/content/2-record-swapping_en). , however, substantial differences SAS C++ Code. differences result improving run-time C++ implementation. next section, differences 2 implementations presented . R-Package just front end easily call procedures testing purposes.","code":""},{"path":"/articles/recordSwapping.html","id":"functionality","dir":"Articles","previous_headings":"","what":"Functionality","title":"Targeted Record Swapping","text":"targeted record swapping can applied function recordSwap(). functions package called inside recordSwap() exported testing purposes. function following arguments: data micro data containing integer values, rectangular table format. hid column index  refers household identifier. hierarchy column indices variables  refer geographic hierarchy micro data set. instance county > municipality > district. similar vector vector containing similarity profiles sets variables  considered swapping households.  corresponds first set similarity variables,  second set . swaprate double 0 1 defining proportion households swapped, see details explanations risk vector vector containing risk individual hierarchy level. risk[0] corresponds risks first record hierarchy levels, risk[1] second record . ignored, now, fully tested yet. risk_threshold risk threshold, determines record swapped hierarchy level. overwrites k_anonymity. ignored, now, fully tested yet. k_anonymity integer defining threshold high risk households (k-anonymity). record risk k_anonymity > counts. risk_variables column indices variables  considered estimating risk. used risk supplied. carry_along column indices variables  additionally swapped. variables interfere procedure finding record swap . parameter used end procedure swapping hierarchies. count_swapped_records, count_swapped_hid count number households records swapped log_file_name path writing log file. log file contains list household IDs (hid) swapped created households exist. seed integer defining seed random number generator, reproducibility. IMPORTANT: argument data contains micro data can understood vector vectors. Inside function, data expected contain column input data std::vector<int> stored std::vector< std::vector<int> >. data[0] addresses variables first record data[0][0] first column first record. logic hold argument risk.","code":"recordSwap(std::vector< std::vector<int> > data, int hid,                                            std::vector<int> hierarchy,                                             std::vector<std::vector<int>> similar,                                            double swaprate,                                            std::vector<std::vector<double>> risk, double risk_threshold,                                            int k_anonymity, std::vector<int> risk_variables,                                              std::vector<int> carry_along,                                            int &count_swapped_records,                                            int &count_swapped_hid,                                            std::string log_file_name,                                            int seed = 123456)"},{"path":[]},{"path":"/articles/recordSwapping.html","id":"risk-definition","dir":"Articles","previous_headings":"Functionality > Some differences to SAS-Code","what":"Risk definition","title":"Targeted Record Swapping","text":"C++-Code: Risk calculated using counts geographic hierarchies (hierarchy) combination risk variables. SAS-Code: Risk calculated using counts geographic hierarchy (hierarchy) risk variable separately. risks combined produce single risk value record.","code":""},{"path":"/articles/recordSwapping.html","id":"sampling-probability","dir":"Articles","previous_headings":"Functionality > Some differences to SAS-Code","what":"Sampling probability","title":"Targeted Record Swapping","text":"C++-Code: Sampling probability \\(p_{y,h}\\) household \\(y\\) geographic hierarchy \\(h\\) derived risks \\(r_{,h}\\) individuals living household. risk \\(r_{,h}\\) individual \\(\\) geographic hierarchy (\\(h\\)) currently estimated k-anonymity rule. \\(r_{,h}\\) defined \\[ r_{,h} = (\\sum\\limits_{j=1}^{N_{g_1}}1[v_{1()}=v_{1(j)} \\land ... \\land v_{p()}=v_{p(j)}])^{-1} \\quad , \\] \\(v_1,\\ldots,v_p\\) set risk variables, \\(N_{g_1}\\) number persons living region \\(g_1\\) \\(1[...]\\) indicator function. \\(1[v_{1()}=v_{1(j)} \\land ... \\land v_{p()}=v_{p(j)}]\\) 1 individual \\(j\\) values risk variables \\(v_1,\\ldots,v_p\\) individual \\(\\) 0 otherwise. Casually speaking \\[ r_{,h} \\sim \\frac{1}{counts} \\quad . \\] sampling probability household \\(y\\), \\(p_{y,h}\\) hierarchy \\(h\\), defined maximum risk across household member \\[ p_{y,h} = \\max_{\\text{ household }y}(r_{,h}) \\quad . \\] sampling probability used selecting households swapping well donor households. SAS-Code: Sampling probability derived multiple factors. \\[ p_i = \\begin{cases} 0.999 \\quad \\text{low risk household} \\\\ \\frac{b\\cdot N_{high}}{SA\\cdot c-b\\cdot c} \\quad \\text{}b>0 \\\\ \\frac{0.2\\cdot N_{high}}{SA\\cdot c-0.2\\cdot c} \\quad \\text{}b=0 \\\\ \\frac{0.1\\cdot N_{high}}{SA\\cdot c-0.1\\cdot c} \\quad \\text{}b<0 \\end{cases} \\] \\[ b = SA - N_{high}\\\\ c = N_{netto} - N_{high} \\] \\(SA\\) sample size, \\(N_{high}\\) number high risk households geographic area \\(N_{netto}\\) number non-imputed records geographic area.","code":""},{"path":"/articles/recordSwapping.html","id":"swapping-records","dir":"Articles","previous_headings":"Functionality > Some differences to SAS-Code","what":"Swapping Records","title":"Targeted Record Swapping","text":"C++-Code: Swaps made every hierarchy level records fulfil k-anonymity swapped. donor set records swapped always made every record belong geographic area swapped households. lowest hierarchy level, additional number households swapped proportion households swapped equal number swaprate. proportion already swapped households succeeds values records fulfil k-anonymity also swapped. Example swapping households. number represents number high risk households hierarchy level. Figure 1 displays example hierarchy levels NUTS1 > NUTS2 > NUTTS3 numbers high risk households displayed end edges. instance, first NUTS1 region, 5 high risk households swapped households NUTS1 regions. first NUTS2 region, 10 high risk households swapped households NUTS2 region. lowest level, NUTS3 regions, number swaps, \\(n_{swaps}\\) first district defined \\[ n_{swaps} = 2 + Rest\\\\ Rest = \\max(0,N\\cdot s - n_{already})  \\] \\(N\\) number households district, \\(n_{already}\\) number already swapped households district \\(s\\) swap rate. SAS-Code Swaps made every hierarchy level depending sampling probability, high risk households likely swapped low risk households, mandatorily swapped. number swappes hierarchy level defined number high risk records total number records geographic area. instance, geographic hierarchy county > municipality > district, number Swaps municipality \\(m\\) county \\(n\\) defined \\[ SWAP_m = \\frac{SIZE_m+RISK_m}{2} \\] \\(SIZE_m\\) can derived using reciprocal number households municipality county \\(n\\). \\[ SIZE_m = \\frac{N_m^{-1}}{\\sum_iN_i^{-1}}\\cdot sN_n \\] \\(N_m\\) number households municipality \\(m\\), \\(s\\) global swaprate \\(N_n\\) number households county \\(n\\). \\(RISK_m\\) can derived using proportion high risk households municipality \\[ RISK_m = \\frac{H_m}{\\sum_iH_i}\\cdot sN_n \\] \\(H_m\\) proportion high risk households municipality \\(m\\).","code":""},{"path":"/articles/recordSwapping.html","id":"application","dir":"Articles","previous_headings":"","what":"Application","title":"Targeted Record Swapping","text":"package tested randomly generated data, contained 5 geographic levels sociodemographic variables. Applying record swapping dat look like procedure applied dat using every hierarchy level, nuts1 nuts2 using hsize similarity variable (households household size swapped) using hIncome, ageGroup, gender risk variables setting k-anonymity rule 3 setting swaprate 0.05 k_anonymity <- 0 swaprate considered. th*100% households swapped. sample small, actual number swaps can smaller, however, can happen regions small number households, e.g. 1,2,3,… Comparing number swapped households","code":"library(sdcMicro) dat <- createDat(N=100000) ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 7 has 100000 rows but longest item has 350397; recycled with ## remainder. ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 8 has 100000 rows but longest item has 350397; recycled with ## remainder. ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 9 has 100000 rows but longest item has 350397; recycled with ## remainder. dat hierarchy <- c(\"nuts1\",\"nuts2\") risk_variables <- c(\"hincome\",\"ageGroup\",\"gender\") k_anonymity <- 3 swaprate <- .05 hid <- \"hid\" similar <- \"hsize\"  dat_swapped <- recordSwap(data = dat, hid = hid,                           hierarchy = hierarchy,                           similar = similar,                           risk_variables = risk_variables,                           k_anonymity = k_anonymity,                           swaprate = swaprate) ## Recordswapping was successful! dat_swapped k_anonymity <- 0 swaprate <- .05 dat_swapped <- recordSwap(data = dat, hid = hid,                           hierarchy = hierarchy,                           similar = similar,                           risk_variables = risk_variables,                           k_anonymity = k_anonymity,                           swaprate = swaprate) ## Recordswapping was successful! dat_swapped dat_compare <- merge(dat[,.(paste(nuts1[1],nuts2[1])),by=hid],                      dat_swapped[,.(paste(nuts1[1],nuts2[1])),by=hid],by=\"hid\")  # number of swapped households nrow(dat_compare[V1.x!=V1.y]) ## [1] 5000 # swaprate times number of households in data dat[,uniqueN(hid)]*swaprate ## [1] 5000"},{"path":"/articles/recordSwapping.html","id":"supplying-index-vectors","dir":"Articles","previous_headings":"Application","what":"Supplying index vectors","title":"Targeted Record Swapping","text":"Instead column names, index vectors can supplied parameters hid, hierarchy, similar risk_variables. Please note underlying c++-routines expect indices starting 0 R indices start 1. wrapper function recordSwap() converts indices column names R correct format c++ routines. using column indices function call done usually R-fashion indices start 1.","code":"hierarchy <- c(1,2) # ~ c(\"nuts1\",\"nuts2\") risk_variables <- c(11,7,8) # ~ c(\"hincome\",\"ageGroup\",\"gender\") hid <- 5 # ~ \"hid\" similar <- 6 # ~ \"hsize\"  dat_swapped <- recordSwap(data = dat, hid = hid,                           hierarchy = hierarchy,                           similar = similar,                           risk_variables = risk_variables,                           k_anonymity = k_anonymity,                           swaprate = swaprate) ## Recordswapping was successful!"},{"path":"/articles/recordSwapping.html","id":"similarity-profiles","dir":"Articles","previous_headings":"Application","what":"Similarity profiles","title":"Targeted Record Swapping","text":"cases, condition finding similar household given parameter similarity might strict. thus, possible swap necessary number households due lack suitable donor household. expected number swapped households population 10000 households swapping rate 0.05 500. actual number swaps however: parameter similar multiple similarity profiles can defined, parameter input list. donor found first similarity profile (similar[[1]]) donor searched using next similarity profile (similar[[2]]) . Using multiple similarity profiles makes easy supply fall-back profiles initial profile specific.","code":"# demonstrate on small data set dat <- createDat(N=10000) ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 7 has 10000 rows but longest item has 35092; recycled with ## remainder. ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 8 has 10000 rows but longest item has 35092; recycled with ## remainder. ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 9 has 10000 rows but longest item has 35092; recycled with ## remainder. hierarchy <- c(\"nuts1\",\"nuts2\") risk_variables <- \"gender\" # similarity profile contains: # nuts1 + hsize + htype + hincome similar <- c(\"nuts1\",\"hsize\",\"htype\",\"hincome\")  # procedure will not always find a suitable donor dat_swapped <- recordSwap(data = dat, hid = hid,                           hierarchy = hierarchy,                           similar = similar,                           risk_variables = risk_variables,                           k_anonymity = 3,                           swaprate = 0.05,                           seed = 123456L) ## Donor household was not found in 5 case(s). ## See TRS_logfile.txt for a detailed list dat_compare <- merge(dat[,.(paste(nuts1[1],nuts2[1])),by=hid],                      dat_swapped[,.(paste(nuts1[1],nuts2[1])),by=hid],by=\"hid\")  # number of swapped households nrow(dat_compare[V1.x!=V1.y]) ## [1] 490 # additional profile contains only hsize similar <- list(similar) similar[[2]] <- \"hsize\" similar ## [[1]] ## [1] \"nuts1\"   \"hsize\"   \"htype\"   \"hincome\" ##  ## [[2]] ## [1] \"hsize\" # procedure found donors for every record dat_swapped <- recordSwap(data = dat, hid = hid,                           hierarchy = hierarchy,                           similar = similar,                           risk_variables = risk_variables,                           k_anonymity = 3,                           swaprate = 0.05,                           seed = 123456L) ## Recordswapping was successful! dat_compare <- merge(dat[,.(paste(nuts1[1],nuts2[1])),by=hid],                      dat_swapped[,.(paste(nuts1[1],nuts2[1])),by=hid],by=\"hid\")  # number of swapped households nrow(dat_compare[V1.x!=V1.y]) ## [1] 500"},{"path":"/articles/recordSwapping.html","id":"carry-along-variables","dir":"Articles","previous_headings":"Application","what":"Carry along variables","title":"Targeted Record Swapping","text":"Using function recordSwap() like always results swapping variables defined variable hierarchy. Sometimes might useful swap variables ones stated hierarchy. apply record swapping using hierarchy-levels nuts1 nuts2 nuts3 lau2-variable data set stay unchanged. Thus resulting data set, variables nuts1 nuts2 longer coherent nuts3 lau2. Let’s detailed look problem nuts1==1 nuts2==14 nuts3 variables takes values swapped data set however many values nuts3 now coherent nuts1==1 nuts2==14 Using parameter carry_along one can define certain variables additionally swapped interfere risk calculation, sampling procedure finding donor. original swapped data set value combinations nuts1, nuts2 nuts3. Setting parameter , however, interfere swapping procedure Using idea one can set return_swapped_id = TRUE return hid records swapped . output now additional column named hid_swapped, contains household ID household swapped . Number swapped hids","code":"hid <- \"hid\" hierarchy <- c(\"nuts1\",\"nuts2\") similar <- c(\"hsize\") risk_variables <- c(\"hincome\",\"htype\")  dat_swapped <- recordSwap(data = copy(dat),                         hid = hid,                         hierarchy = hierarchy,                         similar = similar,                         risk_variables = risk_variables,                         swaprate = 0.05,                         seed=1234L) ## Recordswapping was successful! # compare results dat_compare <- merge(dat[,.(paste(nuts1[1],nuts2[1])),by=hid],                      dat_swapped[,.(paste(nuts1[1],nuts2[1])),by=hid],by=\"hid\") head(dat_compare[V1.x!=V1.y]) ##    hid V1.x V1.y ## 1:   7 3 32 1 15 ## 2:  18 1 11 1 12 ## 3:  37 3 35 2 23 ## 4:  84 2 23 2 24 ## 5:  85 1 12 2 24 ## 6: 128 1 15 3 32 dat[nuts1==1&nuts2==14,sort(unique(nuts3))] ##  [1] 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 dat_swapped[nuts1==1&nuts2==14,sort(unique(nuts3))] ##  [1] 1202 1203 1211 1305 1306 1307 1310 1401 1402 1403 1404 1405 1406 1407 1408 ## [16] 1409 1410 1411 1412 1413 1414 1415 1501 1506 1512 1514 2101 2104 2113 2213 ## [31] 2502 3210 3306 3314 3315 3402 3409 3412 3505 3514 dat_swapped2 <- recordSwap(data = copy(dat),                         hid = hid,                         hierarchy = hierarchy,                         similar = similar,                         risk_variables = risk_variables,                         swaprate = 0.05,                         carry_along = c(\"nuts3\",\"lau2\"), # <- swap nuts3 and lau2 variable as well                         seed=1234L) ## Recordswapping was successful! geoVars <- c(\"nuts1\", \"nuts2\", \"nuts3\") dat_geo <- dat[!duplicated(hid),..geoVars] setorderv(dat_geo,geoVars) dat_geo_swapped <- dat_swapped2[!duplicated(hid),..geoVars] setorderv(dat_geo_swapped,geoVars)  # check if value combinations of swapped and original data are the same all.equal(dat_geo,dat_geo_swapped) ## [1] TRUE dat_compare2 <- merge(dat[,.(paste(nuts1[1],nuts2[1])),by=hid],                      dat_swapped[,.(paste(nuts1[1],nuts2[1])),by=hid],by=\"hid\")  # check if same hid were swapped in both cases all.equal(dat_compare2[order(hid),.(hid)],           dat_compare[order(hid),.(hid)]) ## [1] TRUE dat_swapped3 <- recordSwap(data = copy(dat),                         hid = hid,                         hierarchy = hierarchy,                         similar = similar,                         risk_variables = risk_variables,                         swaprate = 0.05,                         carry_along = \"nuts3\",                         return_swapped_id = TRUE,                         seed=1234L) ## Recordswapping was successful! dat_swapped3[!duplicated(hid),.N,by=.(id_swapped = hid!=hid_swapped)] ##    id_swapped    N ## 1:      FALSE 9500 ## 2:       TRUE  500"},{"path":"/articles/recordSwapping.html","id":"information-loss","dir":"Articles","previous_headings":"Application","what":"Information loss","title":"Targeted Record Swapping","text":"function infoLoss() one can calculate various information loss measures pre defined frequency table. frequency table defined parameter table_vars, accepts column names original swapped micro data. frequency table internally constructed using original swapped micro data. Afterwards, various information loss measures estimated table cells. Per default absolute deviation (\\(abs(x,y)\\)), relative absolute deviation (\\(r\\_abs(x,y)\\)), absolute deviaion square roots (\\(abs\\_sqr(x,y)\\)) calculated table cells x y, see also parameter metric. \\[ abs(x,y) = |x-y|  \\] \\[ r\\_abs(x,y) = \\frac{|x-y|}{x} \\] \\[ abs\\_sqr(x,y) = |\\sqrt{x}-\\sqrt{y}| \\] also possible supply custom information loss metric using parameter custom_meric","code":"# calculate information loss for frequecy table nuts2 x national table_vars <- c(\"nuts2\",\"national\") iloss <- infoLoss(data=dat, data_swapped = dat_swapped3,                   table_vars = table_vars) iloss$measures ##       what      absD   abssqrtD     relabsD ##  1:    Min  0.000000 0.00000000 0.000000000 ##  2:    10%  0.000000 0.00000000 0.000000000 ##  3:    20%  0.000000 0.00000000 0.000000000 ##  4:    30%  1.000000 0.02290184 0.002100254 ##  5:    40%  3.000000 0.06588566 0.005794649 ##  6:   Mean  4.505263 0.10426315 0.009660333 ##  7: Median  4.000000 0.09794070 0.009546539 ##  8:    60%  6.000000 0.13432641 0.012126108 ##  9:    70%  6.000000 0.14631870 0.013986014 ## 10:    80%  8.000000 0.18373894 0.016939746 ## 11:    90% 10.000000 0.22984672 0.021081966 ## 12:    95% 12.000000 0.27401174 0.025343785 ## 13:    99% 13.120000 0.31783720 0.030329437 ## 14:    Max 15.000000 0.36619519 0.035128806 # define squared distance as custom metric squareD <- function(x,y){    (x-y)^2 }  iloss <- infoLoss(data=dat, data_swapped = dat_swapped3,                   table_vars = c(\"nuts2\",\"national\"),                   custom_metric = list(squareD=squareD)) iloss$measures # includes custom loss as well ##       what      absD   abssqrtD     relabsD   squareD ##  1:    Min  0.000000 0.00000000 0.000000000   0.00000 ##  2:    10%  0.000000 0.00000000 0.000000000   0.00000 ##  3:    20%  0.000000 0.00000000 0.000000000   0.00000 ##  4:    30%  1.000000 0.02290184 0.002100254   1.00000 ##  5:    40%  3.000000 0.06588566 0.005794649   9.00000 ##  6:   Mean  4.505263 0.10426315 0.009660333  36.54737 ##  7: Median  4.000000 0.09794070 0.009546539  16.00000 ##  8:    60%  6.000000 0.13432641 0.012126108  36.00000 ##  9:    70%  6.000000 0.14631870 0.013986014  36.00000 ## 10:    80%  8.000000 0.18373894 0.016939746  64.00000 ## 11:    90% 10.000000 0.22984672 0.021081966 100.00000 ## 12:    95% 12.000000 0.27401174 0.025343785 144.00000 ## 13:    99% 13.120000 0.31783720 0.030329437 172.36000 ## 14:    Max 15.000000 0.36619519 0.035128806 225.00000"},{"path":"/articles/recordSwapping.html","id":"sdcmicro-objects","dir":"Articles","previous_headings":"Application","what":"sdcMicro Objects","title":"Targeted Record Swapping","text":"function recordSwap() can called using micro data directly, seen , sdcMicro-Object. Parameters swapping routine can passed options-slot creating sdcMicro-Object.","code":"# define paramters hierarchy <- c(\"nuts1\",\"nuts2\") risk_variables <- c(\"hincome\",\"ageGroup\",\"gender\") k_anonymity <- 3 swaprate <- .05 hid <- \"hid\" similar <- \"hsize\"  # create sdcMicro object with parameters for recordSwap() data_sdc <- createSdcObj(dat,hhId = hid,                          keyVars=risk_variables,                          options = list(k_anonymity = k_anonymity,                                                     swaprate = swaprate,                                                     similar = similar,                                                     hierarchy = hierarchy)) dat_swapped_sdc <- recordSwap(data = data_sdc,                               return_swapped_id = TRUE) ## Recordswapping was successful! dat_swapped_sdc[!duplicated(hid),.N,by=.(id_swapped = hid!=hid_swapped)] ##    id_swapped    N ## 1:      FALSE 9500 ## 2:       TRUE  500"},{"path":"/articles/sdcMicro.html","id":"introduction-and-main-features","dir":"Articles","previous_headings":"","what":"Introduction and Main Features","title":"Using the interactive GUI - sdcApp","text":"Package sdcMicro contains shiny app help users non-experts R (command-line) apply disclosure limitation techniques. reason, users may upload (micro)data files different software products app start anonymize dataset working within interactive, graphical user interface (GUI). document give overview functionalities graphical user interface can started sdcApp(). main functionality GUI : Uploading microdata Modify analyze microdata Creating sdcMicroObj-instances Perform anonymization techniques sdcMicroObj-problem instance Obtain information disclosure risks /information loss Export anonymized data reports Keep reproducibility able download underlying code sdcMicro now describe features interactive graphical user interface detail. GUI separated 7 main categories, can selected navigation bar top screen. Initially, pages empty content changes microdata uploaded sdcMicroObj generated. also want note throughout GUI, questionmark signs shown. Hovering mouse small icons triggers pop window additional information help anonymization process.","code":""},{"path":"/articles/sdcMicro.html","id":"about","dir":"Articles","previous_headings":"","what":"About/Help","title":"Using the interactive GUI - sdcApp","text":"first page shown graphical user interface started using sdcApp() loading package sdcMicro. page, user presented information open package vignette contains extensive information use GUI. Furthermore, section Getting started, users advised either upload microdata upload previously saved problem instance. Clicking relevant buttons brings user automatically page desired functionality available. section Settings, possible change default output path. path used whenever user decides export data GUI hard disk. default value directory GUI started (e.g current working directory). valid path entered text input field, button labelled Update current output path appears input. Pressing input updates path. successful, current path shown placeholder text input well text input field. note can change path time anonymization process. Writing files disk always use current path. page, user can also stop interface clicking button labelled Stop GUI. feature used, current [uploaded microdata] modifications well current problem instance (already specified) (invisibly) returned R. case interface started x <- sdcApp(), x contains list two elements named inputdata sdcObj. allows one continue working R. Finally, users shown ways contact us bug reports issues. now continue describe functionality user interface detail.","code":""},{"path":"/articles/sdcMicro.html","id":"microdata","dir":"Articles","previous_headings":"","what":"Microdata","title":"Using the interactive GUI - sdcApp","text":"page, user can either upload data sets stored files hard drive GUI select data frames exist users’ workspace working graphical user interface started. allows perform common data manipulation steps directly R continuing anonymize dataset using GUI. note content page changes depending whether microdata already uploaded . former case, user can view, modify reset variables uploaded dataset described chapter Modify microdata. latter case, user asked upload data GUI. described chapter Upload microdata .","code":""},{"path":"/articles/sdcMicro.html","id":"upload_microdata","dir":"Articles","previous_headings":"Microdata","what":"Upload microdata","title":"Using the interactive GUI - sdcApp","text":"default, microdata loaded GUI. Therefore user upload data GUI can later anonymized. microdata available, left-sidebar shows following options can selected clicking appropriate action button. case selected data used (eg. data converted data.frame), user presented resulting error message button Try-. clicking button, another microdata file can imported.","code":""},{"path":"/articles/sdcMicro.html","id":"testdatainternal-data","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"Testdata/internal data","title":"Using the interactive GUI - sdcApp","text":"screen allows user select data.frames available users-workspace starting user interface. Two test-data sets (testdata testdata2, information available ?testdata) included sdcMicro always available. Pressing action button drop-selection input make GUI use selected data frame.","code":""},{"path":"/articles/sdcMicro.html","id":"r-dataset--rdata","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"R-dataset (.rdata)","title":"Using the interactive GUI - sdcApp","text":"users can opt upload file saved R binary format. Users can change options character vectors automatically converted factors variables contain missing-values dropped. clicking Browse button user needs select rdata-file disk wants upload. detailed explanation options, please see chapter additional options.","code":""},{"path":"/articles/sdcMicro.html","id":"spss-file--sav","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"SPSS-file (.sav)","title":"Using the interactive GUI - sdcApp","text":"users can opt upload file exported SPSS. Users can change options character vectors automatically converted factors variables contain missing-values (‘NA’) dropped. clicking Browse button user needs select sav-file disk wants upload. detailed explanation options, please see chapter additional options.","code":""},{"path":"/articles/sdcMicro.html","id":"sas-file--sasb7dat","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"SAS-file (.sasb7dat)","title":"Using the interactive GUI - sdcApp","text":"users can opt upload file exported SAS. Users can change options character vectors automatically converted factors variables contain missing-values (‘NA’) dropped. clicking Browse button user needs select sas7bdat-file disk wants upload. detailed explanation options, please see chapter additional options.","code":""},{"path":"/articles/sdcMicro.html","id":"csv-file--csv--txt","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"CSV-file (.csv, .txt)","title":"Using the interactive GUI - sdcApp","text":"users can opt upload text file variables separated characters. Typically data exported software Excel. crucial users indicate data file variable names first row variables separated. point, users option character vectors automatically converted factor variables contain missing-values (‘NA’) dropped data read GUI. columns read character (text), character \" ignored quoting character imported. clicking Browse button user needs select txt csv-file disk wants upload. detailed explanation options, please see chapter additional options.","code":""},{"path":"/articles/sdcMicro.html","id":"stata-file--dta","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"STATA-file (.dta)","title":"Using the interactive GUI - sdcApp","text":"users can opt upload file exported Stata. Users can change options character vectors automatically converted factors variables contain missing-values (‘NA’) dropped. clicking Browse button user needs select dta-file disk wants upload. detailed explanation options, please see chapter additional options.","code":""},{"path":"/articles/sdcMicro.html","id":"additional_options","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"Additional options","title":"Using the interactive GUI - sdcApp","text":"now describe choices users can make uploading data. Convert string variables (character vectors) factor variables? option available existing data frame current workspace selected/used. selection, radio button input two possible choices, TRUE (default value) FALSE. TRUE, variables read R character-vectors automatically converted factor variable. distinct value variable factor level imported dataset. FALSE, conversion applied. Drop variables missing values (NA)? option available existing data frame current workspace selected/used. selection, radio button input two possible choices, TRUE (default value) FALSE. TRUE, variables NA-values read removed data set. option set FALSE, variables () dropped. first row contain variable names? option available text/csv file imported. radio button input two possible choices, TRUE (default value) FALSE. TRUE, first row imported data set interpreted variable names, FALSE, variable names automatically generated. Select field separator (Comma, Semicolon, Tab) option available text/csv file imported. radio button input three possible choices, Comma (default value) Semicolon Tab defining value used separate variables input file. Comma: \",\" character used separator Semicolon: ; character used separator Tab: tabulators (\\t) used separators Select File Input: option available existing data frame current workspace used. selection, clicking Browse button allows user select file local hard drive. feature files accepted file ending (e.g .dta files Stata .rdata data exported R imported) shown. reduces risk, unsuitable file can selected. file selected, pushing Open button immediately uploads file GUI can process . file read system successfully, user presented resulting error message. everything works smoothly, microdata now available left sidemenu changes. user can now start anonymization process. information, please look following sections.","code":""},{"path":"/articles/sdcMicro.html","id":"modify_microdata","dir":"Articles","previous_headings":"Microdata","what":"Modify microdata","title":"Using the interactive GUI - sdcApp","text":"data uploaded, content Microdata-page changes users can select range possibilities current inputdata. data available, button Reset inputdata available bottom sidebar. Clicking button allows reset delete current input data. However, clicking button immediately reset problem. Instead, pop-window comes user confirm reset current microdata. action performed, user click button labelled Delete current inputdata. user clicks Dismiss, inputdata remains unchanged. button, list action buttons shown. Clicking buttons changes content main column. currently active selection different color currently inactive buttons. default, first entry (“Display Microdata”) selected. entries can selected clicking desired text directly button. now continue describe features can selected.","code":""},{"path":"/articles/sdcMicro.html","id":"display_microdata","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Display microdata","title":"Using the interactive GUI - sdcApp","text":"default selection, microdata successfully imported uploaded described uploading microdata. page gives short overview microdata. shows name imported file well number observations number variables available. information, user presented interactive table containing current microdata. variables can sorted clicking small arrows next variable names top table. Also top, dropdown field users can select many observations displayed one page. bottom table users can find dynamic pagination field allows users jump given “page” current table.","code":""},{"path":"/articles/sdcMicro.html","id":"explore_inputvars","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Explore variables","title":"Using the interactive GUI - sdcApp","text":"page users possibility explore variables current microdata. Users choose variable selecting variable dropdown field label “Choose variable”. default value input field first variable dataset. Optionally, second variable can selected choosing variable dropdown field labelled “Choose second variable (optional)” default value “None”. variables selected, graph additional information presented . specific output depends number variable(s) chosen well type: One variable selected: selected variable type factor character: case, barplot factor levels shown. , table showing factor level level , often occurs corresponding percentage shown. , number percentage missing values shown. selected variable type integer numeric: case, histogram selected variable shown. graph, table showing main summary statistics (Minimum, Mean, Median, Maximum 5%-, 25%-, 75%- 95%-quantiles) shown. table, number percentage missing values displayed. Two variables selected: variables type integer numeric: selected variables continuous (numeric integer), scatterplot two variables displayed. , correlation coefficient (Pearson) using pairwise complete observations two variables listed. , two tables shown. table shows main summary statistics one selected variables. information included tables (case one continuous variable selected) Minimum, Mean, Median, Maximum 5%-, 25%-, 75%- 95%-quantiles variable. Finally, information number percentage missing values shown variables. variables type factor character: case, mosaicplot selected variables shown well table, containing cross-tabulation levels (unique values case character input) shows number percentages combination codes given two selected variables including combinations NA. table, number percentage missing values displayed selected variables. One variables type factor character, variable type integer numeric: case, grouped boxplot continous variable (type integer numeric) shown level unique value non-continuous variable. , level non-continuous variable, summary statistics already described continuous variable shown. Finally, number percentage missing values displayed selected variables.","code":""},{"path":"/articles/sdcMicro.html","id":"reset_inputvars","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Reset variables","title":"Using the interactive GUI - sdcApp","text":"microdata set uploaded, backup unmodified dataset saved internally. allows users reset modifications variables inputdata file can done page. , user needs select one variables select field default empty. variables reverted selected, one click outside dropdown field close input. Afterwards, action button labelled Reset selected variable(s) original state occurs input field. Clicking button resets selected variables original state. case want remove already selected variables, can just click variable names input field either press “backspace”- “delete”” keys keyboard. case, pressing action button, GUI changes “Explore variables” page first selected variable(s) shown.","code":""},{"path":"/articles/sdcMicro.html","id":"use-subset-of-microdata","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Use subset of microdata","title":"Using the interactive GUI - sdcApp","text":"page possible decrease size input data. especially useful one wants test different parameter settings run complete dataset take long. reduce size input dataset, user select method using drop field Select method restrict number records select value slider Set 'n' selected method. following choices possible reduce dataset, range values can chosen slider depends choice. n percent data: n% data randomly chosen. slider ranges case 1 100. first n observations: data set decreased using first n% records. slider ranges case 1 total number records. every n-th observation: choice allows create simple, systematic sample input data selecting every nth observation. slider ranges case 1 max 500. exactly n randomly drawn observations: data set decreased taking random sample n% records. slider ranges case 1 total number records. desired selections applied, pushing button Create subset performs actual sub-subsampling. micro data set reduced, user taken Display microdata page reduced dataset can analyzed.","code":""},{"path":"/articles/sdcMicro.html","id":"convert-numeric-to-factor","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Convert numeric to factor","title":"Using the interactive GUI - sdcApp","text":"page allows convert numerical variables (numeric integer) factors. Users can choose range possibilites factor variable generated, ranging automatic conversion complete manual control. default, two input fields available. left hand side dropdown select field termed Choose numeric variables user can select list numeric variables input data set. Next element, two radio buttons labelled Use custom breaks? two options, (default) yes. selected input least one numeric variable clicked select input Choose numeric variable(s), button termed Convert factor(s) occurs. Pressing button converts selected numerical variables factors. Afterwards, user taken explore variables page first selected variable(s) shown. , however, radio buttons Use custom breaks? set yes, layout page changes. case, user able adjust way factor variable generated additional UI elements appear. first visible change , one numeric variable can now selected. Now, list radio buttons labelled Choose numeric variable shown available variables printed . Selecting specific variable works clicking either variable name radio button . next choice user make select input field termed Select algorithm equidistant (default), logEqui, equalAmount manual possible values. remaining user interface first three choices Select algorithm input slightly different manual selected. first case, numeric input field labelled Specify number intervals shown second case text input field labelled Specify custom breaks occurs right next select input field algorithm can selected. either equidistant, logEqui equalAmount selected, number specified numeric input field defines number levels new factor . difference methods : equidistant: uses breakpoints generate intervals equal length. number records interval might differ. logEqui: uses breakpoints generate intervals equal length based log transformation data. number records interval might differ. equalAmount: uses breakpoints group/interval number records. intervals might different length. Selecting manual allows user set breakpoints manually. Note: make sure values included specified intervals. syntax text field way breakpoints (numbers) entered separated colon (,). sequence numbers interpreted follows: values greater value colon values smaller equal value colon grouped together. non-matched values NA. example, entering 1,3,5,9 create factor numeric variable grouping together values x greater 1 less equal 3 first group, values greater 3 less equal 5 second group values greater 5 less equal 9 third group. values x less equal 1 greater equal 10 NA. However, -Inf Inf may entered first last value avoid generation NAs. Already existing missing values numeric input variable stay NA recoding. common choices Select algorithm button labelled Convert factor appears information entered correct. Also, bottom page table two columns shown. first columns shows unique values selected variable second column shows number occurances value. pressing action button, selected numeric variable recoded according parameters chosen. recode done, current view changes explore variable page recoded factor variable already selected.","code":""},{"path":"/articles/sdcMicro.html","id":"convert-variables-to-numeric","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Convert variables to numeric","title":"Using the interactive GUI - sdcApp","text":"page, variables type factor character input data can converted numeric variables. variables present microdata, user shown information conversion possible. Otherwise, user can select one variables input field labelled Choose variable(s). least one variable selected, button called Recode numeric occurs variable selection input. clicking button, conversion done view changes explore variable page first recoded variables selected. variables type factor, factor levels converted numeric values. Factor levels converted numeric values replaced missing values (NA). noted however - also shown GUI - , variables type character, feature used care internally, function .numeric() used perform conversion. Thus, resulting numeric vector contains underlying numeric (integer) representation input vector.","code":""},{"path":"/articles/sdcMicro.html","id":"recode_factors_inputdata","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Modify factor variable","title":"Using the interactive GUI - sdcApp","text":"option selected left hand sidebar, possible modify existing factor variables. common use case combine one levels factor. use case rename single factor levels. order proceed, user must first select existing factor variable select input labelled Choose factor variable. box, another input termed Select Levels recode/combine. input, levels active factor variable can choosen clicking selectable. Already selected levels may removed clicking mouse pressing either “backspace”- “delete” keys keyboard. least one factor level selected, text input called New label recoded values well radio input labelled Add missing values new factor level? appear. default, textbox containing name new level computed joining selected factor levels together using character _ separator. clicking text field, users can also start enter custom name new factor level. one level selected Select Levels recode/combine, entering value different default value input leads renaming specific factor level. radio button input labelled Add missing values new factor level? set default. changed yes, missing (NA) values factor added new level. input fields button labelled Group factor levels barplot showing absolute number current levels factors shown. Pressing action button results updating factor. case, page refreshes plot adjusts changes applied.","code":""},{"path":"/articles/sdcMicro.html","id":"create_strata_var","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Create a stratification variable","title":"Using the interactive GUI - sdcApp","text":"page, user able generate new variable based two ore variables current micro data. reason several anonymization techiques explained can applied independently subgroups input data given values called stratification variable. page allows create variable convinient way. user specify least two variables select field labelled Select variables generate stratification variable. field, variables available micro data set can possibly selected. two variables selected, two new inputs appear. first one appears right next variable selection field called Specify variable name stratification variable. field, user can enter desired name new variable. default, variable name listed consists selected variables chained together using _ separator. clicking field, user can enter customized variable name. current value text input field name already existing variable, button termed Create stratification variable appears . Clicking button adds new variable input data set. variable generated factor variable values contributing variables also chained together using _ separator. pressing button, page changes explore variable page newly generated variable already selected.","code":""},{"path":"/articles/sdcMicro.html","id":"set-specific-values-to-na","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Set specific values to NA","title":"Using the interactive GUI - sdcApp","text":"section, users can set values variables missing (NA). first step choose one two possible methods choosing either record ID (default selection) value radio button input labelled want select cells recoded missing? top page. record ID selected, user can set values one variables specific record missing. therefore needs select least one variable input called Select variable. least one variable selected, new input field occurs. input called Select record ID, number 1 number records can specified. selection refers row selected variables values set NA. user can change index either clicking small arrows right hand side input field allow increment decrement current number one. alternative, also possible directly enter number field. case value selected, choices slightly different. variable selection possible select one variable. difference input field user can select number. Instead, dropdown field user can select one distinct values selected variable. idea records values selected variable set NA. remaining part page identical choices method. inputs, interactive table showing current microdata shown. table can filtered navigated exactly way already described . selections valid, button labelled Set values NA shown table. Pressing button sets correspondig values NA micro data. Afterwards, page changes Exlore variables page shown. page, (first) selected variable values set missing pre-selected analyzed.","code":""},{"path":"/articles/sdcMicro.html","id":"hierarchical-data","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Hierarchical data","title":"Using the interactive GUI - sdcApp","text":"page, users find functionality deal hierarchical data. idea follows. Often data contain clusters, eg. individual within households students within classes. case, often case variables data set relevant cluster-level others relevant individual level. also often case one wants apply different anonymization strategies different levels data. GUI offers way deal situation following way. radio buttons labelled want ? allow choose Prepare file anonymization household level variables (default) Merge anonymized household level file full dataset. former case, uploaded micro data set can restricted variables relevant cluster-level . done, user may anonymize household file can finally export anonymized file disk described . latter case, already exported, anonymized household-level file can imported GUI merged individual level file. anonymization process can started creating problem instance using individual-level variables keys. Finally, user able export anonymized file safe levels. now describe possibilities section: Prepare file anonymization household level variables case goal prepare household-level file, user first needs select identifier households clusters. select input termed Select household id variable initially empty. variable selected list variables available input data, additional select field called Please select variables refer households individuals appears next . input, one variables relevant households (means, variables feature contain values household) can selected. least one additional variable chosen, button labelled Create household-input data shown . Clicking button restricts current data set selected variables one (first) record value cluster identificator. Finally, page refreshes number observations variables updated, household level data set shown. Additionally, names variables well type presented tabular format. Merge anonymized household level file full dataset case, goal merge already anonymized household level file currently available data file. procedure performed two steps. first step, user needs click Browse button select anonymized file merged. Open button clicked file uploaded immediately. note possible upload data exported .rdata-files described . pressing button, file uploaded system. error occured (e.g selected data file contain data frame data set contain variables overlap current inputdata) error message shown user may upload different file disk. file successfully uploaded, layout page changes . button labelled Reset uploaded household data appears allows reset household level data makes possible upload yet another file. Additionally, dropdown field labelled Select variable containing household ids appears. input, user needs select variable list variables available datasets containing identification variable. selected variable finally used merge datasets. selection, button termed Merge household- individual level data shown. clicking button, merge performed. everything went well, page refreshes number observations variables updated micro data file shown. Additionally, names variables well type presented tabular format.","code":""},{"path":"/articles/sdcMicro.html","id":"anonymize","dir":"Articles","previous_headings":"","what":"Anonymize","title":"Using the interactive GUI - sdcApp","text":"page relevant creating sdc problem (class sdcMicroObj) can anonymized within GUI. user navigates page inputdata uploaded, page shows two options. user can either click button labelled Upload microdata button labelled Upload previously saved sdc problem. first case user taken Microdata page microdata can uploaded described , latter case user taken Undo page already exported problem instance can uploaded. microdata available problem defined, user can define new sdc problem instance. Details can done given chapter Set problem. problem instance defined, page layout changes user can either view modify problem instance described apply anonymization techniques categorical continuous variables. Details specific methods can applied given chapter Anonymization methods.","code":""},{"path":"/articles/sdcMicro.html","id":"setup_sdcproblem","dir":"Articles","previous_headings":"Anonymize","what":"Set up a problem","title":"Using the interactive GUI - sdcApp","text":"microdata already uploaded, first step anonymization procedure create sdc problem can done page. layout page split two parts. left hand side, user presented table choices required define new problem instance. right hand side, user given possibility explore variable. useful example, decide variables used categorical numerical key variables. discussion choice variables, user look ?createSdcObj underlying function used generate problem. now explain detail proceed. top right hand sidebar user shown select input field labelled Explore variables variables current micro data set can selected. default first variable data set chosen. select input graph depending variable type shown. selected variable either type factor, character integer (less equal 10 unique values), barplot shown. variables type numeric integer 10 unique values, histogram showing distribution plotted. plot, number unique values including missing (NA) shown. Finally, information even information selected variable shown. case continuous variable, typical main summary statistics (Minimum, Mean, Median, Maximum 5%-, 25%-, 75%- 95%-quantiles) presented factor variables (well integer variables 10 unique values), number occurences possible level shown. left hand side, interactive table row variable available microdata total 9 columns shown. table allows user specify relevant variables sdc problem. Also, shows additional information variable. variables : Variable name: variable name Type: class variable according class() : variable uses either categorical continuous key variable Cat.: variable used categorical key variable Cont.: variable used continuous key variable Weight: variable contains sampling weights () Hierarchical identifier: variable identifies clusters (example households) PRAM: variables suitable postrandomized Delete: variables excluded setting sdc problem. Number levels: number unique values variable Number missing: number missing values variable columns PRAM, Weight, Hierarchical identifier Delete, checkboxes present table. checkboxes default selected. checkboxes can enabled clicking . can one variable selected weight variable variable holding cluster ids, multiple variables may checked column Remove Pram. table, two slider inputs shown. first one, labelled Parameter \"alpha\" relevant frequency calculation given categorical key variables contain missing (NA) values. input, values 0 1 (default setting) steps 0.01 can selected. note leaving value 1 leads results versions sdcMicro <= 4.7.0. details parameter, please look ?freqCalc. second slider, termed Parameter \"seed\" can take values -250 250 steps 1 number used set seed random number generator ensure reproducability. default, value set 0. note sliders selected, values can also increased decreased clicking (left right) keys keyboard. Whenever values either radio buttons checkboxes changed, internally checked conditions successful generation new sdc problem fulfilled. case restrictions violated, either popup window containing additional information occurs red button error message shown. user can change variable settings table. checks passed, blue button labelled Setup SDC problem appears two sliders. Clicking button creates sdc problem. Finally, page refreshes layout changes. Anonymization Methods, changes explained.","code":""},{"path":"/articles/sdcMicro.html","id":"anonymization_methods","dir":"Articles","previous_headings":"Anonymize","what":"Anonymization Methods","title":"Using the interactive GUI - sdcApp","text":"sdc problem defined described , layout page changes. now features left sidebar main content shown right side screen. left sidebar, users can choose kind anonymization options want apply. bottom sidebar, button labelled Reset SDC problem shown. Clicking button allows reset current sdc problem. However, clicking button immediately reset problem instead, popup window appears. window user confirm current problem deleted. action performed, user clicks button labelled Delete current problem. user clicks Dismiss, sdc problem remains unchanged. button, several action buttons shown organized sections Reset Problem, View/Analyze existing sdcProblem, Anonymize categorical variables Anonymize numerical variables. default, first entry Show summary View/Analyze existing sdcProblem selected made clear due different color button. content center screen dependent choices left sidebar. now continue describe possible choices View/Analyze existing sdcProblem, Anonymize categorical variables Anonymize numerical variables. case anything different Show summary selected, layout page changed . case, sidebar right hand side page appears many useful statistics current anonymization process listed : Variable selection first section, “important” variables current sdc problem listed. categorical key variables, numerical key variables () well variables defining sampling weights cluster identification (). categorical key variables, number suppressions due establishing k-anonymity also listed table. Additional parameters second block lists - also tabular format - number records data set within current sdc problem instance value paramters alpha random seed used setting current problem. k-anonymity next table shows number percentages records violating 2-, 3- 5-anonymity current sdc problem. parenthesis corresponding numbers shown initial sdc problem without anonymization procedures applied. Risk numerical key variables case variables specified numerical key variables setting sdc problem, another table showing estimated minimal maximum risk numeric key variables shown original (possibly) modified variables. information look ?dRisk. Information loss section information loss also displayed continuous key variables available current problem instance. case, values utility measures IL1s Difference Eigenvalues shown original (possibly) modified variables. information look ?dUtility. sidebar always updated whenever sdc problem instance modified case anonymization procedure applied. cases also extended, example categorical variables post randomized explained .","code":""},{"path":"/articles/sdcMicro.html","id":"view_analyze_existing_problem","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods","what":"View/Analyze existing sdcProblem","title":"Using the interactive GUI - sdcApp","text":"page allows user view current anonymization state. Show summary page, lot detailed information current problem instance shown. applying anonymization techniques, GUI often changes page easily possible check changed. Furthermore, also possible explore variables within current problem modify problem instance linking variables categorical key variables described create random identification variables described .","code":""},{"path":"/articles/sdcMicro.html","id":"show_sdc_summary","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > View/Analyze existing sdcProblem","what":"Show summary","title":"Using the interactive GUI - sdcApp","text":"page gives overview current sdc problem. information listed dynamic updated whenever operation (rather, anonymization technique) applied problem instance. summary problem divided following subsections. However, sections present time. content possible parts explained chapter. Summary dataset variable selection section, information dimension (number records, number variables) current data set active problem instance shown. Additionally, important variables sdcMicro listed. variables : Categorical key variable(s): selected categorical key variables Numerical key variable(s): continuous key variables Sampling weight: variable containing sampling weights Hierarchical identifier: variable holding household cluster identificators Deleted variable(s): variables deleted setting current problem Linked variables: variables linked categorical key variables note first entry (Categorical key variables) always visible. entries shown specified sdc problem created described . Computation time section prints current time spent computations. refers time actually spent performing anonymization steps well setting problem instance. time shown however track time spent GUI. Information categorical key variables part summary, aggregation statistics categorical key variables printed tabular format. table holds 4 columns features row categorical key variable current problem instance. columns table : Variable name: name key variable Number levels: current number categories Average frequency: mean size existing categories Frequency smallest level (>0): number records smallest category frequencies >0 last three columns, information based data set used create problem instance shown parenthesis. note NA values (missings) counted separate categories table. Risk measures categorical variables section, expected number percentage re-identifications population given current set categorical key variables taking account possibly specified sampling weights printed. Furthermore, robust measure shown listing number observations whose individual risk larger median individual risk distribution plus two times “Median Absolute Deviation”, details look ?mad. information also listed initial data set used create current sdc problem. Information k-anonymity section, table showing number percentages observations violate k-anonymity shown. table following 3 columns: k-anonimity: shows parameter k Modified data: number percentages observations violating k-anonymity current (anonymized) data Original data: number percentages observations violating k-anonymity initial data set used set problem instance. table changes example, categorical key variables recoded, k-anonymity established, postrandomization applied (described ) values based individual risk value suppressed. PRAM case, variables postrandomized, described , transition matrices shown variable post-randomized. end section, table three columns summarizing postrandomization results printed. columns : variable: variable name variable postrandomized nrChanges: absolute number value-changes. percChanges: percentage changed values variable postrandomized, row added table. Compare numVars section, table showing important statistics numerical key variables printed. However, section shown least one variable specified numerical key variable setting current problem. case shown, table following 8 columns. Variable: name numeric key variable Type: shows whether values row refer current, possibly anonmyized variable (modified) initial data used create sdc problem (orig) Min.: minimum value variable 1st Qu.: value first quantile Median: median value Mean: arithmetic mean 3rd Qu.: value third quantile Max.: maximium value variable table updated, whenever numeric anonymization technique applied least one numeric key variable. Risk measures numerical key variables part shows global risk measure based numeric key variables current initial data set. information visible least one variable specified numerical key variable setting current problem. assumtion re-identification risk based numerical key variables initially always 0% 100%. numeric key variables changed, less upper bound risk interval . Information loss section information loss (data utility) numeric key variables also visible numeric key variables available current problem instance. case, values two measures, IL1s difference eigenvalues printed current, possibly modified numerical key variables well initial data set used problem instance created. details measures, look ?dataUtility. Anonymization steps bottom page, anonymization steps applied, listed. helps user get quick overview, already done protect data. section expecially useful previously exported problem instances imported. techniques applied, information also returned.","code":""},{"path":"/articles/sdcMicro.html","id":"explore_sdc_vars","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > View/Analyze existing sdcProblem","what":"Explore variables","title":"Using the interactive GUI - sdcApp","text":"view allows users explore variables current state sdc problem. functionality exactly already described Explore variables exploration variables originally uploaded micro data set. difference analyzed variables now currently available active problem instance.","code":""},{"path":"/articles/sdcMicro.html","id":"add_ghostvars","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > View/Analyze existing sdcProblem","what":"Add linked variables","title":"Using the interactive GUI - sdcApp","text":", users can link one variables specific categorical key variable. linked variable, anonymized dataset feature suppression pattern key variable. helpful example, similar variables exist make sense add categorical key variables. order link variable key variable, one select key variable using drop-menu field labelled Select categorical key variable. Next input another ‘select input’ field variables used either categorical numerical key variables, weight- stratification variable can selected linked key variable . input field, multiple variables may selected. least one variable selected linking, button labelled Add linked variables appears bottom page. Pressing button adds link current sdc problem view refreshes Show summary page. information also displayed top page section Important variables information.","code":""},{"path":"/articles/sdcMicro.html","id":"create_new_ids","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > View/Analyze existing sdcProblem","what":"Create new IDs","title":"Using the interactive GUI - sdcApp","text":"part GUI possible create new random variable. perform task, user needs specify two inputs. first one, termed Specify name new ID variable, desired variable name new id needs entered. second input drop field, either none (default value) variable available current sdc problem may selected. case variable selected input, newly generated variable features identical (random) numbers equal values selected variable. inputs chosen, button labelled Add new ID variable appears bottom page. Pressing button creates new variable adds current sdc problem. view finally updates Show summary page shown dimension data set updated.","code":""},{"path":"/articles/sdcMicro.html","id":"anonymize_categorical","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods","what":"Anonymize categorical variables","title":"Using the interactive GUI - sdcApp","text":"Anonymize categorical variables selected want ? left sidebar screen, options Recoding, k-Anonymity, PRAM (simple), PRAM (expert) Supress values high risk available radio button list termed Choose Method described .","code":""},{"path":"/articles/sdcMicro.html","id":"recoding_sdcproblem","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize categorical variables","what":"Recoding","title":"Using the interactive GUI - sdcApp","text":"page allows recode reduce level detail selected categorical key variables. functionality already described recoding factor variables original microsdcdata file. two slight differences, though. first one variables can selected input field termed Choose factor variable restricted categorical key variables chosen sdc problem created, described . difference recoding done, page refreshes content right sidebar recalculated. especially affects number observations violating k-anonymity shown block k-anonymity.","code":""},{"path":"/articles/sdcMicro.html","id":"kanon","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize categorical variables","what":"k-Anonymity","title":"Using the interactive GUI - sdcApp","text":"section allows generate k-anonymity categorical key vars (independently) within subsets key variables. done setting specific values categorical key variables NA. Thus, method parameter alpha specified creating sdc problem great importance. discussion parameter, reader advised read help pages ?freqCalc. feature algorithm users may enter preference specifying order variables required suppressions take place. Furthermore possible apply method independently groups defined stratification variable. also first choice user make page. select input field labelled want apply method group defined selected variable? possible select variable set variables type factor, integer character excluding variables specified categorical key variables. next input field termed want modify importance key variables suppression?. radio buttons two possible choices, (default) Yes. selected, importance variables internally calculated way unique values key variable , likely suppressions variable done. Yes selected clicking radio button, number additional select input fields appear . fields dynamically labelled Select importance key variable \"{var}\" {var} placeholder categorical key variable. select inputs, number 1 n (number key variables) selected. key variable importance 1 typically least additional suppressed cells variable importance equals n likely largest number introduced missing values. Typically, key variables used determine k-anonymity reached. number key variables large, sometimes helpful establish k-anonymity within subsets available key variables. radio buttons labelled Apply k-anonymity subsets key variables? set (default choice), key variables used determine k-anonymity. case, user needs specify required parameter k using slider input termed Please specify k-anonymity parameter. slider default value 2 can take values 2 50. choice Apply k-anonymity subsets key variables? Yes, additional elements appear . Specifically, values 1 number key variables, two additional inputs appear next . first one radio button input field labelled Apply k-anon subsets {n} key variables? default set . set yes, k-anonymity established combinations categorical key variables containing n variables. second parameter slider input termed k-Anonymity-parameter {n} combs, allows set parameter k specific combination. details establishing k-anonymity combination key variables, please look ?kAnon. settings applied, button labelled Establish k-anonymity shown bottom page. Clicking button starts process establish k-anonymity might take long time. bottom right screen, progress bar occurs showing process running. finished, page refreshes right sidebar updated. Users especially look first table, number suppressions within key variable shown. Also, section k-anonymity updated.","code":""},{"path":"/articles/sdcMicro.html","id":"pram_simple","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize categorical variables","what":"PRAM (simple)","title":"Using the interactive GUI - sdcApp","text":"page offers possibility randomize one variables based invariant probability transition matrix. apply method current sdc problem, user choose least one variable input field labelled Select variable(s) PRAM. default, variable selected field. user can select input set variables previously declared suitable postrandomization. PRAM variables declared setting problem instance Anonymize tab. least one variable pramed selected, also possible select variable used stratification, field named Postrandomize within different groups (stratification)?. default value stratification changed, post randomization selected variables performed independently unique value selected variable. field, one variable may selected. noted, stratification variables can created setting sdc problem instance described . create transition matrix, two parameters (pd alpha) need provided using slider inputs. pd refers minimum diagonal values (internally) generated transition matrix. higher value chosen, likely value stays category remains unchanged. Parameter alpha allows add perturbation calculated transition matrix. lower number , less perturbed matrix get. default, value Choose value 'pd' 0.8 value Choose value 'alpha' 0.5. details, look ?pram. selecting least one PRAM variable, button labelled Postrandomize appears bottom page. Pressing button performs postrandomization. Afterwards, page refreshes right sidebar section called PRAM summary either appears extended. part sidebar, variable postrandomized number percentages value changes listed.","code":""},{"path":"/articles/sdcMicro.html","id":"pram_expert","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize categorical variables","what":"PRAM (expert)","title":"Using the interactive GUI - sdcApp","text":"page offers possibility randomize variable using freely specified transition matrix. apply method current sdc problem, user choose one variable input field labelled Select variable PRAM default first possible variable selected. user can choose input variable specified possible variable postrandomization initialization sdc problem yet pramed current sdc problem. selecting least one variable, possible select variable used stratification. , input field Postrandomize within different groups (stratification)?, default value stratification changed, post randomization selected variables performed independently unique value selected variable. select field, one variable may selected. noted, stratification variables can created setting sdc problem instance described . input fields, interactive table shown. table edited user way can used transition matrix. given row, numbers specify percentages current value (actual row name) changes value specified respective colum name. default, diagonal table, values 100. means probability value change 100%. user can change table way sum values row equals 100. case, red button appears table giving instant feedback table needs edited. Values specific cells may changed clicking cell entering new values. transition matrix valid (eg. values rows sum 100), button labelled Postrandomize appears bottom page. Pressing button performs postrandomization. Afterwards, page refreshes right sidebar section called PRAM summary either appears extended. part sidebar, variable postrandomized number percentages value changes listed.","code":""},{"path":"/articles/sdcMicro.html","id":"supp_highrisk","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize categorical variables","what":"Supress values with high risks","title":"Using the interactive GUI - sdcApp","text":"page user can set values -risky records NA categorical key variable. , user needs select categorical key variable select input field labelled Select key variable suppression. default, first key variable already selected. next step set appropriate threshold value used identify “risky” records. records defined individual re-identification risk larger selected threshold. threshold may changed updating slider input termed Threshold individual risk. range slider starts 0 maximum value depends current sdc problem. input fields, histogram showing distribution individual risk values plotted. graph, vertical black line representing current value threshold also shown. Finally button labelled Suppress {nr} values high risk variable {var}. labelling button dynamic. shows number records set missing selected variable current choice threshold. button pressed, records selected variable whose individual risks threshold set NA. view finally updates Show summary page shown measures recalculated.","code":""},{"path":"/articles/sdcMicro.html","id":"anonymize_numerical","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods","what":"Anonymize numerical variables","title":"Using the interactive GUI - sdcApp","text":"Anonymize numerical variables selected want ? left sidebar screen Anonymize page, options Top/bottom coding, Microaggregation, Adding Noise Rank Swapping become available radio button list termed Choose Method. methods described subsequent chapters. note however first choice (Top/bottom coding) always available. remaining choices visible numeric key variables specified creating sdc problem described .","code":""},{"path":"/articles/sdcMicro.html","id":"top_bot_coding","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize numerical variables","what":"Top-/Bottom Coding","title":"Using the interactive GUI - sdcApp","text":"page allows replace values (“Top coding”) (“Bottom coding”) threshold custom number. page allows recode numeric key variables, numeric variables currently available. first step choose variable select input labelled Select variable. default, first numeric variable current sdc problem instance selected. Next field radio buttons labelled Apply top/bottom coding? default value top chosen. input fields, user required enter two numbers input fields labelled Threshold value Replacement Value. numbers relate threshold (larger case top coding less case bottom-coding) first input number replace current values selected variable. help users find suitable thresholds, boxplot showing distribution currently selected variable shown inputs. required input - especially threshold replacement values - set found valid, additional elements appear input fields boxplot. first additional element text stating many values replaced well corresponding percentage. information, button labeled Apply top/bottom coding appears. button pressed, values replaced according current setting page updates additional elements disappearing boxplot updated . Also, right sidebar updated. case recoded variable numeric key variable, values sections Risk numerical key variables Information loss may change.","code":""},{"path":"/articles/sdcMicro.html","id":"microaggregation","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize numerical variables","what":"Microaggregation","title":"Using the interactive GUI - sdcApp","text":"page possible apply microaggregation numeric (key) variables current sdc problem. user choice among total 12 different methods. details specific methods, user referred manual ?microaggregation. layout page changes depending specific method selected. Microaggregation methods can broadly categorized two categories, cluster-based non-cluster based. also first selection user can make page. Using radio buttons labelled Use cluster-based method?, choices (default) yes can selected clicking appropriate button. choice input field changes possible selections select field termed Select method shown next . Use cluster-based method? , following methods can selected: mdav rmd simple single onedims pca mcdpca pppca Use cluster-based method? yes, following choices possible: influence clustpca clustmcdpca clustpppca next choice user can make whether microaggregation performed entire data set independently groups defined unique values stratification variable. default, value stratification pre-selected select field labelled Apply microaggregation groups (stratification)?. possible variables include non-numeric variables available sdc problem. mention stratification variables can created setting sdc problem instance described . Finally, two additional input fields appear microaggregation methods. first one, labeled Aggregation-level slider input defines size groups formed. value slider default 3 ranges 1 15. input labelled Select Variables Microaggregation. input, numeric variables microaggregated can selected list numeric key variables. empty, variables used. tooltip user hovers input field also informs default numeric key variables microaggregated. specific methods, additional inputs appear . non-clusterbased methods, two additional inputs labeled Aggregation statistics Trimming-percentage shown variable selection input. input called Aggregation statistics list radio buttons choices mean (default), median, trim onestep. trim selected, trimmed mean using value slider input labeled Trimming-percentage calculated within group value used replace individual values. additional elements appear methods simple, onedims, pca, mcdpca pppca. method simple third additional element termed Select variable sorting appears. drop list, user select variable used sort data set computing required groups. details, see ?microaggregation. case clusterbased methods used, layout possible methods. additional element appear variable selection input Select variables microaggregation. Users can select - described - values AggregationsStatistics relevant Trimming-percentage trim selected aggregation measure. Furthermore, users can select desired cluster method radio buttons input labeled Clustermethod choices clara (default), pam, kmeans, cmeans bclust possible. also possible specify data transformed computing clusters. radio buttons list labeled Transformation, choices none (default), log boxcox possible. Finally, desired number clusters formed needs specified. number can set slider input labeled Number clusters. default set 3. options set, button labeled Perform Microaggregation shown bottom page. Clicking button performs microaggregation selected variables according options set. Since computation might take long time, bottom right screen progress bar appears, showing process running. finished, page updates Show summary page shown. page, section Compare numVars either updated added, sections Information risk numerical key variables, Information loss Anonymization steps updated display current values statistics.","code":""},{"path":"/articles/sdcMicro.html","id":"add_noise","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize numerical variables","what":"Adding Noise","title":"Using the interactive GUI - sdcApp","text":"section possible perturb numerical key variables adding stochastic noise. first option select numerical key variables select input labeled Select variables. input field left empty (default), noise added numerical key variables. Next field, users can select desired algorithm select input termed Select algorithm. choices : additive (default value) correlated2 restr ROMM outdect correlated note last method (correlated) available least two numerical key variables specified current problem instance. details methods, please refer section ?addNoise main page. two input fields, slider input shown. input dynamically labeled depending choice method. methods, however, slider used enter amount perturbation used. Since parametrization different methods different, slider different default values different ranges depending choice method. , refer ?addNoise details. options set, button labeled Add noise shown bottom page. Clicking button adds noise selected variables according options set. Since computation might take time, bottom right screen progress bar occurs showing process running. finished, page updates Show summary page shown. page, section Compare numVars either updated added, sections Information risk numerical key variables, Information loss Anonymization steps updated display current values statistics.","code":""},{"path":"/articles/sdcMicro.html","id":"rank_swapping","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize numerical variables","what":"Rank Swapping","title":"Using the interactive GUI - sdcApp","text":"page, user can apply rank swapping numerical key variables. complete description parameters, please see corresponding main page sdcMicro, ?rankSwap. total 6 inputs can set. first input, labeled Select variables allows select numerical key variables swapping. select field empty (default), numerical key variables used. remaining inputs slider inputs defining required parameters algorithm described rankSwap. sliders Percentage lowest values grouped together rank swapping Percentage largest values grouped together rank swapping refer top- bottom- percentages grouped together method applied. sliders default value 0 (minimum) can take values 25. sliders Subset-mean preservation factor, Multivariate preservation factor Rank range percentage total sample size. allow fine-tune algorihm. first slider refers argument K0, second argument R0 third slider argument P rankSwap(). default values sliders equal default values function can changed within reasonable ranges. details impact parameters, please see ?rankSwap. options set, button labeled Apply rank swapping appears bottom page. Clicking button applies algorithm selected variables according options set. Since computation might take time, bottom right screen progress bar appears, showing process running. process complete, page updates Show summary page shown. page, section Compare numVars either updated added, sections Information risk numerical key variables, Information loss Anonymization steps updated display current values statistics.","code":""},{"path":"/articles/sdcMicro.html","id":"risk_utility","dir":"Articles","previous_headings":"","what":"Risk/Utility","title":"Using the interactive GUI - sdcApp","text":"tab possible find current values various risk measures based either categorical numerical key variables active sdc problem. also possible visualize tabulate variables well identify “risky” records anonymized data set. problem instance specified, two buttons appear. Clicking Create SDC problem changes view Anonymize page, new problem instance can generated. pushing button termed Upload previously saved problem, view changed Undo page, previously saved problem instance can uploaded. problem instance defined, page features three column layout. left sidebar features navigation divided three section labeled Risk measures, Visualizations Numerical risk measures. Specific measures can selected clicking action buttons shown sidebar. current selected button shown different color easy see selection active. right sidebar, two tables shown. first one, labeled Variable selection lists categorical numerical key variables. Additionally (present), also variables selected possibly postrandomized well variables holding sampling weights cluster ids shown. second table labeled Additional parameters shows number records well choice parameters random seed alpha used current problem specified. main content depends current choice navgigation menu. following chapters, possible selections discussed.","code":""},{"path":"/articles/sdcMicro.html","id":"res_cat","dir":"Articles","previous_headings":"Risk/Utility","what":"Risk measures","title":"Using the interactive GUI - sdcApp","text":"section, possible view current values based categorical key variables, identify risky observations compare plots individual re-identification risks original anonymized micro data described . Also, users may calculate suda2 l-diversity risk measures.","code":""},{"path":"/articles/sdcMicro.html","id":"cat_risk_info","dir":"Articles","previous_headings":"Risk/Utility > Risk measures","what":"Information of risk","title":"Using the interactive GUI - sdcApp","text":", users can either obtain information various risk measures based categorical key variables; identify risky records; visualize individual re-identification risks. select information view, user needs either select Risk measures (default value), Risky observations Plot risks radio button list labeled kind results want show?. Risk Measures , number percentages observations higher indidvidual re-identification risk main part records shown initial well anonymized data. individual re-identification risk computed based selected categorical key variables, reflects frequencies keys data individual sampling weights. record said re-identification risk different main part data personal re-identification risk either larger median + two times Median Absolute Deviation distribution individual risks (robust measure) deemed large. , setting choosen 0.1 (10%). Also shown number (corresponding percentages) observations expected re-identified. information shown initial dataset well anonymized data set comparisons can easily done. case cluster-variable specified setup problem instance, expected number re-identifications also shown cluster (e.g persons living households) information taken account well. Risky observations page allows filter records anonymized data set, depending threshold individual re-identification risk. , user can select specific threshold moving slider input labeled Minimum risk shown table. slider ranges 0 (default value) maximum risk-value currently available anonymized data set. default value changed, observations marked “risky” re-identification risk default larger 0. slider, number percentages observations individual re-identification risks larger currently specified threshold shown. , table containing categorical key variables, numbers fk, Fk individual risk shown observations marked “risky”. value threshold changed, number risky observations decrease. Plot risks page, two plots presented. first histogram shows distribution individual re-identification risks anonymized data set, plot shows information based original data set used problem instance created.","code":""},{"path":"/articles/sdcMicro.html","id":"suda2","dir":"Articles","previous_headings":"Risk/Utility > Risk measures","what":"Suda2 risk measure","title":"Using the interactive GUI - sdcApp","text":"page, users can apply SUDA algorithm. algorithm can used search Minimum Sample Uniques (MSU) data given current set key variables. algorithm looks records unique sample (sample uniques), checks sample uniques also special uniques. Special uniques defined records keys also subset selected key variables unique sample. See help files information SUDA scores. note algorithm can applied current problem instance features three categorical key variables. requirement fulfilled, information shown user. Else, user needs choose value parameter disFraction? sampling fraction simple random sampling common sampling fraction stratified sampling used within algorithm. default, value set 0.01 can changed modifying slider labeled Specify sampling fraction stratified sampling. pressing button termed Calculate suda2-scores, actual computation performed. computation complete, layout page changes. top page button labeled Reset choose different sampling fraction parameter. Pressing button resets results allows recompute suda2 scores using different value parameter disFraction. button, two tables shown. first table summarizes suda2 scores obtained. shows 0 8 intervals number records suda2 scores value within specific interval. second table shows categorical key variable much total risk contributed variables. amount shown second column (contribution) corresponding key variable listed column variable.","code":""},{"path":"/articles/sdcMicro.html","id":"ldiv","dir":"Articles","previous_headings":"Risk/Utility > Risk measures","what":"l-Diversity risk measure","title":"Using the interactive GUI - sdcApp","text":"can compute l-diversity sensitive variables. dataset satisfies l-diversity every combination categorical key variables least l different values sensitive variables. statistics refer value l record. calculate risk measure, user needs first select least one sensitive variable. can done input field Select one sensitive variables variables except categorical key variables can selected. choice set value l-diversity constant can done using slider named Select value recursive constant. constant used determine record unsafe. calculated value l-diversity record (specific key) less constant, said violate l-diversity. parameters set, button labeled Calculate l-diversity risk measure appears . Pressing button forces calculation measure using selected sensible variables constant. calculation finished, content page changes. top page, button named Reset choose different input parameters shown. Pressing button resets results allows specify parameters. , table containing selected sensible variable 5-number summary calculated l-diversity measure. , records violate l-diversity based choice recursive constant displayed interactive table. records safe, table shown.","code":""},{"path":"/articles/sdcMicro.html","id":"res_vis","dir":"Articles","previous_headings":"Risk/Utility","what":"Visualizations","title":"Using the interactive GUI - sdcApp","text":"section possible either compare current key variables original anonymized dataset graphically tabular format. also possible view measures information loss based recoding categorical key variables show number observations violate k-anonymity arbitrary values k.","code":""},{"path":"/articles/sdcMicro.html","id":"res_vis_plot","dir":"Articles","previous_headings":"Risk/Utility > Visualizations","what":"Barplot/Mosaicplot","title":"Using the interactive GUI - sdcApp","text":"page possible graphically compare key variables anonymization. select input labeled Variable 1, first categorical key variable already pre-selected value second input field Variable 2 default value none. one variable specified, users presented two graphs inputs. First, see barplot original data problem instance created. , another barplot showing anonymized variable shown. value Variable 2 different none, two graphs change. case mosaicplot two selected variables shown original anonymized variables.","code":""},{"path":"/articles/sdcMicro.html","id":"res_vis_tabulations","dir":"Articles","previous_headings":"Risk/Utility > Visualizations","what":"Tabulations","title":"Using the interactive GUI - sdcApp","text":"part interface possible compare tabulations categorical key variables anonymization. page built identically Barplot/Mosaicplot page. difference graphs tables displayed input fields relevant variables can selected. Also, tables shown next allow easier comparison less scrolling.","code":""},{"path":"/articles/sdcMicro.html","id":"res_vis_infoloss_recoding","dir":"Articles","previous_headings":"Risk/Utility > Visualizations","what":"Information loss","title":"Using the interactive GUI - sdcApp","text":"Recoding categorical key variables combining levels leads information loss. section possible compare key variable, effects recoding. Thus, table containing following columns categorical key variable shown: keyVar: name categorical key variable nrCategories.orig: number categories original variable nrCategories.mod: number categories anonymized variable mean.size.orig: mean number elements category original variable mean.size.mod: mean number elements category anonymized variable min.size.orig: size smallest category original variable min.size.mod: size smallest category anonymized variable table interactive case many key variables, can sorted clicking small arrow signs shown next column names.","code":""},{"path":"/articles/sdcMicro.html","id":"res_vis_violating_kanon","dir":"Articles","previous_headings":"Risk/Utility > Visualizations","what":"Obs violating k-Anon","title":"Using the interactive GUI - sdcApp","text":"page possible find many records anonymized dataset violate k-anonymity different choices k. slider input labeled Select value 'k' can take values 1 50. Dragging slider mouse changing value slider arrow-keys keyboard leads recalculation number percentage observations violate k-anonymity current choice k. information printed screen slider. Furthermore, table listing observations dataset violate k-anonymity printed. observations, interactive table contains categorical key variables. can browse records violate k-anonymity selected level k. categorical key variables shown well risk (individual risk), fk (frequency particular combination key variables record sample) Fk (estimated frequency combination key variables record population, taking sampling weights account) shown.","code":""},{"path":"/articles/sdcMicro.html","id":"res_numrisk","dir":"Articles","previous_headings":"Risk/Utility","what":"Numerical risk measures","title":"Using the interactive GUI - sdcApp","text":"section provides information important summary statistics numerical key variables original anonymized data; information current disclosure risk; well measures information loss.","code":""},{"path":"/articles/sdcMicro.html","id":"numres_summary_stats","dir":"Articles","previous_headings":"Risk/Utility > Numerical risk measures","what":"Compare summary statistics","title":"Using the interactive GUI - sdcApp","text":"section user can compare distribution numerical key variables current problem, original anonymized data. user can also calculate available measures given label categorical key variable. start, user needs select numerical key variable select input field labeled Choose numerical key variable. pre-selected numerical key variables available field. Next input another select input field labeled Optionally choose categorical variable. default value None. input field, users may select one categorical key variables. default value changed, summary statistics shown tabular form calculated level specified categorical key variable. selections made, important values printed section named Measures . values include Pearson correlation coefficient using pairwise complete information, standard deviations well interquartile range (robust measure difference 3rd 1st quantile data set) selected variable original anonymized data set. information, two tables presented. first refers original data shows Minimum, Mean, Median, Maximum well 5%-, 25%-, 75%- 95%-quantiles selected numerical key variable information shown table variable anonymized data set. case categorical variable choosen Optionally choose categorical variable, summary statistics calculated level selected categorical key variable. note since levels categorical key variables might differ beetween original anonymized data set, possible show information single table.","code":""},{"path":"/articles/sdcMicro.html","id":"numres_disclosure_risk","dir":"Articles","previous_headings":"Risk/Utility > Numerical risk measures","what":"Disclosure Risk","title":"Using the interactive GUI - sdcApp","text":"page, users can check estimated disclosure risk selected numerical key variables. measure can interpreted following way. original, unmodified data used create sdc problem, risk numeric key variables assumed 0% 100%. data anonymization techniques microaggregation adding noise applied data, less upper bound risk . users can compare estimated upper bound risk numerical key variables anonymized data compare much reduced initial value 100%. note larger deviations original data , lower upper risk bound . However, course also impact data utility measures can assessed menu button Information loss described .","code":""},{"path":"/articles/sdcMicro.html","id":"numres_infoloss","dir":"Articles","previous_headings":"Risk/Utility > Numerical risk measures","what":"Information loss","title":"Using the interactive GUI - sdcApp","text":", users can check two measures information loss, IL1s differences eigenvalues. Generally speaking, numerical key variables modified (anonymized), higher information loss values measures. also note information loss disclosure risk numerical variables always trade need balanced. Also shown page, values IL1s measure (definition provided) well differences robust eigenvalues data anonymization process.","code":""},{"path":"/articles/sdcMicro.html","id":"export_data","dir":"Articles","previous_headings":"","what":"Export Data","title":"Using the interactive GUI - sdcApp","text":"tab, GUI offers possibiliby export current state anonymized microdata current problem instance file various formats, save report summarizing anonymization process html-file disk. problem instance specified, user informed need create sdc problem first. clicking button labeled Create SDC-Problem, GUI changes Anonymize page, user can create problem. alternative, user may upload previously saved problem instance. clicking button Upload previously saved problem, user taken Undo page may upload previously saved problem instance. , however, problem instance defined, page features sidebar left hand side screen. sidebar, user can click one two buttons, Anonymized Data (default) Anonymization Report, clicking desired text button. active button finally colored differently content main page changed depending choice.","code":""},{"path":"/articles/sdcMicro.html","id":"export_anonymized_data","dir":"Articles","previous_headings":"Export Data","what":"Anonymized Data","title":"Using the interactive GUI - sdcApp","text":"page, microdata available present active sdc problem instance applied anonymization techniques described can saved disk. top page, interactive, sortable browsable table containing data written file shown. variables can sorted clicking small arrows next variable names top table. Also top, dropdown field users can select many observations displayed one page. bottom table, users find dynamic pagination field allows users jump given “page” current table. table, two sets radio buttons shown: Select file-format Using input, desired output format can specified. possible choices R-Dataset, SPSS-File, Comma-separated File, STATA-File SAS-File can selected clicking appropriate text button. Comma-separated File chosen, additional controls relevant generation output file appear . option, three additional radio button inputs available: Include variable names first row?: allows specify variable names written output file (yes) default setting () Field separator: allows specify separation character, possible choices Comma (default), Semicolon Tab Decimal separator: allows specify decimal character, possible choices Decimal point (default) Decimal comma STATA-File selected, additional radio button input shown: version STATA like export?: allows select version STATA export data , earlier versions STATA open STATA file formats later versions. Versions 8 14 available. Randomize Order Observations set radio buttons allows choose observations dataset randomized. possible choices randomization (default) Randomization record level. case former, order records remains unchanged. Randomization record level chosen, records dataset randomly changed. case household/cluster variable selected specifying current sdc problem described , two additional options possible. Randomize hierarchical identifier selected, values identification variable randomized across dataset. user opts choose Randomize hierarchical identifier within hierarchical units, values household identification variable randomly changed, order records within households/clusters also permuted. option, button labeled Save anonymized data shown. Clicking button finally creates file named exportedData_sdcMicro_{timestamp}.{filetype} using writeSafeFile() specified settings destination folder specified page (default) current working directory setting changed.","code":""},{"path":"/articles/sdcMicro.html","id":"anonymization-report","dir":"Articles","previous_headings":"Export Data","what":"Anonymization Report","title":"Using the interactive GUI - sdcApp","text":"page, anonymization report can generated saved disk. user can select type record can generated choosing radio button input. internal (detailed) (default) selected, quite long report generated resulting report external (short overview) selected just gives broad overview anonymization process. selection done, clicking button labelled Save report writes report disk. file sdcReport_internal_{timestamp}.html generated destination folder specified page (default) current working directory setting changed.","code":""},{"path":"/articles/sdcMicro.html","id":"change-stata-labels","dir":"Articles","previous_headings":"Export Data","what":"Change Stata Labels","title":"Using the interactive GUI - sdcApp","text":"uploaded microdata dta-file format, action button appears. page possibility edit variable labels interactive table. modifications internally saved added anonymized data file choose export file dta-file described .","code":""},{"path":"/articles/sdcMicro.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Using the interactive GUI - sdcApp","text":"tab, users find information able reproduce anonymization steps command line interface. inputdata uploaded Microdata page, page shows two buttons. Clicking button labelled Upload microdata sends user Microdata section GUI microdata may uploaded. Clicking button labelled Upload previously saved problem navigates Undo page problem instance saved disk can uploaded. inputdata problem instance available, left hand side page sidebar shown. sidebar, users can make choices described clicking appropriate buttons. possible View current script (default), Import previously exported sdcProblem disk Export/Save current sdcProblem disk later re-import. option however possible problem instance already successfully specified.","code":""},{"path":"/articles/sdcMicro.html","id":"viewsave-the-current-script","dir":"Articles","previous_headings":"Reproducibility","what":"View/Save the current script","title":"Using the interactive GUI - sdcApp","text":"page, users can view code applied far. code run sdcMicro directly limitation file path uploading microdata files relative fileInput()-functionality shiny gives way return path uploaded file local disk. full reproducibiliby, users may need adjust path listed current script. script output, button labelled Save Script File shown. Clicking button saves current script file exportedScript_sdcMicro_{timestamp}.R destination folder specified page (default) current working directory setting changed.","code":""},{"path":"/articles/sdcMicro.html","id":"import-a-previously-saved-sdcproblem","dir":"Articles","previous_headings":"Reproducibility","what":"Import a previously saved sdcProblem","title":"Using the interactive GUI - sdcApp","text":"page possible import previously saved problem instance GUI. user clicks Browse button, may locate previously exported problem instance. file chooser allows upload .rdata files minimize possible mistakes. file located Open button pressed, selected file loaded GUI. import successful, content GUI replaced data imported file. import successful, user presented resulting error message button labeled Try !. clicking button, possible upload different file. import problem instance works, GUI changes overview current sdc problem instance described .","code":""},{"path":"/articles/sdcMicro.html","id":"export_sdc_probleminstance","dir":"Articles","previous_headings":"Reproducibility","what":"Export/Save the current sdcProblem","title":"Using the interactive GUI - sdcApp","text":"option shown sidebar sdc problem instance generated described . button labeled Save current problem clicked, entire current problem instance (including GUI-relevant data) saved file named exportedProblem_{timestamp}.rdata destination folder specified page (default) current working directory setting changed. file successfully saved, page refreshes shows complete path recent saved file bottom page.","code":""},{"path":"/articles/sdcMicro.html","id":"undo","dir":"Articles","previous_headings":"","what":"Undo","title":"Using the interactive GUI - sdcApp","text":"page allows user undo last anonymization step. active sdc problem, user presented two options. user can either click button labeled Upload microdata case microdata uploaded GUI, button Create SDC problem case micro data available. former case page changed Microdata page latter case changed Anonymize page. cases user may also click Browse button import previously saved problem instance. note functionality always available page, independent availabilty inputdata, sdc problem instance, possibility undo anonymization steps. problem instance available, page layout changes. case possible undo anonymization step, last anonymization action applied printed top page. button termed Undo last Step. Clicking button opens pop window user confirm last anonymization step reverted. case button unintentionally pressed, clicking Dismiss closes popup window possible continue anonymization process. , button another action button labeled Save current state exactly functionality button described . problem successfully saved disk, page refreshes path exported file shown.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthias Templ. Author, maintainer. Bernhard Meindl. Author. Alexander Kowarik. Author. Johannes Gussenbauer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matthias Templ, Alexander Kowarik, Bernhard Meindl (2015). Statistical Disclosure Control Micro-Data Using R Package sdcMicro. Journal Statistical Software, 67(4), 1-36. doi:10.18637/jss.v067.i04","code":"@Article{,   title = {Statistical Disclosure Control for Micro-Data Using the {R} Package {sdcMicro}},   author = {Matthias Templ and Alexander Kowarik and Bernhard Meindl},   journal = {Journal of Statistical Software},   year = {2015},   volume = {67},   number = {4},   pages = {1--36},   doi = {10.18637/jss.v067.i04}, }"},{"path":"/index.html","id":"sdcmicro","dir":"","previous_headings":"","what":"Statistical Disclosure Control Methods for Anonymization of Data and\n    Risk Estimation","title":"Statistical Disclosure Control Methods for Anonymization of Data and\n    Risk Estimation","text":"sdcMicro R-package anonymize microdata. functionalities package also available via interactive shiny-based graphical user interface. online documentation can also found sdctools.github.io/sdcMicro.","code":""},{"path":"/reference/CASCrefmicrodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Census data set — CASCrefmicrodata","title":"Census data set — CASCrefmicrodata","text":"test data set obtained July 27, 2000 using public use Data Extraction System U.S. Bureau Census.","code":""},{"path":"/reference/CASCrefmicrodata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Census data set — CASCrefmicrodata","text":"data frame sampled year 1995 1080 observations following 13 variables. AFNLWGT Final weight (2 implied decimal places) AGI Adjusted gross income EMCONTRB Employer contribution hlth insurance FEDTAX Federal income tax liability PTOTVAL Total person income STATETAX State income tax liability TAXINC Taxable income amount POTHVAL Total persons income INTVAL Amt interest income PEARNVAL Total person earnings FICA Soc. sec. retirement payroll deduction WSALVAL Amount: Total Wage salary ERNVAL Business Farm net earnings","code":""},{"path":"/reference/CASCrefmicrodata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Census data set — CASCrefmicrodata","text":"Public use file CASC project.  information test data can found paper listed .","code":""},{"path":"/reference/CASCrefmicrodata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Census data set — CASCrefmicrodata","text":"Brand, R. Domingo-Ferrer, J. Mateo-Sanz, J.M., Reference data sets test compare SDC methods protection numerical microdata.  Unpublished. https://research.cbs.nl/casc/CASCrefmicrodata.pdf","code":""},{"path":"/reference/CASCrefmicrodata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Census data set — CASCrefmicrodata","text":"","code":"data(CASCrefmicrodata) str(CASCrefmicrodata) #> 'data.frame':\t1080 obs. of  13 variables: #>  $ AFNLWGT : int  270914 250802 299391 167656 176962 193328 178808 260530 187347 253471 ... #>  $ AGI     : int  45554 57610 56606 38993 40462 30406 8730 25938 95500 72700 ... #>  $ EMCONTRB: int  4173 2639 3315 1619 4604 3433 824 4145 5575 3894 ... #>  $ FEDTAX  : int  4621 6045 4765 3932 4349 2463 372 629 12830 8756 ... #>  $ PTOTVAL : int  45527 42008 56485 23580 21751 32167 8730 25001 95500 44850 ... #>  $ STATETAX: int  1428 1902 1903 1177 1219 830 186 693 3406 2496 ... #>  $ TAXINC  : int  30809 39234 31767 26216 28994 16420 2480 4194 65129 48915 ... #>  $ POTHVAL : int  27 1008 485 700 751 167 1030 1 6500 2850 ... #>  $ INTVAL  : int  27 808 485 700 1 50 22 1 5000 2500 ... #>  $ PEARNVAL: int  45500 41000 56000 22880 21000 32000 7700 25000 89000 42000 ... #>  $ FICA    : int  3480 3136 4284 1750 1606 2448 589 1912 5047 3213 ... #>  $ WSALVAL : int  45500 41000 56000 22880 21000 32000 7700 25000 89000 42000 ... #>  $ ERNVAL  : int  45500 41000 56000 22880 21000 32000 7000 25000 89000 42000 ..."},{"path":"/reference/EIA.html","id":null,"dir":"Reference","previous_headings":"","what":"EIA data set — EIA","title":"EIA data set — EIA","text":"Data set obtained U.S. Energy Information Authority.","code":""},{"path":"/reference/EIA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EIA data set — EIA","text":"data frame 4092 observations following 15 variables. UTILITYID UNIQUE UTILITY IDENTIFICATION NUMBER UTILNAME UTILITY NAME. factor levels 4-County Electric Power Assn Alabama Power Co Alaska Electric Appalachian Electric Coop Appalachian Power Co Arizona Public Service Co Arkansas Power & Light Co Arkansas Valley Elec Coop Corp Atlantic City Electric Company Baker Electric Coop Inc Baltimore Gas & Electric Co Bangor Hydro-Electric Co Berkeley Electric Coop Inc Black Hills Corp Blackstone Valley Electric Co Bonneville Power Admin Boston Edison Co Bountiful City Light & Power Bristol City Brookings City Brunswick Electric Member Corp Burlington City Carolina Power & Light Co Carroll Electric Coop Corp Cass County Electric Coop Inc Central Illinois Light Company Central Illinois Pub Serv Co Central Louisiana Elec Co Inc Central Maine Power Co Central Power & Light Co Central Vermont Pub Serv Corp Chattanooga City Cheyenne Light Fuel & Power Co Chugach Electric Assn Inc Cincinnati Gas & Electric Co Citizens Utilities Company City Boulder City City Clinton City Dover City Eugene City Gillette City Groton Dept Utils City Idaho Falls City Independence City Newark City Reading City Tupelo Water & Light D Clarksville City Cleveland City Cleveland Electric Illum Co Coast Electric Power Assn Cobb Electric Membership Corp Colorado River Commission Colorado Springs City Columbus Southern Power Co Commonwealth Edison Co Commonwealth Electric Co Connecticut Light & Power Co Consolidated Edison Co-NY Inc Consumers Power Co Cornhusker Public Power Dist Cuivre River Electric Coop Inc Cumberland Elec Member Corp Dakota Electric Assn Dawson County Public Pwr Dist Dayton Power & Light Company Decatur City Delaware Electric Coop Inc Delmarva Power & Light Co Detroit Edison Co Duck River Elec Member Corp Duke Power Co Duquesne Light Company East Central Electric Assn Eastern Maine Electric Coop El Paso Electric Co Electric Energy Inc Empire District Electric Co Exeter & Hampton Electric Co Fairbanks City Fayetteville Public Works Comm First Electric Coop Corp Florence City Florida Power & Light Co Florida Power Corp Fort Collins Lgt & Pwr Utility Fremont City Georgia Power Co Gibson County Elec Member Corp Golden Valley Elec Assn Inc Grand Island City Granite State Electric Co Green Mountain Power Corp Green River Electric Corp Greeneville City Gulf Power Company Gulf States Utilities Co Hasting Utilities Hawaii Electric Light Co Inc Hawaiian Electric Co Inc Henderson-Union Rural E C C Homer Electric Assn Inc Hot Springs Rural El Assn Inc Houston Lighting & Power Co Huntsville City Idaho Power Co IES Utilities Inc Illinois Power Co Indiana Michigan Power Co Indianapolis Power & Light Co Intermountain Rural Elec Assn Interstate Power Co Jackson Electric Member Corp Jersey Central Power&Light Co Joe Wheeler Elec Member Corp Johnson City City Jones-Onslow Elec Member Corp Kansas City City Kansas City Power & Light Co Kentucky Power Co Kentucky Utilities Co Ketchikan Public Utilities Kingsport Power Co Knoxville City Kodiak Electric Assn Inc Kootenai Electric Coop, Inc Lansing Board Water & Light Lenoir City City Lincoln City Long Island Lighting Co Los Angeles City Louisiana Power & Light Co Louisville Gas & Electric Co Loup River Public Power Dist Lower Valley Power & Light Inc Maine Public Service Company Massachusetts Electric Co Matanuska Electric Assn Inc Maui Electric Co Ltd McKenzie Electric Coop Inc Memphis City MidAmerican Energy Company Middle Tennessee E M C Midwest Energy, Inc Minnesota Power & Light Co Mississippi Power & Light Co Mississippi Power Co Monongahela Power Co Montana-Dakota Utilities Co Montana Power Co Moon Lake Electric Assn Inc Narragansett Electric Co Nashville City Nebraska Public Power District Nevada Power Co New Hampshire Elec Coop, Inc New Orleans Public Service Inc New York State Gas & Electric Newport Electric Corp Niagara Mohawk Power Corp Nodak Rural Electric Coop Inc Norris Public Power District Northeast Oklahoma Electric Co Northern Indiana Pub Serv Co Northern States Power Co Northwestern Public Service Co Ohio Edison Co Ohio Power Co Ohio Valley Electric Corp Oklahoma Electric Coop, Inc Oklahoma Gas & Electric Co Oliver-Mercer Elec Coop, Inc Omaha Public Power District Otter Tail Power Co Pacific Gas & Electric Co Pacificorp dba Pacific Pwr & L Palmetto Electric Coop, Inc Pennsylvania Power & Light Co Pennyrile Rural Electric Coop Philadelphia Electric Co Pierre Municipal Electric Portland General Electric Co Potomac Edison Co Potomac Electric Power Co Poudre Valley R E , Inc Power Authority State NY Provo City Corporation Public Service Co Colorado Public Service Co Inc Public Service Co NH Public Service Co NM Public Service Co Oklahoma Public Service Electric&Gas Co PUD 1 Clark County PUD 1 Snohomish County Puget Sound Power & Light Co Rappahannock Electric Coop Rochester Public Utilities Rockland Electric Company Rosebud Electric Coop Inc Rutherford Elec Member Corp Sacramento Municipal Util Dist Salmon River Electric Coop Inc Salt River Proj Ag & P Dist San Antonio City Savannah Electric & Power Co Seattle City Sierra Pacific Power Co Singing River Elec Power Assn Sioux Valley Empire E Inc South Carolina Electric&Gas Co South Carolina Pub Serv Auth South Kentucky Rural E C C Southern California Edison Co Southern Nebraska Rural P P D Southern Pine Elec Power Assn Southwest Tennessee E M C Southwestern Electric Power Co Southwestern Public Service Co Springfield City St Joseph Light & Power Co State Level Adjustment Tacoma City Tampa Electric Co Texas-New Mexico Power Co Texas Utilities Electric Co Tri-County Electric Assn Inc Tucson Electric Power Co Turner-Hutchinsin El Coop, Inc TVA U S Bureau Indian Affairs Union Electric Co Union Light Heat & Power Co United Illuminating Co Upper Cumberland E M C UtiliCorp United Inc Verdigris Valley Electric Coop Verendrye Electric Coop Inc Virginia Electric & Power Co Volunteer Electric Coop Wallingford Town Warren Rural Elec Coop Corp Washington Water Power Co Watertown Municipal Utils Dept Wells Rural Electric Co West Penn Power Co West Plains Electric Coop Inc West River Electric Assn, Inc Western Massachusetts Elec Co Western Resources Inc Wheeling Power Company Wisconsin Electric Power Co Wisconsin Power & Light Co Wisconsin Public Service Corp Wright-Hennepin Coop Elec Assn Yellowstone Vlly Elec Coop Inc STATE STATE UTILITY REPORTING. factor levels AK AL AR AZ CA CO CT DC DE FL GA HI IA ID IL KS KY LA MA MD MI MN MO MS MT NC ND NE NH NJ NM NV NY OH OK PA RI SC SD TN TX UT VA VT WA WI WV WY YEAR REPORTING YEAR DATA MONTH REPORTING MONTH DATA RESREVENUE REVENUE SALES RESIDENTIAL CONSUMERS RESSALES SALES RESIDENTIAL CONSUMERS COMREVENUE REVENUE SALES COMMERCIAL CONSUMERS COMSALES SALES COMMERCIAL CONSUMERS INDREVENUE REVENUE SALES INDUSTRIAL CONSUMERS INDSALES SALES INDUSTRIAL CONSUMERS OTHREVENUE REVENUE SALES CONSUMERS OTHRSALES SALES CONSUMERS TOTREVENUE REVENUE SALES CONSUMERS TOTSALES SALES CONSUMERS","code":""},{"path":"/reference/EIA.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"EIA data set — EIA","text":"Public use file CASC project.","code":""},{"path":"/reference/EIA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EIA data set — EIA","text":"Brand, R. Domingo-Ferrer, J. Mateo-Sanz, J.M., Reference data sets test compare SDC methods protection numerical microdata. Unpublished. https://research.cbs.nl/casc/CASCrefmicrodata.pdf","code":""},{"path":"/reference/EIA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EIA data set — EIA","text":"","code":"data(EIA) head(EIA) #>   UTILITYID                       UTILNAME STATE YEAR MONTH RESREVENUE RESSALES #> 1         0         State Level Adjustment    AK   96     1       4776    24339 #> 2       213 Alaska Electric Light&Power Co    AK   96     1       1402    15500 #> 3       599              Anchorage City of    AK   96     1       1463    15345 #> 4      3522      Chugach Electric Assn Inc    AK   96     1       4888    51647 #> 5      6129              Fairbanks City of    AK   96     1        392     3320 #> 6      7353    Golden Valley Elec Assn Inc    AK   96     1       2519    26527 #>   COMREVENUE COMSALES INDREVENUE INDSALES OTHREVENUE OTHRSALES TOTREVENUE #> 1       4871    29393       1032     7712       1328      8823      12008 #> 2        331     3855        340     4756        441      6343       2514 #> 3       4538    58554          0        0        156      1953       6157 #> 4       3255    44649        161     2797        109       529       8413 #> 5       1096    10817          0        0        110      1224       1598 #> 6       1624    17308       1053    14756         14       136       5210 #>   TOTSALES #> 1    70266 #> 2    30454 #> 3    75852 #> 4    99622 #> 5    15361 #> 6    58727"},{"path":"/reference/LocalRecProg.html","id":null,"dir":"Reference","previous_headings":"","what":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"used categorical numeric input variables, although usage categorical variables focus development software.","code":""},{"path":"/reference/LocalRecProg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"","code":"LocalRecProg(   obj,   ancestors = NULL,   ancestor_setting = NULL,   k_level = 2,   FindLowestK = TRUE,   weight = NULL,   lowMemory = FALSE,   missingValue = NA,   ... )"},{"path":"/reference/LocalRecProg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"obj data.frame sdcMicroObj-class-object ancestors Names ancestors cateorical variables ancestor_setting ancestor corresponding categorical variable k_level Level k-anonymity FindLowestK requests program look smallest k results complete matches data. weight weight variable (Default=1) lowMemory Slower algorithm less memory consumption missingValue output value suppressed value. ... see arguments categoricalNames categorical variables numericalNames numerical variables","code":""},{"path":"/reference/LocalRecProg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"dataframe original variables supressed variables (suffix _lr). / modified sdcMicroObj-class","code":""},{"path":"/reference/LocalRecProg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"record data represents category original data, hence records input data unique N Input Variables. achieve bigger category sizes (k-anoymity), one can form new categories based recoding result repeatedly apply algorithm.","code":""},{"path":"/reference/LocalRecProg.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"list(\"signature(obj=\\\"sdcMicroObj\\\")\")","code":""},{"path":"/reference/LocalRecProg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"Kowarik, . Templ, M. Meindl, B. Fonteneau, F. Prantner, B.: Testing IHSN Cpp Code Inclusion New Methods sdcMicro, : Lecture Notes Computer Science, J. Domingo-Ferrer, . Tinnirello (editors.); Springer, Berlin, 2012, ISBN: 978-3-642-33626-3, pp. 63-77.  doi:10.1007/978-3-642-33627-0_6","code":""},{"path":"/reference/LocalRecProg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"Alexander Kowarik, Bernd Prantner, IHSN C++ source, Akimichi Takemura","code":""},{"path":"/reference/LocalRecProg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"","code":"# LocalRecProg data(testdata2) r1=LocalRecProg(testdata2,   categorical=c(\"urbrur\", \"roof\", \"walls\", \"water\", \"sex\", \"relat\"),   missingValue=-99) r2=LocalRecProg(testdata2,   categorical=c(\"urbrur\", \"roof\", \"walls\", \"water\", \"sex\", \"relat\"),     ancestor=c(\"water2\", \"water3\", \"relat2\"),     ancestor_setting=c(\"water\",\"water\",\"relat\"),missingValue=-99) r3=LocalRecProg(testdata2,   categorical=c(\"urbrur\", \"roof\", \"walls\", \"water\", \"sex\", \"relat\"),     ancestor=c(\"water2\", \"water3\", \"relat2\"),     ancestor_setting=c(\"water\",\"water\",\"relat\"),missingValue=-99,     FindLowestK=FALSE)  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- LocalRecProg(sdc)"},{"path":"/reference/Tarragona.html","id":null,"dir":"Reference","previous_headings":"","what":"Tarragona data set — Tarragona","title":"Tarragona data set — Tarragona","text":"real data set comprising figures 834 companies Tarragona area. Data correspond year 1995.","code":""},{"path":"/reference/Tarragona.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tarragona data set — Tarragona","text":"data frame 834 observations following 13 variables. FIXED.ASSETS numeric vector CURRENT.ASSETS numeric vector TREASURY numeric vector UNCOMMITTED.FUNDS numeric vector PAID..CAPITAL numeric vector SHORT.TERM.DEBT numeric vector SALES numeric vector LABOR.COSTS numeric vector DEPRECIATION numeric vector OPERATING.PROFIT numeric vector FINANCIAL.OUTCOME numeric vector GROSS.PROFIT numeric vector NET.PROFIT numeric vector","code":""},{"path":"/reference/Tarragona.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tarragona data set — Tarragona","text":"Public use data CASC project.","code":""},{"path":"/reference/Tarragona.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tarragona data set — Tarragona","text":"Brand, R. Domingo-Ferrer, J. Mateo-Sanz, J.M., Reference data sets test compare SDC methods protection numerical microdata. Unpublished. https://research.cbs.nl/casc/CASCrefmicrodata.pdf","code":""},{"path":"/reference/Tarragona.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tarragona data set — Tarragona","text":"","code":"data(Tarragona) head(Tarragona) #>   FIXED.ASSETS CURRENT.ASSETS TREASURY UNCOMMITTED.FUNDS PAID.UP.CAPITAL #> 1            0              0     6670            112349           37500 #> 2            0           6643     1892            -12126             500 #> 3            0          43279     6863             29125           34000 #> 4            0          98448        1              2712             500 #> 5            0         134917    11368             19893           10000 #> 6            0         162855      507            117733           30000 #>   SHORT.TERM.DEBT  SALES LABOR.COSTS DEPRECIATION OPERATING.PROFIT #> 1          183077 507061       60067         9006            27560 #> 2           13872  44727        5090            0             -770 #> 3           14154  92922        8583            0            -6434 #> 4           94684 665156        2663            0             3658 #> 5           40669  86020       27054            0            27468 #> 6           35180 297633       35086        19110            15194 #>   FINANCIAL.OUTCOME GROSS.PROFIT NET.PROFIT #> 1            -18931         9218       6338 #> 2               -60         -830       -830 #> 3               706        -5727      -5727 #> 4             -6625         -944       -685 #> 5            -25480         2580       1496 #> 6               725        16450      10692 dim(Tarragona) #> [1] 834  13"},{"path":"/reference/addGhostVars.html","id":null,"dir":"Reference","previous_headings":"","what":"addGhostVars — addGhostVars","title":"addGhostVars — addGhostVars","text":"specify variables linked key variable. results suppressions key-variable also applied corresponding 'ghost'-variables.","code":""},{"path":"/reference/addGhostVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addGhostVars — addGhostVars","text":"","code":"addGhostVars(obj, keyVar, ghostVars)"},{"path":"/reference/addGhostVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addGhostVars — addGhostVars","text":"obj object class sdcMicroObj-class keyVar character-vector length 1 refering categorical key variable within obj. ghostVars character vector specifying variables linked keyVar. Variables listed must listed either slots @keyVars, @numVars, @pramVars, @weightVar, @hhId @strataVar obj.","code":""},{"path":"/reference/addGhostVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"addGhostVars — addGhostVars","text":"modified sdcMicroObj-class object.","code":""},{"path":"/reference/addGhostVars.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"addGhostVars — addGhostVars","text":"Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4","code":""},{"path":"/reference/addGhostVars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"addGhostVars — addGhostVars","text":"Bernhard Meindl","code":""},{"path":"/reference/addGhostVars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"addGhostVars — addGhostVars","text":"","code":"data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ## we want to link the anonymization status of key variabe 'urbrur' to 'hhcivil' sdc <- addGhostVars(sdc, keyVar=\"urbrur\", ghostVars=c(\"hhcivil\")) ## we want to link the anonymization status of key variabe 'roof' to 'represent' sdc <- addGhostVars(sdc, keyVar=\"roof\", ghostVars=c(\"represent\"))"},{"path":"/reference/addNoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding noise to perturb data — addNoise","title":"Adding noise to perturb data — addNoise","text":"Various methods adding noise perturb continuous scaled variables.","code":""},{"path":"/reference/addNoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding noise to perturb data — addNoise","text":"","code":"addNoise(obj, variables = NULL, noise = 150, method = \"additive\", ...)"},{"path":"/reference/addNoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding noise to perturb data — addNoise","text":"obj either data.frame sdcMicroObj-class perturbed variables vector names variables perturbed noise amount noise (percentages) method choose ‘additive’, ‘correlated’, ‘correlated2’, ‘restr’, ‘ROMM’, ‘outdect’ ... see possible arguments ","code":""},{"path":"/reference/addNoise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adding noise to perturb data — addNoise","text":"‘obj’ class sdcMicroObj-class corresponding slots filled, like manipNumVars, risk utility. ‘obj’ class “data.frame” “matrix” object class “micro” following entities returned: x original data xm modified (perturbed) data method method used perturbation noise amount noise","code":""},{"path":"/reference/addNoise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adding noise to perturb data — addNoise","text":"‘obj’ class sdcMicroObj-class, continuous key variables selected per default. ‘obj’ class “data.frame” “matrix”, continuous variables specified. Method ‘additive’ adds noise completely random variable depending size standard deviation. ‘correlated’ method ‘correlated2’ adds noise preserves covariances described R. Brand (2001) reference given . Method ‘restr’ takes sample size account adding noise. Method ‘ROMM’ implementation algorithm ROMM (Random Orthogonalized Matrix Masking) (Fienberg, 2004).  Method ‘outdect’ adds noise outliers. outliers identified univariate robust multivariate procedures based robust mahalanobis distances calculated MCD estimator.","code":""},{"path":"/reference/addNoise.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adding noise to perturb data — addNoise","text":"Domingo-Ferrer, J. Sebe, F. Castella, J., “security noise addition privacy statistical databases”, Lecture Notes Computer Science, vol. 3050, pp. 149-161, 2004.  ISSN 0302-9743. Vol. Privacy Statistical Databases, eds. J. Domingo-Ferrer V. Torra, Berlin: Springer-Verlag. Ting, D. Fienberg, S.E. Trottini, M. “ROMM Methodology Microdata Release” Joint UNECE/Eurostat work session statistical data confidentiality, Geneva, Switzerland, 2005, https://www.unece.org/fileadmin/DAM/stats/documents/ece/ces/ge.46/2005/wp.11.e.pdf Ting, D., Fienberg, S.E., Trottini, M.  “Random orthogonal matrix masking methodology microdata release”, International Journal Information Computer Security, vol. 2, pp. 86-105, 2008. Templ, M. Meindl, B., Robustification Microdata Masking Methods Comparison Existing Methods, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 5262, pp. 177-189, 2008. Templ, M.  New Developments Statistical Disclosure Control Imputation: Robust Statistics Applied Official Statistics, Suedwestdeutscher Verlag fuer Hochschulschriften, 2009, ISBN: 3838108280, 264 pages. Templ, M. Meindl, B. Kowarik, .: Statistical Disclosure Control Micro-Data Using R Package sdcMicro, Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4","code":""},{"path":[]},{"path":"/reference/addNoise.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adding noise to perturb data — addNoise","text":"Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/addNoise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adding noise to perturb data — addNoise","text":"","code":"data(Tarragona) a1 <- addNoise(Tarragona) a1 #> $x #>     FIXED.ASSETS CURRENT.ASSETS TREASURY UNCOMMITTED.FUNDS PAID.UP.CAPITAL #> 1              0              0     6670            112349           37500 #> 2              0           6643     1892            -12126             500 #> 3              0          43279     6863             29125           34000 #> 4              0          98448        1              2712             500 #> 5              0         134917    11368             19893           10000 #> 6              0         162855      507            117733           30000 #> 7              0         170531     2274             -6118             500 #> 8             62           1389       97              1049             500 #> 9             78          26613     3490             13242           10000 #> 10            91         183865    22670             34555           10000 #> 11           140          10225     5281              2050             500 #> 12           142          75370    28605             55605            4000 #> 13           200          54989    25592             16084            6000 #> 14           224          31228     6951             20331            4000 #> 15           237            714        1               212              90 #> 16           249          65547    20558             50769           48000 #> 17           310         195474    38990             31160           10000 #> 18           323          63115     4916             54986           15000 #> 19           391          24611     1355              4324            1000 #> 20           408          29619      775              5395             500 #> 21           435           7807     7878               831           10000 #> 22           436          31314     2317             23651           16000 #> 23           465         354505    17608             42964           10000 #> 24           474          40515      736              3074             500 #> 25           684          16787        0              6303            6000 #> 26           893          10819    10106              6474           10000 #> 27           905          52413     1038             24818            6000 #> 28           989          45102     1369             17772           30000 #> 29          1000         615990      124           -515464           10000 #> 30          1013           1263   -12228            -10106             500 #> 31          1048          33783    12934             22042           10000 #> 32          1062          18946    19649              5268            2000 #> 33          1120          83212     2727             53973           15000 #> 34          1128          49746      584              9495             500 #> 35          1306          45305    12553             36218             725 #> 36          1307          12761      469              1381           10000 #> 37          1327          75294    30101             49158           10000 #> 38          1381          38433    20625             39598           36500 #> 39          1426          43934     3647             11229           10000 #> 40          1428          42005      963             26821           19260 #> 41          1465         369131     1721             79189          140000 #> 42          1489          68099       30            -26447            2000 #> 43          1490         188830    25095             16466            2000 #> 44          1496          39567       81              4023           15000 #> 45          1747          22079     9403              9526           10000 #> 46          1784         322333    11200             38217           10392 #> 47          1816         102019     6404             33755           12000 #> 48          1835          88524      374              4639             500 #> 49          1968          81069     1606             19452           11000 #> 50          2045          21484     7253             18694            2000 #> 51          2090          33917     2324             10031            1000 #> 52          2126          35771     1509             11687            7000 #> 53          2136           7906     4040              9686            7000 #> 54          2402          49630      310             33617           32000 #> 55          2429         207875       83             31867           23000 #> 56          2538          17093     2662              6273            1000 #> 57          2567         117238      671             14095            7850 #> 58          2739          23350        0             14778           10000 #> 59          2809          89592    13926             14141           10000 #> 60          2830          30250     5922              6424            3000 #> 61          2860          68515     1442             13120            2000 #> 62          2871          48713     9856             39106            1500 #> 63          2885         158347    16306             48499           10000 #> 64          3062          70586      465              6832           10000 #> 65          3243          98781    34576             31758           20000 #> 66          3274          67444     2216             15834            2000 #> 67          3452          53685     1252             20658            3000 #> 68          3487         134897      695             62728           10000 #> 69          3506          42499    23167             29732            6500 #> 70          3514         101242     7152             28771           15000 #> 71          3543          28253     2389              9413            1500 #> 72          3544          35812       81              8967             500 #> 73          3647              0        0             -1142             500 #> 74          3787          24615      985             10859            5000 #> 75          3819         107416     1400             27300           15000 #> 76          3822          39864     3993              3595            1000 #> 77          3879          74501       91             26123            3000 #> 78          3974         117178    13040             13318            1000 #> 79          3989          66278        0             38448            6000 #> 80          4026          25706     2524             -8034             500 #> 81          4156          25287    10455             14652           10000 #> 82          4199         105431      477             25499           10000 #> 83          4268         130077     1067             21735           20000 #> 84          4271          33161     3098             27291           11040 #> 85          4406          15050     5078             12083            3000 #> 86          4446          63931    30595             23258           10000 #> 87          4485          99270    23063             62109           15000 #> 88          4527          37601      213             13616            4000 #> 89          4557          65854     4031             26133           20000 #> 90          4619          58631     5451             61411           10750 #> 91          4621          22016     7628             10653            6750 #> 92          4924          77187    21008             52500           10000 #> 93          4970         249351     8843            105833           20000 #> 94          4994          75564    18550             11151            4500 #> 95          5096         102315     4193              6743            5900 #> 96          5129          11476      356              6237             500 #> 97          5164          35901     2253             13363           10000 #> 98          5167          61695     2760             24792           10000 #> 99          5248         280922    16840             88437           85000 #> 100         5265         119838    12076             29416           10000 #> 101         5357          48154     3381             13530            1000 #> 102         5392          86303     6919            -23911            1000 #> 103         5465          36284     1686             19699            8500 #> 104         5521           9629     3159             -6214            1000 #> 105         5586          25286     5580               854            6000 #> 106         5626          31326     3161             17903           10000 #> 107         5629          23376     4397              1484             500 #> 108         5949         106864    13230             31685           10000 #> 109         5969          62544     3484             32815           20000 #> 110         6008          30638      216             -6188             500 #> 111         6039         115482     5069             23942            2000 #> 112         6068          37592      421               769             500 #> 113         6088         241993    11578             51616           10000 #> 114         6105          33571     5587             32512           10200 #> 115         6133         172511     5248             40305           10000 #> 116         6300         101096    20413             20382           10000 #> 117         6352         111904    10663             59520           15000 #> 118         6476          28231     -188             10392             500 #> 119         6484          11593     3666              9060            3250 #> 120         6499          13798     2489              4323            5000 #> 121         6511         155310    47227              1447            3000 #> 122         6579          40307    -6699             17845            2200 #> 123         6673         177992   -32350             42587           24000 #> 124         6678          88449      265             66341           10100 #> 125         6756         216535    39820             36423           10000 #> 126         6779          28325     7294            -11033            1000 #> 127         6787          69354     5708             18877           10000 #> 128         6807          68633    15501             43668           12000 #> 129         6814          93883     4698             20381           10000 #> 130         6894          38237     2634              8783            1000 #> 131         6936         107094    43974             79894           10000 #> 132         7000          92780     2433             29448            6000 #> 133         7008          68469    11143             24641           10000 #> 134         7103          66752       48              7264            1000 #> 135         7153          70447     2271             28397           10000 #> 136         7175          91518     6538             26117           10000 #> 137         7266          44483    -7199            -35180            2000 #> 138         7302          58643    13735             31775           10080 #> 139         7303          95040     1859             25007           10000 #> 140         7389          19915     4140             22898           10000 #> 141         7414         101227     2043             14653           60000 #> 142         7454          95581    37044             75448           41000 #> 143         7479          99012     9709             24523           24210 #> 144         7498          55371     1663             17621            3000 #> 145         7503          59211   -11461             28236           27570 #> 146         7539          35811    27854             17322           11100 #> 147         7567          86093     9845             45187           37000 #> 148         7613          34931      559             26667            5025 #> 149         7746          80296      418             -1423           14340 #> 150         7827         112262    18826             41281           28600 #> 151         7848          16275     4147              4411             510 #> 152         7883          30695     4076              1706             800 #> 153         8021         103227      544              8338           15000 #> 154         8117         241826    14492            126796           15000 #> 155         8160          92627    25782             33696           10000 #> 156         8165          80864    14175             22572           10000 #> 157         8296          80077     1796             33801           12000 #> 158         8306           8026     3464             -2593           10000 #> 159         8390         258395    29409             15668           10000 #> 160         8390         258395    29409             15668           10000 #> 161         8460          38750    60038            -11264            6500 #> 162         8487          47080       87             13604            7000 #> 163         8586          82616     1712             43829           10000 #> 164         8642          18841      957             19553             500 #> 165         8654          37263     4633             23427           10000 #> 166         8669          29766     1795               -60           20000 #> 167         8692          20549     7969              2959             500 #> 168         8692          91831     -824             15808           10000 #> 169         8732          42222     2426             20789           10000 #> 170         8779          14159       97             12091           10200 #> 171         8813          76936    24606              5186            2500 #> 172         8819          45722     4180             31209            2000 #> 173         8900          67837        0              2542           34240 #> 174         8901          69652    61234             35634           10000 #> 175         8935          72650     1767             49064           16000 #> 176         8957          74163     2325             49353           25000 #> 177         9026         383355    16484             78051           32500 #> 178         9100         242267     9268             52313           50000 #> 179         9116          66016    15724             52007           10000 #> 180         9159         146131    12800             32588           12285 #> 181         9178          25096   -11338              3923            1000 #> 182         9200         197169      555             51456           35500 #> 183         9225          94401     5980             49040           25000 #> 184         9273          55695     4346             26870           24706 #> 185         9322          50338     2802             11940            6200 #> 186         9333          32175     8186             10608             500 #> 187         9351          59948       82             13193           10000 #> 188         9407          54574     3352              4133            1000 #> 189         9480         103342     3785             32834           12370 #> 190         9486              0    26914             20201             500 #> 191         9653         187990    -2098             47149           25000 #> 192         9755          49779    29801             43433           15000 #> 193         9833         116774    10899             21696            4500 #> 194        10047          73452     5442             59788           48000 #> 195        10128          54496     1597              4317           36000 #> 196        10172          89086    47035             68957            3500 #> 197        10241         373503    27230            122521           10000 #> 198        10251           9606     1673              3463            4000 #> 199        10251         110882     8635             31245           10000 #> 200        10377          52539    27761             49977           15000 #> 201        10510          27550      359             16576           10000 #> 202        10510          69010      113              4690           10120 #> 203        10540          20019     4726              6276            6750 #> 204        10628          14043     7069             12922           10000 #> 205        10702          36084     8035             25107           30000 #> 206        10720         155243      -46             13511           10000 #> 207        10789          31883    15990             17064            1000 #> 208        10854          43317    -3496             17322           10000 #> 209        10888          12794     1496             -4053            4000 #> 210        11255          95798     7479             24020           10000 #> 211        11397          72090     8905             60639           10000 #> 212        11423         102844     4129             40735            9000 #> 213        11639         195871   -19034             92138           42000 #> 214        11649          23020      526              4414            3200 #> 215        11723          90745     2498             54990           10300 #> 216        11903          36100     2089             23504            1000 #> 217        11952          71820     6296             57927           36325 #> 218        11963         140016       63             95601           63425 #> 219        12003         161749    23386            104605           50000 #> 220        12013          42366    27038             29502           18225 #> 221        12076          30702      499              6619             600 #> 222        12505          62908    -9006             29539           10000 #> 223        12585          78702    17225              1494           22500 #> 224        12671         169046     3182             30118           14000 #> 225        12679          35652     1069             20109           13700 #> 226        12760          58319     6820             10113           15200 #> 227        12876          35238      125             20565            7000 #> 228        12980         239233    24876             31017           10000 #> 229        13026         254328      109             53671           50000 #> 230        13167          34594    11554             19110           20000 #> 231        13167          87298     1517             18559           10000 #> 232        13293          22418    15219             29167           10000 #> 233        13293         121520     4377             27344           10000 #> 234        13600          38993     7571             28411           15000 #> 235        13714          22330     1957             12152             500 #> 236        13810          20719    -7980             12393           10000 #> 237        13828          35718    12579             38426           40000 #> 238        13914          83699     1725              3795           10000 #> 239        13937         100455   -17847             65699           32000 #> 240        14040          25190     3585             15128            2450 #> 241        14041          40830    22609             34674           10000 #> 242        14079          55656      593              5603           10050 #> 243        14086          72255     5889              8376           10000 #> 244        14102         198807     3384             60081           67000 #> 245        14135          90212     4013             19488            5000 #> 246        14282           1880      155              4083            1000 #> 247        14328          34953     3215              6673            1000 #> 248        14392         281699     5768             82996           35000 #> 249        14468          45740   -10563             32166           10050 #> 250        14560          66958     1003             53459           10000 #> 251        14687          62279    23032             36933           20000 #> 252        14732          67712    -3784             36272            5000 #> 253        14803          27352      432              5630            1000 #> 254        15114          43151     2800             18571             500 #> 255        15123          44387     2357             22611           10000 #> 256        15161          60571      -31             21857            4800 #> 257        15273          28955      163             17224           10000 #> 258        15888          23161     4414             17246            4000 #> 259        15907          16257     5925              2832            6500 #> 260        15939          61238     1203              4306             500 #> 261        15949          21168     7244             18191            5000 #> 262        15992         321942   162756            196721           10000 #> 263        16047          22849    20803              8818             500 #> 264        16262          40191    14510             31195           13750 #> 265        16288         285486     7347            109660           45000 #> 266        16311         214617    17551             39772           10000 #> 267        16448          43006     2932             21606             600 #> 268        16474         133748    10809              8398            5000 #> 269        16475          29867     2429             25784           10000 #> 270        16539          26497     -221              2972           15000 #> 271        16545          44670     3596              1307            1052 #> 272        16588         159714    42535            158706           30000 #> 273        16675          32102    11097             26948           10000 #> 274        16678          33358    17659             12781           10000 #> 275        16716          74276     9427             -4499           30000 #> 276        16716         112533    19535             42887           10000 #> 277        16757         204687    58776             85301           10000 #> 278        16883          66753     5619             11057            8000 #> 279        17034         117533    47632             82182           11000 #> 280        17051          19689     2519              9147           10000 #> 281        17064          91464     1599             40259           12000 #> 282        17109          33231    20556             48495           10800 #> 283        17286          14018   -23788             11564           10000 #> 284        17381         224043    47884             37060           10000 #> 285        17508          47062     4124              5519            3000 #> 286        17544          30393        0             20621           20080 #> 287        17581          70335     4345             64224           17250 #> 288        17638          91209    22703             33661           25000 #> 289        17675         124873    33564             76942           30000 #> 290        17727         169163    10121             62653           42600 #> 291        17762         236623    10611            111874           40000 #> 292        17773          35221     6185             24039            4000 #> 293        17981          69591    29599             32369            2000 #> 294        18136          53319      758             15215           14000 #> 295        18181         136542     3256             41867           10000 #> 296        18194         117133      873             18294           10000 #> 297        18241         173471     6248             57835           10000 #> 298        18270          28812      369             23631           10000 #> 299        18299         293922     4515             14873           10000 #> 300        18388          36085    14018             35108           10000 #> 301        18436         242510     9941            142930           25000 #> 302        18496          44916     6493             -9034             500 #> 303        18613          51187     1099             30275           12600 #> 304        18636          73795     9810             49865            3000 #> 305        18707          47127    11478              6622            3000 #> 306        18725          64438       20              3519            3000 #> 307        18887          64409      782             11867            1000 #> 308        18969          17401     2537             11146             500 #> 309        19007         197967     6358             33736           45000 #> 310        19035          85576    15494             48127           10000 #> 311        19158          60227   -15069             33195           40500 #> 312        19224          74605    10541             22001           10000 #> 313        19292          66552     4003             33228           11250 #> 314        19430          50634     3336             18573           10000 #> 315        19464         188368    18547             76700           10000 #> 316        19534          89023     1097             -7229           10000 #> 317        19575         208677     2898              2942           10000 #> 318        19762         177435    35581             52864           30000 #> 319        19846         118109    15849              6721           50717 #> 320        19922         111544    11856             10193           10000 #> 321        19964          65250    36733             31646           10000 #> 322        20019         144386     1544             36166           10000 #> 323        20121         414771     2683             72176           16000 #> 324        20163          94214    45088             30937           10000 #> 325        20517          22734     1007             13429           10000 #> 326        20648          98620     2960              -684            3000 #> 327        20717          68007   -10421             36888           20000 #> 328        20817          59508     8194             32837           20000 #> 329        20920         170466    75995            171266           10000 #> 330        21164         200508    12981            151811           83110 #> 331        21240          72884    11327             20994            2000 #> 332        21343          45744     8067             35428           10000 #> 333        21344          44744    11475             15472           16500 #> 334        21348          79616     1180             55499           10000 #> 335        21465          44093     3374             35164           31550 #> 336        21577         128170    19762             35545           10000 #> 337        21692         156392    44281            104005           80000 #> 338        21781          20141     1600              6456           10000 #> 339        21832         123317     3265             41495           25000 #> 340        21925          90600     5364             72115            3000 #> 341        21950         230687       31             31566            2000 #> 342        22071         203460     1197             45966           10000 #> 343        22225          97210     6259             35085            8100 #> 344        22229         128873   -27781             29282            3000 #> 345        22272          49480    17471             10876             540 #> 346        22319          33775     4711               106           10000 #> 347        22328          55795     9568             29873            1500 #> 348        22388         140011    22594             68040           17035 #> 349        22452          79381     5442               979           11000 #> 350        23388          51858     2102              2631           10000 #> 351        23541         155821    54301             95517           10005 #> 352        23706         522208    49871            123090           30370 #> 353        23724         201768    68937            100333           38000 #> 354        23771          79492     5255             10109            1000 #> 355        23827         341389    24901             23908           10000 #> 356        23970          85975    13020             45881           32300 #> 357        24104          81262   -27964             61638           10000 #> 358        24291          69945    28681             30052           30000 #> 359        24327         237268    11885             28126           16000 #> 360        24507          28049    11232             -1553           12200 #> 361        24586          64644    -6636             30273           10000 #> 362        24928         138548    14325             23479            4500 #> 363        25105         100177     1674             33019           22050 #> 364        25227          54780     4116              7788            5000 #> 365        25387         262327    62954            141787           85000 #> 366        25731          26464     2324             16800           16000 #> 367        25864         135027    69814             30300           10000 #> 368        26134         137563     2375             47439           33000 #> 369        26259          76616     8885             16612           10000 #> 370        26372          97580    31638             27268           10000 #> 371        26789         200252    19599            139335           10200 #> 372        26978         112390    11271             98729           50000 #> 373        27145          30005        0              -115           11400 #> 374        27188         142330     3030            104106           44000 #> 375        27204         108733       72            -24138            2000 #> 376        27852         111818    16196             95637            7100 #> 377        28039          54811     1670            -69864           46000 #> 378        28060         116470     3535            125277          100000 #> 379        28118          40531     1365             28258           10000 #> 380        28355          41814     4581             11477           11500 #> 381        28582          86537     4544             29300           18000 #> 382        28606          37971     5538              3984            3500 #> 383        28716          79251     2978             55988           20000 #> 384        28962         171001    27029             50670           21900 #> 385        29044         214347    68087             36846           10000 #> 386        29189          19144     9662             18431            2000 #> 387        29367          30873      590              -247           10000 #> 388        29591         266037     -792             44884           17000 #> 389        29755         121503     2299            107352           32000 #> 390        29981         140794    14518             76431           10000 #> 391        30022          90512      381             15407           15000 #> 392        30390         127960      187              8836            2560 #> 393        30622          45172     2754              3271           10000 #> 394        30826          27975     4663             14096            2000 #> 395        30858         259244     1127            162905           31000 #> 396        31037           1174      343             32126           10000 #> 397        31151          32676      126             36486            5000 #> 398        31189          49928     2410            -73540             500 #> 399        31848          26695     3159              8159           11000 #> 400        32004          -4320    -5585            -16257           10000 #> 401        32331          76155    18612             58607           21000 #> 402        32410         243864    -9349             21258           20000 #> 403        32428         342928    13844             80307           10000 #> 404        32499          99789     3764             33730           13200 #> 405        32698         131819     3890             30871           10600 #> 406        32841         104845      877             79149           56000 #> 407        33066          91928    18207             38540            1500 #> 408        33286          42725    20107             22295           18400 #> 409        33332         134161     3802             17058           10000 #> 410        33472          47479     2728             54681           10000 #> 411        33475          71458        0             61901           18000 #> 412        33538          80812     4505               769            2000 #> 413        33550          57951      240             34657           10000 #> 414        33570          40095    12976             33253           10000 #> 415        33700          79903     5636             69493           12000 #> 416        33771          41496      643             20824           14000 #> 417        33866          10185     2609              7820             500 #> 418        33995         308938   198130            244400           25000 #> 419        34336          55673     6677             80052             500 #> 420        34347          27100      100             37916           10000 #> 421        34610          19315     3778               630             500 #> 422        34651          39635     -709             23035           19000 #> 423        35237         128641    77131             39950           20000 #> 424        35438         178496    19109             13183            4000 #> 425        35649         199488    30056            106754             500 #> 426        35849         191915     6366             74479           20000 #> 427        35960          74164      547             29631           15000 #> 428        36140         130259    18705             18805            3500 #> 429        36159           4574      577             22238           15000 #> 430        36592         337218     2644            107805           16200 #> 431        36659          50725     8133             22587           21250 #> 432        36784          99856      676             54452           12060 #> 433        36896         145256     3568              9279           23000 #> 434        37037         197135    11861             17107           10000 #> 435        37648          69522     2185             46015           10000 #> 436        37838         214625    35118             53321            5000 #> 437        37841           2684      211              9032           12000 #> 438        38203          83096     7773              1775           36070 #> 439        38387         587341     1188            450722           10000 #> 440        39008          81457     4638             77128           50000 #> 441        39090         272740    10118            152382           25000 #> 442        39148         125471    -3644             57204            6000 #> 443        39224          44285    15895             26693           16980 #> 444        39528          -8613   -24044            -24471            1000 #> 445        39606         206467    47751             92850           16000 #> 446        39778          78758      317             38223           10600 #> 447        39909          96316     9588             55818            4000 #> 448        40160         214867    16296            102744            5000 #> 449        40309         103837    18856             36421           10000 #> 450        40412          61595     3398             24514           10000 #> 451        40517          92743     5776             23201           15500 #> 452        40585          89812      912             25281           10000 #> 453        40653          60801     6858             36048           19000 #> 454        40679          72779       32             41991           15500 #> 455        40872         178398      564             18239            1000 #> 456        41206          97712     3828            107652           41500 #> 457        41233          48109     5305             -7231            3000 #> 458        41354         266670    17898            193308           40000 #> 459        41403          51759     1585             -4695             500 #> 460        41414          79408     4239             63466            7000 #> 461        41437          43276      598             28125           10000 #> 462        41472         340058     6844            153599           72250 #> 463        41592          87467    26955             48325            5000 #> 464        41791          66441    -6187              3244             700 #> 465        42350         116011    17911            128751           50000 #> 466        42447         658633    44503            228783           40000 #> 467        42558         104984     5212             52841           40000 #> 468        42721          37160     3496             53033            6600 #> 469        43369          64667     1542             55004           17350 #> 470        43713         154473     9398             14816            4000 #> 471        43779          19997     9669             63431            4000 #> 472        43898          64065    10904             32936           10000 #> 473        44486         131005     5869            120250           10000 #> 474        44491         163593    11120             19418           10800 #> 475        44679         127388    37551            100418           72000 #> 476        44861          72049     8119             63161           38000 #> 477        44942         138819     4397             56747           10000 #> 478        45220         243658     3737             88036           10000 #> 479        45238          47739      131             24188            9800 #> 480        45482          41858    22455             48110           10000 #> 481        45586         556701   238879            138686           25000 #> 482        45666         345809     2146             -3023           10000 #> 483        45903         174242    30746             12847           20000 #> 484        45999          50030     6906             49956           48150 #> 485        46482          53477     3038             10841            1000 #> 486        46564          57788     3094             48837           27300 #> 487        46631          48094     5676             36409           10000 #> 488        46753         148337     4962             35273           10000 #> 489        47152         490613    16759            165693           35000 #> 490        47626         124300    29242            135469           24000 #> 491        47650          31135     9343             37906            3200 #> 492        47755          36706    22459             16462           14320 #> 493        47864          30685     1577             40700           10000 #> 494        48558         -26538   -28612            -22113            5000 #> 495        48720        1632098   203304           1392647         1493787 #> 496        49079         349960    19379            214826           58000 #> 497        49252         182994   143160            183958           10000 #> 498        49903          21808     7287              5161             500 #> 499        50164          18970     1470              8274           10000 #> 500        50436          77472     8649            130609           10000 #> 501        50825         207663    14819             82313           10000 #> 502        50864          66253     1151             24673           12480 #> 503        51027          84350     1923             40460           27000 #> 504        51774          60489     6261             60773           10000 #> 505        52046          65856       98             54911           53700 #> 506        52159          85641     1784             53599            9120 #> 507        52207         498306    25977            145424           96800 #> 508        52441          10370   -24281             61836           34900 #> 509        52819         318471     8669            103625           10000 #> 510        53180          79578      -67             38658            3000 #> 511        53582         369618    13737            221325           54000 #> 512        53793         172944      534            111084           15000 #> 513        53804         132210    47324            135602           30000 #> 514        54167         119977    78313              4405            1000 #> 515        54234          14313     2518             25088           20000 #> 516        54238         129852      327             48150           12000 #> 517        54302         103263     1509             68795           15000 #> 518        54340         164868    -1098             96259           10000 #> 519        54374         166160    15079            173277           37000 #> 520        54421          63846    28483             42498           12800 #> 521        54433           5559   -22580              -761            1000 #> 522        54663         182661     3743             19079           10000 #> 523        55389          85390     5732             93926           10000 #> 524        55398          94388     5941             45652           15000 #> 525        55411          32993     1610             81591           21000 #> 526        55472         262564     2127             15824           10000 #> 527        55791          49781     4669             45915           12750 #> 528        55866         173204     1333             93265           52500 #> 529        56090         506020    22076             23628           10000 #> 530        56302         115561     2132             35446            3000 #> 531        56369          95532      162             44913           10000 #> 532        57046         103897     3658             62283           10000 #> 533        57683          99380     5534             62867           40000 #> 534        58099           7696   -13793             37517            5000 #> 535        58200         198660      163             37716           25000 #> 536        58326         226767    20258             69203           26200 #> 537        58450         249071      812             60984           65000 #> 538        58923         144216     3846             61279           47910 #> 539        59520         113031     1834             88359           16000 #> 540        59976         233593    56964            234034           40200 #> 541        60074          47134     3517             37799           11250 #> 542        60282         121502      454            -81065           10000 #> 543        60355         194698    12654            -18479           10000 #> 544        60508         328147    52490            124450           44000 #> 545        60933          91094    18784             83471           10000 #> 546        61680          71670     4610             29399           20000 #> 547        61970          36503     4077             79444           17000 #> 548        62181         192618    34027            165336           40000 #> 549        62401         173414       39             33145           30000 #> 550        63320         323257    62699            249082           10560 #> 551        63546         201152     5164             63458            8010 #> 552        64285          24917     6193             32012           10750 #> 553        64286         158988    36216            133544           20250 #> 554        64483          79177        0             65497           10000 #> 555        64572          72758     5255             48347            4500 #> 556        64731         102648     8620            107102           23000 #> 557        65493          41532     6564             55998            6000 #> 558        65690          21599     1475             41608           10000 #> 559        66168         143888     4445             25561           10000 #> 560        66172         760014    63743             90114           10000 #> 561        66459         611921    24389            175208           30000 #> 562        66596          24855   -29944             12759            1650 #> 563        66659         351145    17838            196217           59000 #> 564        67037         295192       11             50895           11000 #> 565        67115          46347     9273             40740           10000 #> 566        67293         192581    30096             52763           10000 #> 567        67413         106803     4338             88040            2000 #> 568        68152          34455     -510             18532            4000 #> 569        68483          14935      808             50740           37500 #> 570        68556         272924    11565            118014           12000 #> 571        69352         176536    13058            114548           25000 #> 572        69834        1025722     8079            125775          125509 #> 573        70563         276150     5615              2451           11700 #> 574        72176          58259      689             32504           10000 #> 575        72485           1071    -9820              9074           10000 #> 576        72489         112478    20487             89985           10000 #> 577        72551          54087     5525             20880            7800 #> 578        72662          36934     1222             40005           34000 #> 579        73184          87962    18786              6097            1200 #> 580        73895          18516     7736             10196           10000 #> 581        73952         129939       47             12587           16860 #> 582        74126         133260    -2261            123475           50000 #> 583        74371        1108185   114388            207003           10000 #> 584        74465         258465    26822            171655           45000 #> 585        75172          88439     3376             54293           36000 #> 586        75172         110782     3018             23476           13500 #> 587        75646          99791    52172             13601           10000 #> 588        76241         507054    53390            313627          115000 #> 589        77134          60431     6570             80368           15000 #> 590        77544         203730      557             82651           35000 #> 591        77875          37200    23781             47091             500 #> 592        77924         195629    24527             41564           10000 #> 593        78391          43099      221             35554           10000 #> 594        78725          67659     3999             67191           25000 #> 595        79798          39001      582              9769           61000 #> 596        80202         264101     2468             25521           10000 #> 597        80656          58560      -48             -2408             500 #> 598        81548         148713    37185            113225           40000 #> 599        83867         234742      806             78063           30595 #> 600        84546         274398     2377             45228           30000 #> 601        85202          71300    48378             90106           14000 #> 602        86304         148374    16103            115977           20000 #> 603        86601          66583     2124             25875           25000 #> 604        87049         174944    11075            153176           94000 #> 605        87924          85704     1445            105700           95900 #> 606        88678         104917      767             99217           38000 #> 607        88987          68096    14454             64627           30000 #> 608        89108          97374     3252             74008           32000 #> 609        89206         218648     3131             44577            8400 #> 610        90087          91127     4044            134432           10010 #> 611        90609         118921    11962             88002           16000 #> 612        90926          25428     4803             66489           25000 #> 613        90962          62604    -1308              7347           10000 #> 614        91127         185146   119062            111533            3600 #> 615        91289          79253     2549             23814           24000 #> 616        91449          97871      720             34011           34500 #> 617        92478          65607     7309             69274           28000 #> 618        92559         125991    47660            147721           30000 #> 619        92663          81190    16464             31405           20000 #> 620        92995         109647    14950             35059           20000 #> 621        93448          60650    19675             61811           13000 #> 622        93851          87346    21384             78314           33600 #> 623        94585         128061     2478             46123           10700 #> 624        95034         102912     3502            137607           10000 #> 625        95684          81681     2469              3852            7000 #> 626        96095         254555     7420            142455           10000 #> 627        96355          49712     1178             67956           52000 #> 628        96426         157488    53454            196513           10000 #> 629        96463          60377     2854            -75782           25000 #> 630        97014         283449     1329             30376           10000 #> 631        97049          13084     2504             62432           10000 #> 632        97534          98879    13826            154531           10000 #> 633        97909           1453      639               184           16150 #> 634        98172          68789    11356            -35955             500 #> 635        99280         129635    19514            174200          140000 #> 636        99358           7022     3098             85118           18400 #> 637        99880         183647    15753            144552           15000 #> 638       100279          32884     2401             26292           10000 #> 639       100365         431164    12651            402808          132000 #> 640       100771         145719     8837             48802           11200 #> 641       100860         200737    14557             99815            6000 #> 642       101375         302925    26054            109318           35000 #> 643       101446         104071    -4045            -69812           22000 #> 644       101491         204355     3180             82597           45700 #> 645       102319          58639      952            114463           83225 #> 646       102577         111531    41277             99003           16500 #> 647       102930          13376    11412             96744           10000 #> 648       103020          98773    45307             56211           10000 #> 649       103585         263251    33884            195232           76848 #> 650       103735          65174     5728             80065            7200 #> 651       104785         399759    49465            196945           32000 #> 652       104895         168521      638            140102           10000 #> 653       104968          39986     7502             46306           10000 #> 654       105104         258522    57458            201800           61500 #> 655       107601         346112     5123            117426           10000 #> 656       107660         269983    49796            283426           50000 #> 657       107924         228578    46295             94375           49730 #> 658       108044         111960     9731            139887           14800 #> 659       108164          59215     3151             -1640           12000 #> 660       109215          51468     1432            148144           16000 #> 661       111015         257191    22142            144844           28000 #> 662       111243          70374     2644             18578           10000 #> 663       111952          15840     3720             84065           72310 #> 664       112224          90578    21178             52549           28000 #> 665       112542          51004     8245            112718           10000 #> 666       113203          58920    22408             60410             500 #> 667       113226         214390    48323            192646           56800 #> 668       113522          63543    23672             25335           15000 #> 669       113594         607878     4280            151745          190000 #> 670       113667         366153       44            201110           57300 #> 671       115249          27882    12916             71733           15000 #> 672       115257         157625    10861            187485          130000 #> 673       115324          78574     7021            -56111           10000 #> 674       116328          69423     4042            132041           11200 #> 675       117173          39555     7082             39799           40000 #> 676       119574        1279006    65760            198987           10000 #> 677       121202         181935     7113             22872           25000 #> 678       121604         812986    36860            501723          125000 #> 679       122046         119538     4497            152308           54000 #> 680       122464          57927     2073             18988           15000 #> 681       123210           9985   -13006             44288           15000 #> 682       123359         335504     1911            142360           75000 #> 683       123934         613778    89633            578547           60000 #> 684       124103          45025       -8             45615           20000 #> 685       125158         178945     8709            131317           21000 #> 686       125502         175632    28848            107252           15000 #> 687       126702         361707     9566             82175           20000 #> 688       127599          21146      230             56325           15000 #> 689       127996         289153    20636            241270           10010 #> 690       128548         382384    93353            329427           75000 #> 691       129138         264124      518             59037           20000 #> 692       129207          87499    26878            130363           24000 #> 693       129230         114431    13006             58867            4000 #> 694       131428         488117    -2714            121543           23000 #> 695       132235          98635     1037            119801            1000 #> 696       133188         214067     1272            144447          100000 #> 697       136054          49994      137             78359           32400 #> 698       138028         127188    17574            157502           18300 #> 699       145776          54846    19510            143048           20000 #> 700       146495          83855     3152            100218           98520 #> 701       146919         121314   156012             60587           15000 #> 702       147854          11983      602             59198           27000 #> 703       149257          26398     2253             64844          105700 #> 704       150895         108345     2275            110813           79400 #> 705       152187         473310    82220            208294          190000 #> 706       152865         581765   202415            663831           10000 #> 707       153817         387558    89675            364190           57400 #> 708       153834          55707    47887            183127           10000 #> 709       155025         601589     2049            309705          100000 #> 710       155820          35655     2893            112952           11500 #> 711       156375         239593      861             49877           50000 #> 712       161213         293749   164560            496730          300000 #> 713       164919         600166    25138             73733           12800 #> 714       167135         100950    12130           -137794           40000 #> 715       168538         390182    31460            449712          510000 #> 716       168587         372244    98879            354790          108350 #> 717       169733         121286    38201            140817           15000 #> 718       171332        4539074   416760           2444371           20000 #> 719       175048         352949    84032            196011           25000 #> 720       177368          90317    42559            175606          133050 #> 721       177371         210734    72805            224353           12000 #> 722       177394         331417      354            115281           25000 #> 723       181388        1064956     6531            127126           75000 #> 724       181418         750780     1889            216125           90000 #> 725       181466         170293    22425             87990           10000 #> 726       182329         716601      546            124272           85020 #> 727       186159          93507    19466             64888           10000 #> 728       188927         900922     8208            337919          145000 #> 729       191030         116069     7442            129084           83000 #> 730       192945         261920   -24455             87860           44920 #> 731       195629         637117    83870            456101           80000 #> 732       198277         175150    33593            252546           40000 #> 733       198656         769287   139859            576172          128000 #> 734       199331         506201    37868            274060           40000 #> 735       200498          60678     3446             24844           10000 #> 736       204553         235309     3503            162049           18290 #> 737       204639        1008876     2136            497917           85950 #> 738       215059         143659     7298             54296           70400 #> 739       216188         445614   100427            442298           36650 #> 740       219734         348620    10734            357770           60000 #> 741       222801          74737    62744            290114           61776 #> 742       223141        1092236   168319            351352           10000 #> 743       224106          22967    18643            222755          189000 #> 744       228787         538450    28214             96526           10000 #> 745       231454         203142     5773            409122           50000 #> 746       233057         143627     1786            261161          120000 #> 747       233473         216721    36963            343064           10000 #> 748       234120         229466     5545             98233           12500 #> 749       236314         519857     3139            357022           15000 #> 750       240168          53711    12841             61151             500 #> 751       244293           6240     1614            245965           30000 #> 752       245049        4407578   204217           1588809          224000 #> 753       246686          46356     1238            208129            3100 #> 754       247781          82891     7920             40250           12500 #> 755       248051         447373    32769            145638           20000 #> 756       248339        2107796   182249            713101           25320 #> 757       248776          55906   -30919            -97007           49000 #> 758       249840        1020384   123346            691851          525784 #> 759       250108         706920    28908            276535           30000 #> 760       250275        1021852    23712            181567           90000 #> 761       250275        1021852    23712            181567           90000 #> 762       250982         122026    13592             55224           70000 #> 763       253034         322760     2669            261478          130690 #> 764       256826         946750   111613            600237          292500 #> 765       256965         251111      748             92741           20000 #> 766       257817          66281    22663            150809           25000 #> 767       259223         367762   105688            396304           11210 #> 768       261961        1395420   183418            630475          162000 #> 769       267306         352066     6913             13996           26500 #> 770       271085         181671    56558            155331           50000 #> 771       276900           9006      900              7184           48000 #> 772       281062         337190     7923            301506           74500 #> 773       281541          76487    25572            306274           15000 #> 774       282347        1605837    42107            518117          145000 #> 775       283185          27481     -730            182409           26900 #> 776       287613        1030017    97777            699560          540000 #> 777       293377         758563    57968            343513           50000 #> 778       294888         555635    12229            145540           46000 #> 779       309406         105388    46468            158873           33000 #> 780       310092         571516    39180            368127           72000 #> 781       311837         738278    73940            343839           10000 #> 782       311898        1692372    30160            450399           75000 #> 783       312516          55154    49144             99273          180000 #> 784       313958         237384    30093            312366           10000 #> 785       318758         221904   -38776             21452           28000 #> 786       319871         125087    15048             88239           24500 #> 787       343584          42550    20445            244340          149000 #> 788       346475           7822      298             96530           50000 #> 789       347882         670707     1598            483390           82000 #> 790       360300         122453       38             45327           52000 #> 791       364695          66250    16368             80040          120000 #> 792       384961         689010    18358            467684          225000 #> 793       389630        2311812   326573            977718          300000 #> 794       392448         453164   129328            602413           78600 #> 795       415928         582986    26775            367776          655000 #> 796       418067         361873   173240            564082          200000 #> 797       418692         514710    33271            152869           25000 #> 798       420541        3881788   125173            664250           52516 #> 799       431274           6385     1682            137468          170000 #> 800       448274        1284039    48322            734180          284000 #> 801       461513         117369    71646            303403          278023 #> 802       471789        1749192    35446            649856          105000 #> 803       472901         823835     3296           1240894          100000 #> 804       480041        1388028    35652            829096          272320 #> 805       495540         937846    55803            584555          155000 #> 806       496875         589319    93166            342002          240000 #> 807       527424         153538    63762            561806          126000 #> 808       538817          62134    20050            531708          500000 #> 809       567009         793361   222941            967259          150000 #> 810       637551         139663   124173            132468           94000 #> 811       638494        1335833   497490           1220314          340000 #> 812       693382         532057    52421           -460175           50000 #> 813       717347        1603477     1675            697201          400000 #> 814       738553         363647     5384            535548          150000 #> 815       758872         968509   212348           1061788          680400 #> 816       792219         222106   151547            642349           60000 #> 817       801540         217195    68640            217320          150000 #> 818       802561         221996    22736            313308           11410 #> 819       828861         163531     5993            284235          264000 #> 820       929949         240732     7764            319252           75000 #> 821       937799         751703      639            687760          500010 #> 822       944712        3849479   424501           1671229          250000 #> 823      1056192        2060604   295406           2385687          400000 #> 824      1171886        1158396     3209            357841          930000 #> 825      1179865        1563965   229523           1208083          400000 #> 826      1192654         398222    15538            201026          150000 #> 827      1273843         219508   167530            408576           55000 #> 828      1350875         774006    62632           1616323           60487 #> 829      1518834        2143592    73190           1192320          500000 #> 830      1761903        3720758    83892           2549395          240000 #> 831      1956477         213371    45191           1250554          112000 #> 832      2229028        2823558     3190           3172220         1100000 #> 833      2618281        3056551    10497           2145857          178200 #> 834      4994098        1070705    33645           3939325         1078677 #>     SHORT.TERM.DEBT    SALES LABOR.COSTS DEPRECIATION OPERATING.PROFIT #> 1            183077   507061       60067         9006            27560 #> 2             13872    44727        5090            0             -770 #> 3             14154    92922        8583            0            -6434 #> 4             94684   665156        2663            0             3658 #> 5             40669    86020       27054            0            27468 #> 6             35180   297633       35086        19110            15194 #> 7            176649   378474        5105            0             5688 #> 8               402     7849        2376            0              243 #> 9             20948     3430        3112            8              103 #> 10           149402   637815        4085            0             8504 #> 11             8314   371017        5597            0              546 #> 12            19907   233917      179835          381             9704 #> 13            39105   139150      122103          210             1597 #> 14            11120    74373        4784          577             5115 #> 15              739     1857         201            7               64 #> 16            15027   339469        3548          110            -1565 #> 17           164623   441054       23564            0             6946 #> 18             8452   125582       18524          183             3884 #> 19            20678   380017         591           53             4750 #> 20            21333   233756       14679          372             2873 #> 21             7411   224768       23275          214             3947 #> 22             7579    69645        4357          141              878 #> 23           229572   116295           0          362             -593 #> 24            37915    46159         377          692            11871 #> 25            11167   116534        4253          805             3603 #> 26             4853    77844       10487           37               39 #> 27            28500   143403       11578          308            -4965 #> 28            28320    84497       11363          453            12563 #> 29           687142  2045712     1338127            0           -45996 #> 30             4638    34752        3290           92            -2101 #> 31            15789   378108       29709          559             5999 #> 32            14740    31969       14408          301              112 #> 33            10859     8317        3615          307             1539 #> 34            34103   100068       62352          271             1065 #> 35            10393    96500       21473         3118            10932 #> 36            12687   210422        5293            0            -8155 #> 37            27463   133921       13424          248             4436 #> 38              216   600266        4758          388             -456 #> 39            11931   100932        8865          286             2566 #> 40            16612    96499       12566          311             1620 #> 41            18128    94412         351          400            14395 #> 42            71036     3773       17177            0           -14777 #> 43           173854   726488       37010          497             8120 #> 44            22686   166380       20050          631             2762 #> 45            14300   130326       10037          183            -1300 #> 46            80751   130349       12034          128            11187 #> 47            70079   141827       23987          684             2004 #> 48            85720   135138       10738            0             4926 #> 49            63585   136766       17006          569             7843 #> 50             4359   127285       15007          251             3287 #> 51            25975   112162       16746          780             1057 #> 52            26199   118270       12044          465              606 #> 53              356    49335        4414          608              452 #> 54            18495    70200        3959          787             -360 #> 55           162415   292284       28000          817            14289 #> 56            12092   157843        6297          622            -2100 #> 57           105710   310463        9161          905             1607 #> 58            11310    99855        7822          618             2509 #> 59            46803    90834        9553          157             5701 #> 60            26657   133264       22891         1789             4305 #> 61            58254   207609        5835          579             2917 #> 62            10393    96519       19928         1561             3239 #> 63            90529   289985       59491         1526           -10360 #> 64            66816   141618       45310          184             -607 #> 65            70266   204889       10628          859            11448 #> 66            44884   113000       19826         1135             8773 #> 67            35581    86259       31731         1887            13633 #> 68            75656   352846       35952         1311            27396 #> 69            16273    52310       10444          107             1801 #> 70            18302   127663       26272          626            -2003 #> 71             3304   159372        7847          985             4052 #> 72            30389   135055        5176          697             1411 #> 73             4789    46891       16756            6            -3644 #> 74            17070    81321       14588          740              -15 #> 75            70662   168561        8741          572             8567 #> 76            38396   143473       16937         1404             1366 #> 77            52257   215208        8169          599             4920 #> 78           107834   245535       11593          544              473 #> 79            31820   206097       11143         1492             7220 #> 80            21815    45684       21898          769             9764 #> 81            13170    85493       10972         1085              204 #> 82            81631   130327       20422          780            -3734 #> 83           111994   235578       16247          347             5740 #> 84            10081   164324       11025         2157            -2920 #> 85             7373   163078       15785         1044              979 #> 86            44583   323728       14956          745            16533 #> 87            41646   106052       18477          329             2389 #> 88            28512    69515       28950         2186             2750 #> 89            42686   177734        8053         1426             1138 #> 90             1838   879764        9415          898             8114 #> 91            13190   158049       10753          851             1269 #> 92            28233   115199       21666          308            27685 #> 93           148488   640399      102980         1532            26591 #> 94            66053   429374       29405         2099             5321 #> 95            97396   214988       55340         1619             7166 #> 96             7440    45741        6220         1145             2284 #> 97            19790   132001       57657          697             5040 #> 98            41743   103927       29250         1182              540 #> 99           197733   381445       39806         1527            11073 #> 100           74042   292642       26615          787             4750 #> 101           39346   162586       11699         1255             1594 #> 102          110556   111411        4051            0           -16162 #> 103           20448   120047       21083          852            14102 #> 104           21366    95508        7070         1428            -2714 #> 105           24680   108395        5867          724              310 #> 106           19050   225082       20027         3426              518 #> 107           27422    87207       17414         1554             2656 #> 108           81129   290226       46004         1456            20626 #> 109           35699    93308       17547          908             2760 #> 110           34379     9002           0          520             5018 #> 111           97580   357815        4490         1368             7919 #> 112           13403   156250       23758          567             6012 #> 113          196388   383955       66326         1524             7442 #> 114           13385   353398       13987         1686             2004 #> 115           67472   406193        8461          971             8221 #> 116           89688   434426       90438         1433            31780 #> 117           58736   337812       27082         1692             7864 #> 118           12345    85976       36610          876             -510 #> 119            9017   113528       10826          701             -184 #> 120           15975   105504       13182          845            -3427 #> 121          159374   547947       20320         1346             6919 #> 122           29041    96392       44383          558             1583 #> 123          142078   309339       63979         2445            -1998 #> 124           28786    90060       32632          902           -14692 #> 125          185708   307478       30231         3114            13909 #> 126           46313   377912       17223         1741               29 #> 127           35412   192153       20546         1318             1268 #> 128           31648   136223       33682          966            10178 #> 129           80525   542260       24366         2215             4267 #> 130           33147   125440        8661          928             5877 #> 131           34136   419022       65033         2183            12605 #> 132           49963    27024       12090         1204            -7822 #> 133           54427   277754       14282         1718             3672 #> 134           54785   187649       16303         1997             3393 #> 135           49202   206025       28300          548             6608 #> 136           44098   144060       37838         2262            12969 #> 137           86987    39268        2089            0              217 #> 138           31440   169471       13779         1213             9394 #> 139           77336   185166       73529         2494            15200 #> 140            4407    90905       61258         1478             -699 #> 141           90275   158720       33770         2272           -12976 #> 142           27587   304445       51490         1764             -668 #> 143           76213   273646       26568         2468             5506 #> 144           44517   285045       47712         1791             1232 #> 145           29220   137569       15882         1171            10705 #> 146           14028    32643       21181          950             3378 #> 147           48473   130977       28477          374            -5408 #> 148           15390   102601       34856          356             3420 #> 149           40579   211542       32541         2416            10931 #> 150           73829   161308       15732         1515             2843 #> 151           17274    97580       23647         2172             3691 #> 152           36872   195803       21329         1259             9323 #> 153          101133   132852       20391         2223             6053 #> 154          123148   115218       57796         3164            25657 #> 155           54551   319728      247639         1035            13750 #> 156           65853   293020       17716         2056             9109 #> 157           32160   106850       20570         2421             3693 #> 158           18925   174534        7623          628             2213 #> 159          251126   277939       58629         2988             8525 #> 160          251126   277939       58629         2988             8525 #> 161           53475   120236       10911          622            -8360 #> 162           26054    53069       40204          993             -562 #> 163           47373   179818       19854         1409            11701 #> 164            7929     2588           0           95              225 #> 165           22489    85990       21090         2555             3391 #> 166           38496   172469       29918         2795             1700 #> 167           25513   145430       13900         1253             1566 #> 168           82631   282747       26739         1243             7372 #> 169           14777    81802       69471         2025             2758 #> 170           15947    77381       50196          831            -5429 #> 171           61113   181548       18259          654             1282 #> 172           21990   217748       29524         1417            13564 #> 173           47232     2200        1665            0            -1453 #> 174           42919   224744       34261         1741             6072 #> 175           32642   201870       53977         9210             6398 #> 176           33767   201322       20087         2801             6443 #> 177          214330  1596389        4179          426            31603 #> 178          199026   878936       46958         2167             5552 #> 179           23125   161655       18443          318            23689 #> 180          127844   235875       37492         1867             3328 #> 181           30299   201808       17755          739             3052 #> 182          134611   225813       47907         2743            18846 #> 183           52231   992905       39846         4124            10154 #> 184           38098   115535       28552         1567             5629 #> 185           47599   202988       33228         1876             7223 #> 186           27380    96192       83524          576              815 #> 187           55138   102623       15879         2459             6758 #> 188           26237   193278       33985         2217            13718 #> 189           78564   331231       24070         1670             7575 #> 190           50604   825168       54855          921            14221 #> 191          146559   295086       58763         2043             6084 #> 192           16101    95469       20277          899             2738 #> 193          104775   223687       76032         4350            23358 #> 194           23712   159558       25176         1497             6053 #> 195           60307   146725       23892         2273             2771 #> 196           25518   162998       36078         2072            18219 #> 197          261223  1258514       21701          681            47980 #> 198           10571   157390       24768         1066             2550 #> 199           89888   145666       21119         3323            12949 #> 200           12940   102619       20147         1349              845 #> 201           20107   147019       43804         1442             1729 #> 202           59830    86970       34751            0            -2743 #> 203           15233    48015       26725         1550            -4091 #> 204           11749   126884        5827          499              941 #> 205           19826   164477       24861         1285             4091 #> 206          152452   266237       57962            0             2052 #> 207           23815   171206       29112         3080             1238 #> 208           31865   110107       40121         -119             1486 #> 209            4535   114883       14174         1425            -3372 #> 210           78489   234802       25972         1380            20865 #> 211           17456   159120       24669         2376             2350 #> 212           70250   256184       17650         2620            12170 #> 213          115399   445017       40268         2512            30390 #> 214           15082   117734       10733         2382             3982 #> 215           44776   311906      187556         2590            41916 #> 216           33180   107650       26368            0             5963 #> 217           25845   230106       17991         1942            14560 #> 218           55584   185950       41873         5066              986 #> 219           69147   664592       30759         5913             8314 #> 220           11563   299373       15295          502             2890 #> 221           32573    89243       15626         2648            -1166 #> 222           45873   367061       20331         5523             4877 #> 223           90154   130240        9182         5053             7855 #> 224          142764   159173       46700         2962            17122 #> 225           21546   132658       30480         3503            10858 #> 226           47097   350212        4416         1647             9292 #> 227           27548    88253       46092         1447             2524 #> 228          221322   460348       46101         1657            22326 #> 229          213423   419916       86589         1751            29745 #> 230           16400    79943       16555         1222             6588 #> 231           82058   235042       24295         2185             6748 #> 232            6544   155341       34673         2230            -7170 #> 233           65811   238081       34386          701            10646 #> 234           22290   155142       19481          907             5150 #> 235           16324    91614        9677          787             4885 #> 236           17839    90160       28037          517             4546 #> 237           11148   381496       32675         3592             6796 #> 238           47847    69396       17740         2904            15751 #> 239           48692   269938       42404         3238             3858 #> 240            9035    52963       18300         5367             2293 #> 241           20196   224874       16771         4747             -370 #> 242           55632   155695       18473         1403             6692 #> 243           77965   147841       19550           59            -7138 #> 244          155250   332188       50423         2433            30157 #> 245           51865   182235       13621         1818             7913 #> 246           10484    79150       15089         1140             1393 #> 247           32685   327085       10993         1675             3238 #> 248          211663   488367      110879         2161            22651 #> 249           26943   125062       27746         2027             5198 #> 250           20784   138572      101812         1167             8707 #> 251           40032   174945       48025         3263            26514 #> 252           40881   175520       55388         1942            10424 #> 253           36524   266204       69685         1576            11578 #> 254           39694   107370       19108         1545            -8412 #> 255           32889   112374       29298         2739             8073 #> 256           35500   141452       18169         3391             2957 #> 257           26700   109697       32353         5283             2355 #> 258           19740   187202       17264         1052             6920 #> 259           27832   205947       33449         1690            -4078 #> 260           72870    13152       14091          752             2770 #> 261           11967   132935       35557         5046             2061 #> 262          141213   672802      290270         2038           129930 #> 263           30078   198265       75358         1238             2023 #> 264           25258   195756       10956         3631             3081 #> 265           52428   592751      437625          964            19838 #> 266          188924   584914       55240         4451             1392 #> 267           36430   172470       71585         1351             8077 #> 268          141824   420203       19911         2763            13742 #> 269           21307   194746       15958         1187              751 #> 270           21861    52080       14669            0            -1438 #> 271           50140   249905      218734         2887            -1766 #> 272           17595   177803       55077         1878             4891 #> 273           23330   127841       13126         1669            -3215 #> 274           22253   121665       11209         1044             4140 #> 275           92997   493296       35900         2157             -238 #> 276           86361   332694       44750         2497            12096 #> 277          136144   452094       52056         2167             6677 #> 278           53376   163299       22171          398             -301 #> 279           37121   219107      147666         4332            12734 #> 280           16239    69520        6604         2428             3939 #> 281           50559    43079       19303         1732            -5652 #> 282            5895    88567       47133         2880             4183 #> 283           15175   107268       16837            0             2058 #> 284          206864   694184       39965         3748            28982 #> 285           27442   221368       30334         1941              680 #> 286           14715   197178        6655         2734             3077 #> 287           23897   108991       30483         3600            11921 #> 288           73890   276228       32936         9009             5972 #> 289           65511   338705       32701         2540            31417 #> 290          122540   291192       50158         2125            21750 #> 291          116346   591131       40706         1945            16768 #> 292           26611   309316       17087         2978             4674 #> 293           48558   160656       14034          845             3964 #> 294           47030   234727       10760         2952             2575 #> 295          114836   279489      100845         3933             7975 #> 296           32736   257072       10841         3261             4634 #> 297          138230   308178       76324         5752            10279 #> 298           23395   348520        7106         1558             -620 #> 299          297348   631584       48453         3198            23453 #> 300           19208   106910       32176         3719             2851 #> 301          118017   361814       36398         2781            21317 #> 302           57845    48341       14288         2438             2636 #> 303           36738   134712       14723         2984             7137 #> 304           35566   148421       60850         5377             4390 #> 305           40903   302770        9677         4483             4047 #> 306           79644   222903       24197         3708            10256 #> 307           51911    41034       19644          131              873 #> 308           19587   152861       15110         3162              662 #> 309          131214   324383       97009         6268            28935 #> 310           55549   218520       29218         2925             8562 #> 311           46190   448009       22431         2885            -3356 #> 312           53697   339786       17440         2153             3728 #> 313           48304   422926       18738         3461             6120 #> 314           30858   198830       24788         3045            12741 #> 315          131132   929080       52601         4173            13971 #> 316          114663    87205       32880         3178            -6564 #> 317          188219   184063       36167            0             4602 #> 318          144333  1059859       83436         4044             6063 #> 319          203644   293779       27578         1372             8802 #> 320          120149   315945       23550         1624            16250 #> 321           45053   115367        8156         1366              741 #> 322          131707   242623       40836         2279              346 #> 323          359274   683923       27192         3650            12612 #> 324           40836    81020       29355         2125            24811 #> 325            5350    62571       12161         1572             8606 #> 326           63338    80566       30968         1140            -7174 #> 327           47585   117636       13188         4451             8309 #> 328           47488   149775       18656         1608            -2012 #> 329           19358   210542       68666         7389            27667 #> 330           69862   362780       41494         3120            12855 #> 331           69968   367890       20921         3864             5046 #> 332           30830   275533       61639         4164             3822 #> 333           40218   342686       21545         3124             2564 #> 334           39558     9689           0         1323            -7697 #> 335           30394   146469       38359         2274           -16280 #> 336          112408   240258       51196         3764            11049 #> 337           70924   381518       67692         6559            14891 #> 338           25457   106155       10788         2321              -95 #> 339           78654   258567       96735          964           -32360 #> 340           38960   132051       49951         1897            -2659 #> 341           40955   269717       52607         1939            23738 #> 342          183149   465202       57756         1988            15551 #> 343           83473   316849       23834         1758            12350 #> 344          121820  1110812        3253         1223            23960 #> 345           49548   155346       22578         2989             8271 #> 346           53426   211062       13910         1004             3849 #> 347           39101   161217       21054         5640            12448 #> 348           92768   309149       36814        21875            -4309 #> 349           85051   108058       35362         4715            -9766 #> 350           58912   162338       41889         1498            -8853 #> 351           83845   520086       27105          459            19215 #> 352          354155   456630       44607         3726            18679 #> 353          125158   541049       37286         2212            -1863 #> 354           84574   133910       62455         1974            10699 #> 355          339808   345832       36360         4855             9827 #> 356           64064  2963884       22828            0             5056 #> 357           23496   152541       25550         3231            10412 #> 358           64184   363487       24820         4549            24237 #> 359          212403   134785       20608         3277            10367 #> 360           33857    99279       43696         2257            19609 #> 361           43874   153548       38795         2204             6692 #> 362          127448   434031       21511         2858            10142 #> 363           92262   177518       58601         3810             3703 #> 364           46854   133731       35097         2957             7290 #> 365          143049   517061       65991         6149            18397 #> 366           26893    78948        9452          906             1413 #> 367          133930   495375       43039         3581            14996 #> 368          116258   567711      274549         5347            11317 #> 369           61264   155290       21643         2942            11183 #> 370           93408   379280       86492         4978            14929 #> 371           87705   495111       96760         4708           -29088 #> 372           40639   209870       18237         2930             5843 #> 373           45651   203285        7404            0            -8108 #> 374           63014   402218       49523         5409             3539 #> 375          144834   412910       21866         4390            10546 #> 376           43001   243574      121997         3916            24526 #> 377          142496   106807       14055          586           -21344 #> 378           19254   141342       16096          737             6829 #> 379           31420   163907       21065         4269            14275 #> 380           42438   225594       20616         3543              865 #> 381           74141   214456       27649         2895             8909 #> 382           31658   101222        8477         1387             -146 #> 383           27918   526823       17462        10676             4702 #> 384          123903   306522       48021         1451            17602 #> 385          201466   654845       31778         5668            19225 #> 386           21114   227123       26063          924             7001 #> 387           50617   106817       13780          500             9101 #> 388          236421  1106446       28289         3363            37582 #> 389           41076   240563       97331         4168             -499 #> 390           98094   217399       17693          598             3791 #> 391           85260    85110       11000          834             2191 #> 392           92311   124587       25575         2599            20304 #> 393           67450    94286       35274         9635             2165 #> 394           16269   333919       13657         2927             2435 #> 395          105011   348217       43388         7553            15048 #> 396              85     2430           0         1731              768 #> 397           24820  1571043        9863         1243             3260 #> 398          111990    36501       24873            0           -19814 #> 399           31511   179580       40376         1111             5474 #> 400           39525     6399        4734            0            -2670 #> 401           49879   382065       41209         4867             9012 #> 402          253913   504682       30780         1221            13993 #> 403          297357  1906410       30275         2184            46468 #> 404           86841   322228       27357         4561             7558 #> 405          125308   164284        8195          935            27855 #> 406           58537   142977       36837         4381            11635 #> 407           67274    85828       26891          883             7170 #> 408           35415   308242       76133         5536             7217 #> 409          139786   102752       40420          468             6229 #> 410           26270   211276       36528         8743            18056 #> 411           43032   335208       96849         6914             7557 #> 412           85292   328379       24036         3819            12041 #> 413           56995   139055       81855         8609             1870 #> 414           31777   136467        8161         8261             2625 #> 415           43227   203776       73866         1957            31719 #> 416           47089   122544       19788         2328             5363 #> 417           34380   216245       17249         2015             5417 #> 418           96607   746612       98834         1164           108999 #> 419            9958    76107       65060          740            11106 #> 420           23531   199715       65482         5179             3859 #> 421           34692   136144       14528         2029             8552 #> 422           42978   313652       33323         4918             4401 #> 423          118242   413096       16622         3711             7017 #> 424          182222   279335       23218        18915             8192 #> 425          127434   422980       67046         2227            18776 #> 426          153285   498747      165873         4375            -8611 #> 427           79879    99802       26381         2899             4778 #> 428           54531   308829       14644         4056             3247 #> 429           18571    15720        9374         8501            -7962 #> 430          266006   496612       69513        10357            47112 #> 431           53723   159375       19192         3643             3203 #> 432           70027   165924       26617         9606            12356 #> 433          154634    12652        8965         2162            -7534 #> 434          202884   480476       20684         2104             3586 #> 435           46290   131824       42027         4811             3410 #> 436          152298   551770       79979         5562            67467 #> 437           21599   103869       33473         4511               23 #> 438          107437   252290       50066         8308           -30933 #> 439           25850    47415       11296         2383            14094 #> 440           43338   147544       55093         3630            -6284 #> 441          159402   850082       29713         1203             7245 #> 442          106414   261845       29785         8673            18170 #> 443           34816   163701        9227         1363           -13354 #> 444           46318     9298       14981          400           -38266 #> 445          143493   434589       50383        54398            39025 #> 446           68186   321835       35815         3821            10158 #> 447           80407   170172       12144         4301             3976 #> 448          149696   528484      118131         9246            20300 #> 449           87593   366323       36169         3947             6075 #> 450           52081   184116       14854          229             3729 #> 451          109259   408823      119829         8395            13611 #> 452           46705   116873       37117        16192            10699 #> 453           65407   472848       16291         4067             2619 #> 454           73467   254514       20715         2646              340 #> 455          199094   291317       63414         5822            20490 #> 456           31266   232268       31551         7123            17248 #> 457           86028   261997       18394         4763           -29358 #> 458          114716  1206736      103003         4539            29425 #> 459           47684   193299       70089         9139             -944 #> 460           50145   221918       98610         3895            33201 #> 461           53169   299693       53547         4633             7719 #> 462          216362   514408       26297         3663            26452 #> 463           80734   123745       31069         1990             7917 #> 464           64529   102116       11447            0             7968 #> 465           28710   269752       84342        14512             5157 #> 466          470768  1121266      105966         7384            57666 #> 467           94701   179088       14672         4748             2241 #> 468           18498   235730       50432         8615             9994 #> 469           48664   135659       17115         4166            12561 #> 470          172208   367671       17883         2992            20637 #> 471             346   121455       35110         2670             4173 #> 472           75027    52884        6075          120             3258 #> 473           47427   131789       42884         3145             4192 #> 474          154036   235082       30113         4272            29641 #> 475           71662   661414       79443        11785            50732 #> 476           51976   803466       56904        12215             2657 #> 477          127100   318796      163712         4243            31952 #> 478          197984  1521462       67678         5525            25210 #> 479           36541   241944       26387         5441             4169 #> 480           43247    49639        4987         6486             2243 #> 481          462341  1308738      213736         6078            77488 #> 482          347331  1042083       37716         2920            12325 #> 483          208404   863313       53295         5560            11108 #> 484           42070    95287       35373         8054            -6182 #> 485           70426   328408       13480         2983            14689 #> 486           51465   646397       56180         3279             1675 #> 487           58316   367741       47977         9579             3603 #> 488          129682   473521       32529         2524            -3412 #> 489          352469   874361      133834        13657            37903 #> 490           36457   227875       73138        25214            22540 #> 491           38353   221321       25371        11317            35309 #> 492           51947   373611       86101         3288                0 #> 493           25014   100616       16249          671             4145 #> 494           27667    27166       30770            0           -12904 #> 495          288171  3666486      226163        29063           120274 #> 496          180466   874582       87484        14700           -20388 #> 497           35913   112511       48457         4230           -23304 #> 498           26463   271300       23039         3628             5034 #> 499           25659    58364       13667         5449            10795 #> 500           -2701   114038       26041         8251            15951 #> 501          162123   451537       82992         5607             7057 #> 502           92444    94839       39368         6410            15969 #> 503           70896   191476       75233         6692             9364 #> 504           49565   223026       39872        14689             5343 #> 505           60204   156839        5042         1964             5146 #> 506           61347   133512       46207         6818             6668 #> 507          171786   585234       42096         7326            38704 #> 508             975   220590       25450        10399             6368 #> 509          258598   418486      118668         4743            41976 #> 510           75588   542767       32418        14148             5182 #> 511          198474  2585548       99697        13004            76174 #> 512          112605   294996       71289         8044            24130 #> 513           47701   384306       70469         7611            27471 #> 514          122826   300730       38656         5746            13185 #> 515            9314   113662       67121         8446            -7901 #> 516          119881   317046       71430         9711             5585 #> 517           71693   280916       38053         7333            22904 #> 518           97778   417532       43760         2897            28288 #> 519           45857   434760       72629         9223             9155 #> 520           36405   184583       60367         6639            40690 #> 521           60754   126450       42247         4461             4751 #> 522          221360   369657       85920         6190            34071 #> 523           42627   195587       59835         5472            18692 #> 524           76698   208548       56261         5137             9689 #> 525            6814    86847       35615         4831            19297 #> 526          284484   743417       52592         4046             2630 #> 527           23186   201912       35832         2452            15583 #> 528          135806   995791       34261         7501            16801 #> 529          536327   342975       89779         6289            36072 #> 530          119154   158831       45813         5890             5975 #> 531           94110   256361       73315         9797            16125 #> 532           78659   134528       43786         5958           -10729 #> 533           75527   207786       59891        17780            10585 #> 534           28278    86957        7389         1687             6842 #> 535           59584   599909       32253         3641             1317 #> 536          196763   416504       46002         7866            29427 #> 537          246537   285467       49064          417           -14450 #> 538          107243   144187       36231         1695            13763 #> 539           60643   288555       99512         6868            13841 #> 540           59675   543498           0        11279             6388 #> 541           63963   168886       62533        14208             5335 #> 542          258348    72588       35331            0           -18515 #> 543          110707   954702       47722         6238            58172 #> 544          264206  1085694       54140         5191             3976 #> 545           64943   166619       23803         4242             -877 #> 546           70305   353682       29975         9227            16423 #> 547           18970   126498       86073         4387             8447 #> 548           66400   621206       74497         6816           -42009 #> 549           91875    93791       21429         9088             7258 #> 550          137494   634841      285508         8911            44910 #> 551          190172   437193       69164        10656            23450 #> 552           57189   250455       33196         3838             7004 #> 553           89731   343808      131276        13621            41963 #> 554           65125   361267       46350         5700            29638 #> 555           76715   291096       38628         7815            35553 #> 556           46867   275508      131446         8224            -2934 #> 557           32570   193106       37824         8909            29507 #> 558           12563    17005           0         7322             7880 #> 559          161375   509226      143754        18484            15191 #> 560          742072   527380       78638         4582            12171 #> 561          505223  1340515           0         7229            95749 #> 562           54691   176326       86743         5881            13505 #> 563          212108   798829       83389         4051            28219 #> 564          311335   879659       93069        12601            18827 #> 565           39603    68759       33536         6641             2700 #> 566          179442   493368       37945         6662            16376 #> 567           81170   181151       24720         6944            35471 #> 568           65680    81825       13320        13173             4943 #> 569           31593   212567       70712        15081            15463 #> 570          221198  1053112       42206        15246            48627 #> 571          103949   496241       50765         4496             4028 #> 572          968477  1380249      155608        10115            66522 #> 573          330559   280563      113336         6530            18590 #> 574           78498   193507       59290         8743            44480 #> 575           46306   139313       42925        10556            -2435 #> 576           88191   405250       51039        10984            18949 #> 577           75743   276617       43886         4120            24568 #> 578           41619   172290       26381        10982             3318 #> 579          113649   558197      234969         5401            31590 #> 580           51104   217865       65042        15895             9001 #> 581           90281   200595       98054        10759            16106 #> 582           73279   418517      284653        24959            42973 #> 583          875439  1372977      143186         3904           102636 #> 584          161284   413606       49099        12019            69834 #> 585          104540   529339       32539        11306            33699 #> 586          143039   241079       66112         9309            14025 #> 587           90060   205695       28021        16275            17995 #> 588          269669   139553        4864          661            12363 #> 589           39994   189192       26858         4260            17326 #> 590          172975   401441       40082         7322             7375 #> 591           21182   110977       53188         1648            16824 #> 592          186882   286692       41538         3933            12903 #> 593           89514   241994       72311        10057            -2222 #> 594           55097   172771       73102        15506             7878 #> 595          109030        0           0         4053            -4136 #> 596          270146   441182      218442        15310            17072 #> 597          140749    15498       11258          980             1508 #> 598          109741   707711      102979         1773                0 #> 599          229617   312518       91421         3545            42324 #> 600          124550  1138354       79437         5522            37136 #> 601           64565   544275       50512        13900             1644 #> 602           80600   223430       68060        12571            26412 #> 603          123884   313159       11642         1186            14249 #> 604          108817   336026      101482        14300           -26835 #> 605           43354   141617       39852            0             4234 #> 606           83602   401129      172205        31634            24836 #> 607           14978   422701       41471        17163            13283 #> 608           69523   242494       63064         4799            27954 #> 609          221773   381236       52436        13747            16958 #> 610           45955   141026       51330            0             5618 #> 611           99643   519701        6032        21348             4076 #> 612           25731   238304       48537        13219            21992 #> 613           79473   148693       46870        10922            12460 #> 614           81080   347819       66024         2602            44819 #> 615          133558   132691       17905        12187            13387 #> 616          128530   217868       24326         3079            22334 #> 617           61900   311617       87133        11067            20840 #> 618           70828   509355      102062         9981            36379 #> 619           99385   377135      195147        24563            15360 #> 620           98011   355250       82463         7938            20998 #> 621           63284   231508       84317        11013            12272 #> 622           96927   439878       13629        15220           -14768 #> 623          126114   198304       63780         6478            23217 #> 624           60338   240484       65661         6082            14636 #> 625          167630   655163       47075            0            11375 #> 626          192663   596058      100994        14347            10149 #> 627           53061   277358       15268        14822            16909 #> 628           48215   361234      125960         8526            32463 #> 629           89574    15707       23990            0           -77180 #> 630          288686   933724       64296         5051            46374 #> 631           39983   146235       33172         4791             -591 #> 632           32682   381208       14521         6663            16749 #> 633           23779    33000        8268         4968             9047 #> 634          205505   595836       30861        17971             6780 #> 635           49279   342731       44397         6072             1370 #> 636           21262   100408       23777         1760            17630 #> 637           97974   465436      102353        23888            14417 #> 638           78972   184735       27778        15125            11857 #> 639          123388   709929      244141        14015           124169 #> 640          108249   193189       32013         2538            14994 #> 641          197885   447519       87439        10293           133439 #> 642          294982   763019       15764         5715             5478 #> 643          153874    31086       33388            0             1522 #> 644          216995   403475       52368         4130            18144 #> 645           27298    14700           0         2219            10033 #> 646           48251   121691        4951         3268            17330 #> 647           19600   342857       55649        20412            31365 #> 648           81878   234311       45951        14287            39009 #> 649          161096   484726       98937         6488            76902 #> 650           41016   109897       22350        10736             -117 #> 651          260455   672685       54668        10269             1632 #> 652          133253   457911       36279         8164            25383 #> 653           55192   188415       67864        25428             9650 #> 654          140100   526880      139791        15490            49162 #> 655          256758   742052      144234        32601            51862 #> 656           94218   458218       41230         5010            45156 #> 657          131454  1258288       61523         6947            19517 #> 658           50507   307281      101219        23580            23703 #> 659          153159   117184       60400        10368             6407 #> 660            4740    17031       15819         3467            -4475 #> 661          223362  1044544       79017         4174            16989 #> 662          140587   470861       39624         7261            16850 #> 663            9724    89551       10905         8392            19406 #> 664           23628   287793      105047        20489            27048 #> 665           48658  1023576       80386        10133            31154 #> 666           37861   654635      171904        26781            23712 #> 667          110368  1463965       99784        18286            39814 #> 668           56097   317992       85442        19198            98282 #> 669          558892  1244897      232428        20672           -25628 #> 670          239735  1703267       28376        14471            70394 #> 671           27509   434904       74947        27685            30562 #> 672           50397   556820       79133        25003            15131 #> 673          253715   215123       30298         4934            51232 #> 674           53246   506085       45749            0            -2361 #> 675           79899   809507       49434            0            27025 #> 676         1158280  4236793       50755         5794           117418 #> 677          163431   638999       77871        20722            33167 #> 678          396291  1490007      477447        11636           172418 #> 679           89277   432447      129752        14352            42334 #> 680           64498   239435       64925        10344            76016 #> 681           88907    47560       19241        19029           -23305 #> 682          316503   449758       72810        26037            17574 #> 683          159165   578491       95305        12673            86803 #> 684           34286   164810       26521        18734            14310 #> 685          172787   699257       67042         4373            11849 #> 686          164562   594560      229390        22344            18180 #> 687          401038   674277      220433        14377            47282 #> 688           49229   141360       45428         8110            23202 #> 689          176687   780257      204909        27578           132069 #> 690          181129    81030        3989         2713            48806 #> 691          242950   293799       83278         9044           -19755 #> 692           86343   581679      207340        77762            24238 #> 693          148317   432567       43590        13667            48756 #> 694          457227  4033911       53800        10933            77759 #> 695           91190   200361       88683        12183            30660 #> 696          179277   331584      194685         8708            19275 #> 697           72122   389910       55240        68668            18363 #> 698           84193   403962      117727        30366             1068 #> 699           15414   124027       54353         7461             8067 #> 700           95178   630973       86507         9057             5722 #> 701          133402   345407       68706        15199            36403 #> 702           34814   112486       38453         6062             1616 #> 703           39682   185437       55920        16182             5296 #> 704           95317   419468      115059        23543            39595 #> 705          417203   420786       91360        22919            17166 #> 706           63850   228380       44513        16578            50007 #> 707          177144   968454       96634        23499           188678 #> 708           26414   217456       52378         7358            27527 #> 709          284695   481864       89276         1754            51868 #> 710           11941   171721       80098         8461            19428 #> 711          287773   649651       90072         8559             9384 #> 712           90732   406335       35957        75214            74708 #> 713          551816   775557      115186        18907            21028 #> 714           16131   145037       16642        51342           -66205 #> 715          109008  1415708      171407        86277            98703 #> 716           85207   328721       10037         1535           129644 #> 717           83760   844306       61783        11303            22015 #> 718         2266035 15382214      751130        33853           631320 #> 719          279969   851472      132463        26835            63716 #> 720           92079   112765       21815         2565            12711 #> 721          163752   606442       79383         3188           -12229 #> 722          277592   487102      100184         6058              312 #> 723         1101067  1042736      269172        19849            77458 #> 724          716073  1569768       88346         9068            45077 #> 725          195677   606335      391580        24708            51968 #> 726          643624  1634916      208107        29965            -1817 #> 727           51104   244054       35705        14434             6864 #> 728          520015   906841      244750         6251            50127 #> 729           84098   389309       75577        33254            26087 #> 730          144951   322311        7863         1251            15044 #> 731          374820  2849751      260175        15097            43367 #> 732           84261   537844       78476        94841            40637 #> 733          333331   860027      179128        21953            68095 #> 734          401971  4969838       75391        40848            53069 #> 735           58379   282497       88810         9055            40097 #> 736          253391   427609      175116        31573            35159 #> 737          618416  2743389       91679         6261           -37652 #> 738          181525   363910      145190        15748            43905 #> 739          219504  2130423      197057         8717            14839 #> 740          208127   677497      278161        43821            94731 #> 741            7424    37452       27788            0             4724 #> 742          964025  2174636      225368        32995           232242 #> 743            8802    61225        6791        41942             4131 #> 744          634435  2271177      226205        19880            15286 #> 745           22554   121389           0         6823            23267 #> 746          115523   331569       42587        28751            31702 #> 747          107130  1206118       31665        16371           176879 #> 748          269241   488700      132087        23811            39805 #> 749          399262  1797318       95029        16814            32296 #> 750          152689   671265       33526        15025            31106 #> 751            4567        0           0          227            -1185 #> 752         3063818  3317081      898092        18614           110441 #> 753           13550    23562       19496         6478           -19533 #> 754           44069   184884       78016        11540            29682 #> 755          510336   825910      123387        19735            79467 #> 756         1582260  5732893      212561        37486           149761 #> 757          264474   617284      131582         2750           -67414 #> 758          565123  1607361     1048056        25666           -25484 #> 759          641749   293158      166475        21402           130159 #> 760         1075859  2335678      173899        15180           194674 #> 761         1075859  2335678      173899        15180           194674 #> 762          169606   629604       51459        13069            27476 #> 763          261186  1150159       79351        30450            47572 #> 764          528694  3637876      181020         2498            78630 #> 765          410901   196104       50511         6722             9641 #> 766           96207    46976       22389         5969            11676 #> 767          211191  1374454      136791        16318            94411 #> 768          981314  3050326      760807        53895           124122 #> 769          123084   724751       86835        11897           -95659 #> 770          135504   679008      140075        17524            31570 #> 771           58083   270542       74961        11689            43582 #> 772          193195   978425      652380        67266            -5257 #> 773           51753   496381      148160        35345           126312 #> 774         1205941   677857      126213        12331            70841 #> 775           58906   306509       96093        26367            44588 #> 776          617727  5001441      225607        50244           223567 #> 777          673448  1777527      415627        60627           116583 #> 778          704983   687910       63481        25930           -43078 #> 779          162358    91158       23327         5850             3577 #> 780          359573   985449      146871        30258            30445 #> 781          618873  1271693       96672        10412           175882 #> 782         1548145  6426185      316635        39319           402652 #> 783          268098   403919       62842        19589            -2226 #> 784           60612   387079      114814        72221            57299 #> 785          369156   566809      136136        26335             4992 #> 786          149011   783668      299365        64366            46622 #> 787           51048   282959       23328         9318            87907 #> 788           52980   365653      112388        25855            92661 #> 789          451525  1712797      144114        19983            58149 #> 790           51852  1011180       14991         4588             5905 #> 791          122813   102186       14393         6396            34626 #> 792          580304  2630940       79569        21698           128675 #> 793         1706670  6502885      165418        43204           323623 #> 794          206745   658733      127925        90849           184394 #> 795          469917  2052085      219703        29924          -234691 #> 796           96885   543952      123349         3808           209447 #> 797          605264  1861824      171833        31159            30049 #> 798         3601182  6841432      765972        21789           235332 #> 799           38901   138135       28123        14151            41076 #> 800          836229  2503513      401360        65850           238135 #> 801          100068   338949      115252        31843            65309 #> 802         1030290  1900027      212215        59788            83216 #> 803           55842   355809      114519         4467           -41163 #> 804          483738  5359376      263110        46761            42683 #> 805          681430  2139970      757516       168928           228348 #> 806          635221  2901907      414045        58822            48779 #> 807           50118   213753       18440        18176            63004 #> 808           69761   246591       61300        38683            11073 #> 809          372779  2715834       37498        18729           131520 #> 810          554239   349516       31858       135941            27771 #> 811          721298  2452911      454464        61106           744375 #> 812         1390330   294391      267725         4377             1796 #> 813         1285092  3484626      296944        69994           222104 #> 814          557403   200677       79031        19825             1599 #> 815          664008  2251217     1372449        35006           141038 #> 816          157050   716395      211631        51775           153038 #> 817           98071   987200      139548         4258            46563 #> 818          154720   543126      117059         9916            12039 #> 819          121293   467437       77419        55864           130981 #> 820          130280   389181       67675        76502            75346 #> 821          562120  2104339      505078       109414           272885 #> 822         3057183  6677418      773365        64264           862586 #> 823          666197  7826119      638451       140903           327230 #> 824          910463  1678055      212369        68767          -251798 #> 825         1409861  3046552      305080       215771           470413 #> 826          669225  1092903      196189        56534           214187 #> 827          280751   685837      216323       108252            61533 #> 828          489841  2499461      657603       141529           209172 #> 829         1992183  1101805      244377        53359           215760 #> 830         2404310  9115585      775829       199391           878802 #> 831          304181  1685663      810960       115725           330227 #> 832         1803136 13230758     1213615       302198           574246 #> 833         2809802  7340888      840208       265963           666685 #> 834         1627156  8135185      387482       378927          1207056 #>     FINANCIAL.OUTCOME GROSS.PROFIT NET.PROFIT #> 1              -18931         9218       6338 #> 2                 -60         -830       -830 #> 3                 706        -5727      -5727 #> 4               -6625         -944       -685 #> 5              -25480         2580       1496 #> 6                 725        16450      10692 #> 7              -13442        -7753      -7753 #> 8                  -9          234        152 #> 9                 281          664        432 #> 10                  0         3117       1955 #> 11                500         1047        857 #> 12                999        10703       6957 #> 13               1218         1203        782 #> 14                 89         5205       3307 #> 15                -43           -5        -14 #> 16               2165          600        390 #> 17              -5028         1947       1272 #> 18              -2741         1142        742 #> 19              -3563         1178        771 #> 20              -2817          263        107 #> 21              -3353          594        386 #> 22               -387          491        319 #> 23             -11552       -12615      -8200 #> 24              -1324        10682       7141 #> 25              -1013         2589       1683 #> 26                 15         2822       1834 #> 27               -212        -5074      -5074 #> 28                 30        12866      12866 #> 29             -18660        26007      26007 #> 30               -983        -3045      -3005 #> 31              -4882         1116        726 #> 32               1336         1448        963 #> 33                 75         1614       1049 #> 34              -3179        -2114      -2114 #> 35                838        11771       7651 #> 36               -145        -8281      -6481 #> 37               2819         7855       5134 #> 38               1072          615        448 #> 39              -3573        -1006       -654 #> 40                -58         1561       1561 #> 41             -32081       -17643     -17643 #> 42                -28       -14806     -14806 #> 43              -2574         5546       3642 #> 44              -2555          207        134 #> 45               -242        -1542      -1520 #> 46             -24580       -13393      -8750 #> 47                -15         5584       3647 #> 48              -4514          411        411 #> 49              -6960          882        882 #> 50                 83         3253       1991 #> 51               -866          147         95 #> 52               -799         -193       -125 #> 53                  0          452        312 #> 54               1301          992        992 #> 55             -12682         1953       1269 #> 56               -888        -2988      -1028 #> 57              -4338        -2700      -1755 #> 58                488         2985       1940 #> 59              -4298         1402        911 #> 60               1941         2364       2364 #> 61              -2956        -2956      -1921 #> 62                844         4052       2633 #> 63               -950         2011       1307 #> 64              -7615          141        141 #> 65               1984        13600      10127 #> 66              -6830         1852       1180 #> 67              -3478         2823       2823 #> 68              -5091        22389      14552 #> 69               1711         3512       2342 #> 70              -5661         1723       1163 #> 71              -3754          298        193 #> 72               -802         1218        759 #> 73              -2039        -5684      -5684 #> 74               -137          250        182 #> 75              -6658         1909       1240 #> 76              -1103          262        184 #> 77              -2622         2862       1903 #> 78                733         1207        933 #> 79              -3970         3221       2197 #> 80              -5833         3896       3968 #> 81                130          253         91 #> 82              -4555         1815       1180 #> 83              -3344         2705       1758 #> 84               -175        -3095      -1798 #> 85                290         1305        863 #> 86               1419        17952      11669 #> 87               1727         4157       2702 #> 88               -830         1970       1280 #> 89              -4290         2415       1569 #> 90               2207        10321       7444 #> 91                 -1         1268        922 #> 92              25246        31565      31501 #> 93              -5119        21626      14126 #> 94               -161         5159       3688 #> 95              -9293        -2111      -1372 #> 96               -976         1308        905 #> 97              -1379         3100       2424 #> 98               -829          402        261 #> 99              -3777         7296       6450 #> 100             -5253          677        440 #> 101             -1722          818        576 #> 102             -7407       -23570     -23570 #> 103             -9697         4408       2873 #> 104               -11        -1274      -2726 #> 105              -334          833        541 #> 106              -360          137         -9 #> 107             -2303         -146       -303 #> 108             -4652        16371      10341 #> 109             -1296         1464        951 #> 110             -1306        -6665      -4332 #> 111               787         8806       7463 #> 112             -5626          442        420 #> 113              1989         9623       6298 #> 114               528         1506        979 #> 115             -3213         7323       4883 #> 116            -26631         5862       3881 #> 117             -6560         1325        945 #> 118             -4407        -4590      -4590 #> 119               219           52         33 #> 120              1299        -2127      -1382 #> 121              -753         6166       4008 #> 122              -219         1363        886 #> 123             -9374         -369       -240 #> 124              -604       -15422     -15422 #> 125            -14605         4058       2638 #> 126              -831         -983      -1014 #> 127             -4066        -2739      -1792 #> 128              -292         9902       6436 #> 129             -1921         2346       1433 #> 130             -4194         1941       1262 #> 131              6200        19820      12910 #> 132              2936           10         -8 #> 133                 1         3670       2402 #> 134             -2182         1480       1070 #> 135             -3209         3399       2353 #> 136            -12225          743        483 #> 137               -36          181        181 #> 138               656         9403       6186 #> 139             -6020        10332       6715 #> 140               362         -328       -213 #> 141             -2454       -15203       1131 #> 142              1629          961        614 #> 143             -6145          454        260 #> 144             -3849        -2616      -1818 #> 145             -3045         7659       4979 #> 146              1391         4769       3218 #> 147              5617          324        210 #> 148             -1370         2206       1310 #> 149             -9168         3789       2463 #> 150             -1052         1642       1133 #> 151              -231         2054       1478 #> 152             -8191          968        748 #> 153             -9227        -3223      -3223 #> 154             13415        39073      25412 #> 155            -28133       -26236     -30768 #> 156              8342         7518       4757 #> 157             -1505         2497       1623 #> 158             -2104          272       1768 #> 159             -3184         6140       3991 #> 160             -3184         6140       3991 #> 161             -3524       -11884     -11884 #> 162             -5174        -6236       6860 #> 163             -1420        11538       4896 #> 164               272          461         40 #> 165             -1596         1795       1166 #> 166              -947          799        519 #> 167              -425         1291        839 #> 168             -6199         1035        985 #> 169             -2581         -268       -469 #> 170             -1025        -6454      -4195 #> 171             -6429        -4936      -3208 #> 172               108        13899      10590 #> 173             -7639        -9092      -5910 #> 174             -3252         2919       1983 #> 175             -1398         6062       3940 #> 176             -3250         4038       2624 #> 177            -37069         1022        755 #> 178             -2787         2765       1797 #> 179              2378        26067      17119 #> 180             -2060         1267        833 #> 181             -2101          254        254 #> 182            -13227         5622       3739 #> 183             -5859         4291       2789 #> 184             -2323         3245       1955 #> 185             -6339          883        598 #> 186             -1668        -1607      -1044 #> 187             -6173         1715       1715 #> 188             -6393         7179       7179 #> 189             -5206         2367       1613 #> 190             10396        24618      16071 #> 191             -3380        -1037      -2510 #> 192              -425         2631       1896 #> 193            -19502         1964        758 #> 194             -5522          530        344 #> 195             -8433        -5662      -5662 #> 196              1523        19701      12922 #> 197             10230        58506      38103 #> 198             -2676         -125       -125 #> 199             -6836         6113       4021 #> 200              2070         2772       2086 #> 201             -2055          572        388 #> 202             -2309        -4189      -1847 #> 203              -643        -4308      -4308 #> 204              -845           96         62 #> 205             -2256         2498       1623 #> 206             -1707          334        216 #> 207              -295         1800       1390 #> 208             -1751           24         24 #> 209              -236        -3424      -3424 #> 210             -2948        18360      11934 #> 211               694         4002       2878 #> 212             -1745        10461       6814 #> 213            -22856         7602       4991 #> 214             -3538         1001        651 #> 215              -589        41300      26846 #> 216             -3006         4122       4122 #> 217            -12698         2007       1304 #> 218             -3527        -2541      -2541 #> 219             -2108         8920       6093 #> 220              -253         2636       1713 #> 221             -1324        -2236      -2236 #> 222             -3814        11507      11507 #> 223             -5274         2580       2387 #> 224            -17772         -451       -526 #> 225             -6890         1524       1925 #> 226             -6827         2503        834 #> 227             -2072          451        164 #> 228            -13739         6888       3563 #> 229            -17339        12405       -109 #> 230             -3992         2479       1611 #> 231             -6525         1966       1278 #> 232              1245          497        497 #> 233             -9830          857        662 #> 234             -1116         4286       3966 #> 235             -1763         3122       2404 #> 236             -6429        -1882      -1882 #> 237              -412         6493       4875 #> 238             -8646         7104       7104 #> 239              -719         3138       3138 #> 240             -2113          270        101 #> 241              1864         1270        857 #> 242             -5777          630        197 #> 243             -6805       -13864      -9019 #> 244            -22481         7676       7676 #> 245             -1133         6794       5033 #> 246             -1009          384        254 #> 247             -2205         1033        671 #> 248            -14733         8472       5837 #> 249             -2191         3007       1984 #> 250             -2194         6483       4441 #> 251            -22045         4495       2922 #> 252             -1689         8826       6064 #> 253             -2050         9747       6349 #> 254             -1120         1120        728 #> 255             -2194         4548       3511 #> 256             -4462        -1177       -765 #> 257             -1291         1475        801 #> 258             -5131         2889       1910 #> 259              -581        -4645      -4645 #> 260             -2010          719        556 #> 261              -481         2591       2506 #> 262              5292       135222      87894 #> 263              3556         3659       1706 #> 264                 2         3147       2296 #> 265            -35048       -15209      -9669 #> 266              -799          213        138 #> 267             -7559         1517       1067 #> 268            -11332         1246       1246 #> 269              -593          158         81 #> 270             -2825        -3662        724 #> 271             -6587        -7975      -7470 #> 272             10143        14456      14456 #> 273                89        -1088       -720 #> 274             -2352         1788       1162 #> 275                43         -194       -194 #> 276              -893        11202       7809 #> 277               986        10351       6973 #> 278             -4012        -3198      -2078 #> 279              6948        16850       8832 #> 280             -2556         1560       1014 #> 281             -3979        -9380      -9380 #> 282              1366         5550       3694 #> 283             -5033        -5033      -3271 #> 284            -20340         8642       6416 #> 285             -4267         -783       -783 #> 286             -1602         1444       1444 #> 287              1652        13700       9547 #> 288              -357        -2466      -2466 #> 289              1966        34556      22554 #> 290             -5048        17756      12241 #> 291              -751        14965      10040 #> 292              -575         3999       2599 #> 293               945         6313       3885 #> 294             -3046         1041        980 #> 295             -5181         3293       2300 #> 296             -5220         -229       -229 #> 297             -6259         3870       2600 #> 298              -945        -1565      -1017 #> 299            -21390         2615       1700 #> 300                17         2953       2003 #> 301             -4509        17347      11913 #> 302             -2511          223        223 #> 303             -2257         4892       3347 #> 304             -2459         1931       1491 #> 305             -1354         2692       1873 #> 306             -8324         1931       1338 #> 307              -932        -5486      -5486 #> 308             -1357         -694       -694 #> 309             -9960        20735      20735 #> 310              -409         8153       5299 #> 311             -2608        -6482      -6852 #> 312             -2059         1188        809 #> 313             -1059         5500       3565 #> 314            -10408         3008       2307 #> 315             -7471         6499       4388 #> 316             -2760       -10325     -10325 #> 317            -15318       -11064      -7191 #> 318             -5181          772        597 #> 319             -5559         3307      36535 #> 320             -8268         8170       8170 #> 321             -1429        -2170      -1410 #> 322             -7321         4217       3136 #> 323            -30848        11696       8219 #> 324               -69        14835       9486 #> 325              -612         7994       7800 #> 326            -11058          762        713 #> 327             -4329         5076       4778 #> 328               349        -1731      -1731 #> 329              7551        35342      24033 #> 330              1110        13965       9102 #> 331              3091         8138       5615 #> 332              -346         3072       2012 #> 333             -1307         3790       2463 #> 334             -3472       -21647     -21647 #> 335             -2820        23258      15051 #> 336              6847         2957       1807 #> 337             -2211        12720       8460 #> 338             -2937        -1445       -939 #> 339             -5788         2930       1904 #> 340               118        -2407      -1197 #> 341            -17593        10436       6521 #> 342            -15018          532        411 #> 343             -7188         5162       3395 #> 344             -2298        21661      14097 #> 345             -4073         4175       3203 #> 346             -3237          612        398 #> 347              -881        11683       7706 #> 348              1789         8454       5342 #> 349            -13767       -22392     -14554 #> 350             -1616       -10469      -6805 #> 351              8183        27399      17894 #> 352            -23126         3671       2563 #> 353             14409        11534       7712 #> 354             -9026         1713       1113 #> 355            -11221         4469       2164 #> 356             -3899         1157       1157 #> 357             -7919         6371       4325 #> 358             -3506         4582       4582 #> 359             -7397         2970       2190 #> 360             -5242        14353      14353 #> 361             -3898        -3598      -1119 #> 362             -5974         1098        905 #> 363             -9568        -8514      -9597 #> 364             -5896         1474        949 #> 365              1903        21291      13840 #> 366              -441          971        631 #> 367             -8107         6888       4477 #> 368             -1707         9609       6595 #> 369             -8857          380        -82 #> 370             -5186         9526       7026 #> 371             29617          528        538 #> 372               762         6606       4371 #> 373               215        -7893      -7893 #> 374                 9         3561       2519 #> 375             -5033         5329       5329 #> 376              -191        24437      15922 #> 377            -11437       -32782     -32782 #> 378             -1562         5267       3235 #> 379            -10530         3745       2687 #> 380             -4393        -2469       -492 #> 381             -7961         1125       1125 #> 382               171           24         24 #> 383             -3641         4483       2914 #> 384            -11729         5736       3728 #> 385             -3000        16225      10221 #> 386              -568         6433       4596 #> 387             -5762         4427       4427 #> 388            -31908         5698       4994 #> 389             -1299        -1613      -1613 #> 390              2320         6710       4583 #> 391             -3834        -1643      -1643 #> 392            -15735         4545       2489 #> 393             -4534        -3721      -3148 #> 394             -4606        -2169      -1422 #> 395             -8213         7241       4781 #> 396                 6          -62        -62 #> 397              -635         2632       1711 #> 398             -1862       -21607     -21607 #> 399             -2715         2672        224 #> 400              -229        -4358      -4358 #> 401             -2031         7010       4621 #> 402            -12749         1017        302 #> 403            -12414        34053      22184 #> 404             -3448         2954       1697 #> 405             -7146        20718      13653 #> 406             -9551         1661       1353 #> 407             -4356         2621       1708 #> 408             -2207         5358       3667 #> 409             -9954          433        433 #> 410               566        18868      12662 #> 411              -830        12977       8661 #> 412             -6671         5370       5370 #> 413             -5588        -3718      -3792 #> 414              -459         2124       1343 #> 415             -1570        29714      19697 #> 416             -4941          461        193 #> 417             -1168         4248       3281 #> 418             -5823       102949      66917 #> 419               406        11512       7483 #> 420               782         4641       3585 #> 421             -6294         2260       2260 #> 422             -1238         3027       3027 #> 423              1982         9726       6495 #> 424             -8175           16         12 #> 425              1245        20021      13147 #> 426             -1500        -9474       9474 #> 427             -3270         4946       3103 #> 428                17         3069       2038 #> 429             -1600        -9558     -11278 #> 430            -16578        32324      20538 #> 431             -7182          282        127 #> 432             -3832         8523       5629 #> 433             -7340       -14676      -9631 #> 434              -417         3310       2441 #> 435             -3471          838        322 #> 436            -34757        32709      21304 #> 437             -1349        -2019      -2019 #> 438             -4830        -8809      -5726 #> 439             25782        44982      30340 #> 440             -6283       -12676      -8239 #> 441             15171        22219      14463 #> 442               499        18631      13358 #> 443             -4403         -662       -430 #> 444              -224       -25710     -25710 #> 445             -1101        47450      30832 #> 446             -3482         6544       4809 #> 447               -88         3934       2951 #> 448            -20191         3562       2757 #> 449             -1036         5038       3275 #> 450             -1604         2371       2371 #> 451             -8442         4506       3166 #> 452             -8481         1918       1246 #> 453               136         2755       2192 #> 454               941         4152       2698 #> 455            -18832         3455       1326 #> 456             -3658         9474       6453 #> 457              -683         1069       1069 #> 458              6744        36244      23498 #> 459             -4729        -5324      -3461 #> 460             -3036        30161      20066 #> 461             -5994         1895       1219 #> 462             -6208        27147      17645 #> 463              1060         9003       5885 #> 464             -9185         -725       -471 #> 465              3479         9626       7478 #> 466            -16981        37251      22965 #> 467             -1996          244      -1592 #> 468              1516        12050       9166 #> 469             -5887         4869       3823 #> 470            -16894         3743       3014 #> 471              2689         7113       5245 #> 472               -29         3414       2388 #> 473              4034         8471       6093 #> 474            -23403         6237       6237 #> 475            -43524         7208       4685 #> 476             -1107         1605       1043 #> 477            -11526        18502      11346 #> 478            -22785         2718       1767 #> 479             -4799         -858      -1364 #> 480              1252         3496       2532 #> 481            -32380        34359      22094 #> 482            -17480        -4201      -2730 #> 483             -4862        15224      15224 #> 484               256        -5558      -3612 #> 485            -11971         2718       2127 #> 486              3805         5484       3516 #> 487             -2274         1328        979 #> 488              2062          483        367 #> 489            -17695        20013      14068 #> 490               771        21312      14074 #> 491             -2524        33448       9058 #> 492                 0         -166       -166 #> 493              -795         3350       2177 #> 494             -4723       -17628     -17628 #> 495            -37473        40493      24867 #> 496             -6458       -34465     -34465 #> 497             19203       116693     116693 #> 498             -4128         1190        933 #> 499             -5867         4928       4238 #> 500              4124        20116      14456 #> 501             -5319         3575       2372 #> 502              -110        12196      12196 #> 503             -8656          733        733 #> 504              -465         4878       3639 #> 505             -1211         3935       2821 #> 506             -4558         2109       1718 #> 507            -29890         8813       8813 #> 508             -3773         3165       3165 #> 509            -27702        14273       9277 #> 510             -3177         6004       4591 #> 511             -5558        57394      33082 #> 512             -2807        21662      14574 #> 513              2990        30645      19919 #> 514             -7174         3159       2261 #> 515             -3616       -11492     -11492 #> 516             -4925          935       3626 #> 517            -10759        12305       9070 #> 518             -2027        26907      18612 #> 519              3504        13584       8919 #> 520             -8497        32008      22390 #> 521             -4755          328        328 #> 522            -31042         3800       2819 #> 523             -2949        12715       7372 #> 524             -5124         5703       4503 #> 525              1558        18802      12374 #> 526            -17580       -14752      -9718 #> 527            -12947         2772       1912 #> 528             -9370         7498       5093 #> 529            -28732         5507       5507 #> 530             -4057         1894       1216 #> 531            -10164         7215       5020 #> 532             -7413         5174       5664 #> 533             -4616         6457       5292 #> 534               165         7474       5773 #> 535              -411          906        589 #> 536            -20540         8899       6645 #> 537             -7324         1290        838 #> 538            -13603         1610       1345 #> 539             -9271         4775       4842 #> 540              1439         7667       6413 #> 541             -3836         1365         56 #> 542             -6584       -24870     -24870 #> 543            -49872         1236        782 #> 544               590         4521       3085 #> 545             -1052        -1929      -2543 #> 546            -10750         6228       4654 #> 547             -6714         1732          8 #> 548             -5213        -8542      -8314 #> 549            -11721          383        283 #> 550              7370        52031      47181 #> 551             10061        10690       8579 #> 552             -2026         4977       3844 #> 553               707        42671      30143 #> 554             -1898        28368      18439 #> 555             -7494        28070      18245 #> 556               237        -2804      -2282 #> 557            -14488        15189      11341 #> 558             -4356         3639       2372 #> 559             -7672         7518       7141 #> 560              5201        17372      11285 #> 561             58697        58624      38248 #> 562            -11787         1562        920 #> 563            -16214        12005       7803 #> 564            -16841         1402         84 #> 565              -514         9418       5218 #> 566             -6057        11385       7536 #> 567             -5489        29878      20669 #> 568             -3469         2359       1526 #> 569             -3132        12096       7893 #> 570            -26534        24562      14931 #> 571              3133         8839       6470 #> 572            -17572        42811      27079 #> 573            -15705         2200       2200 #> 574            -13357        28841      18795 #> 575             -2978        -1618      -1618 #> 576            -10855         8292       6265 #> 577             -9247        15711      14326 #> 578             -3710         2383       1549 #> 579            -23641         4815       2779 #> 580              -663         4209       4209 #> 581             -5534        15075       9816 #> 582            -17430        25088      16365 #> 583              1923        79472      53109 #> 584            -15319        55344      34229 #> 585            -19948        12560       9214 #> 586            -12860         1165        859 #> 587            -17538         1189        773 #> 588             13451        25814      16779 #> 589              5389        12510       8474 #> 590            -14944         1350       1350 #> 591               319        17199      11179 #> 592             -9538         3361       2162 #> 593             -4388         4423        467 #> 594             -5078        12710      10924 #> 595              3735         9746       4685 #> 596            -15361         1710       1710 #> 597             -1526          -17        -11 #> 598              1958         6634      -6634 #> 599            -24253        13973       8903 #> 600            -39165        -1648      -1648 #> 601              6658         8511       5532 #> 602             -7239        19247      12465 #> 603              -651        12765       8364 #> 604              3363       -23421     -23421 #> 605            -10202        -3471      -2609 #> 606             -5331        23635      20753 #> 607             -7121         6950       4903 #> 608             10993        11858       7708 #> 609            -15230         1977       1977 #> 610             -8515        -2896      -2896 #> 611                27         2555       1918 #> 612             -4302        10755       8351 #> 613            -12250          813         87 #> 614             -2040        42779      29942 #> 615             -9112         4274       2912 #> 616            -17021         5313       3238 #> 617             -4166        19310      14129 #> 618             -6481        29448      23837 #> 619             -7181         2300       1603 #> 620             17815         4518       3333 #> 621             -5775         7846       7717 #> 622             13233         5549       4363 #> 623            -22295         2543       2006 #> 624              -182        15041      10001 #> 625             -7367         2813        908 #> 626             -9963         1341        882 #> 627             -8102        14359      14204 #> 628              5114        37762      25049 #> 629               -56       -77237     -77237 #> 630            -54955        -8580      -5577 #> 631              5694         5103       3321 #> 632              6598        24280      18446 #> 633            -11465         -202      -2620 #> 634             -6871          270        175 #> 635               500         2120       1378 #> 636                25        17655      11896 #> 637            -10907         8034       5830 #> 638            -10930         4444       3044 #> 639              3644       127769      84207 #> 640            -12750         1989       1292 #> 641             -7987       125848      81801 #> 642             16935        28413      18417 #> 643              -245         1277        830 #> 644            -13007         6636       5206 #> 645               170          756        756 #> 646             -4887        12442       8087 #> 647            -17741        11747       8391 #> 648             -8634        30252      19664 #> 649             -9724        75424      47958 #> 650             -4552        -4669      -4669 #> 651              1925        13318       8397 #> 652             -3768        22102      15129 #> 653            -12223         2034       2034 #> 654             -3678        34169      23956 #> 655            -18761        33101      29215 #> 656              -409        44746      31810 #> 657            -15067         7234       7234 #> 658             -6383        15478      11992 #> 659             -1897         4500       2925 #> 660                42          402        390 #> 661             -8291         8698       5697 #> 662            -14035         2814       2486 #> 663             -4005        15565      13457 #> 664             -9947        17028      13065 #> 665               603        33340      21671 #> 666             -9077        15630      15630 #> 667            -12108        29594      20246 #> 668           -117116       -52326     -47149 #> 669            -18298       -41317     -41317 #> 670            -19134        51358      34265 #> 671            -15052         9836       8192 #> 672             -3541        25714      25714 #> 673              -746        -3151      -3151 #> 674              3590          965        745 #> 675            -18014         9010       5857 #> 676             11313       129989      84493 #> 677            -15971        19732      19732 #> 678             12701       185427     120726 #> 679            -10842        31652      21221 #> 680            -84636       -29868     -29295 #> 681             -5434            0     -14477 #> 682            -12974         4600       3518 #> 683             20271       107138      75410 #> 684            -12669         3386       2850 #> 685             -6931         4206       3027 #> 686            -17244         1781       1157 #> 687            -24612        23221      15468 #> 688             -9487        13715      10127 #> 689            -88813        42841      29471 #> 690             12790        61596      40463 #> 691            -12753        12889       8170 #> 692             -2780        20714      15276 #> 693            -10923        42017      29753 #> 694            -60233        21722      21722 #> 695              3969        40781      27688 #> 696            -18156        12114       8514 #> 697             -6866        13673       9746 #> 698             -1366         2111       1372 #> 699             -5159         4909       3153 #> 700             -5224         1252        827 #> 701            -10226        28247      18360 #> 702             -7552        -5936      -3858 #> 703             -9969        -4673      -4673 #> 704            -19981        13619       9693 #> 705             -6651        10515       8123 #> 706             23071        74245      53712 #> 707              2588       196338     129582 #> 708              7508        35022      23569 #> 709            -30007        22511      14641 #> 710             -6220        12581       8301 #> 711            -17530        -4129      -2845 #> 712              4888        79589      54275 #> 713            -13808         5045       4339 #> 714             -5060       -46120     -46120 #> 715             -5164        91268      91268 #> 716             -3806       113345      75386 #> 717             -3555        18459      14427 #> 718            -52343       584640     385101 #> 719            -23018        41413      31424 #> 720              1889        20127      13002 #> 721             32881        20652      16313 #> 722              1121        19355      12704 #> 723            -61110        18714      12601 #> 724            -45994          310        224 #> 725            -26908        25060      16898 #> 726            -57318       -53677     -34890 #> 727             -3120         6025       1381 #> 728            -51706         5568       4052 #> 729            -18734         7557       4168 #> 730             -6722         9698       5387 #> 731              6002        60447      39574 #> 732            -22219        61498      52325 #> 733             18391        87030      57844 #> 734            -17695        35504      27427 #> 735            -32608         6759       4898 #> 736            -17402        14754      10067 #> 737            -28705        21791      14701 #> 738            -16470        99971      64981 #> 739             15604        31527      20492 #> 740             -7625        87729      66088 #> 741             20350        27541      23776 #> 742             10095       242337      99572 #> 743              -575         5891       3883 #> 744            -20389         8761       6577 #> 745             -4169        -5741      -5741 #> 746             -9759        21966      14278 #> 747             -5857       171367     116369 #> 748            -22561        14518      11213 #> 749             12916        34669      20861 #> 750            -18623        12470       6975 #> 751                96        -1086      -1086 #> 752             72507       182949     119482 #> 753              2049       -13546     -13546 #> 754            -29912         -230       -230 #> 755            -31677        31967      20215 #> 756           -116656        34053      25694 #> 757              2905       -64995     -66191 #> 758             47349        10986       7832 #> 759              8640       139484      97410 #> 760           -108965        61756      56770 #> 761           -108965        61756      56770 #> 762            -20760        28330      18414 #> 763            -21489        35873      29641 #> 764            -54962       -27029     -19400 #> 765             -8133         1508       1011 #> 766              1217        82749      79323 #> 767              4445       101333      69657 #> 768            -78943        53048      38506 #> 769            -39656       -13302     -13302 #> 770            -20962        10607       7146 #> 771            -27801        15780      11388 #> 772            -11407       -26170     -15477 #> 773               -11       126239      85003 #> 774            -12342        58345      38348 #> 775            -10337        34730      34730 #> 776              9683       224824     144871 #> 777            -46496        71839      55394 #> 778             13543        19079      16709 #> 779             -3504       123071     123071 #> 780            -17385        -3117      -4792 #> 781            -13505       167319     113592 #> 782           -143761       281283     215745 #> 783            -37128       -40580     -40580 #> 784            -17208        56278      47220 #> 785            -47779         4182       2839 #> 786            -36149        10504       6862 #> 787            -15492        72414      47304 #> 788            -35975        56214      37818 #> 789            -10334        72815      47155 #> 790            -10351         -580       -580 #> 791            -33322        12153      12153 #> 792             -9124        90468      59613 #> 793            -11710       299793     212456 #> 794              -249       182341     127280 #> 795             -4737            0    -239666 #> 796              6792       216961     143009 #> 797             38877         2564       2087 #> 798           -200310        35022      35022 #> 799            -30723        10352       8684 #> 800             39408       187752     129704 #> 801            -40566        19205      10377 #> 802            -33282        49247      34170 #> 803             33604        27406      17210 #> 804            -69248       254959     250284 #> 805            -56677       175412     115855 #> 806            -34323        18137      14773 #> 807             -2416        65272      46488 #> 808             -5359         5714       3714 #> 809             28777       169351     113918 #> 810            -52302         2470       1605 #> 811            108058       856268     561311 #> 812              -514         2121       2121 #> 813            -76394       137108     140758 #> 814             -7368         1170        883 #> 815             33270       174919     118182 #> 816            -17790       128472      83693 #> 817              1123        48186      31328 #> 818             -7225         4814       3712 #> 819            -53602        65842      33488 #> 820            -89906        61434      39810 #> 821            -82687       202053     202053 #> 822            -47012       743965     433780 #> 823             16064       368634     239068 #> 824            -59835      -301172    -301172 #> 825            -81434       388979     268796 #> 826           -117350        91528      59493 #> 827            -85028         9825       9825 #> 828            -10828       184402     116138 #> 829            -50907       163964     109971 #> 830           -357071       643512     474666 #> 831             11820       337251     221033 #> 832           -225585       322184     189148 #> 833           -273549       402390     272972 #> 834             21537      1267541     873843 #>  #> $xm #>      FIXED.ASSETS CURRENT.ASSETS      TREASURY UNCOMMITTED.FUNDS #> 1    -296404.0203   -554335.0815  -43776.32587       386292.6361 #> 2    -129059.6073    519982.8784   34556.05125      -743316.1083 #> 3    -152358.3864    346778.4328 -128590.86156       571453.3370 #> 4     336821.1260   -507185.1396  140575.91038       107596.2216 #> 5    -144779.9227   1117289.0512   15155.93719       318805.2989 #> 6     570247.6030    550907.1843  -15356.98800       -88330.8817 #> 7    -141320.6580   -300303.3298  -10183.57753       356498.3773 #> 8     145835.3719    -76753.3175   85833.51512      -350316.7319 #> 9    -483657.8124     76483.3162  -27188.22306       487442.2174 #> 10    221691.9682   2464481.5238    1678.55129       353753.1653 #> 11   -215264.8683    -73848.8939  180316.56190      -218255.9264 #> 12    294529.3556    -34449.0817   71671.07401       797111.3136 #> 13    -89484.1187   -295655.6411  112913.09650      -433294.5449 #> 14   -532853.3747   -766270.6938  -59267.62201       545873.2026 #> 15   -610360.0756    -55361.6945  -75600.09857      -962494.5893 #> 16    498773.4542    -73653.2894   34814.24745       284057.0900 #> 17   -233059.2090    489493.9668  116324.64439        70424.7390 #> 18    366574.7490    -97558.5912   17788.54799       -57202.0011 #> 19   -360575.3604    673342.7729  -75869.93914       784763.7072 #> 20    950400.8244     56055.3938  -54280.64378        21729.1075 #> 21   -540247.8556   -782797.5782   57276.24384      -517912.5651 #> 22    415547.0622    491816.7330   54044.89280       329480.9889 #> 23   -348146.5869   -332165.7976    5335.26027       223209.0803 #> 24    178517.0524   -794760.1749   77026.93147       453747.6611 #> 25    753541.8410    741857.5350   22474.79013       408855.6318 #> 26    190356.7561   -926679.9089  -96670.02010      -585683.2942 #> 27    461511.3839   1093934.1674  -92102.45252       -68603.7021 #> 28    238304.7436  -1084055.2415   62966.53900       889084.4442 #> 29     76325.4205   1223770.2486  -60412.71496     -1234065.2133 #> 30   -287480.0095   -618958.2677   54503.52220      -115420.8023 #> 31    305172.3222    870845.4237   79614.61048       123976.7038 #> 32    561433.1312    909005.9641   -3770.09187      -603170.0186 #> 33    408424.7995    249762.5291   19411.01415      -640097.9533 #> 34   -779465.9802   -121410.1893 -117401.18896       120076.9923 #> 35    154631.9026   -655596.0943  -60684.99939      -290825.1324 #> 36    209133.2228   -199370.2958  -20702.29513       623263.2548 #> 37      9591.1590   -387474.0892  139938.60616       533227.7649 #> 38     23564.0080    363570.8844   40185.81744       217550.3552 #> 39     59925.8076   -886835.5155  -16690.91422       573144.0723 #> 40   -843985.8934    -41988.6709  -81135.61279      -234583.3282 #> 41   -683231.0052    640871.9056    -520.20602       433781.1350 #> 42    675533.5238   -543936.7644   57770.57325       392658.7338 #> 43    545608.3887    777097.1023  -37836.21340       672695.2116 #> 44   -307274.3784     87445.0319   90315.68530       -61472.4377 #> 45    106945.5207   -153448.0045   24823.19120       458324.1324 #> 46    271774.9990    340829.2618  158132.42160        58138.4065 #> 47   -379779.1731   -111311.7361  -87979.22402      -621500.6073 #> 48   -277720.9061     61608.0473  -65682.58221        78891.0577 #> 49    192366.6876   -184836.2423   86794.48512       527119.9761 #> 50    514545.6526    205552.4908  -70613.39654      -274372.8421 #> 51     95575.5562    292311.4881   45550.38605       287173.5009 #> 52    713832.9411    728691.1242  -32141.69330      -192206.8849 #> 53   -667609.8767    351041.6593   34907.26933       742892.9504 #> 54    445434.7587    -45868.8664   -4760.48661       586483.7822 #> 55   -505290.6466    399963.2515  -17132.92473       801382.6069 #> 56   -467784.3937   -115962.8521   11655.37837      -475318.1879 #> 57    292222.3503  -1236151.0845  -65677.08628       658407.6210 #> 58     38593.9139    724986.0400  -11876.80071      -785596.4998 #> 59   -316868.2944    207743.4676  -49980.59666          415.6133 #> 60    -30494.2533    114786.5951 -102550.31385       275518.0449 #> 61   -185354.6621   1006304.8741   45776.68407      -845271.3398 #> 62    612797.0971   -293609.2046  -94484.22808       396375.1273 #> 63   -360548.5704    404170.3158  -66978.39687      -466454.5690 #> 64   -380069.4363   -430078.1940   37333.86925      -879117.4099 #> 65    117772.0044  -1147586.7923  120189.24531       536526.5965 #> 66    -51297.9309   -437035.6158   -4360.97094        78415.7792 #> 67   -122556.0745    438552.5805  -54991.37068      -594529.2160 #> 68    499915.1237    421570.8286  -51070.08956       712100.2511 #> 69   -505686.3816   -220468.7742    7229.60972       564042.9285 #> 70     87192.7234    -89820.5177   25507.57671       350996.2185 #> 71    270396.3214   -707841.6908  -86379.49081      -145041.3951 #> 72   -116999.5092    -24082.3402   66897.02672      -693000.4691 #> 73   -641320.7298  -1378124.3848  -13687.82093       478317.5568 #> 74   -844737.4946   -164634.6799  -89991.66095      -702333.6591 #> 75   -657557.1077   -906481.7503  -18115.82129       683157.7742 #> 76     70268.5304   -471608.9507  -82624.22877       367287.0519 #> 77     25884.2819   -338188.1545  -21219.79457       611548.3350 #> 78   -265345.3584  -1089722.4798   21239.57614       384274.5704 #> 79   -113604.5131   -334426.1236   80252.88558       241036.3914 #> 80   -272634.0701   -435372.2394  -34531.08753       322045.1091 #> 81    105699.1734   -867343.6923   51415.70954      -830780.8106 #> 82   -508247.6271   -825502.6126  -28766.50631       -41544.9213 #> 83    222006.2740    -24252.8072  -74207.55112       -57161.5730 #> 84     23953.1608  -1255320.3482  -68747.78329      -243143.3220 #> 85    384032.5193    390305.1022     456.82161       125618.6888 #> 86   -384130.9676   -768756.1687  217969.20200       948397.5597 #> 87     60980.3671    472167.1632   57998.59034       690683.6624 #> 88    390941.3437   -225434.0856  -27508.98805      1033360.9274 #> 89   -663642.5739     49072.6178  -37131.24764      -643296.4404 #> 90    465429.0756   1027697.4820  -23399.14644      -726606.2137 #> 91     76706.0018    172375.2670   15555.36874       518340.6114 #> 92    367254.6855   1066646.7574    8905.43134         7635.2837 #> 93     82612.2801    287568.7740  -29400.60363       128532.6399 #> 94    -49937.4703  -1475106.5138  111109.96326       113809.9165 #> 95   -786362.1733   -747606.2538   39855.91255      -120959.9395 #> 96   -539022.8445     -7244.8286   34210.24793      -329094.1223 #> 97   -760215.0287   -250661.8703 -171115.74490       196300.7324 #> 98    247201.4627   1272427.3125   81115.58099       554689.5190 #> 99    330541.5283    793313.4658 -116544.71949       328766.4981 #> 100    97970.2170    420411.4193  -12493.92733      -438295.7609 #> 101   445498.3260    364820.0541  -70009.77898        70939.5474 #> 102   105701.1248   1297203.6600   90004.13095       305144.0342 #> 103   -89388.9018   -132466.3100   50161.64971      -680632.5281 #> 104  -331044.9311   -127681.0125    -208.29386       344946.0580 #> 105    66594.5183    411132.2758  -21214.68680        94693.1194 #> 106   675968.8382     75420.3077   76530.39121        35243.2529 #> 107  1393161.6408   -418836.1497    3267.81934       283074.9345 #> 108   382987.4342  -1112808.6719  -62770.68857      -240896.6359 #> 109   268645.1959   1101412.5650   21352.50847       762623.0853 #> 110   -99442.6305   -737476.4508  112649.94802       190455.6713 #> 111  -341009.9370     75620.2018   50729.25357      -813109.7996 #> 112   214153.3071   -266431.8961   35627.34356      -314990.0619 #> 113     2076.2214    826767.5598   26065.70555        66873.1115 #> 114   433881.2390   -617246.6849  -50360.76622       -51132.6352 #> 115   202429.9544   -122912.7874  -60431.20097       284183.6010 #> 116   -84789.5421   -127429.2792  -18747.29114       348095.2519 #> 117  -299677.2883    900703.3018   89606.11627      -605767.5328 #> 118  -507595.4081   -488086.4855  -23799.03827       556705.4372 #> 119  -445955.0212    246376.4983   76108.57518       369055.9214 #> 120  -594506.5023    397703.8592  -99115.32154        46934.3560 #> 121   807575.5361   2457110.2678   74454.90627      -636459.8360 #> 122  -495030.1554   -674646.1528   54788.98516        12377.6388 #> 123   267150.7911    539660.8589     171.02520        82322.8803 #> 124  -831976.4516   1127178.4583   -1663.77028       -91490.1745 #> 125  -357002.2094   -691894.8257  162603.25223       741193.7027 #> 126  -208195.9917   -427529.1167   80886.71676       268658.5587 #> 127  -380890.2562    520758.1435    -288.21484       -66247.8932 #> 128   128885.1837    300743.4689  -91023.99876       361951.2452 #> 129   506327.7016    618769.4478   48249.85709      -484050.1311 #> 130  -406697.0662     19871.9141  133696.39955       582868.5941 #> 131 -1339778.8963    650957.3971   63186.61408      -239599.5386 #> 132   469663.3850    944740.5353   -1088.29424      -230181.3637 #> 133  -561883.2472   -853793.3068  -25129.62895        92688.0588 #> 134      487.7031    443888.6073   -7734.65436      -511943.5697 #> 135   234967.4067     15413.5395  -13171.04003       880671.0090 #> 136  -428729.0367   -590927.0171   18758.85086       -57182.6180 #> 137  -444453.9413    393521.6898  -16717.77660         2740.2556 #> 138  -422380.6842   -776867.3686   40869.11015       600761.1608 #> 139  -410260.0151     93600.3086   39992.22264       435473.4440 #> 140   228438.0980  -1226471.4220  103436.70805      -734442.2932 #> 141  -382627.0116   -517379.0769   -6778.66518        58580.4540 #> 142   493474.9663    666527.8288  -41338.54697      -392857.4637 #> 143   746676.1550   -622844.9314  -16425.93277       -84115.8858 #> 144  -309778.5789  -1281523.6159  -63368.26535      -547472.0764 #> 145    38650.1737    828694.1109    9434.30161      -584221.8039 #> 146  -260123.8502   -397048.1834 -164158.35307      -688390.9590 #> 147    17056.4537   -100714.8435   82022.31206       152926.1678 #> 148  -406718.7070     59051.0324   78836.29586       109546.9048 #> 149   380942.2308   -620832.1473  -14231.71614      -100503.7906 #> 150  -271549.4107    741400.8436 -181744.96665      -198898.6629 #> 151  -448474.1814   -202918.5535   36307.30802       -68518.4130 #> 152  -626822.0231   1118788.4327   42644.94672      -245642.6507 #> 153    72848.5892   -316461.0672   84506.85225      -461707.8029 #> 154   263484.7850    376639.6648   49865.42203      -288383.0778 #> 155  -607743.4232  -1537062.6858  -58252.27721       -19108.6144 #> 156  -296297.6382   -622876.3107  134143.78134       473957.5255 #> 157  -596627.2064   -774378.1881  -96874.92599       109660.6644 #> 158  -590560.0915   -130993.3696  -10084.55523      -495313.0239 #> 159  -193461.4296     56672.0602   60458.08624      -623526.6142 #> 160  -134984.3895    437633.3698   74573.16025        71965.2603 #> 161   225098.0174   -143816.4220  186905.22604       233793.2966 #> 162  -275829.8307    651821.9538   30865.48418       -71550.5505 #> 163   281720.4236    255822.3778  -30730.55277       545632.5646 #> 164  -105821.7878    863515.3273   43261.34330      -196181.3786 #> 165  -514067.2474    677713.6665  -22453.19998      -488793.5658 #> 166   745299.5927   -159241.9973    9728.83504      -149435.7376 #> 167   316221.8169    313650.5913   -6319.24677       331425.1431 #> 168   138665.1458   -382339.8065   98615.57843       129076.3959 #> 169  -498635.5575   1384510.8951  -28307.51884        58900.1696 #> 170   165654.8121   -408204.8432  -86165.02293        64365.2117 #> 171   370122.2254    320403.8836  -32805.55137       643008.6128 #> 172  -664042.4827    208555.0934 -144734.71761       631315.7506 #> 173   123400.4989    157851.2660  -32037.00699       376270.6823 #> 174   343240.2819   -223886.4338   93190.86249       215942.2296 #> 175    38620.7455  -1086109.2126   46771.74009      -253851.8671 #> 176   327179.1317   -237832.2208   55427.73507       239106.6099 #> 177   -96050.1636    718496.1156   -3881.50397       -93519.6540 #> 178    24873.2444  -1373468.4003   -6220.00185        56927.2069 #> 179   784082.0211    830023.4794 -179507.33560      -477727.9724 #> 180  -236020.3137    643096.3226   68558.00903      -803372.2532 #> 181   421098.6012    108565.9259   53870.07083      -500277.8074 #> 182   124653.9864    325720.3304   33359.13332       346525.4401 #> 183   418853.1809    195059.3941  121509.29215       723840.0481 #> 184  -521537.6115    388318.1753   78955.90008       295956.9849 #> 185  -341115.7237   -979017.6977  -66227.73599      -213369.8224 #> 186   348804.4836    -23825.2870   19387.78815      -208320.4705 #> 187   648081.0584    464635.6356   41804.40991      -157980.5814 #> 188   417830.5557  -1450296.8968  -67217.47934       -74397.1988 #> 189   119782.2699    899876.4094 -136291.82472       137720.4961 #> 190   -25438.3565    417266.2301   51709.00411      -149356.3303 #> 191   169795.8581    144580.0243  -52598.50762      -271801.4962 #> 192   131412.2171    183336.2047    2566.24532       280112.5499 #> 193   176868.5396   -854831.4049  141875.85400       427542.1671 #> 194  -510280.1469   -394497.4053   19899.92995      -244051.8144 #> 195   240315.9761     55721.3392   81720.97062      -206266.2527 #> 196   957600.8395    603709.5412   15952.93934       -27249.7451 #> 197   253965.0791    892971.1225  190323.48863      -399208.4379 #> 198  -410515.1596  -1513834.8353  -46277.53160         1968.0398 #> 199  -394632.9890    583400.3264    2619.67868       376159.8705 #> 200   420076.4207   -388142.8036  -32863.44058         7092.2052 #> 201  -229729.5452    -50704.0483  -23004.61086      -215467.2992 #> 202  -184594.0533   1015831.6308   72002.08829      -383213.2588 #> 203  -255834.1038    568747.4373   64295.64717       242064.9922 #> 204   150629.0115   -517022.2323   18370.77089      -923930.5026 #> 205  -647606.1255   -413540.2331  169153.55710       503733.4474 #> 206   470948.8246  -1087758.4603   97159.40776       800848.5146 #> 207      621.2699    -93582.7318  -61984.84121       111154.0178 #> 208  -133294.3963    253829.6526  -14003.99089       323459.0527 #> 209   127031.4843   -845390.3877   42045.74153       -80833.1774 #> 210   384900.9829    457194.6295  111170.53138      -339411.2411 #> 211   283159.8622    920723.3435   64132.02156       -36135.4800 #> 212   757535.3761    801994.8526   40845.69070      -111798.8597 #> 213   512482.8002   -339363.4843  -90651.50167       119850.4045 #> 214    21019.0268   -773747.7738  165534.12050       646151.9077 #> 215  -611216.5303   1404978.5271   19523.06645       750241.7538 #> 216 -1031986.1158   -835545.1020   67387.26091       422130.1174 #> 217  -648882.3813    402096.7672  -43720.73611       230185.7687 #> 218   -63917.1258    386498.5167   20286.52756      -248453.9911 #> 219   239350.9653   -458295.7958   40417.24636      -185823.2148 #> 220  -221060.9548   -749101.3218   19283.11719      -184107.9353 #> 221  -638236.0990     87072.5484   -9360.30646       215282.8806 #> 222    99076.6899  -1242837.5895  -83561.47469       340727.2704 #> 223  -239070.5141     76665.2210  115762.51097       428792.4681 #> 224  -336161.1390    188078.2028 -111270.16096        31707.5127 #> 225  -131429.7139   1151739.2037  -57003.19014       239301.9732 #> 226   265970.4016   -127848.1847  -48440.09552      -582696.7556 #> 227   418708.6925   -968475.4904   15508.14554       494986.2223 #> 228  -629886.1340    142121.8463  -36236.51485       154594.7745 #> 229   123167.3830   -274489.8700   36955.46174      -445960.1975 #> 230  -319389.4917    530966.3118  -75664.49060       484212.9806 #> 231   426528.9734   -563610.0864   36096.45658       182647.9902 #> 232   -79803.2657    347974.3526   22261.07419       310459.6179 #> 233  -744904.9766   -716123.8714   16632.92966      -163845.1541 #> 234   590906.0184   1108906.8433   66895.61409       803859.6360 #> 235    84692.1558   -426676.2313 -113845.06445        68760.9877 #> 236  -279419.0166    176873.5481   34984.14693       605860.2155 #> 237   265377.4300    481944.1488   57264.22421      -586041.2791 #> 238  -309026.3210    729847.7923  -40029.03914       217413.5476 #> 239    50411.7643   -377491.8061   95159.48582       735567.1532 #> 240   470954.7878   -545404.1547  -66114.04860       790905.0818 #> 241   729287.2210    423911.4144   66062.30212      -672983.8391 #> 242  -401117.0746   -651313.1913   34047.72618       238373.8035 #> 243   -82822.9626    736410.6337   51623.04858        38201.9009 #> 244   778471.9565   -368611.4025   31179.75148      -805322.4130 #> 245   -29951.3072    234539.2493   58343.58311      -121775.4413 #> 246  -634872.5733    -77859.9326   68100.07253      -156498.1544 #> 247    18789.7660   -680964.8233  -76452.46666      -289750.9465 #> 248   306722.8536   -260820.6984  -26248.63799       129955.6284 #> 249  -157323.4242    136593.3155 -115238.33170      -638719.8102 #> 250   -53103.3380   -115363.0024   80101.97964      -260137.7452 #> 251   280496.0127   1100319.5110  -85700.63635       235623.2883 #> 252  -250060.3417   -484086.6623   -5051.33170      -442289.4942 #> 253   903391.4691  -1176203.9144   26270.95881        10287.1526 #> 254   800412.2277    998890.2987  -24742.47243       796103.0155 #> 255   181820.6385    410436.6073  139847.93493       428304.7815 #> 256   135942.7088   -200410.8835  151768.70798       328630.5294 #> 257  -572863.8579   1385804.2366  157537.19460       -62464.4420 #> 258   411314.6773    662868.3662  -15711.30156        78372.4626 #> 259    38539.0851    621755.1400  -88450.77555       -95464.3773 #> 260   653081.4853   -579921.4246  -87063.75897     -1141777.8468 #> 261    97077.0750   -937002.3454  -70571.61260      -674189.4319 #> 262   265300.1552    411511.3364  201931.63776      -112611.0574 #> 263  -517038.3022    147773.2273   73501.95369      -795381.5132 #> 264  -593499.4937    326356.7722   21406.34523        12326.0616 #> 265  -200173.8208   1089984.8976  -47967.43557      -215956.4425 #> 266   188335.5678   -673396.7742   49293.41553      -329750.6285 #> 267   -30715.2537   1637689.9722   -8495.48717       -61497.1024 #> 268   290208.1973    125137.3463   52626.34638      -526838.5937 #> 269   611634.4343   -371630.7170   83600.65618        89713.1384 #> 270   697992.8318    325059.1853   84932.25061      -880643.8049 #> 271  -461376.2354    988770.5489  104227.17255        -1442.9258 #> 272   999793.0066     -4784.1267   -6046.18291       454958.4167 #> 273   287530.9472    800506.9451   34073.13183       782028.7714 #> 274  -241231.7479    335409.5499   47010.36298       278667.5989 #> 275  -221416.2133    873570.3090   35367.29280      1427766.7834 #> 276   236372.6429   -162767.5475   38610.40636       499081.4857 #> 277   124355.6502    -19184.0259  157874.48292      -860325.5403 #> 278    66094.2840    250882.9220  106913.48705       528996.8727 #> 279   227829.9228    274046.7750   68869.06671       470990.6696 #> 280   545313.8641    765256.9641  -27578.35590      -258339.4503 #> 281   242024.1406    704118.0013   44101.97270       547701.1596 #> 282  -635571.9367   -517603.8938   51751.49736       273853.4590 #> 283   429458.8719    469161.6080   24883.03293       172665.5366 #> 284  -308320.5328     31862.6106  143519.74954       543333.5983 #> 285   -69827.7430    328499.2737  -53611.62015       724733.1661 #> 286    75865.6407   1014852.5701   26547.62951      -572287.3908 #> 287   283511.1414   -349313.1148  168356.96474        12031.5594 #> 288   514261.6702   -387713.8466  -98046.34029      -537029.4338 #> 289   346426.2491    278082.6981  121658.38815      -409757.6772 #> 290  -279377.1207    758591.2607   60342.37334      -195276.8521 #> 291   742464.8502     72633.0151    4834.09035      -497530.7048 #> 292  -233777.5368    710296.1477  -59806.86488       -26195.9646 #> 293  -177333.4474   1132374.6249  207482.71013         6252.2509 #> 294  -115839.2608     41621.2199  -24977.86283      -439606.2363 #> 295  -382937.0518   -265976.3938  -45247.32292       749836.3900 #> 296   126392.6412    248238.6648   61052.26719      -788978.7636 #> 297   741996.0787   -478691.9220   50903.39745        68191.9241 #> 298   226224.0170  -1388482.6490   -1525.84412      -106240.5998 #> 299  -586568.0539    552140.2996  111919.68356        64338.5281 #> 300    52256.9891    418814.7898    -129.01770      -483570.0384 #> 301  -158146.3145     73603.6512   55944.08438       571460.0071 #> 302  -728719.3862   -337317.0234  -91013.52075       283841.6261 #> 303   -67414.8229    644744.3354   64133.29524       -85641.2730 #> 304  1331315.5774   -800494.8772  -39482.75268       -29157.7451 #> 305  -433764.0502   1447018.6360   22652.54708       181235.6886 #> 306  -220847.5326    -27844.5998   -9627.41703      -177029.2122 #> 307  -321985.4421   -378965.0997  149951.63691        96407.7010 #> 308   280742.1731    761803.0633  -53567.88708     -1055692.1897 #> 309  -169381.2821    323986.8056  -86636.95755      -101321.6300 #> 310    36361.2140   -232853.8526  -10865.76609       434821.6795 #> 311  -413552.6105    310792.6466   13030.87063      -326505.1615 #> 312  -327224.6438   -459504.6589  -18096.49629       361313.0040 #> 313  1082736.6972    394489.2522  120726.90700      -309483.2407 #> 314  -260556.9172   -386890.7643   15681.39425       420971.7898 #> 315   311878.4903     62531.4525   27644.74708       415250.2398 #> 316   780388.7036   -343683.3675   -6521.92903      -583980.5437 #> 317   111835.4575   -198400.8950   27015.71073       746844.4196 #> 318   188784.6539  -1054997.2382  129058.99910       550303.6960 #> 319   632348.5403    388476.9833   50906.98887      -278225.5526 #> 320   307984.1540    360247.3289  -53489.10181       805900.9546 #> 321  1108134.6550    642158.3879  159704.41246      -241642.2625 #> 322  -664596.0316    565200.3647    2194.15153       185971.8123 #> 323   124872.6014   1271038.7236  -35531.14103       656918.3968 #> 324   134323.2189   -788826.4246  120336.86501       259988.0480 #> 325    39136.2545   -102799.8312  -10509.77527      -197136.6656 #> 326  -805426.6168   -215659.1016   20944.12695       -17188.6942 #> 327   464325.7228   -994436.5805 -127891.27765       792824.3725 #> 328  -550973.0103    347147.6064   13214.65893      -392759.3049 #> 329  -858402.1652    370720.9779  224587.95358       786691.8490 #> 330  -855214.5087    401579.3507   61816.45841      -669754.0097 #> 331  -745439.4811     26109.1907    6158.85587       313639.3433 #> 332    58933.4380   -686517.5424  -34209.16881       -23948.4298 #> 333   199211.9047  -1652080.8616  -59993.50200      -127621.0850 #> 334   167998.0636    364207.9026   49233.02122      -192231.3509 #> 335   863540.8112   -218535.8816   37353.74321       374153.8480 #> 336   -92115.6807    987254.6608   43736.27588       808953.3258 #> 337   249757.5186    615628.1047  -47872.84108       475526.8134 #> 338  -263902.7585    286388.5614  -25729.98484       290903.0500 #> 339  -678014.3946    707050.5525  -23693.04564      -218315.8169 #> 340 -1009268.2750    191775.6537  114421.89456       168776.8838 #> 341   325346.3238   1043149.3889   55999.39193       443646.4319 #> 342   490245.8338    940201.5928  -99836.37227       413279.9976 #> 343   205972.4054    -35221.9969   60364.99928      -652314.0574 #> 344   601979.2253   -149693.8416  111831.87715      -117331.6268 #> 345  -586903.8171    298904.3391  -57789.67160       588760.1899 #> 346   339093.2800   -146607.7922   98936.23318        27046.2584 #> 347   -12237.9246     56523.7705   73892.44616       344940.6325 #> 348   678851.9366   -836062.0458   20947.63411        94529.0428 #> 349   427971.6957     39053.3197 -106624.44375      -189033.4005 #> 350  -460136.2235   -286572.6357   20959.81433      -300049.0896 #> 351   365762.9010    -50405.1112 -125828.71362       930647.7002 #> 352  -445252.7258   1455117.1500   86370.02287      -150014.0902 #> 353  -169735.2653    193481.4179   38546.71631      -508967.9452 #> 354   405506.7421    108119.3401  -41085.00457      1079991.0273 #> 355  -484554.4136  -1128880.4043  -79262.82101        65668.3769 #> 356  -236402.6151    588432.6063   48508.67648      -640990.3177 #> 357  -354122.0523    161128.8989  -75953.85293       303142.6078 #> 358    86385.7694    382104.4503   43465.03301      -219924.5468 #> 359   279227.8670   -237251.7446   30853.12174      -403242.2573 #> 360   283924.1744    921066.2478   93363.16607       249770.3246 #> 361   365552.4036    683891.8896  -32436.18580        63752.9978 #> 362    96314.1937   -857295.8475   27413.43680       697265.3173 #> 363   149655.9684     -3417.7999   47046.97902      -310291.5569 #> 364   670879.7465   -290653.2509   58055.65848       873790.5944 #> 365   100713.9913   -264129.0318  163787.32938      -234232.6221 #> 366   730302.1580   -152129.3018   24450.00834       802730.3137 #> 367   282059.1455   -172687.6897  -10641.86768       490215.8764 #> 368  -397744.6905   -872867.0047  -22433.24773       670416.4810 #> 369   243975.7990   1375887.7417   40538.47395       157263.0188 #> 370   363391.1771   -424540.2418    8331.06296       -82889.5221 #> 371    -5559.6256    725793.9291   13119.32702       168840.9968 #> 372   706753.6636    284949.4898  -35869.25405       508682.6021 #> 373   431959.1320    609887.4658   87639.88535      -140570.7344 #> 374    10203.2704   -563894.6556   10493.95205      -138654.0067 #> 375   122802.5240    832278.3773   36158.38866      -420318.4870 #> 376   640617.3184   -839105.6661  -17092.83740         8763.6697 #> 377  -415066.0368   -647622.1596  -10522.35032      -750418.1366 #> 378    34622.8804   -671190.0538   77282.11755       661301.9456 #> 379   197931.6284     55039.2670   48195.09373      -423094.4358 #> 380    48800.9146    146724.1712  -22332.19074       380045.0384 #> 381   133623.4893   -232857.7894  -49456.30121       810694.8786 #> 382   785836.7131    567524.8296    8349.92071      -900990.3113 #> 383  -464135.3004  -1094747.8712   83554.37586      1053471.1310 #> 384   270606.9485   -768840.3700   26689.31600       312260.9800 #> 385   474817.1124    806873.9173  125963.34522       117441.0343 #> 386   400791.9520   -647091.9880   63102.18938       841599.1517 #> 387  -789866.4846   -487049.6916   -6228.66129      -446072.4166 #> 388    80665.6376    786200.3735  -53475.84525        69936.2076 #> 389    48446.5798   -378595.1983  -38815.12550       253668.9654 #> 390  -323229.1408   -931168.7353   48142.01502       504525.4269 #> 391  -175280.4582   -906091.5211 -138638.45775      -250572.7660 #> 392   -82354.3029    389414.1993   45588.62131       298752.6992 #> 393    94383.9268    212887.6268  -64611.85850      -452441.4189 #> 394   373464.4846  -1380936.3665   -7284.90461       824465.4767 #> 395  -151262.3696    182344.2599   42644.39179       395753.5162 #> 396   585012.9709    654221.3794   17650.36841      -572977.2922 #> 397  -100116.6185    644476.2201  -48419.07259        12177.3445 #> 398   233427.1616    480348.4841   40300.41267      -899090.9063 #> 399  -451138.1813   -389768.2251   36477.80841       451018.6236 #> 400   429720.5890   -263433.4249 -104307.49881        35431.0478 #> 401  -376891.4534    955233.6421   32815.53968       307122.2492 #> 402  -680734.5330   -483462.9967   45586.34190        86256.2347 #> 403   509281.3927   -370485.5863 -119201.76505       602565.1167 #> 404  -858716.5133  -1205232.1972  -92895.96328       409429.0262 #> 405  -129848.5519   -735032.7677  -76719.20612        63316.0884 #> 406   -52453.7220       537.5002  -85011.42247       -97125.4906 #> 407  -302446.7624    390945.8523  -66071.25848      -366591.8478 #> 408  -853185.0838    759819.7753  -41316.10259       183675.4315 #> 409   448274.6615    627379.3661   33636.46221      1296103.7860 #> 410   109535.8995    620042.6707  -85173.38790      -180073.1553 #> 411   503256.0745   -802683.7434  -93792.78358      1136952.6948 #> 412   484909.7304   -755507.8937  -30996.90877       711298.6617 #> 413  -335273.8565   -774510.6665  -61969.74264      -153223.4956 #> 414  -263004.7767     34329.6130  -43372.92212       324999.4527 #> 415   268461.0616    899236.3020   39025.15931       564833.0601 #> 416   272469.3251   -298883.4984  -36135.46721      -424800.2183 #> 417   567610.5973    221724.9106   20580.31247       190635.8574 #> 418    50490.9747   -307875.6630   95663.51921       353785.3921 #> 419   386302.6846   -282041.0945   35948.88992      -396412.8035 #> 420   555824.7156   -264821.5530   -7946.46285       190428.5158 #> 421   694720.3383   1086535.7755   -6815.14065      -358778.0890 #> 422   353331.2143   -694970.3844 -117834.70292        26533.2915 #> 423   168417.7034    265066.1170   10731.54105        77116.9915 #> 424   -77052.7865    448483.7048   93899.63754       728551.4024 #> 425   -77820.7438   -238140.1929   77015.03900       307565.8557 #> 426   125828.7863    479703.5728   66747.76849       356965.1150 #> 427   209058.7148   -111845.9330  103163.97573      -567694.2362 #> 428  -252462.9493    419537.2465   55898.19111       423184.5140 #> 429   -27074.5718    439107.4126   27617.90590       595232.7502 #> 430  -320724.9052    479987.0535  113943.72810      -329090.2844 #> 431  -466217.3137    963016.6933   84404.25758       404164.6896 #> 432  -849473.6688    -89855.6640   36514.61301       348060.9896 #> 433   186600.8830   1050036.6043  -33376.90768       -89235.4492 #> 434    87509.5943    311017.1890  -75610.92122      1052595.9276 #> 435   -38426.4663   -982124.5188  -37190.54735      1144805.0775 #> 436   -24289.8378    -58492.1909   43688.93104       123817.6063 #> 437  -447633.2364   -420968.4196  -45055.97422       -36419.5745 #> 438    62385.9027    403756.2984   92231.78873       331920.8381 #> 439   355767.3947    764176.8374   47927.04834       203253.8376 #> 440   139805.2610    281343.9821   31875.62461       271805.5913 #> 441  -485371.5612   -339944.2112 -131936.57333      -237144.2888 #> 442  -371795.5826   1076537.8242 -116445.32265       597951.2493 #> 443    82279.8357    582807.7210  -35030.64253       152359.2985 #> 444   426294.2946   -388168.0895  -38346.04780     -1007906.1236 #> 445  -167236.6319    461721.7179    1394.72387      -152032.6581 #> 446   154105.9398    -36791.8240  -40162.62051      -456036.4086 #> 447   668637.8782   1862518.5813   16308.67034       279975.9102 #> 448   -92567.9105    816823.6976   16677.97323       499166.0911 #> 449  -550940.4710    123867.1988   -4065.66047       840086.8244 #> 450   430217.4196   -520517.7495    4960.45372      -272965.8478 #> 451   132965.0218    834772.2976  -95776.81212      -455050.7515 #> 452  -322792.8232   -400695.3403   -7836.50027      -431451.6974 #> 453    76162.2285   1172363.8757  -16458.26246       221540.5745 #> 454   351910.1566   -103405.6292  -80341.22447      -144222.1141 #> 455   394261.8812    533911.4260  -44749.64926       206523.1664 #> 456    29576.1091    765367.4965   63169.10720       117340.8424 #> 457   770740.9591    462352.7305  -84737.89936      -393309.1489 #> 458  -229927.0740   -891426.1836  110599.65469       289110.6454 #> 459   474488.0686   1109778.4100   71286.71241       587710.7911 #> 460  -181320.5466    114339.0646 -147484.20506       277836.0365 #> 461   -19253.3028    356372.9822    2799.71690      -170357.7289 #> 462  -408051.5080    247627.9757   24191.31045       698328.1855 #> 463   -38388.9457    446016.6723   67061.26782       491100.3384 #> 464  -125059.1202    233348.0394  -67526.90341       340094.0458 #> 465   180049.6199    319908.9081   74099.56168       408189.1717 #> 466  -275815.7235    803523.5287   45266.84850      1033739.6417 #> 467  -211744.3717    527874.3174   74675.48496       350084.7390 #> 468   323364.3586    425095.2454  -76357.50626      -210461.7680 #> 469  -100453.9945  -1158506.8848  -55634.93983       -71675.0145 #> 470  -136406.1025   1097659.5725 -155120.12865       -38617.3156 #> 471  -712978.7786   -648696.1652  -21399.14274       177358.4635 #> 472   431810.6356   -528272.7120   42716.29036      -917883.7747 #> 473  -177487.2790    682368.3868   11576.36267        58703.6363 #> 474   229812.2760   -207592.5400  -17481.02630       428651.1559 #> 475     4084.6123   -266804.3786  -39641.67723       279513.1334 #> 476  -125114.0784    788594.1482   21321.03970      -549610.5280 #> 477   643937.6525   2084736.6894  -87436.81096       220708.4733 #> 478   362498.2655    315561.7923   -1311.46631       193738.1051 #> 479   236639.9033    877431.3331   28232.64125       555875.6803 #> 480   -68496.5874    367374.6312  -29980.73859       407626.6700 #> 481   156902.8764   -209901.4555  301817.49691       750094.5225 #> 482   -78519.0925   -403270.6450   51459.31064      -359901.4197 #> 483  -444006.9926    987222.5368   43889.95349       605911.3358 #> 484   519589.5746   1248160.0647   34152.92859        45221.9098 #> 485   351894.8262    689302.8585   33928.15319       334631.2750 #> 486   156162.0541    863359.9932   16715.81956      -585801.3528 #> 487   173578.2090   -405983.9620  180008.00945       132033.2592 #> 488     5163.7200    636119.1038  117577.55331      -646373.5263 #> 489   152395.0460    -31125.5441  122554.47289      -480261.8137 #> 490   -46334.9422    449689.2005  114100.13534       132017.2906 #> 491   -53355.7513   -472400.5993   72075.57432        65889.1256 #> 492   777396.1456     73530.8439   95653.16661       329448.9214 #> 493   249221.5672    386887.0960  -24427.06686       633090.6716 #> 494  -401741.0024   -380452.1909  -44148.12217      -747058.4451 #> 495  -301214.1377   1790186.3756  307076.02668      1189154.1318 #> 496  -697104.7083    -79519.2005   70756.00878      -796060.3407 #> 497   428495.2397    687368.0883  236039.64645      1166574.7432 #> 498   611877.7532   -952651.9939 -135409.46174      -360468.2245 #> 499   148540.2730   -758839.0408   23432.73630       869913.9338 #> 500  -145708.5715    838828.0320   10753.54002       195941.6446 #> 501   328819.2119   -347776.5281    1908.07605      -497734.0298 #> 502   -12951.7480    537462.1711  -49742.02804        45788.6934 #> 503   253845.9335    150632.6323  123418.87315      -875914.1801 #> 504   484840.4976    489640.1872   23403.09268       311025.3390 #> 505   -11463.2689    149410.0783    4845.93474      -496912.9818 #> 506    -1381.9416   -234772.0660  -82098.72817       810431.2956 #> 507  -410852.7258    273129.2159  -12288.38552       623301.5602 #> 508  -154228.1600    225813.0199  -83925.75686        24285.1561 #> 509  -593634.1360    -35873.2078  -49701.52297      1040066.4419 #> 510  -666439.4146  -1297577.0564   34435.33415      -317274.7948 #> 511    63048.8682    592533.2017    9158.70850     -1082682.1229 #> 512   364883.4759    179593.3288  -43800.27187       482443.2651 #> 513  -408347.3723   -320054.8403  122830.43328       204707.5495 #> 514   -40696.7779    989917.2726  -62483.86493       884181.9855 #> 515   794902.4224     56530.0788    5042.21285       -85321.0770 #> 516  -523391.8678     39677.8686   51476.01682      -231838.8478 #> 517    41431.1091   -351908.6961   96193.25634      -583452.4639 #> 518   765746.8140    675823.9970   69641.68941       456660.1513 #> 519   575641.3642   -144528.4192  -33451.50229      -118365.5151 #> 520   114129.9169    482681.2500   74299.06807      -421690.4918 #> 521  -273398.6561    -40920.0862  -65240.73286       572154.2193 #> 522  1000459.9802     98088.5278  -75571.07953       271546.0634 #> 523   331273.8426  -1194718.8048  102024.42065       499575.1073 #> 524  -180324.2545    129425.1865  117342.65856      -112054.6727 #> 525   -88424.1290    273756.1065  -10128.48284       -95224.5464 #> 526  -634828.1933   -249047.3421  129074.75764      -356805.3793 #> 527   -30030.9419   -173154.2676  -64337.74995       362558.5433 #> 528  -311402.1422    105998.6987   40037.62754       583524.5246 #> 529    88692.4634   1298635.1719   92168.78460       837533.8064 #> 530 -1109454.0350   1968306.5144 -115169.98540       506333.8090 #> 531  -357793.1159   -370497.0792   -9386.18781       373255.8413 #> 532  -147376.0340    627733.4108  -25649.31541      -124143.3791 #> 533   537873.9774  -1042805.4512   12957.99755      -325536.0115 #> 534   587483.4900   -954203.2355   22088.26584       496012.9359 #> 535   332408.0562   -375870.1675  -79994.74436       222075.6255 #> 536   143476.2156    -47304.0095   10639.09810       700934.5218 #> 537   281540.6309   1845514.1723  -90373.42144       114531.8414 #> 538   -75987.6442    537656.4867   39988.63268       290212.0156 #> 539  -646722.5338    227849.7380  130958.30008      -237059.5624 #> 540  -228278.0592    733767.0883  -48424.46408      1042034.4442 #> 541   522847.1417    345183.4889  -23365.32266       231185.8203 #> 542   147238.9500   1374820.0910   31235.02215      -333789.2350 #> 543  -434499.3323    968452.7970   34826.49493        80509.9294 #> 544   -63714.5385     27990.5279   36086.88436      -291049.7510 #> 545  -462644.2379   -543209.9352  -11806.02418        46209.4200 #> 546   -59070.0610   1509899.0389  -64337.37896      -717210.8622 #> 547   -34499.1905    176429.1459  -20803.62139       400701.0884 #> 548    46593.3114    657086.1223  -14838.11394       436333.2802 #> 549   656281.3144  -1273369.6370   -8099.56188      -122056.3101 #> 550   -37309.1585    718174.6492   12159.07079       600920.4942 #> 551   199792.4203   -477664.5744  -79343.62187      -595368.1773 #> 552  -172476.7354   -294537.7909  -26681.82887       -24918.9738 #> 553    97520.5317    535313.1419   55759.67271       365555.6248 #> 554   773235.1850  -1025851.8438 -125632.20383      -155702.2476 #> 555   524001.6741   -241435.6179   -9873.82384       392098.9524 #> 556   -41273.1153   -496782.8680  -55978.36927       535575.9737 #> 557  -300492.0768   -351883.0340   42074.59997       322655.8752 #> 558    20942.7900    270257.8547   -6542.68343       -28920.0308 #> 559   308209.1712    216354.0696  109489.61996       -38708.6638 #> 560  -588427.4157    327403.2063  108867.19388      1374414.7789 #> 561   614004.8025   1746658.6848   -2772.58882      1066305.7486 #> 562  -271283.2914    492263.5682  -13871.54579       134747.6495 #> 563  -260933.0638    329026.5471   20107.37957       686062.2559 #> 564   169711.5193   1516251.0304  -79932.25990       380770.1528 #> 565   953544.6329   1594658.4265   11737.42074       538616.6516 #> 566   222285.6147     35228.7441   59224.32260       891213.6150 #> 567   231888.1908    223182.0619    7592.00892       976380.4580 #> 568   991181.4649    807260.6377   93245.35714      -621774.1278 #> 569   146736.0164    -60063.4972   39880.19690       365747.1402 #> 570    75085.0050    333650.3459  118343.90445      1061051.5195 #> 571   441746.9750    382837.4194   52250.17333      -123814.7893 #> 572  -123031.8329   1346853.5435  -29847.74324       354567.0202 #> 573   345130.0639    874892.4013   39597.93124         -314.1111 #> 574  -104897.3900   -272711.4894   36782.29774       136827.6509 #> 575    79442.6293   -816413.5331  -83299.90474       -15061.6135 #> 576   144059.9140   1530239.7465   64110.42926      -128687.0978 #> 577    92508.8879    217631.0550  -10025.23576      -219556.0207 #> 578   887025.9616    245500.7729   52239.69386      -658756.9091 #> 579   390168.9277   -168300.8394  157891.43645       -72978.0295 #> 580    40197.2121    852588.1061  -20734.03829       466417.8179 #> 581   862670.3351    111675.3955    3089.65399       805143.5206 #> 582    23558.7225   -600367.8622   58638.93712       358954.4311 #> 583  -344677.8661   1264563.5038  -29261.57691        45363.8292 #> 584   434904.7892    970345.6924  -45419.61618      1000838.4490 #> 585   200908.2391   -456822.2334   40711.84593      -231960.9607 #> 586   -37167.1382   -106444.6096   83308.84885       742291.0010 #> 587  -132196.5227    524900.4976   -8851.78194      -395552.7431 #> 588   279928.9203    976218.3084   98190.71344       422132.0990 #> 589    37888.8082   -192044.9604   54123.31267      -686375.5591 #> 590   371446.7354    -83680.2009   53438.94405       157249.5469 #> 591  -252932.8445     90038.9980   36580.38273      -389984.6981 #> 592   -70142.7913    253891.8712   32613.70730       361868.8358 #> 593   481897.2372    336582.5259  117660.33358       -76216.9857 #> 594   770801.5764   -338457.9665   21393.83645       546785.7459 #> 595   132869.7446    -91529.1545  -64722.83215      -412903.6910 #> 596  -224563.2506    612574.4467  -33188.60780      -534196.8614 #> 597  -699331.5896   -281098.7541  -43281.64097      -217268.9395 #> 598  -228740.0933    130851.5263    7045.27134       207897.5869 #> 599  -295588.1504    166910.6188  -43623.28375      -534077.8046 #> 600    49539.5260  -1026621.7507  -48792.64484      -283978.5040 #> 601   -88141.1813   -103525.4310  -74949.85361      -234510.4372 #> 602   415948.3417     51191.9601  -43259.46720       344947.8710 #> 603  -278209.9150   -218778.7122   68164.11107      -126988.1191 #> 604   170518.5422    148195.7219   53053.54525       356906.9555 #> 605 -1058682.3742   -704750.4964    8347.77071       445175.7611 #> 606   380517.8250   1212998.5442   34610.76026       346851.9151 #> 607  -539026.1869   -751640.8652  -50757.80261      -202554.7951 #> 608   -98611.6943   -669824.6666  -50257.50760      -159393.3287 #> 609  -255066.3446    245427.1078 -177196.60753        68785.8378 #> 610   405427.4050   -114576.9891  -34865.01163      -120732.9722 #> 611   484425.1695    294523.0275   -2175.91096      -199954.3172 #> 612  -276608.2304    746798.4926  -45538.69259      -398348.5458 #> 613   -66896.1437   -114846.4093   39062.89104       379540.5673 #> 614   -53380.9306   -530863.7149   79788.28099       512986.7351 #> 615  -461978.0764    433962.7721   51333.46301      -215529.2176 #> 616   752125.2468   -746724.1537 -119018.72125      -265714.5718 #> 617   280249.8998   -164826.9828  -34070.69172        -8912.5935 #> 618  -369700.9071    689483.3198   41933.50894       447338.0449 #> 619   440089.7715   1190974.0676  -57878.37341       247659.8774 #> 620   659849.1773    778618.5510    8724.75190      -739241.7296 #> 621   313662.4397    446358.7861   -7168.01363      -449541.9158 #> 622   -41057.1369    493328.8004   23615.25806      -322845.9051 #> 623  -365073.5463   -349148.8311   12399.99428       458053.6417 #> 624   562640.8310   -647700.5058   87643.87097      -828717.1694 #> 625   129053.8993    -92357.5502      32.84767      -438911.1950 #> 626  -395989.2213  -1362804.0643   68718.36231       309469.1985 #> 627    22868.3707    146053.5403   28903.57321      -688026.6265 #> 628   599083.1617   1693664.7503  -38454.37822       140484.3746 #> 629    -3097.6049     91187.8069   82300.08106       -75278.2362 #> 630   692579.6798    483906.1297  -78375.73739       328685.3888 #> 631  -632098.1543   -225222.0647   51493.89538      -401366.6666 #> 632     8850.8202    203748.1410  164525.33861      -462230.8437 #> 633  -593663.1248    558888.9905  -45450.45752       381237.2308 #> 634   -62419.0827   -875882.1375  -36137.97220      -763905.1472 #> 635   440016.9495   -302976.7521    1924.37916       -29580.6307 #> 636  -555407.0556    297261.6855  103654.64384      -451636.6654 #> 637   278884.3035   1073561.3048   78253.76797       384564.0006 #> 638   295311.5666   -649407.6493  -69522.31230        94731.9054 #> 639    91250.3476    410078.9003   56602.10113       466492.5952 #> 640   502873.6537   -410834.5636   62075.04556      -295651.7558 #> 641   440078.2924    357969.1814  -31303.26062      -121118.8109 #> 642  -366138.2651   -816203.0769  132817.63115       796255.8104 #> 643   514456.0487   -246445.0220  -20695.81898        14870.7415 #> 644   -71287.7284     87319.5217   53324.90087       813204.8097 #> 645   989620.4753   -237738.0618   25704.32484       -99712.2135 #> 646   401708.9726    824130.4237   85013.79710      -123083.7026 #> 647    35737.4711   -504074.5012  108933.90316      -199148.0826 #> 648   475108.4248    541902.6838   11565.71366       176046.4380 #> 649  1010273.5704   -611818.8966   17810.02265      -125599.8007 #> 650   151692.0947     84588.2745  -53245.90434       355308.7737 #> 651  -159827.7043   1140715.4473     941.53137       538950.3519 #> 652  -300613.7594   1138040.8880  -27109.47728      -190992.1685 #> 653   155636.7554   -623084.2409  -29702.64776       537185.4921 #> 654   555213.2437    886972.0578 -114029.90620       954061.7222 #> 655   571337.8989    251826.4363 -100652.95490      1077566.6946 #> 656   571665.2049   -213987.2514   -9680.53575       -53698.6506 #> 657  -532837.4601   -423765.6687   67831.82134       567409.7432 #> 658  -230751.1440   1188161.7636    4751.82385       532140.7314 #> 659   -98844.8827   -574075.5833  120598.01974       -27924.5804 #> 660   556449.1178    183555.3095   99793.25567      -176705.2869 #> 661   498351.8927    -61099.9634  -87088.80866      -304976.7849 #> 662  -394544.3324    542278.5633  -40692.53766       244415.3760 #> 663   -25673.2273    164166.3861  -61965.03800      -660030.4259 #> 664   300226.4735    501350.0779   44866.29477       670534.9027 #> 665   859677.6398    534113.1658  136884.85493      -161771.9540 #> 666   133964.3888    462182.4743  -82505.90217        80688.8289 #> 667   221510.3477   -560556.7356  102544.88106      -151202.1795 #> 668   317229.9302    653762.2961    2443.93768       238154.9744 #> 669    27720.0086    858984.1624  -19217.77407       201883.0972 #> 670   502822.0793    237392.4702   11670.32803      -910293.7023 #> 671  -439128.8364    836018.6655   13745.49234      -751782.3001 #> 672     5733.8642    434929.8852   39328.82028       309678.8270 #> 673   566557.3496    160051.7474  -72239.36431      -533602.4563 #> 674  -185582.4964    343029.4212   33619.80993      -551994.9988 #> 675   651664.7676  -1000162.5768   42277.00523       -44384.9851 #> 676  -402855.1283   1191833.2605   84292.51655       246408.4156 #> 677   773646.1881    943646.3526  -71786.99334      -731772.5410 #> 678   866051.3005   1121343.0223   -7068.20468       748936.4583 #> 679   696402.5016    106007.5311  -24848.77453       274773.4226 #> 680    16070.5001    199670.2264   37456.68762      1007811.6986 #> 681   476239.9956   -550559.1879  -32460.42766      -694395.4054 #> 682  -111223.5390  -1214297.5670  -83514.07553      1099528.4818 #> 683  -516530.7728   1416041.8940   60690.09084       255244.2641 #> 684  -481913.1742   -159635.4748  -92810.80533       320690.8646 #> 685  -628992.2692    299041.7920    1125.04280      -395858.6730 #> 686   881291.9504  -1007865.6244   91640.75211      -317278.5802 #> 687   162216.5861    908861.1925  -61858.06545      -656587.4280 #> 688    38256.8610   1126167.6457   27038.21911      -175406.4511 #> 689   -11880.7924    266056.2130  174579.82586       821826.2131 #> 690  -100854.6225   -494744.3907  154359.82100       369888.9898 #> 691   262391.6699    187607.2843   52931.55336      -503363.0663 #> 692   302097.1286    282338.1181   96245.19083      -287329.5378 #> 693   230908.9629    372639.0884   29246.16650      -189796.0563 #> 694   492279.0275     71708.3611   12639.31000       209646.1706 #> 695  -225650.3826   1150066.3982    2755.73144        22473.9314 #> 696   522810.0288    177677.7164   14704.18356       160835.0420 #> 697   813612.4056   1114924.1089   27433.29113      -549554.7074 #> 698   395062.2312    885458.1489   65962.92321       133792.1513 #> 699  -171148.3356   1097697.0831   74338.00792      -516510.9731 #> 700   102900.6731    -68202.4020  221092.52381       648824.2899 #> 701   600367.7758   -178540.4647  128763.15287       -68491.7980 #> 702   240081.7190    458797.9157  -65981.28007       255846.9277 #> 703   151854.6898   -658209.0570   32022.20308        99180.3071 #> 704   573420.1938   -250170.7782   82532.35772      -356650.5095 #> 705   705620.2260    540144.0746   -1707.63618       204490.9473 #> 706   174604.9469   1712532.3461  266627.73244       -27054.6385 #> 707   387574.2846    358578.9011   44313.71514       883332.3779 #> 708  -273766.7135    -39187.4380 -199435.46522       190880.5085 #> 709   785868.5439     83412.6722   24113.49161       688653.8798 #> 710  -199797.1953    595901.2413     361.54727       514952.5375 #> 711   382330.5788    865700.7426   34543.17771      1039333.2920 #> 712   329833.0874    300770.9977  262980.62610      1190033.4638 #> 713   914788.8739    743470.7749   34881.08345      -119406.6486 #> 714   335299.4417    369088.5599  -85305.82291      -355853.4741 #> 715    94654.1621    219591.1878  -88285.86018       144795.0509 #> 716   452719.5580    327489.3422   65480.29895       545313.2043 #> 717   -71172.1473   -220211.0724   90631.33082       861424.7092 #> 718   -46081.3144   4638238.7769  405480.25296      2870985.7477 #> 719    67042.8362   -130408.1226   49926.52833      -450428.3772 #> 720   244484.0639   -857647.4099    -283.81569       216751.2917 #> 721  -499983.4122    265240.3323  -34924.89409       207060.8776 #> 722   -62712.6533    811558.8083   37480.94283       401905.5361 #> 723   -73519.8740    826455.5290   72853.98766       149388.5226 #> 724   327720.7777    405903.1016 -115747.53787      1152059.4716 #> 725   230605.7431    318361.3460     461.55447       344120.5725 #> 726   169360.2098    796455.5126   80788.10902       -71134.3173 #> 727    70998.8784    232167.3744  -36555.60179      -452899.3701 #> 728   492135.6413    728178.7321   13674.51164      1261882.3445 #> 729  -100405.7763   1122479.3952   64503.68580       124812.5105 #> 730    22705.1699    -87199.2866   34348.72439       -94042.5379 #> 731   865081.4591   1576166.5086   50933.65699      1429319.4775 #> 732   937425.9823    855960.2679   63100.98500        60668.2166 #> 733    63196.9338   -437019.8913  216133.00202       217350.8164 #> 734   -99166.6220   -928221.4723  -18044.95638       712535.9519 #> 735  -150198.7029    863866.8922   63987.15450       441603.1000 #> 736  -239251.2366    688903.9141  -36460.24637       182334.5234 #> 737   336938.8846   1437386.3188  -19404.99039       907248.9447 #> 738  -352475.6740     55302.5414   45753.22221        27145.3288 #> 739  1376942.7293    811232.1541   70378.60516      1000807.9794 #> 740    33494.8196   -684574.1988   76031.78763       906321.7131 #> 741   590511.7166   1302387.5870  -10594.44210      -198672.7198 #> 742  -104525.3631    436641.5599  261040.38531       981760.0074 #> 743   881526.2429   -756710.8369 -167800.08001       502062.7037 #> 744   493339.3329    225364.9314   46894.89709      -356814.2748 #> 745   369619.5726    426333.9472  -78689.46222      -108656.0019 #> 746   752682.3543   -114271.1453  -24539.13321        63507.8681 #> 747   321793.6586   -967386.9999   99946.85836       517383.6647 #> 748   121964.5228    -46842.0678  151253.03962       389380.1805 #> 749   512893.1261    884408.9066   -3406.30653       504268.3145 #> 750  -143986.9218   -859547.2740  -20511.42891       727392.8413 #> 751   185883.6272    488579.2083   -1115.30742       271895.0842 #> 752  -430252.2651   4179552.0006  288016.05216       733772.7371 #> 753   719536.3187     32570.8984   65141.21337        50978.6687 #> 754   325852.5301   -838146.0371   17320.88215       285076.3137 #> 755    66636.5500   1683681.3790   35921.88874        92532.3982 #> 756   442759.6559   2315195.1842   46048.95722       924195.8385 #> 757   312436.6236    116520.3651   41771.34661      -882226.0295 #> 758    41364.6089    624630.7388   77852.32090       297050.1273 #> 759   199088.6593    499728.6516  -29912.77536       165106.5897 #> 760  1140453.8543    532678.7789  114401.68808       541138.4199 #> 761  1062969.6914   1819566.0980  -63075.79813      1129892.3411 #> 762  -100278.3239   -780062.5063  -85462.26720      -505236.3538 #> 763   175870.2640   -130699.6850   21562.68859       842267.4795 #> 764  -661725.1676   1403041.1554   87306.34735       564389.6934 #> 765   345004.9841    294406.0493   28812.38551       964438.6754 #> 766  -494299.7278   -386439.4635   84918.09926       271071.7081 #> 767   405088.7872    686329.7407   27108.75644       671043.6653 #> 768   793811.7223    234525.1492  194965.06638      1111687.0285 #> 769    60975.6962    807426.5735  -62120.83598      -133721.1190 #> 770   226008.5259     65741.4656  105087.30064       498495.4652 #> 771   478814.8410  -1055258.9088  -42537.67379       590668.5668 #> 772   736187.3311   -102005.2692   12945.66707       454497.4026 #> 773   389080.2948    -27169.9924  -66447.78535       -56960.9578 #> 774   727893.9864   1334364.9175  -19189.12444      1187202.6308 #> 775   167657.9011     41084.8348  -90881.90254       219565.4585 #> 776    -3179.6640    732542.8148   92610.33375      1568976.8076 #> 777   447710.6690    472949.1347   -6495.04893       105233.1271 #> 778   940875.4571  -1511943.6180  139358.28072        83181.5443 #> 779   761429.4387    240804.1525   54395.02073      -113279.2790 #> 780   186886.9186   2312120.5116  -15677.54638       730989.2258 #> 781  -684428.4546   1666761.5856   77632.37924        47880.6065 #> 782   -88112.3085   2425281.7541   57748.44250       783283.8327 #> 783   674658.9697    366421.8175  117682.91216       -53143.1614 #> 784  -201743.6127    238141.8487  107696.09916       339275.7034 #> 785   442063.0490    745375.1091   -2204.72654      -420652.8024 #> 786   453693.3790   -529525.6883  110675.40314       311478.1963 #> 787  -328105.8784    323836.5158    1884.92991        95516.8834 #> 788   266917.1481   1045622.8949    9117.81544       524091.2820 #> 789   326537.3550    470120.0357  -11702.67895      1154724.7642 #> 790   367732.8472    163294.3972   50138.20427       253834.0906 #> 791  1002901.0448    202738.3449  -59256.05594       -14955.3111 #> 792   487525.4430   1537885.9901  -45168.13940      -210809.7269 #> 793    53180.0326   1720064.4270  395582.65240       682538.2029 #> 794  -157255.5497    323532.5118  148184.53137       994686.2378 #> 795   781666.2692   1283765.5526   52675.23625      1148872.2845 #> 796   423764.9415    694848.1671  175663.86292       722259.9322 #> 797   372525.3610   -201888.7483  -67383.41605      1159349.2096 #> 798   103646.4834   3465081.9147  150702.34028       629416.6474 #> 799   803849.7257   1199776.7608  -46856.07590       -63507.2080 #> 800   886018.2906   1766457.7708  142848.88841       572963.2771 #> 801   421318.0892    328146.8082   27339.27201      -344830.9015 #> 802   157946.1620   1336195.2574   26549.55139      1170065.6898 #> 803   -26718.4595   -252345.4952  100906.97562      1464300.8365 #> 804   508278.1730   1650458.2631   52419.72353       578133.7642 #> 805    99225.1900    718405.3222  115049.42405       308743.5230 #> 806    50751.0570    748449.7046   77342.27267       153436.9600 #> 807   233990.6312    137414.0218   48782.02911       958445.3819 #> 808  1127029.5496   -121839.0490   93405.50330       -38990.1213 #> 809   154525.6181   1212534.7104  221285.89629      1015546.7272 #> 810   531484.0792    -12598.7922  198935.46416       141741.4843 #> 811   746426.0438   2224169.2044  478927.96623      1293905.6927 #> 812   830471.7044    522617.3862   98614.01333      -620685.5963 #> 813  1253464.6553   2094423.2529   58302.96845      1358028.4197 #> 814   424542.9684    308479.5945  100113.85377       325765.8767 #> 815   958433.7276    375968.4128  213115.07577       939830.5467 #> 816   685810.3167   -249356.2284  125996.89020       954691.1568 #> 817  1137336.4904   -188232.5286  101856.81587       599312.7120 #> 818   824012.2239     -8957.9018  -73720.49845       145055.0698 #> 819  1932178.9353    492178.7864  -41807.22173       -38387.7481 #> 820  1095896.0822    683982.4812  -13373.14801       253887.4820 #> 821   236855.3400   1135293.2510   10459.79787       649663.0571 #> 822   603083.0885   3281378.3298  485762.44243      1310318.6158 #> 823   782091.8448   2102144.6912  438769.20638      1753295.6806 #> 824  1043834.1538   1019577.4373   47656.08283       358363.1558 #> 825  1777684.5884   1261873.8785  229975.28516      1678068.1833 #> 826   975153.8320    -72415.1397  -14610.95655       517106.5279 #> 827  1389141.9209    507808.9384   59963.22543      1446852.9687 #> 828  1153426.6769    560118.2371  191747.33456      1696902.3369 #> 829  1739599.1238   2281353.2244   67496.57506       326046.2094 #> 830  2296012.3299   3933337.4884   96541.84096      2445048.8744 #> 831  2122191.8997    781610.9239  119743.33341      1688863.0307 #> 832  2761586.6485   2928744.7381 -105050.38314      2562799.4037 #> 833  2993851.6446   2328516.6342   25449.05509      2040533.9228 #> 834  5016116.4453   2351395.8119   39301.33783      3374647.7041 #>     PAID.UP.CAPITAL SHORT.TERM.DEBT         SALES  LABOR.COSTS  DEPRECIATION #> 1     -343731.93199    -720126.0326  1758525.4768  123201.0679  -31185.10979 #> 2      138899.34217    -134056.7196  -849606.3022 -101624.3804  -63801.93342 #> 3      228822.57076    -384592.5671 -1376321.1303  132811.5700   -5160.48552 #> 4     -164461.66655     290977.7722   -98625.1443  329402.7708    9851.54845 #> 5     -237066.00685     134550.8837   181758.7084  145001.5350    6237.04991 #> 6      -76416.39871    -178572.8559  1118400.3180  108577.4267    7716.04182 #> 7      -68599.41717     289946.1343  2380105.1749   -8361.6882   -5030.63722 #> 8      -26501.05940     412727.4437  2197781.7535  168721.2008 -118209.65770 #> 9         535.30763     242704.6544   655728.1901   48087.8733   -2648.58841 #> 10    -179119.68014     863992.1153 -3962734.5090  142177.8138  -39254.77646 #> 11      71452.77365     -65496.3196  -108150.8083   91721.0535   44585.44125 #> 12     -25418.41372     155441.7349  1749569.7773  299778.7253   24112.67074 #> 13     -48805.40464     256316.6963 -1139434.8635  169081.7279  -26346.29788 #> 14    -163478.53134    -221640.4995   794639.0742 -247206.8157   27591.10915 #> 15      91884.19808    1091628.3085  -700800.5581   18159.9174   67192.07411 #> 16     244839.45679    -112279.9179 -5155269.4564  -18366.0232   73958.92883 #> 17     -43546.94372     428131.4487    73661.6318 -126040.0230   41554.45724 #> 18    -126793.65740      31538.6446   966862.7181  234827.5441  -61900.05221 #> 19     -83250.99000    1059490.5053  -674266.9304  105203.6462   25671.49429 #> 20      56260.05868      54281.8153  3134610.5326  235924.9243   20585.77103 #> 21      97546.04845    -291470.2105 -1403519.9878  314369.4283   26933.12255 #> 22     121529.04574     657280.0371 -1481203.0187 -385060.9671   31330.30327 #> 23     191278.18658     780282.7215  -888742.9075  -16680.4728   15342.40422 #> 24    -121334.06205     588292.3115 -1660905.2977  323402.6565  -14289.77041 #> 25     -87331.66148   -1296863.1978   799156.3476  147693.3028  -17239.16151 #> 26    -194574.69299     924411.3090 -1283313.3838  303364.2899   32498.13341 #> 27       2328.84841    -135320.8468  -442478.8679  -23235.5272  -27632.43719 #> 28    -114092.64944    -727514.7256  1914346.9575  225078.7324   -3773.99286 #> 29     -36518.05745    -182678.5594  1720622.4847 1160143.8618  -26465.54989 #> 30    -134527.64211    -429738.0472 -2189090.2563  -27436.7270  -31532.62229 #> 31     119613.30941    -104556.8471 -3870927.4438  -54051.5343   24973.35658 #> 32     292599.34729     176092.3744 -2985926.9708  -36790.7543    4760.43591 #> 33     -52561.48598    -312789.7776  2830902.5261 -163492.7328  -50372.33149 #> 34      55554.04157    -149532.9544   790096.8355  -10536.8209   33585.83951 #> 35     -51738.71018    -210229.9909 -1031543.6475  253442.1532  -15757.21360 #> 36      67899.39896    1080354.2782  1486277.6984  -13715.3872   12495.15612 #> 37    -258870.09540    -416797.1823  1087484.7468   25592.7581  -23382.72556 #> 38     -29160.41327     584716.7343 -2363496.4512    5879.1234   -4179.29544 #> 39      28337.17230    -196374.1782 -2136295.9861  150207.6678  -14365.03335 #> 40     143786.53988     649046.1948   904717.5110  139192.4872  -92486.37681 #> 41     -17249.66259     622110.2868 -1646576.9397  304640.5126   15947.36560 #> 42     129058.96840     -46126.8413  -255710.3398  -36970.0812   35280.29522 #> 43    -103689.80696     266875.8757   312664.4275 -126228.9233    -518.78763 #> 44     274882.45265     134068.5271 -2261108.7477  -79254.0709   31558.73236 #> 45     -56201.09461    -737089.3951  2881702.2006   98373.4870  -34253.32305 #> 46     -58998.84599     511149.1649  -751744.1527  229806.9318  -55561.22405 #> 47     101483.16019    -157637.4205  3394345.3911  -62435.3036   -9738.50787 #> 48    -160479.36393     -63838.2345  1355941.0453  234900.9322  -40240.83475 #> 49    -173624.53044     447133.7189  -961083.1740  269778.8389  -16431.09388 #> 50     328128.94068    -135869.1036 -3265987.9824 -139372.1947   -3995.72935 #> 51     372823.38087      63060.8223  1226487.4276  280982.7020   79440.35770 #> 52      39134.37690    -872032.3427    -9129.9888  106567.1936   12909.64460 #> 53     198171.85478     -55264.2398   980412.9066  137686.7765  -12110.13224 #> 54    -359825.95860     355539.6999 -2883484.3782  320148.4401  -39118.46264 #> 55     -95338.68648     -87590.6577  -209911.1579  -11209.9601  -26623.27241 #> 56     138870.00999     256909.2924  1289771.8747 -102345.6234  -17019.79078 #> 57     -32064.31871      80646.5974  -417619.9214  145644.7436   49342.35118 #> 58     192876.42568    -148879.9024 -2650814.5695   -4411.1837  -77084.22796 #> 59     -35517.20137    -358611.9327   429758.3729  420699.7462   32268.06129 #> 60      37130.76866     432402.8243 -1233265.4890 -485834.9454  -50631.24943 #> 61      25997.81476    -562314.4454  2011183.7953  304658.1028   57312.10700 #> 62     -55081.60052     -53109.6689   941851.0138  -69785.3210     176.05619 #> 63    -166950.25752     110170.4254  4113758.9859   -4595.2594   18799.90400 #> 64     156284.34267      75426.3807  1843790.7648 -153358.5224  -36843.49538 #> 65     -98196.20507     -99697.8502   698096.2335  -50592.8061  -52940.22855 #> 66     -26548.74692     878544.9839   765912.6852 -255010.4508   63072.67323 #> 67      13289.64161    1064583.5862 -1264941.5487   -3032.0676   17941.03818 #> 68     200249.43499     149398.3785  -429924.6934  190642.7974   14171.08059 #> 69     -27975.64129      58161.9947  -537898.5129  284245.7084  -59830.16352 #> 70    -143291.60629     177996.4011  -436312.9521 -142348.5487   39606.02144 #> 71     -28381.01695      47954.7210  2060004.4610  -90064.0093  -41722.64671 #> 72     207309.16530    -444223.3453 -2203536.9040   71762.0753    -341.15209 #> 73     188556.07017     518289.7080  -677004.7157  184879.1203  -57524.30250 #> 74    -270200.77256    -124511.2773  3651264.0444  101212.8387  -15423.29860 #> 75     -94007.22192     -55033.5649  2458286.7634 -151529.4271   10655.89966 #> 76     -87966.62027      21703.7451   195022.7878  226119.6520   55042.34710 #> 77     -45536.41363    -922670.3114 -1321990.1386  -34288.3490   32332.15061 #> 78     117286.63737     225676.3875  -879070.3288  -32425.9078  -36056.05655 #> 79     -52169.73826    -150524.7795   671597.8698  330886.8721   99655.66332 #> 80    -192195.97672    -203776.7048   559337.9638  280924.8307    6356.49923 #> 81     334061.81045     367614.5888  1122204.0308   46665.5584   -2292.57260 #> 82      17042.03572      55159.3820  -267787.8102   38250.9628   67537.66662 #> 83      19077.47389    -791716.5787    45551.6594 -351272.0364   -2131.54530 #> 84    -125101.24428    1287751.9767   456488.4094  161295.3081   25503.34224 #> 85     -30201.64907     705865.0705  4745759.4834  -68220.0682  -71441.62937 #> 86     283609.63923     643743.6390  2183330.4336   92191.1483  -24715.77347 #> 87    -109501.82560    -406981.6998   679395.1136  -36208.6030  -52841.52284 #> 88    -107134.19061        263.0950  -737356.8605  -95793.1461    1230.51587 #> 89     127456.94940    -426363.5964  1354330.7279  251521.0276   16382.83089 #> 90     138061.31370      79290.1260  -595910.7263 -116863.1442   47953.05951 #> 91    -139097.24556     188068.6077   759972.5141  119441.1373  -22381.10099 #> 92    -139188.83774    -632994.5236 -2226719.6432  199602.3669   77616.55814 #> 93     122190.48253     319546.4757  3438753.6053  199033.0965    7573.48199 #> 94     -29408.46741     141569.6890  -751848.4827 -288550.1192   13090.47250 #> 95     229070.02691    -180619.0791  1628444.9600 -166465.5679    2753.02850 #> 96    -177704.23691     346151.5248  -775760.2189   23708.2308  -28948.09384 #> 97    -101675.86936    -494733.9388  1543783.9145  248018.1984  -39141.27239 #> 98     192709.45275     190634.9927   217119.9532  -90952.5534   22947.95226 #> 99     178511.80369    1205494.7292 -1311509.8644  -36599.6664   12979.36836 #> 100     73264.70330     221546.3088 -2750112.8925 -114204.6308   16689.92055 #> 101    -49779.70622    1160616.9625   -23970.5091   45334.5173   13731.68698 #> 102    200668.06596    -610552.2051 -1914964.7874  -17682.7138   89953.70060 #> 103     64070.77364     -24870.4390 -1032655.6345 -143593.3696    6794.86045 #> 104    -50689.23961    -573164.2314   254512.4001   98480.4373   65040.86899 #> 105    163363.40364    -205419.0476  2040176.8843  104579.1492  -36067.25749 #> 106    167125.44816     -71441.7768   116082.4235  487556.0529   12283.91544 #> 107   -121362.02939     809375.7651 -1462910.9164  -36644.2889   54853.64479 #> 108    241860.84271     222766.2704   481712.8137  157355.3475   38774.64253 #> 109    212999.66602      95118.7692   682339.1213   31523.1045   55414.95977 #> 110    -22460.60283    1220694.8644   715958.1709    5087.9279  -37307.33555 #> 111     88658.74061      70609.1447  1032058.5615    -435.0839   -7727.19093 #> 112    566328.18456    -323956.8685  -200721.8678  453881.0505  -35563.71457 #> 113    265922.23107     483314.3123  3566691.8541  174556.0102  -59934.46376 #> 114    -70465.77990       2956.8624 -1612995.3470  283122.9647    2240.69514 #> 115     46378.12106     -79740.2291  1830576.9917   42553.0444    5331.99918 #> 116    148605.17534     477552.2311   735321.3398 -297127.0743   -2016.44192 #> 117   -107291.70194    -193968.9718  1049032.2533   72974.2679   -3893.18628 #> 118    146214.71013      36661.4661  -195222.9804  265141.4722   -6978.40626 #> 119   -174653.24567    1113150.7254  1759595.1065  247812.0259  -21307.16466 #> 120    -36877.67680      48062.7724  -454612.3335 -484270.8837   -8304.05375 #> 121    206197.61022     -37662.8044  -807054.7006  -98123.7356   11180.42240 #> 122    -41519.21834     155401.6947  -705332.0470   47461.2276  -33585.27794 #> 123   -182391.53833     710938.8795   153790.0934  222966.6257    2236.47050 #> 124   -125126.44808    -115282.3590  1705162.5169  121741.4255    -291.35722 #> 125    168269.40850    -570443.0573  -166100.9920   77933.4249  -35043.41233 #> 126    214612.87047     402680.8511   482450.1130 -141646.9497  -82843.80178 #> 127    -11763.11919     137170.8849  1319877.2119   31465.1238   14337.23230 #> 128   -136408.58058    -191220.1558  1364845.5442   93141.8339    8961.05982 #> 129     32213.46426    -231017.2319  3008077.1800  361896.1750   25940.73874 #> 130     43641.76711     276359.1346  2993661.9087   72509.6365   74428.11875 #> 131     54975.09948    -188448.2928   903939.4800   43555.4295  -48067.60809 #> 132   -177124.60118    -576814.3204  1177182.1968  -42873.9992   35156.14365 #> 133    -30261.76679    -242959.7332  1660237.0479  -19978.2779    6221.69116 #> 134   -282883.33695   -1049997.9002  1138895.7452   46255.7550   47673.55406 #> 135     52858.38336    -343648.2691 -2636845.0433 -384306.9212  -19090.92709 #> 136    149439.86265      74817.4316  -438950.1771 -340344.5921  -81712.61768 #> 137    107386.24470     135293.5523  1323589.4057  -38344.6603  -40753.89979 #> 138   -100074.75780     499507.6264   375695.4886 -129320.5274   17835.68490 #> 139   -217133.38355    -201536.9011  -320014.1307  182080.5491  -97619.25295 #> 140    135267.58013    -276558.6477 -1051678.5788  326370.3836   57292.07143 #> 141   -327699.62191    -402632.5203  1993267.7445   94292.6561   22855.69733 #> 142   -155920.31162      35363.4897 -1024732.9204   14348.1704   14201.42356 #> 143    146208.51545     276993.7233   654717.3095   69578.5055  -58028.61794 #> 144    -44800.55276     287462.0146  -290437.7267 -273670.3934  -14857.42999 #> 145    -11878.43938    -728766.4671   -43953.5119  513867.5829  -15525.45778 #> 146       372.48703    -483903.8146  -781949.9532  -48640.3791   93207.30684 #> 147   -186403.19927     296691.8033   153277.0243 -198210.8303  -28097.93795 #> 148   -259383.87717     -44503.4828 -1138730.0936  397677.3710   15035.97340 #> 149     -5270.07375     248520.8313    33291.9211  379104.6462  -18465.79647 #> 150    225750.36060     198400.1996  -412436.6751   -3909.9914  -73587.45192 #> 151    173632.14477      -4285.7674  -858875.6289  -43733.2855   -2800.49562 #> 152    -27816.06297    -124750.6995  -402408.1364  192612.4403    8113.78000 #> 153    271453.74136    -545664.2320 -2970302.3096  220777.8993   49788.68034 #> 154   -249880.70724    -581298.6228  1366166.6323 -388931.5856  -36088.07933 #> 155   -139283.88241      29139.9906 -2856361.0728  367663.0411   -3108.76468 #> 156   -177414.75283     -95834.5378  1440235.6495  165548.0492   12894.87804 #> 157     83321.25369    -125332.5311 -1730095.7400   11486.4878   18856.45229 #> 158     44732.35071    -271351.9389  1104762.3294  112356.3800  105917.67376 #> 159    -74949.33061     447219.1690  -655427.6272   -7378.7355  -14268.20742 #> 160    -57572.41307    1027425.8486  1268437.7326 -216614.1670   -6518.74948 #> 161    165672.02640     889262.8618 -3473391.1480   90323.2507   -3707.87542 #> 162    108148.70087     -72512.2720  2012200.4104   73125.6596   -7386.04140 #> 163    305026.54103     530299.3409  -636008.4722  303568.0209   15816.74156 #> 164   -325632.37249     179911.8221  -236930.4682  -10389.6254   -1242.32521 #> 165    269694.53533     437557.5179  -513156.2908  -74449.1402   12146.34059 #> 166    -68028.30684    -395768.0411 -1866012.8124 -232690.3547   42233.13725 #> 167   -164777.84717     454237.5711  1467326.8737  104527.5425  -37908.56113 #> 168    198597.01082    -401223.8607  1138786.2237 -266617.3777   15679.72254 #> 169   -208512.65254    -324140.0325  -147692.4384   39007.8683   -3454.76888 #> 170    196758.61497     -57335.0073  -622290.7851   95296.1240  -25162.14374 #> 171     72315.51966     480746.7888   613250.4127  -33556.9272   -3586.15504 #> 172    113673.75184    -487785.1816  2046398.2480  241802.3485  -21281.99637 #> 173   -196471.19893     -36481.3298  -548854.2592  135116.1831  -36469.36537 #> 174    209865.67031     469536.3520  1064777.7308  198160.1986   27063.95960 #> 175    445599.18495    -133105.2552  1577995.8293  447206.8960    1067.84062 #> 176    440702.65274    -193256.1081   921159.5159  -37550.6509    2068.40711 #> 177    242472.52458     -26939.9030  1487591.7022   98035.6554  -10930.77704 #> 178    194217.25368    1208357.1592   724700.8534  -37301.4254  -90288.75563 #> 179    215369.37434     764491.4559 -3289778.7510   62747.9893   -7237.94606 #> 180    -26480.30554     374002.6415  -339566.4694 -120305.8755   86492.55572 #> 181   -239662.79500    -298095.3328 -1420514.5766  -43969.6770   -5389.86857 #> 182    387160.71316     480671.5159  1912342.6738  344415.3598   32073.68602 #> 183   -144797.29297     107806.3186  2218783.5641 -152695.3503  -16419.16288 #> 184    284363.93877    -206363.5037 -3797609.3277  -17447.2165  -39991.25949 #> 185   -164082.98081     253125.7692 -3964467.1930    2716.8228   61851.13990 #> 186     -5110.81109     120178.6683 -3997062.5566 -216603.4337    3994.76160 #> 187    -42563.96993     305631.3670  2732772.3624  138117.4047   22055.98963 #> 188   -164393.55406    -294279.1422  1660979.5416   63988.6156   -6127.80236 #> 189   -122807.96357     699471.3319  1263768.2639  162109.9812  -12073.79420 #> 190   -123588.42563     657399.9468   186935.1051  249829.3967  -12330.47624 #> 191    -82355.89095     -32494.5124  4180734.7911  227710.0873   -4911.65593 #> 192   -121989.30296    -184741.4922  2636365.7502   20149.8600   -7676.02379 #> 193   -340354.47228     134132.9020  -492413.2137  156453.9264   45680.67311 #> 194     18692.49513    -261768.5272  -241577.7231  100990.2444   27486.84889 #> 195    177371.48856    -504673.4641  1972498.4355  110568.0533  -36619.47376 #> 196     41579.92265      51362.5356  -928723.4916  185972.0868  -26442.72334 #> 197     85817.67251     727310.2368   548215.0805 -125961.6818  -20918.11829 #> 198   -248373.09309      68767.5868  1501417.5285 -309101.0530  -10119.73796 #> 199    -25662.10206    -968853.3159 -2077458.8707  198325.8078   -5623.13067 #> 200    119646.08146     532221.0688 -1930865.0357 -122810.4432   14762.84869 #> 201     59737.90632    -258178.6727   914304.3753    7167.5004    6540.08742 #> 202    -71795.14717     893517.1878  -300854.1203  -32513.5028   29120.96059 #> 203    -41018.49383     357383.7593   279762.6746  -98869.7005  -89422.48371 #> 204    111274.40239    -878875.4122  -296847.9259  -65312.9635  -33664.91551 #> 205     -7572.71120     311457.2587  -305718.6297  -27218.5070  -48374.48690 #> 206    179641.58533     567567.5663  -848243.9573   17322.5884   -9969.77885 #> 207      6200.49297     460495.4729   603728.0119  119846.7371  -23168.93925 #> 208    196956.17828      60638.7873  2156086.2247  -24228.1926  -26624.02175 #> 209     27294.17108     -71249.2777  2794742.4706  -41454.8595  -37665.79079 #> 210   -155211.28291    -114989.9845   614089.9721  115783.6899   47530.13712 #> 211   -141943.45466     300509.2311  3020431.4119  368230.9664  -36906.21662 #> 212    158538.43640     487475.9115 -1053674.6957  297393.0696   50260.58737 #> 213    233061.02862     115154.0368  2092775.6373  163613.2965   49383.15181 #> 214   -250937.73637     194745.3332  1728556.4506   55334.2717   -8777.29119 #> 215   -170071.75403     299163.2672  2923441.3795  484782.8863  -69060.51291 #> 216    -41452.80594     732729.0220    24274.5462  -19925.9831  -50628.78523 #> 217     54889.30118     353617.4011 -1435126.5658 -224215.6437  -35263.73124 #> 218    145295.77696     507596.5186 -1498839.3017  -51383.5867  -31225.42956 #> 219   -175327.32775    -280416.9889  3523859.8193 -310363.6174   -5243.73610 #> 220    124313.07426    -471823.1525   275991.3439 -302886.3673  -15995.76907 #> 221   -212337.90047     201885.2952  1304833.5572    7138.1061   88999.96131 #> 222       101.61776     199986.1212 -1618430.0353  315900.0788  -82614.77626 #> 223    142595.04682     536446.5290  -457700.3996   63839.4248   -1685.20637 #> 224    -69130.68832     -55955.9625  -124574.0057  100010.8651   44517.42186 #> 225    277030.54148       -150.8507  1706393.6548  -26701.9296   16497.67149 #> 226    142601.34830      64975.8563  -534719.1127 -163913.1804   85958.14227 #> 227     56313.42055    -575805.0614  -325956.5777   -7426.8903  -79463.85253 #> 228    152714.55885    -147891.9936  1312821.6748  198994.1347   64604.86863 #> 229    -25344.12391     305277.2782  2954050.0572  100879.6439  -36785.06997 #> 230     62420.89269    -835704.3678  -224025.2538   64652.3568   30510.63320 #> 231   -182033.80785     402377.2108  -423566.9812   85051.8186  -18564.78098 #> 232   -165948.13021    -475797.0046  3769199.7234  -44573.3152   90822.72848 #> 233    -99477.50635    -155449.1350  3251641.6129  -64690.1219  -38991.68115 #> 234     -9099.44251    -968664.3181   465481.4638 -125958.3275  -15086.51246 #> 235     16171.12695     -10246.4865 -2732377.1376  149125.4755  -15829.93100 #> 236     -1744.90844    -360766.9597   831120.1163   38284.2325  -20601.36764 #> 237     63977.15305    -283053.3205  3769806.1855  163870.0648   55284.10519 #> 238      8447.16489     153486.1273   577947.8498   19783.2570  -23492.89158 #> 239     25882.65169     676512.4562  -583251.1863  156607.7524   16255.57720 #> 240    102812.97414    -614056.5109  1804097.8957 -111390.2977   23294.26504 #> 241    -13107.31371    -525915.7703  1147842.1869  -48965.1248  -33960.08219 #> 242    184450.11573     389716.4727  1943758.6488 -189844.7318  -19399.22525 #> 243   -328385.06509     134849.4169 -1260616.4211  104294.1754   95687.77610 #> 244    117774.17685     -63615.4036  1106858.3755 -129395.2311  -17260.07338 #> 245    185060.71814    -587284.1952  -458209.6977  -67160.8467   86677.65619 #> 246     56861.58495    -294721.0820 -1730619.3418 -283265.5994    9751.62824 #> 247     31446.22749     564221.6692 -3548608.1433 -239511.0246  -37689.22578 #> 248     95985.81868    -138337.6707   414039.6950 -425896.4948   11648.60189 #> 249    -71479.52625    -329401.3386   170874.1838  105645.9931   16614.76394 #> 250    110164.12678     204040.3859  -522556.9503  189463.6064    7000.00402 #> 251    -23101.45411     263551.6557  1717319.6672  127919.4623  -45972.32201 #> 252   -235951.90468     131259.7218  2647204.4494  -24773.5376   68709.61919 #> 253     -6596.49444    -753069.5910  1897538.3289  157111.6713   23527.40906 #> 254    218102.27261     872905.6188  -613065.8060 -191734.3119   -9329.98678 #> 255     32509.27850     -94418.8815   492683.5620 -138905.8894   -9721.51139 #> 256   -205824.06286     438560.7577   283312.7238  -63004.7688   28768.90450 #> 257    -38582.74373     368011.5840   930369.6546  375682.6337   31422.09277 #> 258   -213588.38931     140404.2736  -744932.0772  156691.9696   -1319.35463 #> 259    149619.27459    -373300.4369    75492.6635   62679.5231  -50696.70959 #> 260     -1392.86436    -140561.1500 -1676987.1547  324643.8759   -4304.31223 #> 261    -20874.06015     -84069.5937  1814341.4235  -76950.2780   -8308.44996 #> 262   -131377.15717      95222.9464  1562425.3410  233283.2349   13382.98891 #> 263   -148307.93573     818991.4299  -792023.8458   87219.0207   24489.39534 #> 264     92027.71385    -126204.3383  -286701.5141   69330.4497  -65758.22933 #> 265      5653.50572    -378004.0340  -626849.0141  715591.8910   29857.70818 #> 266     72902.50840     105141.5970  2558013.3063   12901.0379  -13041.43481 #> 267   -100457.74610     -71085.5634 -2155569.1329  197013.3763   72008.22947 #> 268   -170486.16209     232070.8637  -884732.6530  114997.9561   29259.05760 #> 269    -43611.30447      20579.7124  2387061.9850 -304114.5523   20853.60474 #> 270    138415.64605     534749.9029 -1061943.9185 -182562.0287  -44912.19665 #> 271    135417.00566    -551554.0779 -2392050.3265  380333.9947  -38982.25643 #> 272   -101531.69767     327074.0331   882201.3662 -183304.1599    9603.66114 #> 273    -26886.75174    -199142.5585   536788.0095 -334829.2464   37826.99729 #> 274   -168210.57603    -395033.9697 -2093037.6935   -4383.4508   -6290.30557 #> 275     17468.28173     677277.7431  2858738.5056 -461126.8938   17610.31288 #> 276    104658.56672      47627.5128 -1575144.3540   75325.0956   88689.43257 #> 277    -65863.09470      27607.6262  2717958.6777   96694.8494  -54239.96206 #> 278    -40704.85905     139969.3904 -2197078.6269 -124489.4703   57120.54708 #> 279    208593.70899    -253159.6008 -2860151.6799  100252.7218   58672.66508 #> 280    382914.53562    -582403.4159  -457982.9451  -94627.0875   23534.76268 #> 281   -146663.96098     398873.1203  -562392.4243 -246272.7235    8868.92678 #> 282   -174333.26194    1035554.8310  1490330.1524   29866.5429  -38880.01714 #> 283     91965.52993     561764.7430  -384910.0179  -40847.8648   14645.04185 #> 284    -44618.80231    -142959.7983 -1322626.1612 -157505.3918   39943.87622 #> 285    104192.73950   -1035642.7810  -121442.3636 -150431.2564   63835.63427 #> 286   -131254.78433    -444405.9189 -2140458.3107  142206.0274   92093.68345 #> 287     94305.92702     -14340.7657  2681280.0119 -192111.8118   44661.80112 #> 288   -153898.66676     401739.2642 -3465232.6401 -181381.4847     107.97463 #> 289     49189.79532     -22906.2769  2034769.2546  -18430.6911   64755.99902 #> 290    220949.06869     441871.2938 -2251833.5316  150573.6126  -17499.75629 #> 291      4892.32609     398916.6127  1745283.0585   36026.4127  -56408.17715 #> 292    -83169.21992     279166.0069  1727586.8595  -21578.1445   17852.27160 #> 293   -111509.67140   -1154298.8034   358639.5388  -33413.6396   47164.45569 #> 294    -90355.81583    -316178.5440  2627121.1667  -60102.3310  -61035.86835 #> 295   -202462.80841     788024.1033  3847866.3288 -127815.6762 -101001.75931 #> 296   -161391.33441    -253913.0885  -845055.1190 -343871.0621    6774.65586 #> 297      2393.20082     419137.3309  -991912.9184  -70085.5257   17670.70833 #> 298    194114.90434      65167.7114  2714655.3628   51379.3450   45502.73658 #> 299    192289.32624     951450.4080  2163179.4197 -199318.9666   26731.92114 #> 300    163437.67975     891113.8614  -465201.9694  572226.1062  -11846.06433 #> 301    345693.60399     528090.4451  3140565.4276  108506.8774  -83188.98868 #> 302    271203.58585      34578.3292  -305593.9365 -213709.9197   14735.21700 #> 303    207607.42067     195653.0937  -116030.1718 -362932.2548   -5839.04869 #> 304   -100170.46186     -70764.8590   681634.8372    5816.9197   -6325.05944 #> 305    148841.93874     472827.8778  -621773.9081  163481.9558  -17333.95450 #> 306     67124.17555    -598068.3304   820334.5844 -302851.1422  -17684.62395 #> 307    368070.76318     984059.1132 -1348600.2599  -75120.6231     722.00350 #> 308    351367.12305    -115413.8365 -2198769.2326 -182083.9198   92360.28420 #> 309     79036.29632    -110377.3963  -312746.9970   85269.1960   67712.70111 #> 310    304081.15961     345883.0141  -324032.1472  216862.0274   12436.56443 #> 311    153369.25542    -357674.7455 -1035106.4330   73935.5777   51642.20514 #> 312   -138465.47127    -260625.3775  -412770.6497   47339.3049   24422.77473 #> 313   -101554.72125     132186.1915  1661623.9925  484571.6147   88566.06080 #> 314   -126009.03507     647997.4742  3140828.5909  367916.0194    7246.42478 #> 315    121519.33349     402304.2414   474285.6876  219527.6719   -4078.13089 #> 316    -54609.74756    -373990.2558 -1022623.1039  -53518.3112   -1330.85984 #> 317   -128643.51860     391116.0646  1733767.8875  -94339.9850   65070.85653 #> 318    177391.09529    -213647.2154  1555895.6045  279805.2333   -9451.75481 #> 319    141756.02454      57763.1691 -1838195.0758  -18389.5386  -44190.89714 #> 320    -77040.06163    -440074.8787  -798141.3084   40921.0213   58363.60864 #> 321    304958.27770     504695.5223   470568.5165  322418.9369   53127.52117 #> 322    -61488.74462    -419536.6316  -414868.8929 -359308.0193   54769.51104 #> 323    123022.33122     227670.6280 -2663408.8677  -60807.9845    3719.78567 #> 324      8072.85126     -92865.0023  3152221.8385  209217.6535   16602.45018 #> 325    119624.78953     910583.8943  -157160.4454   82892.7796   26529.75973 #> 326     86849.44104      -9944.4445  1062717.9564  440825.7602  -41035.31665 #> 327   -129938.51572     257677.0032 -1050883.4274 -211179.1023   -4596.63228 #> 328    -26926.67929     460786.7705  1740253.7250   24575.9830  -23113.37245 #> 329     83779.94519    -325893.4797   984725.9894  133487.7571   26376.36241 #> 330    512717.34357     109096.4707  -765954.8720  223842.1304   -5414.27225 #> 331   -183992.21645    -352601.1644   169536.0661   32193.5088     185.24107 #> 332    114935.98997     648364.0130   793436.0264 -129190.4262   -7694.47559 #> 333    166059.85943    -364946.6335   327691.7798   18178.9039   54419.79385 #> 334     29661.22619     152664.8178  -800123.7460   71110.9953    6543.64318 #> 335    242381.65899     569545.8782 -2791675.2922 -204006.9999   33738.99525 #> 336   -103557.15994    -632139.6765   681404.0576  392604.2139   -5043.26563 #> 337    298777.08945     449049.1606 -1299157.0443  309002.0128  -37869.02168 #> 338   -135781.17305     731451.2990  -870091.0045  -34040.8560  125477.64523 #> 339    -75159.52171     645304.3409  1928679.6850 -320511.7258   31511.50986 #> 340    -39961.29046    -662282.8014  -763923.1438  -86996.6933   34221.30004 #> 341     54908.77896     515211.8222 -2682007.8395  -22804.3883   -8011.53571 #> 342    115864.36455     941632.2035  2663465.9583  183654.0850  -40118.72616 #> 343    131903.34933    -180610.6669 -2522842.0549  287204.0897   -6313.32737 #> 344    -25083.36381     143734.4252  1533871.0620 -131649.4622   16113.05929 #> 345   -113616.43245     -12652.2829   738311.7999 -203942.7142   -6551.51385 #> 346   -265427.42328     548174.1063  1420114.4807 -164316.1343   41565.66909 #> 347    198148.62733     346359.2083  -332308.2235 -177949.3372    6268.04480 #> 348    236717.94616     373444.0858 -1297337.2715   44855.6357  -35149.26563 #> 349    107046.68294    -886713.3753   999246.8731   96387.5038   11111.35965 #> 350   -294546.64028     -37540.8149  -774516.6282 -176906.6907  -41940.10916 #> 351    199630.58783    -574962.5058  1976066.0157  116007.9441   36674.27899 #> 352     50087.55277     791811.9514   724417.0029  171990.4418   17427.40727 #> 353     58437.68033    -490414.2139   719073.8153  -78302.6434   14685.18370 #> 354   -124076.53962     -51844.6115  1147800.0467   60272.4783   51532.29414 #> 355     29716.40748     298548.7407  2056944.9236  117667.3280  -17769.94422 #> 356   -124950.47667    -101267.0001  2830237.1071 -306410.9247   46367.08305 #> 357    225685.72296   -1091004.5458 -2898740.9969  162011.5813  -37843.99269 #> 358     71162.60593     349648.8107 -1211337.8622  -30877.2263  -28295.66989 #> 359   -173499.22103     147068.8514   558498.9081   71005.5244   -9083.09166 #> 360    226278.41838    -368371.8767  2519779.2819 -339351.5312   21242.13862 #> 361    311093.60506    -375361.3924   757342.4746  165661.8840  -41591.94431 #> 362    -22406.24876     692754.5703  2018838.0918  142990.1715    2515.83848 #> 363   -318866.28679    -671624.7981   227492.0033 -186020.1951   65183.01034 #> 364   -162388.30244     -89022.7963  1285028.7152  -88715.9881   24574.59622 #> 365     32322.13814      29921.3789  1444613.7087  125266.8209  -28064.27498 #> 366     10610.84064     693838.2351    15013.4933   39506.3459  -18424.38056 #> 367    -20815.81967    -124033.3710   729421.9116  287731.2329   53601.85154 #> 368    104457.89487     555884.5406  1867725.9842  390128.0803   14814.84278 #> 369    175040.39102    -586566.5389   336334.2116 -115982.3367   13216.39363 #> 370   -128110.35031     187439.5520  -135144.7701  -39895.5572  -66292.27916 #> 371     74539.26457     441169.8445  1069185.5816 -241549.0437  -15367.61674 #> 372    385965.40987    -502241.2734  2738802.2160  252022.5843  -43344.07548 #> 373    105417.14950     -23955.6312 -1817139.1910  -92765.5924  -62135.73376 #> 374    325832.00708      59459.9340   996394.8793  220110.2058   22793.51748 #> 375    -59769.94227     107082.2065  1094043.7175 -333004.9982   -6766.63560 #> 376   -197857.81691    -453598.8231   599632.2789  277389.5091   29255.80026 #> 377     10340.15578    -403834.1612   939705.4325 -281856.2876  -16846.70882 #> 378    113307.28037      34090.4615   512893.7616  131588.9114    6222.35787 #> 379   -264809.88682     242498.0680     -518.1162  310340.1448   -7065.57800 #> 380   -162590.94062      91246.8188   969698.2695 -160893.0253   22616.41794 #> 381    -44937.32482      29131.4615  1216543.6926  309526.5069  -19681.63578 #> 382   -332555.91840    -561212.2381    83568.7836  119247.5753   61062.35540 #> 383    125618.76238     407600.7732  1437771.1726  278567.2510    5285.56558 #> 384     56378.23380      90224.6585  -255947.3866  162141.4787   60032.22186 #> 385    236859.04108    -227710.6814 -1651615.2509  151909.6119   16202.75396 #> 386   -201544.18783    -142984.7726  -525876.2219  276727.1857   14848.73281 #> 387    129956.46912    -149243.7572  2898049.7032  102509.3684   70220.01960 #> 388     31872.78136    -846425.9604 -1943148.0594  -92401.7204   -1173.24589 #> 389    302205.18167     337738.7182  1049280.3965   -8055.3576  -27805.98297 #> 390    -42767.66552    -237422.0461  1340328.5044  175324.6758    1354.58089 #> 391    111784.70414    -634053.5902   574830.8541  -17418.3369   22516.73781 #> 392    -58323.73629       -307.6962 -1596904.0921 -305590.5487  -70562.17127 #> 393     95595.84252     -61944.3628 -1311004.3595   26428.2306   24711.88996 #> 394    110646.63704    -874824.8386  -968393.3749 -242660.8477   69492.58037 #> 395    -29692.83839     369272.0265  2626971.8052  199430.4035   46029.50826 #> 396   -109872.89871    -401326.8618  -224891.6737   75032.9847   55435.92354 #> 397   -317331.97899     762677.0912  1436336.6923  225293.7239    3173.77239 #> 398     47393.42613    1305808.6807 -2021687.7136   28681.6480   42333.33729 #> 399    162255.96925    -569551.3741 -2122006.2986   56134.9090  -32337.72509 #> 400    -73910.57245     481657.2945 -2830084.1190  131838.8926  -33195.96917 #> 401    320632.98111     924553.4959 -2690731.9127 -232408.6700   45515.31551 #> 402    -27187.49909     224803.3867 -1057789.0894   52841.7140   15357.77861 #> 403     51446.80600     845644.9139  2601920.4754   28487.8640   22637.04862 #> 404    235879.47009     531234.2079  1464182.9335 -239934.7011  -25581.08031 #> 405    -21323.82116    -821173.1609   472010.4708 -136142.2091    4094.08376 #> 406    115230.10173     447059.3709  -315633.1373 -178693.3385   69985.57639 #> 407   -312514.93982     265673.4849  -995275.1480  163962.5484  -32333.07232 #> 408    212565.62322    -105112.7492 -1026370.4964   23391.0055   20709.34989 #> 409    -65112.61673    1068743.5533 -2103259.9330  -40395.2969  -21748.56857 #> 410    -69638.65045     339820.8992  -605698.1723  235558.5499  -43586.88126 #> 411     50272.55639    -187553.7532   304922.7014 -189508.8159   65333.36026 #> 412    130537.12527    -157550.2533 -2842435.0341   41493.1823  -51441.64012 #> 413    195797.32249     -38866.1365  -391901.1390  -77552.1991  -18046.04713 #> 414    -34365.52065      19943.9878 -1557681.8189  211419.4494   81683.74594 #> 415   -200012.51839     306934.4067   341757.2446  -50784.8051  -24793.38657 #> 416   -130497.45758     272354.4172  1555069.2534 -150791.8984   -6455.71630 #> 417     75141.69216     131819.1141  3783321.7558  131169.2457  -11426.59382 #> 418    -12081.66968    -151606.1783   618168.9730  279098.1732   11474.74254 #> 419     -6309.72639     500115.8389  1623126.4882  128368.2218    8233.11886 #> 420     94421.01594    -421135.8845  1036834.6073   16324.2363  -70560.36084 #> 421   -303040.09292     -76152.0144  -209990.0683  128755.4925  132848.01072 #> 422    341991.95200    -342876.6196  1271459.8423   20558.6050   17849.02736 #> 423    -79973.78894      19514.6342   815279.2891 -125155.1984   95044.99615 #> 424    124465.44411     279868.1109  1085410.5682   20458.7257   71643.30356 #> 425     96350.91961     475363.0041  2356777.4876  -66894.3630  -22196.28937 #> 426     -5229.02172    -149483.4269  2058084.7925  410033.4983   59728.17996 #> 427     -4349.84010    -215839.2700   634662.2207   64929.0555   77715.14362 #> 428    -19460.14237     -54390.8976  -646798.6627  252082.5051   -1111.18758 #> 429     73466.65424      72040.6070 -1130075.7614    2085.4323   27570.02105 #> 430   -399880.49372     449798.5171  2973532.0762   46160.9841   23029.19103 #> 431     30266.21208    -441955.6535  1433850.8020  -42411.7158  -12415.51859 #> 432    207276.06356     622985.7766   478415.1341 -225336.1249   25605.83506 #> 433     36029.71885    -137957.1010   405141.5740  252200.7361   15997.62307 #> 434     34655.34771     327674.5420  1519317.4256 -158162.5384   46060.45026 #> 435    -80854.20590     566915.2939  -659431.4151 -229986.9677  -53070.30531 #> 436   -176513.37229     106631.0197  -488434.8102 -266770.8715   77465.53600 #> 437    143856.93465     311654.8848  2775095.1954  151867.5489  -11817.21228 #> 438     99887.81346    1211189.9516  -135339.0848 -232897.7141  -47769.65154 #> 439     48302.96607    -235521.0654 -1846913.2837 -144769.1816   26391.89564 #> 440    -23294.29594    -311650.1642  -513138.0470  159225.8717   40736.26231 #> 441    246435.30063    1251222.5939  2473338.5648 -340345.2268  -33644.78302 #> 442    -83716.71723     484309.6478  3201339.1464  264238.2345  -14205.35712 #> 443    -83277.13088     138592.7367  -992791.4987 -116814.1892    5266.44961 #> 444     84542.04314    1514862.4676  2041069.3435  206301.4771  -46867.63730 #> 445   -186886.20658    -291156.0073  1017515.6028 -261008.6893   58158.23445 #> 446    232321.92164     -82635.5702  -254929.2462  429024.7842  -15348.26150 #> 447    -28039.38301     186433.5449  -565035.0906  315568.3770  -30477.05467 #> 448   -113592.65494    -402749.1672   787268.3856  -12403.7607   -5258.16167 #> 449    -16600.99739     289333.7223 -1584710.1466  255087.8591  -18187.69743 #> 450   -263533.42684     107999.0495  1451297.3450  -90636.7329   81856.43267 #> 451   -134763.39933    -333921.9124 -1403271.2834  318150.7265   44835.88169 #> 452    199480.81689     140537.7700  2273476.6562 -182996.2450    -444.02587 #> 453   -169165.41263      82160.7527  1226552.2099 -359493.0276    2868.09630 #> 454    -65505.92021     135748.2692  2568793.6077 -156147.2800   14610.27655 #> 455    -28466.99262     307418.2283 -1052743.8557 -117540.7934  -18621.55020 #> 456    -63184.81705    -347721.7404  1782929.1315 -233818.9309   68630.35001 #> 457    -36864.08487    -277786.7019 -1001305.0007 -130146.3238     183.85912 #> 458   -159815.71470     812220.7620  -373486.3858  -52084.0680  -10004.62060 #> 459    -77043.47345     133228.2361  -519491.4266   51993.6347   42450.09298 #> 460    238236.71853     330462.6091  1511893.6752   80716.5294  -36512.50814 #> 461    -40492.94710    -296349.4974  -914930.7035 -146330.4689   14464.88106 #> 462    -70062.62378     751751.4750  1524117.4967   82578.3911   19990.04492 #> 463    185497.60617     -96875.9108 -1962467.9772   18603.5558   20032.81502 #> 464     13219.24711    -616323.0275  -840277.3438 -434547.6654  -74021.91135 #> 465    396981.73819    -115532.3692   392947.7057  262892.4922   21606.21432 #> 466    128218.18609     -66965.3049  -829107.2201  128625.0901   -9361.45943 #> 467      8594.86377     449354.4484  -521912.2651   29090.8389  -38698.95837 #> 468     92639.36866     926229.4043  -485928.4617  -46096.1734   -6292.39932 #> 469    238732.34221     -37853.3151  -105053.4996   11963.4539  -63664.45081 #> 470    156131.54800    -696299.8756  -952143.9776 -126473.9012   -8654.75504 #> 471   -220125.42705     535747.0681 -1208815.9100  251165.7130  -62928.57899 #> 472     43331.37077    -655176.2952  -600813.0577  295871.1685   63317.97820 #> 473     18497.84351     448414.0706  1441772.2759 -228123.6816  -63149.61371 #> 474   -169558.07133     314125.7561  -345717.6396   67019.0594  -18383.09242 #> 475    175066.66989     418958.8332  -593978.9202  244895.7869    2739.98627 #> 476   -214569.84901    -783119.5633  1483344.9381  278016.9819   -6250.04028 #> 477    103180.92390     -38309.6398  -979246.0958   80615.2402  -16245.51714 #> 478    196194.67540    -288264.0091  2923399.9794  166518.8199    8403.81357 #> 479   -193662.82182    -512907.7594  1506376.1108 -347301.6187  -55445.76922 #> 480   -107026.70067     197595.6622  4949939.5973  -30961.5012   22524.79035 #> 481    270569.10078     282702.3923  1400370.6286  427844.5933   58925.53760 #> 482   -292409.37002     -96044.8142  1460597.1224   71186.6220  -74305.54384 #> 483    239327.27921    -372484.1248  2146173.1104   35191.4893    9918.14347 #> 484     99543.76973    -388187.0312   152269.9699 -335024.4339  -51038.07761 #> 485    273472.13588    -321737.0486   401236.1524  181824.3004    5249.82865 #> 486    374965.14779    -295801.7985  3052612.4086   82317.2188   55923.90622 #> 487    215956.21491     369191.7089  2850601.0497   77243.6856   49478.10416 #> 488   -258285.19065     731697.6551  -525967.4372  431307.2340  -23796.87841 #> 489    -57353.04226     697129.8596  1191328.6041 -122639.2450  -20756.62942 #> 490     58669.96574     875137.9727  1736157.7750  168176.1893    7142.79463 #> 491    116716.67985      -2444.4534 -1286163.2324  -32558.4550   78021.04386 #> 492    156211.54839     752329.4298 -1206750.6349   11103.3735   66878.50436 #> 493      7169.21787     112042.2229  -771678.7406   38101.3396  -50748.02432 #> 494   -108246.80512    -293709.9402 -2720697.8049 -313743.8274   55258.03653 #> 495   1555692.50729     148487.1078  4677542.5759 -206091.3601  -25455.01318 #> 496     11222.84734     207812.1529   543822.6064 -235632.5187   37601.93535 #> 497     75729.28892    -724906.1858 -2184308.0838 -491087.0744   67028.34318 #> 498    -63714.98305    -397032.4672 -2826138.3493  254256.4984   33836.87782 #> 499        97.65159     341790.7271 -1869082.5939  297841.8490   65557.95819 #> 500     66261.45290     -44346.8508   953167.7643  420525.6291  -36395.46836 #> 501   -161614.40770    1029624.2031   560156.7591   53519.6336  -27265.02317 #> 502    -52125.76195    -165880.9091  -268759.9081 -217739.3018    6930.13068 #> 503     27304.03459     293675.3998  2767726.4353 -156349.4880  113817.24566 #> 504   -161616.06177     113736.6021  1559993.1072 -108696.7726   72227.96667 #> 505     15860.59778     336263.8846  1794293.8741  189956.1703   21354.06964 #> 506     47351.08338     231368.6454  -921650.8149  300122.5368    3656.33795 #> 507    125042.78500      13277.5133   512894.2880  335397.5559   28177.22988 #> 508      3286.97241     -58020.3469  2726631.6957  -39941.3866   60036.26672 #> 509   -112531.22220    -274843.1747   830574.6879  297040.1217   37960.64487 #> 510    175730.40275    -422176.3462  -476671.9056  501937.7861  -24892.59476 #> 511      5787.53736     205758.1905  4920899.7633 -447849.9724  -73510.93511 #> 512     95444.95334     594188.8887  2754929.6106  305621.9595   26612.41205 #> 513     74504.92579    -298564.9015 -1511837.0500  124162.6242   42197.52138 #> 514    -40910.35123     157237.6156  3867956.4491 -179450.8556   16867.48255 #> 515   -263459.05524     828731.9878  1152003.9992  430968.8600  -30334.89459 #> 516     25154.13565     158757.7149   976045.4787 -103803.0297  -53130.62179 #> 517     98197.99672     617974.6032  3247784.6936  355250.8648  -44546.02180 #> 518    -77990.11951      64518.4308  1415719.8611  298084.2699   -1905.33942 #> 519    111066.30398    -210321.1022   220751.5071  228265.4686    5354.25558 #> 520   -136200.64605   -1111999.0520  1539477.0828   51164.0745    1486.68067 #> 521   -283417.60475     -21211.1091   624224.6614  -89540.5261   26396.93018 #> 522    215545.62362    -318725.0893  4278629.8234  126780.0022  -30008.49735 #> 523     21991.22996     489092.6787  2079314.1891  116525.3559   -8529.07012 #> 524    -70115.61360     685907.8368  -710196.8130  148768.9238   -5933.79043 #> 525    -89304.54728    -319478.6316 -4549755.8285   69340.1536    6968.80342 #> 526   -125369.91181     357206.9984  1118806.9446   62472.7898   44679.52387 #> 527   -192224.47724     450917.5419 -2273224.6841   26867.5176   44691.21758 #> 528    290716.93073     112241.1701  3960053.1609 -149383.8639   28612.96763 #> 529    -28326.56340     324467.8186  1885349.5132  309389.1264   69344.06820 #> 530   -130362.98048    -744721.0046  1352779.0927 -225453.7739   -1039.94779 #> 531     10062.03342     -84148.6211   840244.6772  272520.3091   57171.58886 #> 532   -150651.06550     -86539.7476    90021.3613 -186644.2465   79372.15795 #> 533    137210.70760    -114211.6505  2104050.7280  136502.6794   55662.28802 #> 534   -142149.79750    -156552.6337  1946005.6722   40587.3350  -62926.49714 #> 535     91330.35511    -469120.6571  -380936.5436  -97117.8822   52435.74890 #> 536    -47139.29443    1012244.1227    59359.6607 -185089.9052   36408.63422 #> 537     47044.26643     248135.0715  -256653.3760  137862.5429  -46185.12035 #> 538    364731.86757     805000.8777   949464.7255  -63106.0607   31413.84145 #> 539    179874.46509     116558.2196   734691.2151 -237393.9000   17777.14174 #> 540    366944.44757    -877054.0773 -1315562.4741  114565.2438    5808.92308 #> 541     32586.64761     195199.6308  1464938.1778   38684.4291  -10423.71281 #> 542   -243890.45761    -220087.4344  -834340.9948  265809.7391   42855.13107 #> 543     16301.58755     -50629.3077    11523.8064  316975.3231   64568.16927 #> 544    -90322.77136     414550.8569   280589.4800  -48273.0948   19817.23334 #> 545     53894.52809    -631883.2823   648154.5715  308561.0457  -34179.76926 #> 546    311379.68495      92136.8587    93075.3338  307013.0260  -53284.56930 #> 547    -20831.10148     153640.5523   -55983.8765   29255.8705   -3149.63863 #> 548     76954.24611     163224.4547 -1322408.2189 -183865.4790   -4851.03709 #> 549     25027.14955    -602702.0466  -631186.3288  -61561.9671  -28825.80024 #> 550   -169562.10392     378456.1267  2991550.7226  521819.3984  -24083.99806 #> 551    336238.22884    -535770.2136  -777981.1903  251735.5432   36228.20961 #> 552   -134776.40271     377592.3966  1826697.6959 -127898.2438   -5371.23441 #> 553     22639.01763     228363.4066  -642286.3057  486765.1420  -42633.65356 #> 554    211452.73195     198959.7905  2325408.3505  -38113.0769  -12500.23001 #> 555    248422.27581     581506.1750    -9982.9249  124483.9842   52329.65437 #> 556   -204157.48058    -896831.7949  1284420.1427 -199357.7420  -12074.72224 #> 557   -361941.77529     651023.3209  2883375.0017  -96729.5167   49969.35731 #> 558     67469.47511     257746.2768  2003111.0191 -249616.5525  -35599.62291 #> 559    408483.69877     106774.6155 -1756418.4108   91900.9672   70445.59398 #> 560    -90928.92936     531517.9446   542407.4251  131492.1664   21381.38293 #> 561    237621.27777     337153.4995   580470.5985  122984.9196  -44047.84532 #> 562    -49987.64691     345627.9119  3949727.6989   48709.8959   59754.69156 #> 563    -44336.68743    -298302.9065 -3045408.5553 -263352.0647  -32066.76139 #> 564    194981.38242    -424658.0398  3030743.2154  277669.1800   25800.59000 #> 565   -151627.29278     648862.6145 -4131520.8473  -41145.4445   37141.55091 #> 566   -143683.35309     -75727.3993  2583135.2418    3728.6659   28034.93532 #> 567   -179966.99562     444062.8771 -2330036.0308  489838.8761  -63006.60279 #> 568    256834.66813     575961.2251 -1840991.5625  237596.3320   52974.12401 #> 569   -112029.72184     -79477.2894 -2066538.0257  126077.6355   58681.68869 #> 570    135543.86741     -27238.3755  -802351.3774 -112760.2402  -31529.76158 #> 571    -88348.72036     373235.0147   257367.3062    -916.9959  -33037.10571 #> 572     59973.05972     658657.7834  3060534.7760  135606.5821   95669.90242 #> 573    176994.92445     852838.8735   -48291.7644  407176.3552    4865.98314 #> 574     96244.31713     211187.9548  1073738.5437  -87651.5228   13895.95418 #> 575     88982.95044    -388047.2954 -1493621.5219  104253.9069  -24343.84211 #> 576    327503.01234   -1087509.9441 -1271292.6269 -291610.4357   24751.20473 #> 577    130901.21426    -548209.2237  2016249.2244  419859.5317  -17688.90394 #> 578    -65888.47092     602424.9686  1312441.4299  109115.7977  -82713.43087 #> 579    428433.95576     506074.4503  -345554.1924  896377.2833    -478.38286 #> 580    -45707.19317     630569.2158    59261.2205  313884.5790   -1032.41102 #> 581    -66979.20834     -77426.7725  -680398.3802  108996.7701   47538.74257 #> 582   -208515.35017    -352344.7654  1930829.0758  243978.7590   67192.28764 #> 583     31282.44599    1040722.6225  1118136.2853   34864.6090   23940.83499 #> 584     75066.56106    -317695.5151 -2263153.0149   32132.1124  -49923.11376 #> 585    176730.19289     534826.6561   964575.7525  183885.7943  -27137.46132 #> 586    -20326.80230    -839177.6980   649233.8615 -125784.6699   -8491.85018 #> 587   -284510.57565    -398352.8264   193513.9913   16282.7789   -8019.13494 #> 588    -32731.73847    1174435.1717  2611534.5436  446189.4275   20228.19228 #> 589    171988.71043    -779879.9028  -196000.0675   98632.7207   73325.92637 #> 590   -307998.47181    -369852.1908    33638.0308  267449.1628      86.51789 #> 591    -59290.89159     572219.0623  3235863.8242  178229.9166  -78566.94096 #> 592    169935.38328    -684673.0224 -1528471.9842  -41514.6013    1080.75206 #> 593     45218.44575     241572.5722  2582694.9361   34860.1673   48130.56382 #> 594   -178330.37466    -167338.1523 -1123671.6326  -16343.2616    8457.47485 #> 595   -358162.39857   -1017402.4707 -1425105.8699  117239.6227   29777.00039 #> 596     95710.71946     563732.4908   140751.2052   84750.6529  -17639.76291 #> 597     44797.62673    -628867.2572   429955.3190  -13515.1415  -13428.00416 #> 598     75534.17709     277028.5375  1806088.9999   88864.4050   37408.49555 #> 599    -24178.67927     521080.6183 -1418944.0327 -182359.5652  -42231.32993 #> 600    157545.19794      76987.0850   416634.1714 -312951.2357    -630.49460 #> 601    106392.18364     -78057.8056   391109.6872 -164119.6081  -49915.94767 #> 602     55150.36469     180335.8848  2691447.7282   87157.6376   32122.70950 #> 603    130113.69378     -45512.6905  1034945.2516 -120325.8071  -20129.76942 #> 604    104212.56958     556546.7107  1100113.5935  140522.3827    8431.97865 #> 605      9577.61758     473655.2551  1611620.0380   70149.6768   16112.50456 #> 606   -171824.64865    -187675.5955  -505496.2247   86378.4944    1236.59579 #> 607    -62899.60400    -241403.2670    65773.5978   41947.3421   31489.40076 #> 608     51560.79454     591016.5517  -835837.0883  263071.2482   57918.31929 #> 609     49413.50835    -276941.1805  4532994.7156 -123017.9979  -10883.75154 #> 610    -80464.08585    -258308.2616  -912167.5389  206621.4189   64232.52656 #> 611   -101027.90016    -609207.6980   607341.3032 -306440.4106   14802.67908 #> 612    357699.79629    -403111.2781 -1176667.7871   13498.5827    3999.89780 #> 613    -61284.95920     197259.4054  -548865.4074  310203.4078   60247.08256 #> 614    -96666.25146    -179655.4655   852012.8109  -86756.5226   12483.94964 #> 615    109170.02655     656058.7809   156213.9414   70210.5580   49217.35122 #> 616    235647.60911    -535503.1669  2625513.4485  348036.1904   41063.56444 #> 617   -147086.43846     -26013.2110 -2225467.6174  190282.1883  -62820.89457 #> 618   -109643.51254    -402933.2402  3617247.0668  -90664.1071   13126.06689 #> 619     19508.43600     293012.2549  -705323.2316   17904.1379   -5716.22105 #> 620    -92661.41939    1059290.3826   887763.6167  -37220.1848   -4445.97223 #> 621    252830.74849     119259.4612 -1203868.5815 -290332.3990   45220.52261 #> 622    -23634.54461    -271656.0234  2044806.4853  219379.8961   18393.55456 #> 623    304013.15392     499427.2934 -2346229.5034 -377167.5885  -36113.14813 #> 624     50974.98484     563109.8369  -551709.7703   76580.5053    6831.44436 #> 625     19296.74029    1812605.4964  -305210.1335 -292480.8073  -34122.90881 #> 626   -122426.15704    -368434.6783 -1046186.9922   62319.7463   67941.68135 #> 627     49894.11875    -213036.3446 -1481423.5713 -186979.6683   27629.34240 #> 628     98763.16344      38901.5998  3451193.9148   79173.2090   50789.13493 #> 629    206267.83734     682952.7399   554526.6544   78897.5847   14601.79856 #> 630    105987.38764     -78844.9485   809387.7073  148242.9815   28260.11391 #> 631    -62789.95189     344106.1435  1696329.2063   39393.1106   64146.92147 #> 632   -104275.34362     101804.4425  2008389.9146  537026.8301   41276.30349 #> 633    150564.11946    -799205.5420  -104165.4367  -85834.2198   74675.87673 #> 634   -201682.61477     253805.6513  2169543.1169  -92775.0721   43056.29427 #> 635     25516.95678      61752.1118  -937105.5615  -23081.1189   50587.22969 #> 636    122055.42645    -549092.1470  3973217.6697  195721.3515  -33918.05265 #> 637    -84730.44165     273900.5712  1825756.6559  149613.9554   53055.84896 #> 638    -39195.91105      66434.3820   904874.2280  -74092.0536   63559.66106 #> 639    242498.14136     470977.9327  -238672.8879  323181.0816   49028.12207 #> 640   -160512.16593    1085947.1086  4410880.9938  632601.2781    2986.10497 #> 641     31075.88279    -233063.8547 -1702885.8414  258787.8987  -14012.65398 #> 642   -357171.61961    -153234.3514  -912067.5296   58040.1642    5386.73888 #> 643    231100.84425    -593514.5503   623303.7522   97447.3584   13629.56688 #> 644     64714.84425     867279.4055  -391591.3361  320691.6920    5913.38475 #> 645    651013.19495    -840594.9415 -3186063.5794  111011.7225   46895.97019 #> 646     82396.77305     368697.5303   938470.3418 -212207.2844  -73599.37285 #> 647    161061.02260    -148397.3911  1065631.4593  -94308.5562  -86124.12602 #> 648    -87936.99407      35857.0308  -606964.9079  601986.7100   20778.67835 #> 649   -252250.37753     906656.0071  1377839.6259 -222603.7586   54804.63378 #> 650     76333.07006     515071.1559  1485592.7589   26023.8749   79118.81170 #> 651    -91214.07578     592581.7021   226492.8240   32275.9672   12002.89312 #> 652   -203759.35886   -1300791.6210  1896054.7786   95498.2873   18254.24941 #> 653    138254.92236     672935.6543  2042161.0147   95568.7361  -17975.63764 #> 654    149376.26509     379866.2409  1816207.8908  393532.4163   -8185.10385 #> 655   -306581.21179    1030085.1946  1254625.2660   60116.2077    3774.72197 #> 656    138311.21985   -1087419.7336 -1069542.0053 -163053.2946   41840.66028 #> 657     91951.60630     656170.9351   814755.6165  175159.9001    7457.97993 #> 658    151200.46495    1284182.4303 -1333300.7678 -399622.5052   43839.11994 #> 659     -7336.41705     512344.5609  -210215.7086  142465.1862  -11927.02840 #> 660   -207695.24021      -7322.8348  -447846.1971 -196424.1834   53054.63150 #> 661    100741.45962    -162485.8644  1943618.8013   84434.9065  -54561.21520 #> 662    -39322.53391     541656.9355   290128.7898 -163717.0596   29248.19845 #> 663     19192.53896     486230.7157 -1085793.5579  406129.6967   30267.70590 #> 664    -24190.26064    -540987.5309   474439.0179  208459.5126  -66848.67245 #> 665     20951.94211     218954.2864  1461686.9240   43569.3138    4283.99830 #> 666    193746.76068    -211065.2868  -670916.5323 -414755.7487  -10749.96600 #> 667     52194.52400    -567303.7986  3019677.0227  103275.8128   42429.41598 #> 668     18796.21655     533408.3141  4293313.9804   62561.5875  106775.71245 #> 669    -46066.45036     281384.7325   376773.2766  459115.4548   39936.77922 #> 670   -140446.44729     369127.0159  2785720.2942  132656.0825   -4069.36684 #> 671     85827.87410     672650.3906  1405928.6470   48384.5447    8707.59011 #> 672    107403.64943    -381461.4052  -735247.1594  417382.7242   38976.59104 #> 673    129519.82797     175734.9501 -1366960.6865 -189906.6049  -30008.31504 #> 674     69098.89859     -39927.5709   583553.6309 -137395.8249   -3860.30037 #> 675   -188514.10513    -278479.1860 -1874787.6274  116111.6824   67144.19987 #> 676     92991.19413    1348249.8778  1072330.2821  159790.6369    3874.76522 #> 677   -146126.55035      37538.8158 -1776947.9805 -123975.0464   25985.51097 #> 678    161503.09298     257927.4619  1559178.1155  455944.3125  -14875.40093 #> 679    -69021.27802     190577.7775 -3261297.8394 -221385.2559  -20523.98665 #> 680    231495.85871    -553022.5005  2469603.9035  121157.4985   -8112.02205 #> 681    346858.89444    -220701.8957  2421238.3335  165016.9277   -4566.64712 #> 682     22690.47030    1588298.3910 -1917028.4877  206404.0483   64595.14307 #> 683   -116219.14028     413507.7385 -1289928.9258  192578.5028    7357.37512 #> 684     31297.01968    -111980.9681  1529308.3635  -42019.2907   -5482.63627 #> 685    254426.78407     -77329.9500   395104.6272 -179257.1556  -53465.19983 #> 686     14134.85913    1089079.0100   659678.7661   38389.0274   94890.87971 #> 687    -67786.00221     344862.5869 -2950466.0238  124728.5920  -27341.64439 #> 688    116347.42204     518084.4899  3473677.6131 -315556.9731   30425.09492 #> 689     -5271.93432     154489.7071   627624.7031  493549.4731  -10735.50929 #> 690    122306.66295     800020.0468  3032392.4805 -268791.7076    8791.44317 #> 691    119425.81962     -61108.5081   505984.1098 -230580.6990  -10294.72788 #> 692   -184287.23001    -143156.7726  3596681.5873   41010.7628   18103.94183 #> 693    -78464.41507    -150896.1395  -528363.1756    7182.4978   26265.10748 #> 694     -6735.29941     -79311.0976  1417308.9154   95332.7586  -17868.41385 #> 695    -96639.96456      72179.4575  2392768.7751   58315.0530   69142.09752 #> 696    251587.53082     229653.3934  -301618.0902  120829.8842   20025.72507 #> 697   -135756.32521    -159782.4461  3705118.4704 -263556.5507   46576.47678 #> 698    -25915.96278     -38361.7873 -1394569.6117  -49699.5002   -7532.67550 #> 699     67501.41698     697270.1536  3156295.1529 -161220.3352   19044.30612 #> 700    219446.29696     492985.8320  2726929.1288  193090.5084    -472.47211 #> 701    143021.81745     162370.5293   312266.6092  265451.9192   -7873.30350 #> 702     -1582.57188    -728511.0913  1488072.9336  -29391.2127  -24702.69449 #> 703    375432.88037    -297173.9465 -1739880.8920 -124819.9569   54187.00836 #> 704    288280.85574     634932.7003 -2671429.5203  414364.6311   -3444.15587 #> 705    718749.35649    1160754.4716   886477.2016 -289895.0823   -7420.97008 #> 706   -113922.18539     257505.1883  1788479.7696 -188334.1760  -13061.91148 #> 707     11181.70368     392587.1492  2974350.8286 -279786.1662   36893.92215 #> 708    -13003.39190     125509.8193 -1410113.9708  -27943.0828  -58352.73454 #> 709    124378.64156     188298.2916   508517.4601  524585.6497   55464.88332 #> 710     21905.72774     123171.3283 -2083998.8218  310927.0785  -14087.99938 #> 711     87335.66059     152627.4711   755531.4237   20801.6504    8238.55756 #> 712    241407.23077     733307.3232 -1845528.6125   94044.6120   59044.76993 #> 713     16587.78893    1315589.3421  3039693.7741  151697.1968   43786.21119 #> 714      3516.43286    -993706.3295  -445659.0365  336834.2343   47457.19727 #> 715    519118.01510     725216.5070   716531.0931  167016.5813   96028.79768 #> 716   -119200.42912    -218421.9979  1388435.4777  126947.1518  -17266.79247 #> 717   -165978.97538     405793.9378  -778485.3965 -357151.0403   20052.82981 #> 718   -289704.00705    2724986.1745 16512338.0298  842370.8217   48312.77215 #> 719    -11327.85723    -360448.5358  1409046.2421  230412.6015   -5341.45397 #> 720    -17211.33492    -156046.5922   440143.6519 -346089.1803  -57948.41176 #> 721    122433.01166     389626.8152  -383299.0528  219714.5660   15339.67838 #> 722     40279.06391     -51739.8850   949044.1670  167320.1538   77192.56690 #> 723    -73373.57158    1166352.6734  -176748.3532  344498.0497    1642.77858 #> 724    154668.81123     510092.7049  1949291.2602 -184140.5755  -39754.36017 #> 725    113296.78523     117209.4459  -504137.6791  528324.2254   11248.50098 #> 726    147997.50935     848599.9812   599811.9684  688951.4055    9362.51465 #> 727    220936.04943     386964.7467  2595717.8258  -20280.5706   35659.37112 #> 728    235323.74197     909283.2774   456960.4606  128865.1320   47335.28902 #> 729    232301.37049    -126991.2885  2723098.3065  108968.9866   -4390.40416 #> 730     31739.06135     620072.6183 -2784449.5137  260142.4796   64825.88467 #> 731    159416.06341     723318.0985  4514511.6230 -163687.6601   10906.82972 #> 732     34440.50359     -74927.2948  3001084.3340  -52690.5450  100224.80701 #> 733    -38222.80041      80494.1852  1687484.6610  108489.5478   26858.04848 #> 734   -132465.33610     819864.5843  5623315.0763  -67892.5966   95636.36743 #> 735    178693.50390     113611.7440  4238243.9676  292807.7901  -15337.60071 #> 736     17051.80311    1082241.5368  2746877.8754  249950.8233   16060.24519 #> 737    423394.95524     497701.3944  5424032.8305 -292686.3319  -38941.72689 #> 738    -88477.51262    -355452.4842 -1839980.1065  110956.5519   32174.01379 #> 739    409645.85025      72234.8947  2290631.8643  125993.2257   77737.15380 #> 740     76467.35939     386165.6315  3439112.7250  358760.8993   52770.02803 #> 741   -185407.10631    -558069.8457  2970802.5812  -44167.3472  -31803.90370 #> 742    175479.92015     834692.1051  4119366.0482  113939.9041   43750.30767 #> 743    -38588.85985     411522.5683  -187803.2764   17453.7524   56704.02355 #> 744     65886.68981    1861671.2769  3734976.7362  175599.6064  100011.04682 #> 745     93234.15717     191689.2990   -68704.1898 -226991.7748  -48455.20567 #> 746    132679.76825    1220538.9203  -974649.8786  142984.9459    6347.48750 #> 747   -154831.81292     723509.0835 -1009368.6786 -269869.0012  109766.39438 #> 748    -14068.48830     935036.6074  -480493.9187   74831.9467   11069.65660 #> 749     89086.74390    -392842.1642  3080485.2555   84916.3679    -457.46370 #> 750    275329.29717     517161.2454  2628874.5111  106348.0788   36764.68415 #> 751     50551.20108    -149410.5143  2000992.1023   37306.6816   13260.47332 #> 752    142984.76017    3447258.0812  2015463.2102  892963.7884   -3329.89371 #> 753      3425.95283     -85481.0368   -25679.8710  163733.5008     608.38822 #> 754   -181287.46109    -204405.3026  1200381.8536  329922.2805   12819.55333 #> 755    152015.69536    -805544.2281  -228423.1512  161862.8224  -13123.90122 #> 756    193101.18545    2288164.7118  8659594.1920  116825.8533   20965.68726 #> 757     89436.85907    -448631.7046 -1281912.6003  160974.2232  -56432.57702 #> 758    474667.82804     494087.7119  -391940.6447  615848.2997  -76514.36651 #> 759    159631.51154     205575.4045  3655978.6615  122388.3993   88251.06409 #> 760     20558.86286    1031000.2655  -765198.5776  137440.4345    7962.29575 #> 761    328245.42669     713145.9448  4455208.6777  244719.9512   52329.33465 #> 762    375707.55432     451327.5461  -928949.6443  -83232.5387   59437.43525 #> 763    160243.49386    1522763.9775  -964746.2972 -226072.9898   70011.36893 #> 764      6193.10950    1523752.9199   655034.9280  167178.7639   40321.42099 #> 765      7001.32831     501631.1824  -485260.5405  182300.9581  -13110.07895 #> 766    270499.78316     480376.3058 -2218553.0896  201105.7903    1624.05668 #> 767     95187.27787      82482.5637  1897435.9390  212513.3543   33722.38559 #> 768     69786.12068    1487621.2120  4497093.5332 1093971.4207   49003.93556 #> 769    -45200.86772    -290696.0634  1498987.5188  211989.6766   37134.09167 #> 770    159782.01110     299774.5313  2748875.0058  397849.6040   18649.04573 #> 771   -114901.67057    -616554.7035   339404.5094  -64740.3499 -112528.82151 #> 772    121778.68938    -420510.7633  -718469.4465  789311.2745   78796.19339 #> 773   -108895.31893      17228.8077  -748147.4542   -1708.3800   17972.19194 #> 774     86410.34573    1289548.0163  5665466.1339  114516.7307   13514.88379 #> 775   -164068.59135    -336444.7549  -458898.3995  157985.2693   52857.32326 #> 776    432255.00239    -664401.4308  5497525.6944  298021.4797   29677.01216 #> 777    -76006.13320    1003498.7724  1190969.0796   54936.2673   90448.02426 #> 778      1306.63765     714552.2016 -1101206.8318  172557.0176   50171.44326 #> 779    362200.90711     374274.8052  1749218.7087  -67989.2384  110277.90049 #> 780    130860.49756     938342.7721  2406829.7110  103230.1920   87643.45713 #> 781    127209.74053     343500.7626 -1335508.8784  301537.0457   15620.34448 #> 782    157433.77765    1266479.5725  7510943.4140  183868.0986   72735.70283 #> 783    166149.34804     384930.8490 -1119016.3352   48334.6396   81706.54205 #> 784     39215.57050     967285.3262   -40957.0830  163718.6606   45938.62434 #> 785   -181027.54920     746275.5560   447382.2035  225024.7877   36295.13910 #> 786     76514.01233    -814969.7773  3144244.8664  292052.1910  -11959.15038 #> 787    323110.71962    -261742.2248  2190880.9437   97912.5305  -10637.46584 #> 788     70471.23954     429336.1018  1715202.8068  268404.1351    7874.47246 #> 789    316959.92514      69809.5215  -513052.6459 -629393.0346   21601.69769 #> 790    144081.59867     415528.9029   -86394.3851  250962.3680   22621.61548 #> 791    -62127.35638    -129277.9598   441626.0475   26791.6468    -680.23528 #> 792    193073.52018     194954.3047   442114.4969  171346.7622   36848.34481 #> 793    684807.17181    2001808.0093  5638068.4884  -72096.7752  111621.63435 #> 794    235831.38086     383237.9465  -982935.9506  347179.0524  148814.47694 #> 795    326277.79364    1216901.0637  3410450.6977  -57471.6259  -12041.99399 #> 796    449627.20568      29469.7066  -379046.5252   34025.6892   23501.00252 #> 797    -74248.63586     104835.5387   364154.1821 -133658.0775   64031.07686 #> 798     39659.47653    2891450.0132  7520344.1217  841214.9838   13479.21500 #> 799    150517.48660    -564107.2131 -2324340.4807   56937.4039   13035.63964 #> 800    436079.46459     830439.1874  2812100.6477  887467.0057   97374.98459 #> 801     92813.42119     729470.7112  -717609.0227  459795.2446   15352.45929 #> 802    150517.90500    1514636.0742  2021672.2142   23132.3678   92467.06863 #> 803   -356378.82743     106215.6066  2245983.1084 -300555.2601   22933.69745 #> 804    193786.90114    -221656.5741  4502197.7207  471791.8830   77832.48415 #> 805     69423.73712    1351632.3988  3388021.2736  559480.6606   96815.02426 #> 806    269129.79605     -68266.7087  5967334.9275  338551.2882  -14424.47762 #> 807    213158.38334    -229076.0564  -126356.3006  224161.4736   15435.63203 #> 808    630569.75087     275770.4758  1702575.9047  151148.2449   65047.75892 #> 809    355892.05941     -80900.8440   613092.4739 -207017.0633  -77488.94650 #> 810    311313.22273    -222084.5019 -1550997.3380  548679.2915  159401.29020 #> 811    432431.15822    1056291.0883  4695317.1441  580560.0302   55823.89851 #> 812    187731.53366    1463883.6369 -3560771.3021 -210509.5997   -8810.31666 #> 813    249134.18351    1851991.8931  3487826.5261  152446.5810   51952.40539 #> 814    257747.07011     485990.9378   399810.7580  248314.1033   81226.35307 #> 815    813235.51250    1142634.2292  2109425.7548 1210763.5977   42451.79554 #> 816    146267.34148     409891.0612 -2951723.7746  316605.2513   74479.93189 #> 817    -18182.74233     241968.4423  -541504.0235 -180932.1728   25320.78540 #> 818   -272720.68433     345640.5351  1974203.8067  295087.7861   42147.81923 #> 819    312762.47529     361494.2281   975163.7257  -94914.5831   35707.75581 #> 820    246602.37292    -570095.8838  1557589.0641 -160229.7157  102903.16894 #> 821    535383.03926     469818.8435   978676.5737  296624.0393  167423.39877 #> 822    461869.35832    2864396.0459  5637046.0554  482554.3623   57823.14310 #> 823    441795.78350    1313264.0058  6152297.0621  671188.5546   90428.79779 #> 824   1141186.01823     629548.1007  1864906.8845  -76735.6199  103509.94380 #> 825    443883.31900    2062075.8915  2288491.4422  668508.2939  176991.75160 #> 826    473594.10371     992053.9408  2914560.7447 -179153.8857   75740.61573 #> 827    -54204.66219    1124227.8158 -1036446.3834  -58759.2168   72648.03215 #> 828     12172.64734    -145609.5340  1627533.0168  705375.1231  122327.00294 #> 829    460178.11784    2530947.0070  2767129.3373  163236.0565   26234.29280 #> 830    391947.89240    2682396.8782  7456691.0975  949240.7260  206071.71377 #> 831     76941.56639     457137.8539  1675400.5300  807253.4508   84731.26344 #> 832   1425289.86345    2025515.9323 11091200.4874 1149188.0530  356876.74944 #> 833     95454.78369    2617560.5586  8151229.2197  673392.4381  334938.98771 #> 834    879451.71791    1499879.2650  9020156.4386  444608.8751  309837.92490 #>     OPERATING.PROFIT FINANCIAL.OUTCOME GROSS.PROFIT   NET.PROFIT #> 1         53329.9255       -18934.7494  -37892.3191  -41199.9801 #> 2        340853.5650         2721.1882 -213770.1342  -70294.3775 #> 3       -273856.3067        13345.3936  207272.3182  -36007.1948 #> 4        369991.9145       -29802.7876   77406.8546  203280.1398 #> 5        -38710.0927         4938.1945   87485.3446   -5468.1898 #> 6        109220.7508        66807.6650  -19573.9444   62798.8068 #> 7         47899.5265       -49177.2778 -161998.1705 -194815.1730 #> 8        182741.4380        56375.3560  121746.1130  -39130.0070 #> 9         53889.1679       -20979.6917  296584.5971  -40676.6041 #> 10        21501.0933       -26025.3751   27280.2400  -60104.6016 #> 11        21681.2353        61419.4631  144430.2830   71821.6298 #> 12       -75563.8667       -20810.7112   18320.2550  135047.6502 #> 13       122588.4017       -92358.3299   66396.2915  -25011.8633 #> 14      -113844.7505        15790.1709 -193968.4195  -22702.6746 #> 15       113338.1241        -4874.1502 -117592.5775  177568.6466 #> 16       -78807.8998        24937.6980  -76731.8613  -83275.5637 #> 17       -27681.7356        -6000.2061  -16752.5850   -5001.3302 #> 18      -114339.4336       -67392.2732  129817.8692  -32495.7797 #> 19      -184798.8254       -51570.0505   97445.3165  -41959.1044 #> 20       211807.0056        32445.3231   79437.9894  -21980.1517 #> 21      -156405.0594       -26217.6851   64690.1811 -105162.3315 #> 22       -76763.7218          697.4916   59370.0083   89357.7039 #> 23       -24793.8072        13191.6583  -42583.8947   36310.9720 #> 24       182627.6167        14417.8590  -93465.6944   40023.9999 #> 25       -74458.1239        36174.8634   80257.7297  -17650.3652 #> 26       -76331.3371        57143.6343   66358.7634   52360.5129 #> 27       311633.4496        41342.6326    1040.2492  -63590.8919 #> 28          964.1092       -22898.5135  126488.2307   45936.0306 #> 29      -155868.5866         9945.0449  -12765.1704 -110594.8729 #> 30      -146454.4563        34703.1643 -182773.6728  -54793.4596 #> 31      -104293.4638       -86229.4771 -238561.9890  133041.4607 #> 32       -38912.7257        -1758.5405 -102881.0305  -80243.7247 #> 33      -111914.3910       -39260.4782  -26299.2758   51111.0675 #> 34        59840.4878        66019.6369  -74666.7443  155215.6561 #> 35         7706.9321        66425.3640 -166007.0316    9321.0178 #> 36       -18197.8964       -47927.0068   10724.3766   24097.3418 #> 37       267656.8923       -76806.0402  212661.4039  -25263.8209 #> 38      -145904.5125        19684.0626 -190373.7034   19169.5204 #> 39       202205.6974         2268.0150 -129903.8757  -99504.6467 #> 40      -170576.4555        22369.8364  -92320.9347  -56709.6278 #> 41       157647.6114          674.5099 -110265.5452    3583.2813 #> 42      -286536.2357        -3994.3775  124862.4983  -43052.8480 #> 43       181358.9592        81699.5820   84361.9098  150631.3697 #> 44       -97608.1678         1713.2413  -31772.9499  -94367.2104 #> 45      -182068.3012         4664.0301  -70171.8825   97151.4675 #> 46       -98507.2542       -36050.3405  -89043.8897   78467.3943 #> 47       -81489.6334       103401.6871  161635.2817 -115635.1715 #> 48       -56757.3861        28308.6708   36831.5140  -44492.1587 #> 49        27826.4031       -31623.0935   14618.3040   32352.0435 #> 50       166757.8770       -75000.1451   52875.7532  -49391.6571 #> 51        15351.6320        26615.0610     764.2287   34249.9001 #> 52       -55507.8903        37955.4177 -144672.4456  -18608.9198 #> 53      -126308.6890        34976.9737  -64142.1914  102628.3055 #> 54       -57762.5774         9298.6879 -125397.7287  -57727.5194 #> 55        42658.9645       -92927.9578   67481.7077 -124596.5063 #> 56       -37886.6236        -6287.5653  -51502.0541  -37677.1647 #> 57      -135735.6221       -45813.9874  -64170.3033 -109288.4467 #> 58        55162.6642        50413.8576   65933.6673  -15916.6003 #> 59       248707.3317       -67394.4203  -29747.3290  -74604.0672 #> 60       197089.4941        26852.5378   73934.3744   50750.6052 #> 61        96019.0950        -9910.8015   91387.0691    9679.7300 #> 62       -28957.9252       -31718.8859  -23194.7182  131112.8397 #> 63      -207874.9623        -3639.0874 -256941.2066  -33488.0090 #> 64         9241.5032       -38336.9747  -27680.1907  109427.1076 #> 65       -36268.9965        22666.8375  142147.2101   38854.3382 #> 66       104242.5646       -24043.2270 -101794.7140 -120250.9363 #> 67      -119490.6248       -36333.8487   -3714.4976   94281.5892 #> 68       103704.2628        -1071.6609  161146.3828   69657.2832 #> 69      -110481.9242       -32786.4712   18023.3249    1155.4022 #> 70       199614.8628        21235.7493 -312489.6907  -37954.5028 #> 71       246891.0581        63563.2104   24468.7732  -67416.8643 #> 72       163616.7853        -5051.2865  106350.3471  101884.7538 #> 73       233257.6718       -60413.8651  169734.7356  108213.7443 #> 74       -95963.2785       -37593.1391  -60351.9338  133986.1264 #> 75        42295.8576        77304.3327   66532.2175   14338.6270 #> 76      -122078.1700        97931.2074 -152401.0737   94600.6947 #> 77      -165821.4817        -7398.9174  331912.9488 -193075.3626 #> 78       213190.4557       -18438.0384 -248039.7087  -41524.5374 #> 79       145283.7509        36341.3203 -201340.8626   -2860.3518 #> 80       107444.9255        49376.1269 -276218.3074  -74898.8394 #> 81       101863.1012         6293.2096   29729.4025   11935.3753 #> 82        17743.5321       -50689.5515   48665.9810   10425.0274 #> 83        -3792.7929       -13675.7765  -87357.5023   30160.7747 #> 84        23156.1199        44780.1887  -77361.9136  119190.4711 #> 85       -97119.6983         1814.0960  134353.9850   55645.0175 #> 86       196624.6405       -26361.3909  -57575.3983  -47653.5998 #> 87       -52385.6894        36892.7738  163984.8289   93580.3368 #> 88      -219886.5270       -11666.7942  175098.0246   -5070.1059 #> 89        91214.1820       -14875.6520  -25102.5114  -69640.0230 #> 90      -191926.6250         7301.2234   45579.9917  117614.2461 #> 91        49086.5810       -41965.8309  200491.3308  -26698.0575 #> 92        56499.2420        52893.6542 -122826.5097   -8274.0072 #> 93       154685.5209        24983.7450   24598.2326  246087.8774 #> 94      -111471.1529        20265.7577 -167021.0349  122347.9858 #> 95      -120762.9911        37362.6382 -156821.9986  -26525.6005 #> 96      -176840.0834       -43080.5619 -116548.7185  -55437.6741 #> 97        71161.8865       -11543.9784  -53092.1820   16722.1886 #> 98       -41164.1236       -10188.4571   12132.7001  -15863.8588 #> 99        17957.3008        29310.4019  260463.6466  -52794.5304 #> 100       25162.4966        -5171.7523   62375.8923  -46162.7021 #> 101      219917.2834        86654.5017  132647.3898  -76734.6434 #> 102        1020.3155       -27527.3145 -197696.7369  167206.4816 #> 103      101601.5290        30830.3576 -226888.4468  -97825.2701 #> 104      234902.6350        47783.3788   26628.8500  -15959.3036 #> 105       64748.8007         9396.0642  -31369.9727   47661.4130 #> 106        8488.0883        -4019.7475  -48528.5899  -85104.2420 #> 107      135068.3783       -61458.7375 -167345.0305   66762.7555 #> 108      123238.5221        43115.9995  163973.1896   84186.0713 #> 109       20480.6279          345.4735  -94692.3756 -138474.7683 #> 110      113000.8440        37993.0196   -9102.5233  -80464.3858 #> 111     -189404.6207       -52578.7828  127310.4849   59172.1868 #> 112       62639.0206        32093.4113  -34166.0450   74709.4280 #> 113      -96199.0167       -13172.9679   18878.6488   34894.4702 #> 114      -73671.3622       -35175.8207 -146106.6617   23940.1130 #> 115      -92663.9953        36350.5094   87774.5123   50790.0692 #> 116       81139.8826        -1310.5002  202150.8370  200780.6541 #> 117      -65415.9832        13585.5513  122809.3140   50601.9810 #> 118      -68918.1048        71307.8092 -200109.0466  -27115.0460 #> 119      285894.5619       -98500.7145  118773.5926   68748.6775 #> 120       39978.5181         -946.0792 -101528.6298  153987.1081 #> 121      -70399.4819       -32029.8151 -171208.4751  129182.2754 #> 122     -156978.5777       -10987.7704   55372.4709   16782.5341 #> 123      -16228.7081       -42550.1385  159055.1436   10722.5340 #> 124      -74484.4853        -2694.8605  305610.7511  -66999.9860 #> 125       39321.1150        17045.4743   82574.1294   65131.0000 #> 126      253053.2567        15963.6276 -204303.2791 -153430.9329 #> 127      106108.4101       -40581.4099   78611.2035  215598.8850 #> 128      -41352.3650       -34691.7182  145759.5116 -139078.1797 #> 129       47535.8400       -53716.8092  -56361.5199   49345.2577 #> 130       95676.7082        31368.7518   46741.8040  -62765.8523 #> 131      260955.5323         9804.6573   52529.8218   69257.7578 #> 132      -59445.3835        65556.5660  -65700.3394   21341.7564 #> 133      -82901.6434       -20157.5748  113040.8121  -74008.2631 #> 134      127831.5602        48038.0183   22604.2773   30851.9425 #> 135        2987.9167       -25875.8683 -155263.0261   20974.3429 #> 136      201879.9964       -56275.4752  -45992.4936  -67572.3474 #> 137      -45127.3158        22633.2226  -36852.7538   58111.8408 #> 138       86042.8167       -28731.1858 -188450.0348   36026.4682 #> 139      123763.0805         2583.5974   37390.8961   57065.0525 #> 140      297577.2839      -127621.7990   70596.5793 -245598.6468 #> 141      -74342.6743       -31971.6342 -199626.9332    8430.6594 #> 142      101866.8460       -20750.7743  122938.5941  -89098.3761 #> 143      -29482.6364        36223.7355  -95632.4791   51476.9608 #> 144       43095.3353        13410.6248  -38445.5738   70046.1982 #> 145      -62723.5070       -10075.6596 -204396.9924    -346.6207 #> 146       48978.0993        46919.8749 -122613.7693  -23485.3486 #> 147     -208441.4029       -71785.9790  -18535.3016 -123097.9279 #> 148      145699.2332        24829.6035  105655.4416  -49304.6383 #> 149       11108.0954        51205.4539   -6839.8014   47834.5000 #> 150     -141919.4260        35366.7105  -68032.2211  -70244.6189 #> 151     -152136.7510       -28812.3918 -314590.2884   55933.2307 #> 152     -169191.2263        34599.5647  157012.7830  -21611.9473 #> 153       37593.9603        10735.6543   -2628.8761  129755.0529 #> 154       58865.8166        45912.5877   31187.1045  170251.7628 #> 155       66083.9259       -63979.2844  -96414.0903  -34322.7949 #> 156      -51865.0525        -2331.3467 -165403.9573 -104745.7982 #> 157      106130.0858        17194.3502   83973.6967  -41032.4326 #> 158       82787.5063       -39208.1534  150727.5963   -4950.1479 #> 159     -189712.1042        22468.7245   52325.2213  111373.3507 #> 160        6292.4121        -6289.5724  102360.8948   60965.2248 #> 161      201546.7840        -6168.9507 -159199.7696  -44081.0975 #> 162     -122721.7425        24574.4661 -264451.1668  -51049.7251 #> 163      -77311.5681        41266.0334  -50170.8389  -52551.6148 #> 164      -77778.7886       -44621.5723  -23945.1576   -5107.9922 #> 165      -99278.0038       -28651.6248  114609.0109   -3748.6909 #> 166      127600.7713       -12970.1485  -53241.1485 -230716.1728 #> 167     -180677.8654       -16634.7286  135345.9717   -5360.5146 #> 168        8278.6812       -50367.5991 -104487.9459   -2469.9793 #> 169     -120401.5351        14088.9387  -64735.1717  121562.9166 #> 170      -57312.3594        49425.7441 -163832.0769  -37448.1446 #> 171      214960.2874        39279.8248   18957.3367  -15946.7183 #> 172       13618.2143        37506.8246  -73678.3845  235327.8153 #> 173       12029.1207       -75888.8697   17696.1633  -48996.3063 #> 174      -11866.3896       -54014.5775   67275.0758  159593.3815 #> 175      123024.9712       -49482.8764  -93423.0416     233.5144 #> 176      -35371.7777       -35137.6873  -41828.7218   45165.8744 #> 177      174359.1386       -20654.1753  -75949.7745  -29493.7137 #> 178      -51820.3137       -36759.4128   15186.6941  102197.4438 #> 179      293408.5953        23812.2233 -153361.4277  120146.4157 #> 180      245914.6098        27428.9762  155152.9940 -103314.8536 #> 181     -100719.2173        34392.3411  -92220.9422  -82296.1882 #> 182      233062.3307        42003.4562  -91369.8397   12368.8348 #> 183      -86049.7620       -23834.8471  142634.5310   81503.6079 #> 184       92447.3535        21651.8284   -3211.6347 -103847.0059 #> 185     -175126.6244         9700.7854  -46636.5912  -38104.9364 #> 186      -21386.9067          787.8205    6936.7301   43863.2059 #> 187     -136281.4103       -17665.0970  114125.9376  148258.6691 #> 188      -49796.4901       -20582.3732   81833.0422  -79086.5126 #> 189      -97841.5043        -4600.5847 -246810.7379   57461.8727 #> 190       54805.8652       -25825.8610  -60972.5090  172489.9322 #> 191      -98652.5991         7427.9420   24678.0847 -114869.9257 #> 192     -295775.3368        85770.1844   56184.4760 -100219.1348 #> 193      -59881.6063       -32075.5623   11516.1764   56701.1746 #> 194     -112822.1791        59146.6204   -3934.5399    2610.3037 #> 195      -26222.1736       -21009.2716  113073.9126   54962.2575 #> 196       53309.6624        12643.4050  206741.4064  -37433.4289 #> 197       52990.1780         1286.9283  189467.8930   38785.5590 #> 198      -57912.5292        15202.1612  145253.1865   97174.6306 #> 199     -169565.6247        25774.7807   14364.5595  -94431.0104 #> 200      -23782.0477         4454.4598 -178945.4944  -14125.2081 #> 201     -204630.5341        47471.3703 -109525.8144  -40158.8958 #> 202      -31440.3247        22803.3032  217074.4636    2446.2117 #> 203      -65519.6911          355.0437 -122181.4418  -94728.1647 #> 204      -58102.6926       -35029.2798 -234457.2665   82147.7264 #> 205      -12585.1771       -16591.2435 -155103.9673  -88601.6169 #> 206      106537.9974        54372.2939 -144495.2853   94182.9729 #> 207      147260.2328       -79169.2217 -107323.4341 -135999.7555 #> 208      148454.4524        33904.1985 -239037.0208  169079.2848 #> 209       66862.8945       -43708.0681  127920.9431  -86947.5631 #> 210      -26454.9614       -11770.6296   29233.3597   70839.7066 #> 211      -63533.2797        20824.5588   97707.0957  157844.0001 #> 212      302096.6538        21539.3815 -120982.0364 -121151.1068 #> 213       95499.3401       -48098.3462  -14405.8528   15858.2601 #> 214     -197161.6625        69730.7480  -20649.0506    4759.7515 #> 215       -5856.5527         4834.9514   44916.5731   28232.6043 #> 216      -59136.2431        -4373.5949  -43742.1863    -736.2855 #> 217      -97160.4473        -7736.0622   38319.8605 -104762.4875 #> 218       66131.8443        39115.1072  -10187.4869   55308.2942 #> 219      145448.7541        58325.6853  -99010.2697  199952.1305 #> 220      120077.4853       -61293.3999  -32017.4189  -60691.9629 #> 221      249528.2904       -14298.6391 -106329.7063    2000.1176 #> 222      -37427.3654        -5002.8287   49187.6128   22440.8631 #> 223      133166.3184       -50394.2323  -74725.2425  106959.3929 #> 224      268687.7920       -49915.3010  -37199.2034  -36806.3698 #> 225      -19524.0007       -30181.4494  -72665.8670  -18871.7229 #> 226      -46951.6447       -34136.3960  -97744.9873   38485.5385 #> 227       75325.3932        17441.4664 -267474.8570  -14402.5806 #> 228       22961.7635        31802.5869   86915.7272  132655.1663 #> 229      107693.1754       -51771.5772   -6425.4385  102848.6918 #> 230      -21123.2193         -676.7651  -88979.8034   70403.6577 #> 231     -121046.2252       -51583.8008 -128374.4583  -56843.0057 #> 232        7887.8995       -25719.6165  -23770.6799    3648.9088 #> 233       29761.5639       -22931.9977 -107294.9791   23215.9259 #> 234       54797.1581       -18680.6776  -51301.8548  -35164.5292 #> 235      -25957.5093        20753.9549   72635.6880   51087.4912 #> 236       28197.1354        -6368.6697  -61318.4433   -7762.6030 #> 237     -198636.6551       -42617.1546  -26406.6032   13350.3224 #> 238      -26536.5793        11713.3270  127386.7511   76521.5310 #> 239     -125121.2575        48650.4174   44741.1223  182475.5859 #> 240      -67158.3522        52605.0701 -109020.7813 -143668.9730 #> 241      122966.8998       -51765.7392   49293.3419 -127278.7893 #> 242     -135373.3750       -79709.7203 -127705.7975  -76210.1375 #> 243     -149188.8605         4282.0133  141178.1363  -93656.6988 #> 244     -261902.4085        19820.8189    7488.7575   47378.1005 #> 245      -17673.0232        68903.5016 -183217.9106    2838.4227 #> 246       79705.7089        21811.3412   67555.4745   10058.9695 #> 247     -142371.5508       -55245.4766  -45081.9735  -35441.6934 #> 248       93968.5759        31376.6263   18815.8903  -97342.0337 #> 249       31476.7736        71991.3620   57633.0862   24622.2399 #> 250      -53513.9667       -31956.6776  -37030.7667  146554.1196 #> 251       37542.7444       -33396.2918   33798.0809  158126.2686 #> 252        2753.9240         8956.3380  193249.4725  110512.2496 #> 253     -261715.7881       -24791.7211   -7746.6088 -122309.0267 #> 254      -16859.1792         2951.5640 -159143.2552    8267.8966 #> 255      205311.6648       -31935.2821  -84227.2450  -47999.9634 #> 256      113194.8476       -77243.1105   58875.2423  -74411.7967 #> 257     -219277.6774        19968.9627 -143953.1924  -42341.7192 #> 258     -215524.3193       -12278.4692 -110323.7262  -51793.2263 #> 259        7413.8506        27114.5369 -202138.6231 -147860.5796 #> 260      -29156.9559       -26931.9784    9783.5893   42289.0709 #> 261       62865.1451        32295.2787  -47853.3176  -16091.5736 #> 262       20710.8705        32793.5095  112441.7427  -28030.0414 #> 263       71058.6492        67873.5396   91223.3623  -90518.4881 #> 264     -129822.1899        -8475.3477  -68997.6057  -52781.6086 #> 265       -9739.7909       -67203.0801 -136440.3929   52260.9165 #> 266     -113704.8220        66402.1726   48463.8101 -135559.3151 #> 267     -106880.2755       -73756.8526  -17832.6705   -8458.3193 #> 268      233511.6040       -51626.6519   41711.9773  -23534.0046 #> 269      122570.1152        14483.7290 -163311.3045 -151037.3272 #> 270     -274188.1705         9348.2439  144522.3243   59702.2839 #> 271       84822.3075         7596.9363 -147712.5348   29079.4242 #> 272     -195343.7980       -21718.6849   -5506.2289  -60852.2002 #> 273      -66118.4681       -44927.4659  -24207.2056   51197.2290 #> 274      304307.5291        38258.9473  146840.4592   15516.9085 #> 275      -46360.4046       -52888.0225 -143128.6954  -68562.1091 #> 276       94475.1545        -1597.0713   67014.9454   74106.3948 #> 277       99103.0327        27672.2410  -24090.3453  162514.4680 #> 278      130773.0049       -21243.0272   68833.9917  -29204.9380 #> 279       41283.3668       -22021.6474  104971.4637   93932.5215 #> 280     -119950.6638       -38212.3021  104986.6006  162060.7666 #> 281      -65895.5648        50171.1211  -37002.8162 -177236.3261 #> 282     -217523.9896         -311.5764  -87234.4084  167134.8545 #> 283      157945.0599        28727.7604 -171646.5824  127234.3249 #> 284       19918.7433       -54727.1344 -133637.0870   46681.5399 #> 285     -190069.8159       -20496.6290  -21495.9712   83884.9507 #> 286       60270.5467        80079.5428 -119856.0802   26503.8415 #> 287     -222371.2496       -25536.0125  -46826.8541   26517.4563 #> 288      -34975.9875        71709.9871  -89487.6923   59507.2734 #> 289      219227.5254        14320.3742  -59006.6076   15085.1841 #> 290       93324.9338       -15161.3471  157809.4253 -125135.7049 #> 291      -92270.6927       -13311.2005 -244822.9455  -31886.6405 #> 292      -27222.9088       -11582.3465   83615.0406 -100442.7335 #> 293      107467.2119        84960.7374   31797.1272   82985.1212 #> 294     -134461.2280       -45157.2876  -62819.7887   73214.4234 #> 295      -45036.5662       -13448.3843  242739.6444  -42060.9134 #> 296      -99838.1348        -3523.7221   -2279.2906  -49085.6897 #> 297      120573.8775       -62442.8543  -52499.5187  -21127.6724 #> 298      163072.2539        15284.1524 -202644.7092 -110531.4471 #> 299     -420813.2606        23575.9076  257080.7172 -138424.0125 #> 300     -262935.6073        18955.7380  -14194.6180   11405.4759 #> 301      -58797.9809       -27867.1345 -125653.6836   26134.5883 #> 302     -192999.7775       -56052.2216  -67752.6219   71026.5140 #> 303     -152470.3689        11319.1593  -60597.1000  -31626.1301 #> 304      -68423.3857       -42596.4398   48575.0136  -10482.0567 #> 305      201446.4982       -26775.9344  -82378.5582  -63649.3387 #> 306       97292.5793       -15558.3537  -77461.8387 -108100.4529 #> 307       63893.4464       -73972.9468  -41481.9011  -51660.4849 #> 308       65854.3158       -57359.3821  108992.8950 -130347.3716 #> 309     -226806.2076       -13032.7597  -57981.6872  -69772.3202 #> 310       44417.0283       -12016.7495   56078.9838   69601.1543 #> 311     -164856.8182        -6869.3798  137940.8755  -61651.7720 #> 312      -29950.1510       -40753.5700   66966.4851 -238166.2687 #> 313     -271108.1690        76794.2211  116148.5699   29855.2400 #> 314      -78631.0887       -52657.9879  110193.9057  136815.2487 #> 315      -79631.4303       -41666.8776  134380.0083  -19948.9279 #> 316     -131381.3013       -56449.5085  -29689.0977  -86065.2593 #> 317     -100967.4733       -60391.3995   25869.4010  -93890.1394 #> 318      192634.7767        10205.0121  -10258.4687  -87232.3505 #> 319     -101694.8027       -13965.5039 -142721.1071   29358.8427 #> 320        2834.8654       -42725.1958   93751.3921   35437.8404 #> 321     -263265.0739        71829.3239  -11351.4763  -17104.7219 #> 322       34524.0971        49705.6240  213651.2172 -112956.4563 #> 323     -282807.1080        25478.0751   78760.2907  -24824.9703 #> 324     -134941.1357        42946.8904  -46947.5783   -7012.2767 #> 325       31382.8796        -4282.0500  148713.4691     502.8766 #> 326      298234.0265       -52649.0480  -39506.3144   62432.3600 #> 327      162469.1492        45463.6186   38832.2016 -190573.0862 #> 328      213225.9773       -30407.2210  190813.1782  -80257.9421 #> 329      -32681.1880        52080.9854   18596.5806   21403.7806 #> 330       54249.6334       -13441.2388 -215849.7337   41625.0714 #> 331       23624.5650        35741.2585  -20403.8200   63733.9621 #> 332       25870.9844         2747.7567 -124666.9044  -24407.4775 #> 333     -279637.0713       -29681.7203  -71665.0319   35485.2264 #> 334      -68776.7533       -17811.7336  125279.7433   60485.6426 #> 335       93800.6843        -3962.5579   56399.6404   17528.1748 #> 336     -324736.2245         1035.9280 -204368.7336  -43901.4350 #> 337     -242932.0412       -23963.5948 -194326.7758   13065.4312 #> 338      -12308.3033        31857.8559    6025.1254 -146140.2462 #> 339     -138179.6276       -13025.3785   27670.9012 -104357.0161 #> 340     -254518.1724       -18896.3183  151181.4153   19650.4653 #> 341      131284.5208       -38253.5280   61902.2000   61232.8468 #> 342      126318.0716       -11257.1297    4303.5764  -19129.4623 #> 343      -12224.8103        16110.9728    5881.7614  -95021.2779 #> 344      -29710.7654       -41763.3538  230368.8289   89267.1698 #> 345       24601.4379       -66282.8583 -205331.5005   82103.9814 #> 346     -175628.7789       -61004.1744   46977.3045   16448.7109 #> 347     -116311.4001        -5167.3785  -74596.0341   26401.8047 #> 348       38471.0349        10276.5224  -67823.0673 -104788.6997 #> 349      -29069.4802       -35204.8573  -27445.4131 -267583.7224 #> 350     -317698.1952        61026.8791  -42786.3426   -4615.8943 #> 351     -105518.6944       -22192.6491  -81944.1691  115879.9441 #> 352      -59635.9272       -22481.4676   73513.3737   25130.9114 #> 353      192303.3520        25807.8680  105584.7809   37485.8361 #> 354      165583.0729         6839.5012  172133.4219   88800.6733 #> 355         125.7483         8744.7419  -38822.5658   91318.9200 #> 356       32863.7375        -4430.1728 -112653.2031   94901.9870 #> 357      182886.6787        40929.6445 -145740.0350  -26478.3900 #> 358      -28549.1401        10059.4892  -51187.5409 -135215.7367 #> 359       58105.0932       -35742.6258  -91193.2042   -6677.8536 #> 360       77446.2276         1267.8609  117017.7034  251761.6591 #> 361     -249285.7387       -15797.3606   44391.3854    -642.4830 #> 362      -16571.0257        16441.9423  -75465.0757   67071.3216 #> 363       12691.1528       -47260.1616  -85695.6009  117882.6921 #> 364     -153096.7067        30842.8606   70218.9383   26421.1190 #> 365     -280642.4861        35749.8940  190168.1409  166470.8040 #> 366       66406.5548        66708.7448  -58310.9980   11000.0697 #> 367     -177241.5073        47460.8677   21149.9993   30567.7102 #> 368       28773.9707       -32878.3791   12351.3593   12421.1739 #> 369      -38907.3747       -33998.6814   12971.8143  -22643.4557 #> 370        3313.4134        63844.5783 -165754.7912 -157132.9400 #> 371      -57268.2001       122323.9983  -24045.8703  155229.7869 #> 372      -51829.2258       -33058.0017 -244964.4251  -60169.4192 #> 373     -188404.8649        41986.8746 -268168.8055   -1456.9561 #> 374     -271005.8831        69840.6332   45846.4227   -1233.6200 #> 375       86486.3342       -38610.5129  -43617.2468   -6498.7551 #> 376       21113.8182        40143.3751     643.9045  -60120.0547 #> 377      -45666.1252       -27679.2804    2266.2024   68579.9071 #> 378     -167751.4438       -18496.7978   59727.6011 -111689.1768 #> 379       22593.9036       -34335.6717  -70958.4434  179864.5875 #> 380     -109206.9991        10172.9295  -60202.7025  101375.0800 #> 381     -127040.7522         6868.7713  126642.6705 -157501.7829 #> 382     -225805.0780       -36451.6496  136820.4899  139175.1522 #> 383     -100294.7254         6032.0251 -160952.7042  -87809.3638 #> 384      -34960.0483       -34442.6105  118476.3872  115806.3343 #> 385     -200030.3198       -47416.4608  276539.5307  105440.7720 #> 386      -23447.5467        -9458.7628 -111338.6137   68815.5790 #> 387      152279.1803       -16406.2983  101546.9401  -61687.3447 #> 388      104332.0315       -87656.7839   75038.8724  -16998.3063 #> 389     -125405.3652        -1462.6064   48296.6107   37964.0168 #> 390      259895.6040         6311.4097  283652.7224   73797.5155 #> 391     -113473.8701       -37704.4934 -112013.5786   11196.1529 #> 392       50124.5616       -55635.4017  -78503.3916   57229.1114 #> 393     -152545.4088        -2068.2443  101254.9217   10993.1627 #> 394      -79822.6792       -60583.5437  108408.7987   22943.9143 #> 395     -136802.0957        42544.6788  -75044.9309   88208.8891 #> 396      135915.4193       103708.5528  -95313.2692  -74047.6116 #> 397      -40266.3726       -32986.8278  -56748.9211  -31353.3739 #> 398       46422.4295       -20386.2562   -2414.7774  -20354.2062 #> 399       63907.4819       -45731.0094  184410.3599  -31971.0104 #> 400     -200476.0268       -58857.3990   69396.5127   54597.3930 #> 401       15206.7356        12231.2209  156544.6757 -103402.5894 #> 402      -19069.2270        -9623.8680  -19913.3696   54264.0307 #> 403       37385.3877       -44683.1830  107423.0187   -1240.8916 #> 404      -84654.3887        38560.3583  272400.3388  -19704.5445 #> 405     -112563.8726       -50980.0087   98811.7633  137710.4911 #> 406      -19921.9774        93110.8727 -179265.8606   -3877.7647 #> 407      209199.8529        33133.0791   36390.2587  -44578.4714 #> 408      135978.9471        -2714.3274  -43844.2110  -70823.8781 #> 409      116767.4986        17478.2495  202220.3043   58182.7541 #> 410     -106666.8046        43445.8331 -116490.7323  139203.0965 #> 411      150092.6291        38134.8683  146873.4301   41408.3746 #> 412      -32856.6296         1423.9183   54562.8663  -32519.0918 #> 413        4140.0091         1959.3927   63382.6713   16500.7179 #> 414       41472.8108       -75874.4551   45387.7150  127905.9352 #> 415      -14358.2121        23274.2991  191406.1473   73984.1157 #> 416     -232414.8858        50598.9662   60250.5414   74981.8696 #> 417      147099.7155        20841.2390  100516.8493  -96545.2331 #> 418      147754.2544       -14049.6170  191250.2130   65412.5214 #> 419      132751.0546       -87434.7162  178589.5362  -65276.7856 #> 420      195736.4090        86212.5947  113574.4294  -32781.7919 #> 421     -126882.6187       -60346.0072  144621.2974   42066.9309 #> 422       47602.2549        23037.6902  216979.8254  -47477.9947 #> 423      -59942.4901        10660.8047 -155040.0061   74086.2215 #> 424       99619.6461       -12747.0048  -18846.0575  -58940.9201 #> 425      133092.5472       -51303.4888   42023.1346   50336.0308 #> 426      -13956.6334        17106.1084  -21446.6602   -7873.1620 #> 427       55207.1713          949.1135   68081.6266 -178216.3018 #> 428      169317.7742        21948.9287 -118436.8037  -98574.7562 #> 429      172448.6456       -13906.1796  -42910.7506   29365.1542 #> 430       54984.9351       -36067.1485 -115102.3170  140630.9327 #> 431       68901.9997       -37085.8483  -95973.8122 -178065.6659 #> 432         929.3194        -8720.1082  -70359.7658  -30355.7680 #> 433       28141.4643       -25393.4569    3150.6122   43888.5862 #> 434     -207150.1762        26959.8765  -95589.3252   39515.0366 #> 435     -133723.3558        23729.0875  110373.0480    3549.8238 #> 436       72829.1227       -81895.5912  298447.4600  -70964.8164 #> 437     -165599.0539       -90335.7160  -45770.7688  -48207.8163 #> 438      212898.6603       -64302.6987 -154847.0534   32632.9717 #> 439      124949.9424        36189.7901  -60308.4387  155010.4364 #> 440     -238202.7245        79171.2796  -64421.4517 -175535.5362 #> 441      241050.1095        86771.5549  182613.8987 -103762.6332 #> 442      -28864.5686        40793.4945  -19181.9179   25531.3383 #> 443       76817.8712        33044.6405  -52855.9505  183940.2789 #> 444       55246.7758        67745.5881 -110624.8201   19424.3129 #> 445      125093.8263       -13597.4581   58878.5671  -73004.3047 #> 446      227471.8970        14582.3539   17569.4773  130973.7088 #> 447      -91331.4824        26570.1987   33121.1599  -42821.1115 #> 448      -40076.5801       -11025.7748  -59515.4425   93383.8594 #> 449      153073.4412        -4624.0614  -93178.4661    4797.6223 #> 450     -135658.9540       -58718.1966  115841.7719 -267735.8551 #> 451      -18273.1246       -18682.7501 -109085.6054  -46971.5271 #> 452      191744.1105       -33569.5604  165841.3710  -64050.9694 #> 453       69065.1994       -59062.3635   99530.2523   19351.8590 #> 454      -12631.9892       -17991.3594  226266.8714   -2219.4075 #> 455       39767.7225       -62648.7403 -145670.1278  -24978.0947 #> 456       56366.6532        11796.9259  -50126.5149  -12652.8315 #> 457      -15422.2364         3893.7556 -280993.6763   97568.9155 #> 458      182990.7444       -17415.7927   50558.8777  -33017.5382 #> 459      227782.3034        53908.8989  -14716.5581  -86261.7631 #> 460     -218998.7791        19247.0908  132920.9151  -44507.8792 #> 461       93574.0280         5239.9378  106814.2763   20694.0109 #> 462      213072.6553       -21987.7637  120116.0556  -55918.7077 #> 463       14183.5155       -25819.7113   42821.5528   55005.2463 #> 464       86286.7446       -72374.4487  -72758.0978   -6462.4348 #> 465       18570.1054        19270.6127  198383.0891   43999.3705 #> 466       81821.0230       -57304.4625 -235222.2824 -160653.6657 #> 467     -167600.7624        77291.7905  162793.8648 -121471.2907 #> 468      -92733.3740        23670.2282 -211772.3950   91461.5799 #> 469     -207858.4480        51946.8285  146389.4673 -100658.9383 #> 470       58074.4193        14470.2820   18982.8396  -29936.3387 #> 471      235439.2062       -27404.8009 -320735.7934  -37187.1518 #> 472      -69614.6289        -9888.1358   76063.9370   53645.4809 #> 473      116117.7962        71506.8159  225182.9975  111040.8384 #> 474     -237348.0873       -33898.6507 -142615.2889   21260.7761 #> 475       18223.6937        46654.7407  115038.4303    2190.5717 #> 476      230281.5962        48428.8706  -28317.9854  108673.8685 #> 477      -50648.2514       -22508.0258    1949.3261   75989.6959 #> 478     -448920.3080       -25725.8106  175942.5619    -595.5989 #> 479      122117.6767       -16275.5781 -157745.8166   19928.5980 #> 480       58184.3464        27991.2134  -10330.2739  -45929.4299 #> 481     -100806.1496        10647.4434  -54278.8437  -50260.3417 #> 482      201086.9082          197.0092    3183.0540  -70676.8886 #> 483      101631.6617        28984.3302   46001.9321  162015.0422 #> 484     -202496.9702       -49632.6590 -155417.7034   21689.1250 #> 485      168212.3841       -31478.4677 -145845.1784   85338.2106 #> 486     -190001.4999        63331.1103  -35482.3955  -72690.5353 #> 487      -80383.7754        26117.6322   72087.4162  103625.2457 #> 488     -227481.1298       -35661.2311 -182891.4223   29146.3170 #> 489      -58619.8842       -59273.1327   22795.7218   25379.2594 #> 490     -182541.1464       -26045.2616 -136677.3575   44664.7996 #> 491       91610.9881       -33578.1209 -248780.3977   16376.1151 #> 492      -29913.1134       -34963.3797   47756.0376   13420.5910 #> 493      -89591.4878        92881.3511  341919.3835   20232.2955 #> 494      298796.5157       -59986.1784 -102127.0895   -1910.1949 #> 495       53359.6209      -114846.2470   88394.5392   26583.5956 #> 496     -171806.8702        -8909.9538   62801.2104   49697.3170 #> 497      140923.3384       -15721.9200   74349.8343  278959.9905 #> 498      -17218.9900       -68883.5399   17343.8594   42957.1492 #> 499     -173632.8435        -1308.7192  190970.4115  -52095.3699 #> 500      115060.9634       -32081.4564 -107322.7751   55317.6662 #> 501       -2615.7231        -3462.6760  141830.4750  -16820.9139 #> 502      114958.4958        19779.3606  -17713.1489   44967.6224 #> 503       -6952.7161         2074.4847 -200128.1457   91395.6138 #> 504      -56370.3376       -20532.3974 -117792.1396  -32587.8418 #> 505      -45640.6460        13288.9253  218983.3333   54346.6894 #> 506     -151895.7661         3926.1824   84128.4509 -114969.3553 #> 507      -52303.8096       -88404.2042 -114941.2321  -89947.0415 #> 508     -149392.6473       -67304.2421  -45124.5219  -37272.2878 #> 509      -51503.7372       -40924.9704   80247.5001  -46518.1983 #> 510       61939.3023        51205.0524   -3446.6250   13746.5205 #> 511      222800.1150       -41152.0382   82382.8937   90134.9726 #> 512        8925.3994        -1164.7823  146787.2747  120913.5168 #> 513      111908.0878        47727.2524   55033.2359   44004.0896 #> 514     -134461.4009        21764.4401   -4766.7805   47624.9358 #> 515      100627.3673        -9018.3293    -674.8668   59171.3830 #> 516      -22528.2313        -8402.7516  -66236.6257   57392.5824 #> 517       85681.8771         1836.5694  120897.3564   54807.4026 #> 518       96536.3539        -2296.2634   61651.5237   51792.2103 #> 519      -14971.5212       -27833.0654   20685.0574  -92776.4675 #> 520     -103619.9203       -42784.2039    1001.8667 -145829.1736 #> 521       12941.2575      -101063.3134    5100.6406  -20082.0069 #> 522       41474.7734       -22177.4135  -60204.5298  139966.0873 #> 523      -68166.4601       -32572.7444 -145285.0377  -90379.9178 #> 524       55120.2784          931.9092 -149646.8875  -17408.9839 #> 525      -12040.3074        31238.6794   29108.2425  119861.2327 #> 526      -63902.9777        10079.8163  301495.6593  -85002.7889 #> 527      155242.8818       -24806.1754  294530.2372   41284.8799 #> 528       55197.8059        24568.5715  120323.4396 -137074.1523 #> 529      157557.1569        19571.0308  138564.1448  -61435.7313 #> 530     -202697.2901       -17910.1532  114487.8039   84739.9084 #> 531     -110068.2875       -79442.8555   52496.9859   34455.2250 #> 532      -63969.9414        -6649.4295 -110598.5884  115853.7422 #> 533      -20505.6287       -24121.4420  192916.7591    9933.9224 #> 534     -162386.6916        65872.9144   -7157.7051  142711.7004 #> 535     -200911.2181       -51733.9422  -72321.6718 -169358.7115 #> 536     -226409.5957       -72903.8569  -44672.4044   12533.5774 #> 537       57544.5382        21045.1367   44925.8889   16931.4055 #> 538       19274.6102       -70615.7502 -156298.1984   83002.0058 #> 539       71329.9095        25998.8203   45832.8248  -23081.2511 #> 540      -96871.2624       -11391.5906  -69657.0398   43548.2714 #> 541        3006.8469        57025.5599  -75317.5975  -70073.4221 #> 542      -42919.3647       -62237.6037   58529.7487  140146.9248 #> 543      243053.5692       -51500.2534  -82021.4339  122278.5268 #> 544      165561.7654       -45962.2569    2800.5210  -89536.3551 #> 545     -268390.7363        -3804.0785   -8965.4923   62661.9578 #> 546       91358.6168        12126.8836   -5569.8983 -144951.7166 #> 547       55659.5447          141.0046  112714.4162   11378.9842 #> 548      111336.4503        55028.9662  -31100.3998   34626.7275 #> 549      174572.4439       -42598.9541  111157.7255   22644.2260 #> 550        4650.3823       -35999.0734  139278.8684   20136.5985 #> 551     -156320.2827        46284.0215    6598.4480  -55157.7158 #> 552      -93548.5690       -25860.8448   34370.8830   65300.3319 #> 553       11420.5868        -3327.4243  -61074.1040  127267.5401 #> 554      103806.5306        -7558.0936  152298.6564 -188407.9407 #> 555     -237263.5544        14310.9769  114690.6493  -62517.9764 #> 556     -316213.7772       -50545.0289  -10455.5239   14357.0787 #> 557      108584.0125      -123131.4429  151223.9624  -22353.9230 #> 558       62626.8486       -63802.5190   -9658.8944  100752.3912 #> 559      -15181.3656       -55836.0165  219384.4541  226071.4740 #> 560       10469.9166        -1733.6522  -75256.6167  -34388.0465 #> 561       86679.3688         9358.4520  315183.4159  180452.5787 #> 562      -76776.4854        38125.6401 -153052.1071  -27081.6658 #> 563      193413.4920        30936.7234  123473.0693  113607.7051 #> 564      -61027.3963       -40581.3480  136605.2665   33506.5923 #> 565      330479.4520        42611.4047   92666.3211   36430.1101 #> 566     -191120.6412        12936.4591  136297.0979   50790.8456 #> 567      -25660.2290       -16825.1849   27332.2233   22856.0882 #> 568      123763.2614       -22887.2764 -182413.9077   24525.0197 #> 569      -42269.7303       -22625.6941  -39111.8556  -32466.9333 #> 570       30228.6424        11355.9346  -36694.1108  180642.9655 #> 571     -109505.8989        43557.2692   11759.3490  -13960.9486 #> 572     -242856.2361         5685.7804   80122.2594   41233.9881 #> 573       -3067.1127       -38603.0211 -135081.6795   66334.2898 #> 574      189793.2803       -59690.8955  127803.3796  108137.9646 #> 575     -147678.2153       -12396.7440   27431.7094   57778.2816 #> 576       48358.3370       -18815.1267   -8330.6228    5375.0498 #> 577       60424.7808       -19281.7486   67193.6719  -54938.2298 #> 578      105986.6683        -1215.5515   28390.0731   64883.9213 #> 579      -41014.0998       -68329.4365  -56416.9197  -20813.0346 #> 580        7002.1844         6345.0165  -71598.9912  -60159.4007 #> 581       48042.3932       -27945.1205 -104077.5241  133013.7697 #> 582       49143.9045        37071.5962   30760.4392   75801.4604 #> 583      -50219.9751        39274.9213   11208.6914   -3099.8909 #> 584      116819.7326      -117308.7306 -140376.7604  -75544.6634 #> 585       32575.0659       -62644.4297   71242.6111   52769.6125 #> 586       36046.1757       -88652.6433 -131494.6944  -59977.7408 #> 587     -281407.7250       -26660.2391  118619.0982   52030.5854 #> 588      -27480.0686        22527.7336   18049.4835  116700.6164 #> 589      171720.0259        15913.6826  252161.2820  169930.7728 #> 590       54869.3621         4731.7124   80149.5688 -195606.6611 #> 591     -134977.0684       -36664.4179 -103578.5654 -110658.1676 #> 592       34322.5613       -35178.3624    6808.7002   78835.1677 #> 593       84835.8868        42814.3605   91913.0837  -65016.0590 #> 594      -98485.3068         4012.9548   70340.7343   83887.9994 #> 595       34509.1513        15795.5158  125774.8084    3099.5407 #> 596     -123052.9606       -35018.2465 -107272.6718  128912.6280 #> 597       11682.6445        21440.5307  -25915.2525   43545.3532 #> 598       24735.3301         5203.9562  -21418.1240  -31507.8781 #> 599       99077.0022        39360.6852  -11293.1401   11049.4488 #> 600      161340.3894       -28517.1764 -130913.3399  -10210.6542 #> 601     -102470.1020        20001.8565  227389.5120   10890.3046 #> 602      -76539.4849        16270.2872   44209.2302 -162082.0525 #> 603       31696.1368         3723.0012  210053.3156     345.0897 #> 604       76124.0726        17732.6853 -115064.0057  -60886.0407 #> 605      -91287.3604       -14432.2750  173694.9481   24313.6925 #> 606      118969.5498       -41979.1037   83109.6098   72899.5635 #> 607       25250.5798       -30880.6070   13865.8968   39227.9487 #> 608      -38702.2435        18496.7155 -106393.9073   49448.1193 #> 609       22657.8932       -57161.1875  -88111.4113  -56027.9643 #> 610     -105379.1586        15851.4292 -207462.8849   15755.5763 #> 611       -1241.9918       -67541.8709  -74481.9816 -146357.2998 #> 612      146815.0110        20102.5334   94757.7042    6880.2423 #> 613     -316161.3113       -21875.8837   -3949.4345   33941.5918 #> 614      237763.7827        61715.3516   45628.4313   52575.2678 #> 615      106531.6759        12752.1832   61502.1124   62388.8954 #> 616      -42627.4219       -44468.8662    6396.3385  125758.8146 #> 617      -74681.4264       -41534.4451  168387.6987   23496.5151 #> 618      160499.0083       -28956.7459  208085.8087    6467.7652 #> 619     -121883.1550       -12735.1987  154601.4855  -95458.3599 #> 620     -151218.1213       -33628.7193  112772.0516 -165413.0001 #> 621     -166960.9577       -40741.2261  -96210.2878    4553.1790 #> 622      218204.8819        -7974.6319  -42455.8083   76373.0158 #> 623      113139.1262       -10438.7099   51317.6884  -63582.0011 #> 624      111484.1346        28815.3516   82605.0281   -7530.4460 #> 625       18112.7060         9123.1167   16573.0404   91709.6939 #> 626     -100531.5374        45425.7588   74797.5532 -100320.6644 #> 627      -95386.0328       -19635.9522   35092.2499   39538.7810 #> 628     -176653.1444       -40299.2648  -40679.3470   -2990.8697 #> 629     -168457.3040       -23244.8700 -133324.1305  -44063.8018 #> 630      123271.4227       -28922.7839 -155236.0362  153402.5855 #> 631      255940.9348       -28010.7861  126708.0777  -56043.8270 #> 632      169721.0210         7118.1801  -16537.1592   -6862.6785 #> 633     -102060.0653         3040.1857 -260679.6054  157781.2549 #> 634       30689.3119         6906.1597   37349.8720  -85520.2643 #> 635      175012.7354        -3001.1872   50651.6357   75289.5087 #> 636      225025.4656       -68558.9070  -96449.7442  -64045.1809 #> 637      -19424.4275       -58481.4836   -9070.9434  183387.9614 #> 638     -224622.1609       -26853.3571 -208061.3780  -47817.1401 #> 639       99903.2099        18723.3045  -28315.7506  119975.1747 #> 640      133099.8529        50088.0653   10254.1273  108434.2457 #> 641      170672.9985       -14983.4275  150511.4554  176843.3525 #> 642      160849.8608        -9566.0768  138107.1154  -42826.8577 #> 643      -26757.9412       -18075.5339  189004.9499   -3971.2347 #> 644      -97793.9675          784.3162 -251633.4814  -30127.9987 #> 645       64784.3731       -16975.2452    8819.8763  -18364.5563 #> 646       92044.7812        26093.7139   62563.2670  120102.7849 #> 647       47405.4569       -34278.5021   46046.9884  132199.2895 #> 648      189968.3984          905.5783  232068.8911   29267.5797 #> 649      -83577.5727      -102098.4591  -47081.2628  -33297.7037 #> 650     -238600.0578        52192.3964  161369.3225  -56807.3516 #> 651        -674.6033       -46307.1216 -125012.5129   67298.2520 #> 652      -74353.0104        37702.1473  167864.3340   26622.8092 #> 653       -1193.8590        -5002.7063  -56192.4599 -106631.2419 #> 654      -12710.7023       -14689.6802 -161506.4459  125549.4921 #> 655       58483.4057        -4281.2314  -74954.9209   -9691.8806 #> 656      130767.8682        42542.4912  103550.4421 -239912.4539 #> 657      188841.1764       -45567.8752  282224.0567   52902.2917 #> 658       32855.6321       -46226.1543  146296.9336   89893.1377 #> 659     -138459.8486       -33714.2586  205734.1061  -53782.4304 #> 660       26919.4658        68754.4078 -116466.4618   23256.7848 #> 661       28837.6373       -44829.0119  135254.4549   30497.2056 #> 662      201039.5489       -41597.8588  -72997.1535    7898.1436 #> 663      197212.8148        27025.1703   34591.8557   30270.6089 #> 664     -197674.8505         -440.8728  250601.2130  -57987.1465 #> 665      -15474.0154        -1894.5925  128673.5979   35253.5473 #> 666      -96179.5761       -42627.7316 -119044.4852  -80890.3431 #> 667      101275.1105       -12161.7807  171246.3091   50224.1983 #> 668      149384.0169      -112447.0485     121.9014  -22138.4742 #> 669       32027.5598       -45034.1966  -81543.1129   56598.3475 #> 670      159714.0714        21354.9932   73943.4091   47395.6455 #> 671      110948.7742       -27491.3884 -115365.3462   21636.5373 #> 672     -200072.0970        24137.1282   94008.8229  186419.4944 #> 673      -49254.5721        12808.7398 -128064.4879   35347.2728 #> 674      159483.5835        -5584.5045 -111351.2576 -103639.5384 #> 675       28082.8856       -85737.7768  -12944.8373   25454.8402 #> 676      126456.9179       -39297.2565   50176.0373   79927.3236 #> 677       47858.8909       -26398.6577  -17072.6499   83961.0887 #> 678      341344.5948        20257.0501  -67003.6527  -27435.3877 #> 679       91656.1691        27267.0497   78972.0171   22190.7147 #> 680      398764.4303       -40680.0287 -149440.8048  -16272.6745 #> 681      -27139.1812       -33618.5878   68115.8864   16561.2565 #> 682       68521.4226        50067.8780 -206166.2161   82856.0990 #> 683      -93784.2275        36618.4284  -10058.2901  222087.6178 #> 684      -72832.1447       -27150.5245 -285968.7564  -70224.2619 #> 685     -107861.3128       -23571.4115   45040.8443   -2000.1981 #> 686      154977.6385       -82117.8839  120897.8749  104426.3120 #> 687     -177482.2903         1345.7024   90376.5364   79338.6679 #> 688     -104078.3843         5538.1278   77904.9798  136107.2425 #> 689      123088.9696       -32435.2002  100924.1574   61759.4007 #> 690       80466.4345        38863.9953   86237.4562   76091.4842 #> 691      203092.8458       -52483.4153   55521.6030   -2006.1485 #> 692      -36304.5949        -6485.6690   53933.4324  109805.4805 #> 693      110379.4317         3566.4923 -125403.2780  268729.7865 #> 694       41564.0680      -107664.7517  -89624.0047    8270.8218 #> 695     -279818.4613        28218.1365  113304.1545   90110.3589 #> 696     -182462.1973       -31574.0505   35527.3882 -160732.1220 #> 697      195070.4662       -60186.8492   39954.6797  189953.5033 #> 698      157095.5349       -60570.1886  -70958.9246   32541.3141 #> 699     -179226.9581        31174.2877 -273375.3142 -106367.8998 #> 700     -152717.3946        35973.4609  -44459.9620  -82722.4928 #> 701      188207.2909        -7345.5103  109729.6808 -156529.9534 #> 702      110338.9496       -46905.2602  194602.9717  -63905.9252 #> 703       78798.5101       -18919.2415  -95228.6579   79752.5493 #> 704       19498.3729       -48769.7755  166723.0690   68058.5518 #> 705     -146735.1301       -52980.4521   25258.3272  -14756.0167 #> 706       84916.2109        -3791.9341   36852.1188    -912.7172 #> 707      -24769.8273       -33032.8248   85854.7010  224144.2000 #> 708       44924.3773       -47016.9048   74555.7760  137263.1024 #> 709      249978.9835       -35192.3504  -21526.5724  -67434.1266 #> 710      222531.8453        -3457.2427  -28208.4259  -72060.4659 #> 711      -44509.3089       -73473.2804   99899.3830  140317.5135 #> 712      132878.2581       -24849.8416  184058.1114 -117916.6646 #> 713       51301.3493        22214.3941  -28602.6920 -102503.1974 #> 714     -163921.7301        24815.6468  -41714.8452  -88408.8414 #> 715      206247.7005        -5660.2114   63207.8026  132858.0870 #> 716      219516.7366       -32738.6926   38619.3385  -51864.1579 #> 717      297217.6372        45824.0700  -47232.3146  -63968.2339 #> 718      655437.6358       -63243.7405  523278.2859  533917.8570 #> 719      -39245.0770       -29263.1340   58551.7548   -2400.3906 #> 720     -181138.9667        13186.7999   58425.9322  103998.0912 #> 721     -136771.7190        38148.4312  -77525.5601  103930.4532 #> 722     -233911.2380        26702.2548   25308.7597   99108.2044 #> 723        8584.6230      -110980.1181   -9202.6827   73176.1911 #> 724      104180.2258       -55483.3476   62046.3772   78798.0041 #> 725       95761.4088       -81342.5067  -51316.0538   -4914.7289 #> 726     -185220.7310       -27974.9172  -53149.4586 -134374.6056 #> 727     -128260.4592        16222.1561  132255.6195  -48850.2154 #> 728     -105440.5538       -54634.4013  -52777.6637  -95287.4840 #> 729     -160715.3414       -37137.2383   73204.4570  106829.3003 #> 730       12660.0270        18850.0217   33029.4186   -6406.2853 #> 731      -93556.7661         9813.8681  141726.0270   36154.9460 #> 732       88829.7274       -59769.7408  -16306.4815   17289.7797 #> 733      117636.4742        -1163.1643   24730.8799  119569.7871 #> 734      304380.1646        16883.9727   54394.2767   82735.7935 #> 735     -113688.6617        10796.1000   89768.8756  149745.0086 #> 736        1621.3410       -44463.9010   91547.5748   27834.4992 #> 737     -223880.7967       -30127.3220  213407.2359  -24575.6592 #> 738      105175.9114        28763.8336  -69324.4188   39253.3496 #> 739      358427.2785        63542.2544 -221932.0164  186711.8613 #> 740      202250.0384       -60660.8242  120668.7113    6327.4454 #> 741     -161712.5283        79588.3852   11823.5435   -7019.5284 #> 742      126605.6660        34232.5482  455181.2403   15454.3479 #> 743       91840.5139       -53613.8766   -9839.3024   37115.9472 #> 744      -78572.5613       -80690.0641 -194867.8269   71766.6413 #> 745      -78014.3124        12501.0536   21198.5474 -109263.7324 #> 746      215878.0371        35840.8514    1724.9671  135941.5890 #> 747      472249.1407       -37475.5441  208770.3679   44045.5008 #> 748      -63677.2935       -70344.1975  -46097.1993  113903.4810 #> 749       77244.1214        85072.6602   37314.7728  152218.6901 #> 750      -38718.6785      -128076.5452   32850.7998   93168.4240 #> 751     -225988.9437        28011.7589  -44617.9592   29133.7685 #> 752      126672.0435       100130.8758  179103.4240  169392.4177 #> 753     -272491.4795        22597.4885  124915.0225   92801.1778 #> 754        6900.7881       -97025.5613 -161576.8891   52600.8376 #> 755      122055.6778        14462.5740  203986.3430  -84046.8769 #> 756      220531.2692       -67007.7200  298270.7354   42049.1046 #> 757     -194800.6764       -15553.4327   54930.9829   74267.6877 #> 758     -194778.0804        92242.6344 -109786.6630  -93157.0644 #> 759       -9817.3942         9854.8787   75826.3541   86362.4284 #> 760      -54410.1435      -117729.4366  -66668.5736   28499.3846 #> 761      403448.5773      -171584.5236  -27350.0062 -109934.7766 #> 762      -83680.1553        -1870.7398   85005.4450  276663.1411 #> 763       79297.3376       -47291.8076 -110854.3134  -63139.9853 #> 764       44397.8031      -110288.4761   60515.4631  -75136.4868 #> 765       65645.6150      -110261.0700   63645.8139  -42405.3520 #> 766      139384.7669        56062.2120  -96567.9846   67118.0701 #> 767      156801.0493        42423.3260  237097.2703  148176.3127 #> 768      176897.6269       -68530.6695  107497.5208   89077.4541 #> 769     -159043.5049        -8426.0949 -199611.0249    5618.9136 #> 770      105066.9833       -96892.0041 -207362.2723 -147953.5256 #> 771       81360.7427       -20890.7671   29967.5880   -6815.6475 #> 772      158214.5844        56003.8526  155244.8384   46104.9044 #> 773       65778.4511       -35492.5087   40857.7427   -5826.9409 #> 774      -52033.8529        16469.6653   88930.7446  -18827.5848 #> 775       78173.7642        43735.4410  154134.1888   13224.5037 #> 776       91263.7398        12609.7743  217765.6123  131858.1099 #> 777      -55628.4371       -34295.5891  106173.5502  -21413.9767 #> 778     -229550.8386        74510.5988   99082.7921  108883.0326 #> 779     -441456.5257       -19741.1522   31765.0370   11120.7791 #> 780       40274.8218       -14685.5926  -42447.4444      73.6974 #> 781      192184.3984       -40442.5149  152866.7840   36706.2310 #> 782      417355.1129      -136733.6681  119340.9592  307278.3473 #> 783      -15274.5163        10271.2929  -81890.4837 -118320.2528 #> 784      138398.7207       -47438.0509  154703.7238   34194.4164 #> 785       30734.9164        16246.7519  129054.7986   -1855.5151 #> 786      133660.7275       -16740.2667   69955.2264 -144196.7552 #> 787      241356.4431       -27107.6953   27448.9252  107516.3418 #> 788       69162.3370       -52553.9408  -38755.0341  197998.0474 #> 789      -17614.6343        29971.8876  167289.6464  -32366.1107 #> 790     -172711.5127       -26696.1388  243626.7589   70211.7471 #> 791      -41907.2699       -41126.2278   33688.0399  110089.4445 #> 792      105864.7112        17207.0601  -71627.1678  103416.0529 #> 793      436056.7418       -27108.7518  198470.6249  224879.0874 #> 794      372360.9521        11954.6936  473269.5654   92489.2117 #> 795     -283529.9230        39347.0468  -27190.4478 -462915.1055 #> 796      119987.9868        26707.5024  215820.2401  175062.6210 #> 797        -205.2291        51350.4925   43888.8342  -28129.0762 #> 798      314802.8992      -184627.7575  -17603.2223  -70855.5830 #> 799       67236.2731       -32406.4218 -281403.7346   63035.0389 #> 800      287200.3465        74834.2998  320985.2820   22602.6227 #> 801       62591.1093       -85599.6076   11506.5775   96415.1190 #> 802      274782.6959       -56743.6956  146441.6274    4160.3850 #> 803     -107119.3540        99558.6450  -78560.0129  207120.5148 #> 804      259677.3439       -97513.9797  318326.8628  143703.3462 #> 805      350007.5544       -50231.5438  307150.8991  136348.0146 #> 806       11541.4139       -96008.2514 -134244.0362  -45324.0855 #> 807      155450.1883       -71451.5984  -70133.0244   73857.9432 #> 808      -77242.7218       -66633.8595  207495.9931 -131320.2684 #> 809       42101.0092        66007.9060 -104953.0013   63498.3813 #> 810      219343.0772       -28996.4517 -229496.3609 -134804.5102 #> 811      890957.1684       105828.9222  886107.8356  576286.7294 #> 812       26622.6449       -56182.8364  -27129.8410  -78555.9951 #> 813       16817.6802      -119854.1326  134211.3188  156227.5464 #> 814        3823.3355       -29171.5509   46678.1450   33613.8779 #> 815       87744.1142        74539.7234  234660.5497  205065.7814 #> 816      274738.0440       -36929.1004  250918.9050   13771.9727 #> 817       28287.8838       -22480.9941   34278.8049   59238.9086 #> 818       67247.9308       -63624.7686   23818.9860   12000.2527 #> 819      300418.3640      -101472.0782  367125.9683  -58293.4224 #> 820      228788.9444       -24792.1338  196837.4644  119078.2126 #> 821      153665.7256       -91686.2245  132692.9720  319153.2253 #> 822      787699.1074       -49277.9122  675343.4330  363970.1747 #> 823      287492.0223         3898.5970  165075.5730  268722.1695 #> 824       30408.8099       -83075.2644  -53400.7623 -125601.9846 #> 825      448108.6947       -78362.9140  279405.6270  350839.1299 #> 826       34806.7138      -113462.0604   12282.3566   12269.1428 #> 827       69420.4983       -64653.3429  250352.7175 -102638.7249 #> 828      349446.7524       -52426.6722  188155.2240  132049.0797 #> 829      276412.5325         5962.9494  234044.2676   74517.2052 #> 830      918775.2058      -292792.3266  714187.8629  544863.8670 #> 831      465106.2781         9754.4734  324821.2831  193877.4443 #> 832      626045.0515      -244728.5476  433818.1669  304363.2863 #> 833      474008.2813      -257201.7005  537281.0444  227132.9322 #> 834     1398660.5735        95348.7995 1195812.3123  807834.8440 #>  #> $method #> [1] \"addNoise: additive\" #>  #> $noise #> [1] 150 #>  #> $p #> [1] NA #>  #> $delta #> [1] NA #>  #> attr(,\"class\") #> [1] \"addNoise\"  data(testdata) testdata[, c('expend','income','savings')] <- addNoise(testdata[,c('expend','income','savings')])$xm  ## for objects of class sdcMicroObj: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- addNoise(sdc)"},{"path":"/reference/argus_microaggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"argus_microaggregation — argus_microaggregation","title":"argus_microaggregation — argus_microaggregation","text":"calls microaggregation code mu-argus. case one variable microaggregated useOptimal TRUE, Hansen-Mukherjee polynomial exact method applied. case, Mateo-Domingo method used.","code":""},{"path":"/reference/argus_microaggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"argus_microaggregation — argus_microaggregation","text":"","code":"argus_microaggregation(df, k, useOptimal = FALSE)"},{"path":"/reference/argus_microaggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"argus_microaggregation — argus_microaggregation","text":"df data.frame numerical columns k required group size useOptimal (logical) optimal microaggregation applied (ony possible case one variable)","code":""},{"path":"/reference/argus_microaggregation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"argus_microaggregation — argus_microaggregation","text":"list two elements original:  originally provided input data microaggregated:  microaggregated data.frame","code":""},{"path":[]},{"path":"/reference/argus_microaggregation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"argus_microaggregation — argus_microaggregation","text":"","code":"mat <- matrix(sample(1:100, 50, replace=TRUE), nrow=10, ncol=5) df <- as.data.frame(mat) res <- argus_microaggregation(df, k=5, useOptimal=FALSE)"},{"path":"/reference/argus_rankswap.html","id":null,"dir":"Reference","previous_headings":"","what":"argus_rankswap — argus_rankswap","title":"argus_rankswap — argus_rankswap","text":"argus_rankswap","code":""},{"path":"/reference/argus_rankswap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"argus_rankswap — argus_rankswap","text":"","code":"argus_rankswap(df, perc)"},{"path":"/reference/argus_rankswap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"argus_rankswap — argus_rankswap","text":"df data.frame numerical columns perc number defining swapping percantage","code":""},{"path":"/reference/argus_rankswap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"argus_rankswap — argus_rankswap","text":"list two elements original:  originally provided input data swapped:  data.frame containing swapped values","code":""},{"path":[]},{"path":"/reference/argus_rankswap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"argus_rankswap — argus_rankswap","text":"","code":"mat <- matrix(sample(1:100, 50, replace=TRUE), nrow=10, ncol=5) df <- as.data.frame(mat) res <- argus_rankswap(df, perc=10)"},{"path":"/reference/calcRisks.html","id":null,"dir":"Reference","previous_headings":"","what":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","title":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","text":"Recomputation Risk done manual changing content object class sdcMicroObj-class","code":""},{"path":"/reference/calcRisks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","text":"","code":"calcRisks(obj, ...)"},{"path":"/reference/calcRisks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","text":"obj object class sdcMicroObj-class ... arguments moment","code":""},{"path":"/reference/calcRisks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","text":"applying function, dislosure risk re-estimated corresponding slots object class sdcMicroObj-class updated. function mostly used internally automatically update risk sdc method applied.","code":""},{"path":[]},{"path":"/reference/calcRisks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","text":"","code":"data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- calcRisks(sdc)"},{"path":"/reference/casc1.html","id":null,"dir":"Reference","previous_headings":"","what":"Small Artificial Data set — casc1","title":"Small Artificial Data set — casc1","text":"Small Toy Example Data set used Sanz-Mateo et.al.","code":""},{"path":"/reference/casc1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Small Artificial Data set — casc1","text":"format : int [1:13, 1:7] 10 12 17 21 9 12 12 14 13 15 ...  - attr(*, \"dimnames\")=List 2 ..$ : chr [1:13] \"1\" \"2\" \"3\" \"4\" ...  ..$ : chr [1:7] \"1\" \"2\" \"3\" \"4\" ...","code":""},{"path":"/reference/casc1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Small Artificial Data set — casc1","text":"","code":"data(casc1) casc1 #>     1 2 3 4 5 6  7 #> 1  10 4 6 2 1 0  4 #> 2  12 3 7 1 2 1 -1 #> 3  17 2 5 1 3 1 -2 #> 4  21 2 8 2 4 1 -1 #> 5   9 3 3 3 5 1 -4 #> 6  12 4 7 3 6 0 -3 #> 7  12 4 6 3 7 0  4 #> 8  14 3 7 3 6 0 -5 #> 9  13 3 6 3 5 4 -1 #> 10 15 3 7 5 4 3  3 #> 11 17 2 6 7 3 2 -2 #> 12 17 3 8 7 2 1 -2 #> 13 18 4 6 7 1 1 -1"},{"path":"/reference/createNewID.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates new randomized IDs — createNewID","title":"Creates new randomized IDs — createNewID","text":"useful record IDs consist, example, geo identifier household line number. method can used create new, random IDs reconstructed.","code":""},{"path":"/reference/createNewID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates new randomized IDs — createNewID","text":"","code":"createNewID(obj, newID, withinVar)"},{"path":"/reference/createNewID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates new randomized IDs — createNewID","text":"obj sdcMicroObj-class-object newID character specifiying desired variable name new ID withinVar NULL character vector specifying variable (e.g existing household ID) used calculating new IDs. specified, IDs assigned values given variable.","code":""},{"path":"/reference/createNewID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates new randomized IDs — createNewID","text":"sdcMicroObj-class-object updated slot origData","code":""},{"path":"/reference/dRisk.html","id":null,"dir":"Reference","previous_headings":"","what":"overal disclosure risk — dRisk","title":"overal disclosure risk — dRisk","text":"Distance-based disclosure risk estimation via standard deviation-based intervals around observations.","code":""},{"path":"/reference/dRisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"overal disclosure risk — dRisk","text":"","code":"dRisk(obj, ...)"},{"path":"/reference/dRisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"overal disclosure risk — dRisk","text":"obj data.frame object class sdcMicroObj-class ... possible arguments : xm: perturbed data k: percentage standard deviation","code":""},{"path":"/reference/dRisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"overal disclosure risk — dRisk","text":"disclosure risk /modified sdcMicroObj-class","code":""},{"path":"/reference/dRisk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"overal disclosure risk — dRisk","text":"interval (based standard deviation) built around value perturbed value.  look original values lay intervals . parameter k one can enlarge scale interval.","code":""},{"path":"/reference/dRisk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"overal disclosure risk — dRisk","text":"see method SDID Mateo-Sanz, Sebe, Domingo-Ferrer.  Outlier Protection Continuous Microdata Masking. International Workshop Privacy Statistical Databases. PSD 2004: Privacy Statistical Databases pp 201-215. Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4","code":""},{"path":[]},{"path":"/reference/dRisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"overal disclosure risk — dRisk","text":"Matthias Templ","code":""},{"path":"/reference/dRisk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"overal disclosure risk — dRisk","text":"","code":"data(free1) free1 <- as.data.frame(free1) m1 <- microaggregation(free1[, 31:34], method=\"onedims\", aggr=3) m2 <- microaggregation(free1[, 31:34], method=\"pca\", aggr=3) dRisk(obj=free1[, 31:34], xm=m1$mx) #> [1] 0.9955 dRisk(obj=free1[, 31:34], xm=m2$mx) #> [1] 0 dUtility(obj=free1[, 31:34], xm=m1$mx) #> [1] 7.971673 dUtility(obj=free1[, 31:34], xm=m2$mx) #> [1] 6335.63  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ## this is already made internally: sdc <- dRisk(sdc) ## and already stored in sdc"},{"path":"/reference/dRiskRMD.html","id":null,"dir":"Reference","previous_headings":"","what":"RMD based disclosure risk — dRiskRMD","title":"RMD based disclosure risk — dRiskRMD","text":"Distance-based disclosure risk estimation via robust Mahalanobis Distances.","code":""},{"path":"/reference/dRiskRMD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RMD based disclosure risk — dRiskRMD","text":"","code":"dRiskRMD(obj, ...)"},{"path":"/reference/dRiskRMD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RMD based disclosure risk — dRiskRMD","text":"obj sdcMicroObj-class-object data.frame ... see possible arguments xm masked data kweight adjusting influence robust Mahalanobis distances, .e. increase decrease disclosure risk intervals. k2parameter method RMDID2 choose small interval around masked observation.","code":""},{"path":"/reference/dRiskRMD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RMD based disclosure risk — dRiskRMD","text":"disclosure risk modified sdcMicroObj-class risk1 percentage sensitive observations according method RMDID1. risk2 standardized version risk1 wrisk1 amount sensitive observations according RMDID1 weighted corresponding robust Mahalanobis distances. wrisk2 RMDID2 measure indexRisk1 index observations high risk according risk1 measure indexRisk2 index observations high risk according wrisk2 measure","code":""},{"path":"/reference/dRiskRMD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RMD based disclosure risk — dRiskRMD","text":"method extension method SDID accounts “outlyingness” observations. quite natural approach since outliers higher risk re-identification therefore outliers larger disclosure risk intervals observations center data cloud. algorithm works follows: 1. Robust Mahalanobis distances estimated order get robust multivariate distance observation. 2. Intervals estimated observation around every data point original data points length interval defined/weighted squared robust Mahalanobis distance parameter $k$.  higher RMD observation larger interval. 3. Check corresponding masked values fall intervals around original values .  value corresponding observation within interval whole observation considered unsafe.  , get whole vector indicating observation save , finished already using method RMDID1). 4. method RMDID1w: return weighted (via RMD) vector disclosure risk. 5. method RMDID2: whenever observation considered unsafe checked $m$ observations masked data close (defined parameter $k2$ length intervals SDID RSDID) unsafe observation masked data, using Euclidean distances.  $m$ points small interval, conclude observation ``save''.","code":""},{"path":"/reference/dRiskRMD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"RMD based disclosure risk — dRiskRMD","text":"Templ, M. Meindl, B., Robust Statistics Meets SDC: New Disclosure Risk Measures Continuous Microdata Masking, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 5262, pp. 113-126, 2008. Templ, M. New Developments Statistical Disclosure Control Imputation: Robust Statistics Applied Official Statistics, Suedwestdeutscher Verlag fuer Hochschulschriften, 2009, ISBN: 3838108280, 264 pages.","code":""},{"path":[]},{"path":"/reference/dRiskRMD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"RMD based disclosure risk — dRiskRMD","text":"Matthias Templ","code":""},{"path":"/reference/dRiskRMD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RMD based disclosure risk — dRiskRMD","text":"","code":"data(Tarragona) x <- Tarragona[, 5:7] y <- addNoise(x)$xm dRiskRMD(x, xm=y) #> $risk1 #> [1] 0.002398082 #>  #> $risk2 #> [1] 0.002398082 #>  #> $wrisk1 #> [1] 0.002431158 #>  #> $wrisk2 #> [1] 0.002431158 #>  #> $indexRisk1 #> 274 742  #> 274 742  #>  #> $indexRisk2 #> [1] 274 742 #>  #> $riskvec1 #>   [1] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>   [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [15] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [64] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [71] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [78] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [85] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [92] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [99] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [106] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [113] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [120] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [127] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [134] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [141] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [148] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [155] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [162] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [169] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [176] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [183] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [190] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [197] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [204] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [211] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [218] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [225] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [232] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [239] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [246] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [253] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [260] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [267] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [274] 0.1843598 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [281] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [288] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [295] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [302] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [309] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [316] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [323] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [330] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [337] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [344] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [351] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [358] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [365] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [372] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [379] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [386] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [393] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [400] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [407] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [414] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [421] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [428] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [435] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [442] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [449] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [456] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [463] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [470] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [477] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [484] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [491] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [498] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [505] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [512] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [519] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [526] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [533] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [540] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [547] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [554] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [561] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [568] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [575] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [582] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [589] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [596] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [603] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [610] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [617] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [624] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [631] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [638] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [645] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [652] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [659] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [666] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [673] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [680] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [687] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [694] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [701] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [708] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [715] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [722] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [729] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [736] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.8294333 #> [743] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [750] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [757] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [764] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [771] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [778] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [785] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [792] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [799] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [806] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [813] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [820] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [827] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [834] 0.0000000 #>  #> $riskvec2 #>   [1] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>   [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [15] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [64] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [71] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [78] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [85] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [92] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [99] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [106] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [113] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [120] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [127] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [134] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [141] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [148] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [155] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [162] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [169] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [176] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [183] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [190] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [197] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [204] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [211] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [218] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [225] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [232] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [239] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [246] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [253] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [260] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [267] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [274] 0.1843598 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [281] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [288] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [295] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [302] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [309] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [316] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [323] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [330] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [337] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [344] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [351] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [358] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [365] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [372] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [379] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [386] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [393] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [400] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [407] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [414] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [421] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [428] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [435] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [442] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [449] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [456] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [463] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [470] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [477] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [484] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [491] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [498] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [505] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [512] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [519] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [526] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [533] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [540] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [547] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [554] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [561] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [568] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [575] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [582] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [589] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [596] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [603] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [610] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [617] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [624] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [631] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [638] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [645] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [652] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [659] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [666] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [673] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [680] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [687] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [694] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [701] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [708] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [715] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [722] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [729] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [736] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.8294333 #> [743] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [750] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [757] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [764] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [771] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [778] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [785] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [792] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [799] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [806] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [813] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [820] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [827] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [834] 0.0000000 #>  dRisk(x, xm=y) #> [1] 0  data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ## this is already made internally: ## sdc <- dRiskRMD(sdc) ## and already stored in sdc"},{"path":"/reference/dUtility.html","id":null,"dir":"Reference","previous_headings":"","what":"Data-Utility measures — dUtility","title":"Data-Utility measures — dUtility","text":"dUtility() allows compute different measures data-utility based various distances using original perturbed variables.","code":""},{"path":"/reference/dUtility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data-Utility measures — dUtility","text":"","code":"dUtility(obj, ...)"},{"path":"/reference/dUtility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data-Utility measures — dUtility","text":"obj original data object class sdcMicroObj ... see arguments xm: perturbed data method: method IL1, IL1s eigen. methods implemented summary.micro()","code":""},{"path":"/reference/dUtility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data-Utility measures — dUtility","text":"data utility modified entry data utility sdcMicroObj.","code":""},{"path":"/reference/dUtility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data-Utility measures — dUtility","text":"standardised distances perturbed data values original ones measured. following measures available: \"IL1: sum absolute distances original perturbed variables scaled absolute values original variables \"IL1s: measures absolute distances original perturbed ones, scaled standard deviation original variables times square root 2. \"eigen; compares eigenvalues original perturbed data \"robeigen; compares robust eigenvalues original perturbed data","code":""},{"path":"/reference/dUtility.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data-Utility measures — dUtility","text":"IL1 IL1s: see Mateo-Sanz, Sebe, Domingo-Ferrer. Outlier Protection Continuous Microdata Masking. International Workshop Privacy Statistical Databases. PSD 2004: Privacy Statistical Databases pp 201-215. Templ, M. Meindl, B., Robust Statistics Meets SDC: New Disclosure Risk Measures Continuous Microdata Masking, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 5262, pp. 113-126, 2008.","code":""},{"path":[]},{"path":"/reference/dUtility.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Data-Utility measures — dUtility","text":"Matthias Templ","code":""},{"path":"/reference/dUtility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data-Utility measures — dUtility","text":"","code":"data(free1) free1 <- as.data.frame(free1) m1 <- microaggregation(free1[, 31:34], method=\"onedims\", aggr=3) m2 <- microaggregation(free1[, 31:34], method=\"pca\", aggr=3) dRisk(obj=free1[, 31:34], xm=m1$mx) #> [1] 0.9955 dRisk(obj=free1[, 31:34], xm=m2$mx) #> [1] 0 dUtility(obj=free1[, 31:34], xm=m1$mx) #> [1] 7.971673 dUtility(obj=free1[, 31:34], xm=m2$mx) #> [1] 6335.63 data(Tarragona) x <- Tarragona[, 5:7] y <- addNoise(x)$xm dRiskRMD(x, xm=y) #> $risk1 #> [1] 0.01318945 #>  #> $risk2 #> [1] 0.01318945 #>  #> $wrisk1 #> [1] 0.07749631 #>  #> $wrisk2 #> [1] 0.07749631 #>  #> $indexRisk1 #> 107 118 286 331 471 587 713 758 787 806 807  #> 107 118 286 331 471 587 713 758 787 806 807  #>  #> $indexRisk2 #>  [1] 107 118 286 331 471 587 713 758 787 806 807 #>  #> $riskvec1 #>   [1] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>   [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [15] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [64] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [71] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [78] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [85] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [92] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [99] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [106] 0.0000000 0.2151786 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [113] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.2205958 0.0000000 #> [120] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [127] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [134] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [141] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [148] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [155] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [162] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [169] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [176] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [183] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [190] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [197] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [204] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [211] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [218] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [225] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [232] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [239] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [246] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [253] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [260] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [267] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [274] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [281] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.1588463 0.0000000 #> [288] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [295] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [302] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [309] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [316] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [323] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [330] 0.0000000 0.1853997 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [337] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [344] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [351] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [358] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [365] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [372] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [379] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [386] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [393] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [400] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [407] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [414] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [421] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [428] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [435] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [442] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [449] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [456] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [463] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [470] 0.0000000 0.2128429 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [477] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [484] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [491] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [498] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [505] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [512] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [519] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [526] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [533] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [540] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [547] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [554] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [561] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [568] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [575] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [582] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.1564837 0.0000000 #> [589] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [596] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [603] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [610] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [617] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [624] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [631] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [638] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [645] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [652] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [659] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [666] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [673] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [680] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [687] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [694] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [701] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [708] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.4457050 0.0000000 #> [715] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [722] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [729] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [736] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [743] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [750] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [757] 0.0000000 2.2407329 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [764] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [771] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [778] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [785] 0.0000000 0.0000000 0.5418928 0.0000000 0.0000000 0.0000000 0.0000000 #> [792] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [799] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [806] 1.0560849 0.4418667 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [813] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [820] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [827] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [834] 0.0000000 #>  #> $riskvec2 #>   [1] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>   [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [15] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [64] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [71] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [78] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [85] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [92] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [99] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [106] 0.0000000 0.2151786 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [113] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.2205958 0.0000000 #> [120] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [127] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [134] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [141] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [148] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [155] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [162] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [169] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [176] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [183] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [190] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [197] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [204] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [211] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [218] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [225] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [232] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [239] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [246] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [253] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [260] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [267] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [274] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [281] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.1588463 0.0000000 #> [288] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [295] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [302] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [309] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [316] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [323] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [330] 0.0000000 0.1853997 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [337] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [344] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [351] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [358] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [365] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [372] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [379] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [386] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [393] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [400] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [407] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [414] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [421] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [428] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [435] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [442] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [449] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [456] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [463] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [470] 0.0000000 0.2128429 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [477] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [484] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [491] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [498] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [505] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [512] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [519] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [526] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [533] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [540] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [547] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [554] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [561] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [568] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [575] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [582] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.1564837 0.0000000 #> [589] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [596] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [603] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [610] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [617] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [624] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [631] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [638] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [645] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [652] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [659] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [666] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [673] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [680] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [687] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [694] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [701] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [708] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.4457050 0.0000000 #> [715] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [722] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [729] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [736] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [743] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [750] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [757] 0.0000000 2.2407329 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [764] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [771] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [778] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [785] 0.0000000 0.0000000 0.5418928 0.0000000 0.0000000 0.0000000 0.0000000 #> [792] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [799] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [806] 1.0560849 0.4418667 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [813] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [820] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [827] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [834] 0.0000000 #>  dRisk(x, xm=y) #> [1] 0 dUtility(x, xm = y, method = \"IL1\") #> [1] 1284872 dUtility(x, xm = y, method = \"IL1s\") #> [1] 1100.024 dUtility(x, xm = y, method = \"eigen\") #> [1] 3.294694 dUtility(x, xm = y, method = \"robeigen\") #> [1] 165.6664  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ## this is already made internally: ## sdc <- dUtility(sdc) ## and already stored in sdc"},{"path":"/reference/dataGen.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast generation of synthetic data — dataGen","title":"Fast generation of synthetic data — dataGen","text":"Fast generation (primitive) synthetic multivariate normal data.","code":""},{"path":"/reference/dataGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast generation of synthetic data — dataGen","text":"","code":"dataGen(obj, ...)"},{"path":"/reference/dataGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast generation of synthetic data — dataGen","text":"obj sdcMicroObj-class-object data.frame ... see possible arguments n: amount observations generated data, defaults 200 use: howto compute covariances case missing values, see also argument use cov. default choice 'everything', possible choices '.obs', 'complete.obs', 'na..complete' 'pairwise.complete.obs'.","code":""},{"path":"/reference/dataGen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast generation of synthetic data — dataGen","text":"generated synthetic data.","code":""},{"path":"/reference/dataGen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast generation of synthetic data — dataGen","text":"Uses cholesky decomposition generate synthetic data approx. means covariances. details see reference.","code":""},{"path":"/reference/dataGen.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fast generation of synthetic data — dataGen","text":"method multivariate normal distributed data approxiomately covariance original data can generated without reflecting distribution real complex data, , general, follows multivariate normal distribution.","code":""},{"path":"/reference/dataGen.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fast generation of synthetic data — dataGen","text":"Mateo-Sanz, Martinez-Balleste, Domingo-Ferrer. Fast Generation Accurate Synthetic Microdata.  International Workshop Privacy Statistical Databases PSD 2004: Privacy Statistical Databases, pp 298-306.","code":""},{"path":[]},{"path":"/reference/dataGen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast generation of synthetic data — dataGen","text":"Matthias Templ","code":""},{"path":"/reference/dataGen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast generation of synthetic data — dataGen","text":"","code":"data(mtcars) cov(mtcars[,4:6]) #>              hp        drat         wt #> hp   4700.86694 -16.4511089 44.1926613 #> drat  -16.45111   0.2858814 -0.3727207 #> wt     44.19266  -0.3727207  0.9573790 cov(dataGen(mtcars[,4:6])) #>              hp        drat         wt #> hp   5400.18159 -17.7446938 51.3894378 #> drat  -17.74469   0.3057695 -0.4196614 #> wt     51.38944  -0.4196614  1.0979748 pairs(mtcars[,4:6])  pairs(dataGen(mtcars[,4:6]))   ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- dataGen(sdc)"},{"path":"/reference/distributeDraws_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribute number of swaps — distributeDraws_cpp","title":"Distribute number of swaps — distributeDraws_cpp","text":"Distribute number swaps across lowest hierarchy level according predefined swaprate. swaprate applied single swap counts swapping 2 households. Number swaps randomly rounded , needed, total number swaps coherence swaprate. NOTE: internal function used testing C++-function distributeDraws used inside C++-function recordSwap().","code":""},{"path":"/reference/distributeDraws_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribute number of swaps — distributeDraws_cpp","text":"","code":"distributeDraws_cpp(data, hierarchy, hid, swaprate, seed = 123456L)"},{"path":"/reference/distributeDraws_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribute number of swaps — distributeDraws_cpp","text":"data micro data containing hierarchy levels household ID hierarchy column indices variables data refers geographic hierarchy micro data set. instance county > municipality > district. hid column index data refers household identifier. swaprate double 0 1 defining proportion households swapped, see details explanations seed integer setting sampling seed","code":""},{"path":"/reference/distributeRandom_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribute — distributeRandom_cpp","title":"Distribute — distributeRandom_cpp","text":"Distribute `totalDraws` using ratio/probability vector `inputRatio` randomly round entry distribution results integer vector. Returns integer vector containing number units `totalDraws` distributetd according proportions `inputRatio`. NOTE: internal function used testing C++-function distributeRandom used inside C++-function recordSwap().","code":""},{"path":"/reference/distributeRandom_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribute — distributeRandom_cpp","text":"","code":"distributeRandom_cpp(inputRatio, totalDraws, seed)"},{"path":"/reference/distributeRandom_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribute — distributeRandom_cpp","text":"inputRatio vector containing ratios used distribute number units `totalDraws`. totalDraws number units distribute seed integer setting sampling seed","code":""},{"path":"/reference/extractManipData.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove certain variables from the data set inside a sdc object. — extractManipData","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"Extract manipulated data object class sdcMicroObj-class","code":""},{"path":"/reference/extractManipData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"","code":"extractManipData(   obj,   ignoreKeyVars = FALSE,   ignorePramVars = FALSE,   ignoreNumVars = FALSE,   ignoreGhostVars = FALSE,   ignoreStrataVar = FALSE,   randomizeRecords = \"no\" )"},{"path":"/reference/extractManipData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"obj object class sdcMicroObj-class ignoreKeyVars manipulated KeyVariables returned unchanged original variables ignorePramVars manipulated PramVariables returned unchanged original variables ignoreNumVars manipulated NumericVariables returned unchanged original variables ignoreGhostVars manipulated Ghost (linked) Variables returned unchanged original variables ignoreStrataVar manipulated StrataVariables returned unchanged original variables randomizeRecords (logical) specifies, output records randomized. following options possible: ''default, randomization takes place 'simple'records just randomly swapped. 'byHH'slot 'hhId' NULL, clusters defined variable randomized across dataset. slot 'hhId' NULL, records dataset randomly changed. 'withinHH'slot 'hhId' NULL, clusters defined variable randomized across dataset additionally, order records within clusters also randomly changed. slot 'hhId' NULL, records dataset randomly changed.","code":""},{"path":"/reference/extractManipData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"data.frame containing anonymized data set","code":""},{"path":"/reference/extractManipData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"Alexander Kowarik, Bernhard Meindl","code":""},{"path":"/reference/extractManipData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"","code":"## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- removeDirectID(sdc, var=\"age\") dataM <- extractManipData(sdc)"},{"path":"/reference/francdat.html","id":null,"dir":"Reference","previous_headings":"","what":"data from the casc project — francdat","title":"data from the casc project — francdat","text":"Small synthetic data Capobianchi, Polettini, Lucarelli","code":""},{"path":"/reference/francdat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data from the casc project — francdat","text":"data frame 8 observations following 8 variables. Num1 numeric vector Key1 Key variable 1. numeric vector Num2 numeric vector Key2 Key variable 2. numeric vector Key3 Key variable 3. numeric vector Key4 Key variable 4. numeric vector Num3 numeric vector w weight vector. numeric vector","code":""},{"path":"/reference/francdat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"data from the casc project — francdat","text":"https://research.cbs.nl/casc/deliv/12d1.pdf","code":""},{"path":"/reference/francdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"data from the casc project — francdat","text":"data set similar one used authors paper given . need data set demonstration effect, .e. package provides results software.","code":""},{"path":"/reference/francdat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data from the casc project — francdat","text":"","code":"data(francdat) francdat #>   Num1 Key1 Num2 Key2 Key3 Key4 Num3     w #> 1 0.30    1 0.40    2    5    1    4  18.0 #> 2 0.12    1 0.22    2    1    1   22  45.5 #> 3 0.18    1 0.80    2    1    1    8  39.0 #> 4 1.90    3 9.00    3    1    5   91  17.0 #> 5 1.00    4 1.30    3    1    4   13 541.0 #> 6 1.00    4 1.40    3    1    1   14   8.0 #> 7 0.10    6 0.01    2    1    5    1   5.0 #> 8 0.15    1 0.50    2    5    1    5  92.0"},{"path":"/reference/free1.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo data set from mu-Argus — free1","title":"Demo data set from mu-Argus — free1","text":"public use toy demo data set mu-Argus software SDC.","code":""},{"path":"/reference/free1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo data set from mu-Argus — free1","text":"format : num [1:4000, 1:34] 36 36 36 36 36 36 36 36 36 36 ... - attr(*, \"dimnames\")=List 2 ..$ : NULL ..$ : chr [1:34] \"REGION\" \"SEX\" \"AGE\" \"MARSTAT\" ...","code":""},{"path":"/reference/free1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Demo data set from mu-Argus — free1","text":"Public use file CASC project.","code":""},{"path":"/reference/free1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Demo data set from mu-Argus — free1","text":"Please, see link given . Please note, correlation structure data realistic, especially concerning continuous scaled variables drawn independently multivariate uniform distribution.","code":""},{"path":"/reference/free1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demo data set from mu-Argus — free1","text":"","code":"data(free1) head(free1) #>      REGION SEX AGE MARSTAT KINDPERS NUMYOUNG NUMOLD AGEYOUNG EDUC1 EDUC2 ETNI #> [1,]     36   1  43       4        3        0      0       97     4     0    1 #> [2,]     36   1  27       4        3        0      0       97     4     0    9 #> [3,]     36   1  46       4        1        0      0       97     7     7    1 #> [4,]     36   1  27       4        1        0      0       97     5     0    1 #> [5,]     36   2  24       4        1        0      0       97     4     0    1 #> [6,]     36   2  24       4        1        0      0       97     4     0    1 #>      PRIOCCU POSLABM REGJOBC RECBEN RECUNBEN RECODBEN RECBILL RECSOSEC RECPENS #> [1,]       1       1       2      2        2        2       2        2       2 #> [2,]       1       1       2      2        2        2       2        2       2 #> [3,]       1       1       2      2        2        2       2        2       2 #> [4,]       5       1       2      2        2        2       2        2       2 #> [5,]       5       4       2      2        2        2       2        2       2 #> [6,]       5       4       2      2        2        2       2        2       2 #>      POSLABLY POSFACT COMPCODE OCCUCODE KINDFACT TENURE FTPTIME ADDJOB JOBFIND #> [1,]        7       1       95      300        8      1       1      2       2 #> [2,]        7       1       67      552        8      1       2      2       2 #> [3,]        7       1       90      219        8      1       1      2       2 #> [4,]        7       1       65      481        8      1       2      2       2 #> [5,]        2       7        0        0       97      7       7      7       7 #> [6,]        2       7        0        0       97      7       7      7       7 #>      WEIGHT INCOME MONEY ASSETS DEBTS #> [1,]  118.3 970000 74231  61340  1950 #> [2,]  118.3 393700 74231  90480  6750 #> [3,]  118.3 152200 74231  96600  6970 #> [4,]  118.3 216100 74231  40870  5950 #> [5,]  118.3 566900 74231  66460  4610 #> [6,]  118.3 776700 74231  46870  3900"},{"path":"/reference/freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Freq — freq","title":"Freq — freq","text":"Extract sample frequency counts (fk) estimated population frequency counts (Fk)","code":""},{"path":"/reference/freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Freq — freq","text":"","code":"freq(obj, type = \"fk\")"},{"path":"/reference/freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Freq — freq","text":"obj sdcMicroObj-class-object type either 'fk' 'FK'","code":""},{"path":"/reference/freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Freq — freq","text":"vector containing sample frequencies weighted frequencies","code":""},{"path":"/reference/freq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Freq — freq","text":"Bernhard Meindl","code":""},{"path":"/reference/freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Freq — freq","text":"","code":"data(testdata) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','relat','sex'),   pramVars=c('water','electcon'),   numVars=c('expend','income','savings'), w='sampling_weight') head(freq(sdc, type=\"fk\")) #> [1] 412 394 681 681 152 146 head(freq(sdc, type=\"Fk\")) #> [1] 41200 39400 68100 68100 15200 14600"},{"path":"/reference/freqCalc.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequencies calculation for risk estimation — freqCalc","title":"Frequencies calculation for risk estimation — freqCalc","text":"Computation estimation sample population frequency counts.","code":""},{"path":"/reference/freqCalc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequencies calculation for risk estimation — freqCalc","text":"","code":"freqCalc(x, keyVars, w = NULL, alpha = 1)"},{"path":"/reference/freqCalc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequencies calculation for risk estimation — freqCalc","text":"x data frame matrix keyVars key variables w column index weight variable. set NULL one deal population. alpha numeric value 0 1 specifying much keys contain missing values (NAs) contribute calculation fk Fk. default value 1, nothing changes respect implementation prior versions. wildcard-match counted alpha=0 keys missing values basically ignored.","code":""},{"path":"/reference/freqCalc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequencies calculation for risk estimation — freqCalc","text":"Object class freqCalc. freqCalc data set keyVars variables used frequency calculation w index weight vector. NULL sample. alpha value parameter alpha fk frequency equal observations key variables subset sample given observation. Fk estimated frequency population n1 number observations fk=1 n2 number observations fk=2","code":""},{"path":"/reference/freqCalc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Frequencies calculation for risk estimation — freqCalc","text":"function considers case missing values data.  missing value stands possible categories variable considered. possible apply function large data sets many (catergorical) key variables, since computation done C. freqCalc() support sdcMicro S4 class objects.","code":""},{"path":"/reference/freqCalc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Frequencies calculation for risk estimation — freqCalc","text":"look e.g. https://research.cbs.nl/casc/deliv/12d1.pdf Templ, M.  Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008.  https://www.tdp.cat/issues/abs.a004a08.php Templ, M.  New Developments Statistical Disclosure Control Imputation: Robust Statistics Applied Official Statistics, Suedwestdeutscher Verlag fuer Hochschulschriften, 2009, ISBN: 3838108280, 264 pages. Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4 Templ, M. Meindl, B.: Practical Applications Statistical Disclosure Control Using R, Privacy Anonymity Information Management Systems New Techniques New Practical Problems, Springer, 31-62, 2010, ISBN: 978-1-84996-237-7.","code":""},{"path":[]},{"path":"/reference/freqCalc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Frequencies calculation for risk estimation — freqCalc","text":"Bernhard Meindl","code":""},{"path":"/reference/freqCalc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequencies calculation for risk estimation — freqCalc","text":"","code":"data(francdat) f <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) f #>  #>  -------------------------- #> 4 obs. violate 2-anonymity  #> 8 obs. violate 3-anonymity  #>  -------------------------- f$freqCalc #>   Num1 Key1 Num2 Key2 Key3 Key4 Num3     w #> 1 0.30    1 0.40    2    5    1    4  18.0 #> 2 0.12    1 0.22    2    1    1   22  45.5 #> 3 0.18    1 0.80    2    1    1    8  39.0 #> 4 1.90    3 9.00    3    1    5   91  17.0 #> 5 1.00    4 1.30    3    1    4   13 541.0 #> 6 1.00    4 1.40    3    1    1   14   8.0 #> 7 0.10    6 0.01    2    1    5    1   5.0 #> 8 0.15    1 0.50    2    5    1    5  92.0 f$fk #> [1] 2 2 2 1 1 1 1 2 f$Fk #> [1] 110.0  84.5  84.5  17.0 541.0   8.0   5.0 110.0 ## with missings: x <- francdat x[3,5] <- NA x[4,2] <- x[4,4] <- NA x[5,6]  <- NA x[6,2]  <- NA f2 <- freqCalc(x, keyVars=c(2,4,5,6),w=8) cbind(f2$fk, f2$Fk) #>      [,1]  [,2] #> [1,]    3 149.0 #> [2,]    2  84.5 #> [3,]    4 194.5 #> [4,]    3 563.0 #> [5,]    3 566.0 #> [6,]    2 549.0 #> [7,]    2  22.0 #> [8,]    3 149.0  ## test parameter 'alpha' f3a <- freqCalc(x, keyVars=c(2,4,5,6), w=8, alpha=1) f3b <- freqCalc(x, keyVars=c(2,4,5,6), w=8, alpha=0.5) f3c <- freqCalc(x, keyVars=c(2,4,5,6), w=8, alpha=0.1) data.frame(fka=f3a$fk, fkb=f3b$fk, fkc=f3c$fk) #>   fka fkb fkc #> 1   3 2.5 2.1 #> 2   2 1.5 1.1 #> 3   4 4.0 4.0 #> 4   3 2.5 2.1 #> 5   3 2.0 1.2 #> 6   2 1.5 1.1 #> 7   2 1.5 1.1 #> 8   3 2.5 2.1 data.frame(Fka=f3a$Fk, Fkb=f3b$Fk, Fkc=f3c$Fk) #>     Fka   Fkb   Fkc #> 1 149.0 129.5 113.9 #> 2  84.5  65.0  49.4 #> 3 194.5 194.5 194.5 #> 4 563.0 292.5  76.1 #> 5 566.0 553.5 543.5 #> 6 549.0 278.5  62.1 #> 7  22.0  13.5   6.7 #> 8 149.0 129.5 113.9"},{"path":"/reference/generateStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate one strata variable from multiple factors — generateStrata","title":"Generate one strata variable from multiple factors — generateStrata","text":"strata defined multiple variables (e.g. sex,age,country) one combined variable generated.","code":""},{"path":"/reference/generateStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate one strata variable from multiple factors — generateStrata","text":"","code":"generateStrata(df, stratavars, name)"},{"path":"/reference/generateStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate one strata variable from multiple factors — generateStrata","text":"df data.frame stratavars character vector variable name name name newly generated variable","code":""},{"path":"/reference/generateStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate one strata variable from multiple factors — generateStrata","text":"original data set one new column.","code":""},{"path":"/reference/generateStrata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate one strata variable from multiple factors — generateStrata","text":"Alexander Kowarik","code":""},{"path":"/reference/generateStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate one strata variable from multiple factors — generateStrata","text":"","code":"x <- testdata x <- generateStrata(x,c(\"sex\",\"urbrur\"),\"strataIDvar\") head(x) #>   urbrur roof walls water electcon relat sex age hhcivil   expend   income #> 1      2    4     3     3        1     1   1  46       2 90929693 57800000 #> 2      2    4     3     3        1     2   2  41       2 27338058 25300000 #> 3      2    4     3     3        1     3   1   9       1 26524717 69200000 #> 4      2    4     3     3        1     3   1   6       1 18073948 79600000 #> 5      2    4     2     3        1     1   1  52       2  6713247 90300000 #> 6      2    4     2     3        1     2   2  47       2 49057636 32900000 #>     savings ori_hid sampling_weight household_weights strataIDvar #> 1  116258.5       1             100          25.00000         1-2 #> 2  279345.0       1             100          25.00000         2-2 #> 3 5495381.0       1             100          25.00000         1-2 #> 4 8695862.0       1             100          25.00000         1-2 #> 5  203620.2       2             100          16.66667         1-2 #> 6 1021268.0       2             100          16.66667         2-2"},{"path":"/reference/get.sdcMicroObj.html","id":null,"dir":"Reference","previous_headings":"","what":"get.sdcMicroObj — get.sdcMicroObj","title":"get.sdcMicroObj — get.sdcMicroObj","text":"extract information sdcMicroObj-class-objects depending argument type","code":""},{"path":"/reference/get.sdcMicroObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.sdcMicroObj — get.sdcMicroObj","text":"","code":"get.sdcMicroObj(object, type)"},{"path":"/reference/get.sdcMicroObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.sdcMicroObj — get.sdcMicroObj","text":"object sdcMicroObj-class-object type character vector length 1 defining calculate|return|modify. Allowed types slotNames obj.","code":""},{"path":"/reference/get.sdcMicroObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.sdcMicroObj — get.sdcMicroObj","text":"slot sdcMicroObj-class-object depending argument type","code":""},{"path":"/reference/get.sdcMicroObj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get.sdcMicroObj — get.sdcMicroObj","text":"","code":"sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sl <- slotNames(sdc) res <- sapply(sl, function(x) get.sdcMicroObj(sdc, type=x)) str(res) #> List of 24 #>  $ origData         :'data.frame':\t93 obs. of  19 variables: #>   ..$ urbrur         : int [1:93] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ roof           : int [1:93] 2 2 2 2 2 4 4 4 4 4 ... #>   ..$ walls          : int [1:93] 3 3 3 3 3 2 2 2 2 2 ... #>   ..$ water          : int [1:93] 1 3 3 4 4 1 1 3 3 4 ... #>   ..$ electcon       : int [1:93] 4 4 4 1 4 1 1 1 1 1 ... #>   ..$ relat          : int [1:93] 1 3 1 3 2 3 2 3 2 3 ... #>   ..$ sex            : int [1:93] 1 1 2 1 2 1 2 1 2 1 ... #>   ..$ age            : int [1:93] 69 35 80 14 28 25 49 2 36 15 ... #>   ..$ hhcivil        : int [1:93] 1 1 4 1 2 1 2 1 2 1 ... #>   ..$ expend         : int [1:93] 30772412 77536815 15103477 99118978 55576313 46468920 20098853 4778454 58244413 89946151 ... #>   ..$ income         : num [1:93] 72500000 10100000 56700000 12300000 26300000 88600000 60600000 26300000 46900000 94400000 ... #>   ..$ savings        : num [1:93] 1230366 1856943 4807111 7195081 4934387 ... #>   ..$ ori_hid        : int [1:93] 893 621 621 667 658 625 632 222 201 676 ... #>   ..$ sampling_weight: int [1:93] 100 100 100 100 100 100 100 100 100 100 ... #>   ..$ represent      : int [1:93] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ category_count : int [1:93] 1 1 1 11 20 58 62 59 66 31 ... #>   ..$ relat2         : int [1:93] 10 30 10 30 10 30 10 30 10 30 ... #>   ..$ water2         : int [1:93] 10 10 10 20 20 10 10 10 10 20 ... #>   ..$ water3         : int [1:93] 100 100 100 200 200 100 100 100 100 200 ... #>  $ keyVars          : int [1:7] 1 2 3 4 5 6 7 #>  $ pramVars         : NULL #>  $ numVars          : int [1:3] 10 11 12 #>  $ ghostVars        : NULL #>  $ weightVar        : int 14 #>  $ hhId             : NULL #>  $ strataVar        : NULL #>  $ sensibleVar      : NULL #>  $ manipKeyVars     :'data.frame':\t93 obs. of  7 variables: #>   ..$ urbrur  : int [1:93] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ roof    : int [1:93] 2 2 2 2 2 4 4 4 4 4 ... #>   ..$ walls   : int [1:93] 3 3 3 3 3 2 2 2 2 2 ... #>   ..$ water   : int [1:93] 1 3 3 4 4 1 1 3 3 4 ... #>   ..$ electcon: int [1:93] 4 4 4 1 4 1 1 1 1 1 ... #>   ..$ relat   : int [1:93] 1 3 1 3 2 3 2 3 2 3 ... #>   ..$ sex     : int [1:93] 1 1 2 1 2 1 2 1 2 1 ... #>  $ manipPramVars    : NULL #>  $ manipNumVars     :'data.frame':\t93 obs. of  3 variables: #>   ..$ expend : int [1:93] 30772412 77536815 15103477 99118978 55576313 46468920 20098853 4778454 58244413 89946151 ... #>   ..$ income : num [1:93] 72500000 10100000 56700000 12300000 26300000 88600000 60600000 26300000 46900000 94400000 ... #>   ..$ savings: num [1:93] 1230366 1856943 4807111 7195081 4934387 ... #>  $ manipGhostVars   : NULL #>  $ manipStrataVar   : NULL #>  $ originalRisk     :List of 2 #>   ..$ global    :List of 5 #>   .. ..$ risk     : num 0.0465 #>   .. ..$ risk_ER  : num 4.33 #>   .. ..$ risk_pct : num 4.65 #>   .. ..$ threshold: num 0 #>   .. ..$ max_risk : num 0.01 #>   ..$ individual: num [1:93, 1:3] 0.0465 0.0465 0.0465 0.0465 0.0465 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:3] \"risk\" \"fk\" \"Fk\" #>  $ risk             :List of 3 #>   ..$ global    :List of 5 #>   .. ..$ risk     : num 0.0465 #>   .. ..$ risk_ER  : num 4.33 #>   .. ..$ risk_pct : num 4.65 #>   .. ..$ threshold: num 0 #>   .. ..$ max_risk : num 0.01 #>   ..$ individual: num [1:93, 1:3] 0.0465 0.0465 0.0465 0.0465 0.0465 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:3] \"risk\" \"fk\" \"Fk\" #>   ..$ numeric   : num 1 #>  $ utility          :List of 3 #>   ..$ il1  : num 0 #>   ..$ il1s : num 0 #>   ..$ eigen: num 0 #>  $ pram             : NULL #>  $ localSuppression : NULL #>  $ options          :List of 4 #>   ..$ seed            : logi NA #>   ..$ max_size        : num 1e+05 #>   ..$ randomizeRecords: logi FALSE #>   ..$ alpha           : num 1 #>  $ additionalResults: NULL #>  $ set              :List of 9 #>   ..$ : chr \"origData\" #>   ..$ : chr \"keyVars\" #>   ..$ : chr \"manipKeyVars\" #>   ..$ : chr \"numVars\" #>   ..$ : chr \"manipNumVars\" #>   ..$ : chr \"weightVar\" #>   ..$ : chr \"options\" #>   ..$ : chr \"risk\" #>   ..$ : chr \"utility\" #>  $ prev             : NULL #>  $ deletedVars      : NULL"},{"path":"/reference/globalRecode.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Recoding — globalRecode","title":"Global Recoding — globalRecode","text":"Global recoding variables","code":""},{"path":"/reference/globalRecode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Recoding — globalRecode","text":"","code":"globalRecode(obj, ...)"},{"path":"/reference/globalRecode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Recoding — globalRecode","text":"obj numeric vector, data.frame object class sdcMicroObj-class ... see possible arguments column: keyVar changed. Character vector length 1 specifying variable name recoded (required obj data.frame object class sdcMicroObj-class. breaks: either numeric vector cut points number giving number intervals x cut . labels: labels levels resulting category. default, labels constructed using \"(,b]\" interval notation.  labels = FALSE, simple integer codes returned instead factor. method: following arguments supported: “equidistant:” equal sized intervalls “logEqui:” equal sized intervalls log-transformed data “equalAmount:” intervalls approxiomately amount observations","code":""},{"path":"/reference/globalRecode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Recoding — globalRecode","text":"modified sdcMicroObj-class factor, unless labels = FALSE results mere integer level codes.","code":""},{"path":"/reference/globalRecode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global Recoding — globalRecode","text":"labels parameter specified, values used name factor levels.  none specified, factor level labels constructed.","code":""},{"path":"/reference/globalRecode.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Global Recoding — globalRecode","text":"globalRecode can applied vectors stored factors sdcMicro >= 4.7.0!","code":""},{"path":"/reference/globalRecode.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Global Recoding — globalRecode","text":"Templ, M. Kowarik, . Meindl, B. Statistical Disclosure Control Micro-Data Using R Package sdcMicro. Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4","code":""},{"path":[]},{"path":"/reference/globalRecode.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Global Recoding — globalRecode","text":"Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/globalRecode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Recoding — globalRecode","text":"","code":"data(free1) free1 <- as.data.frame(free1)  ## application to a vector head(globalRecode(free1$AGE, breaks=c(1,9,19,29,39,49,59,69,100), labels=1:8)) #> [1] 5 3 5 3 3 3 #> Levels: 1 2 3 4 5 6 7 8 table(globalRecode(free1$AGE, breaks=c(1,9,19,29,39,49,59,69,100), labels=1:8)) #>  #>   1   2   3   4   5   6   7   8  #>   0 312 815 968 717 455 511 222   ## application to a data.frame # automatic labels table(globalRecode(free1, column=\"AGE\", breaks=c(1,9,19,29,39,49,59,69,100))$AGE) #>  #>    (1,9]   (9,19]  (19,29]  (29,39]  (39,49]  (49,59]  (59,69] (69,100]  #>        0      312      815      968      717      455      511      222   ## calculation of brea-points using different algorithms table(globalRecode(free1$AGE, breaks=6)) #>  #> [14,24] (24,34] (34,44] (44,55] (55,65] (65,75]  #>     689     910     925     551     496     429  table(globalRecode(free1$AGE, breaks=6, method=\"logEqui\")) #>  #>    [6,10]   (10,18]   (18,33]   (33,61]  (61,110] (110,201]  #>         0       251      1248      1870       631         0  table(globalRecode(free1$AGE, breaks=6, method=\"equalAmount\")) #>  #> [15,24] (24,32] (32,38] (38,47] (47,61] (61,74]  #>     689     725     590     697     668     631   ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- globalRecode(sdc, column=\"water\", breaks=3) table(get.sdcMicroObj(sdc, type=\"manipKeyVars\")$water) #>  #>  [0,3]  (3,7] (7,10]  #>     47     40      6"},{"path":"/reference/groupAndRename.html","id":null,"dir":"Reference","previous_headings":"","what":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"input object class sdcMicroObj-class, specified factor-variable recoded factor less levels risk-measures automatically recomputed.","code":""},{"path":"/reference/groupAndRename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"","code":"groupAndRename(obj, var, before, after, addNA = FALSE)"},{"path":"/reference/groupAndRename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"obj object class sdcMicroObj-class var name keyVariable change vector levels recoding name new level recoding addNA logical, TRUE missing values input variables added level specified argument .","code":""},{"path":"/reference/groupAndRename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"modified sdcMicroObj-class","code":""},{"path":"/reference/groupAndRename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"input class data.frame, result data.frame modified column specified var. input class factor, result factor different levels.","code":""},{"path":"/reference/groupAndRename.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"Templ, M. Kowarik, . Meindl, B.  Statistical Disclosure Control Micro-Data Using R Package sdcMicro.  Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4","code":""},{"path":"/reference/groupAndRename.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"Bernhard Meindl","code":""},{"path":"/reference/groupAndRename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"","code":"## for objects of class sdcMicro: data(testdata2) testdata2$urbrur <- as.factor(testdata2$urbrur) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- groupAndRename(sdc, var=\"urbrur\", before=c(\"1\",\"2\"), after=c(\"1\"))"},{"path":"/reference/il_additional.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Information-Loss measures — IL_correl","title":"Additional Information-Loss measures — IL_correl","text":"Measures IL_correl() IL_variables() proposed Andrzej Mlodak (theoretically) bounded 0 1.","code":""},{"path":"/reference/il_additional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional Information-Loss measures — IL_correl","text":"","code":"IL_correl(x, xm)  # S3 method for il_correl print(x, digits = 3, ...)  IL_variables(x, xm)  # S3 method for il_variables print(x, digits = 3, ...)"},{"path":"/reference/il_additional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional Information-Loss measures — IL_correl","text":"x object coercible data.frame representing original dataset xm object coercible data.frame representing perturbed, modified dataset digits number digits used rounding displaying results ... additional parameter print-methods; currently ignored","code":""},{"path":"/reference/il_additional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional Information-Loss measures — IL_correl","text":"corresponding information-loss measure","code":""},{"path":"/reference/il_additional.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Additional Information-Loss measures — IL_correl","text":"IL_correl(): information-loss measure can applied common numerically scaled variables x xm. based diagonal entries inverse correlation matrices original perturbed data. IL_variables(): common-variables x xm individual distance-functions depend class variable; specifically functions different numeric variables, ordered-factors character/factor variables. individual distances summed scaled n * m n number records m number (common) variables. Details can found references implementation IL_correl() differs slightly original proposition Mlodak, . (2020) constant multiplier changed 1 / sqrt(2) instead 1/2 better efficiency interpretability measure.","code":""},{"path":"/reference/il_additional.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Additional Information-Loss measures — IL_correl","text":"Mlodak, . (2020). Information loss resulting statistical disclosure control output data, Wiadomosci Statystyczne. Polish Statistician, 2020, 65(9), 7-27, DOI: 10.5604/01.3001.0014.4121 Mlodak, . (2019). Using Complex Measure Assessment Information Loss Due Microdata Disclosure Control, Przegląd Statystyczny, 2019, 66(1), 7-26, DOI: 10.5604/01.3001.0013.8285","code":""},{"path":"/reference/il_additional.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Additional Information-Loss measures — IL_correl","text":"Bernhard Meindl bernhard.meindl@statistik.gv.","code":""},{"path":"/reference/il_additional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional Information-Loss measures — IL_correl","text":"","code":"data(\"Tarragona\", package = \"sdcMicro\") res1 <- addNoise(obj = Tarragona, variables = colnames(Tarragona), noise = 100) IL_correl(x = as.data.frame(res1$x), xm = as.data.frame(res1$xm)) #> Number of records (x):  834  | Number of records (xm):  834  #> Number of common numeric variables:  13  #> Overall information loss:  0.462   res2 <- addNoise(obj = Tarragona, variables = colnames(Tarragona), noise = 25)  IL_correl(x = as.data.frame(res2$x), xm = as.data.frame(res2$xm)) #> Number of records (x):  834  | Number of records (xm):  834  #> Number of common numeric variables:  13  #> Overall information loss:  0.235   # creating test-inputs n <- 150 x <- xm <- data.frame(   v1 = factor(sample(letters[1:5], n, replace = TRUE), levels = letters[1:5]),   v2 = rnorm(n),   v3 = runif(3),   v4 = ordered(sample(LETTERS[1:3], n, replace = TRUE), levels = c(\"A\", \"B\", \"C\")) ) xm$v1[1:5] <- \"a\" xm$v2 <- rnorm(n, mean = 5) xm$v4[1:5] <- \"A\" IL_variables(x, xm) #> Number of records:  150  #> Number of variables:  4  #> Overall information loss:  0.223  #> Individual information losses for variables: #>  variable  loss #>        v1 0.020 #>        v2 0.857 #>        v3 0.000 #>        v4 0.013"},{"path":"/reference/importProblem.html","id":null,"dir":"Reference","previous_headings":"","what":"importProblem — importProblem","title":"importProblem — importProblem","text":"reads sdcProblem code exported within sdcApp.","code":""},{"path":"/reference/importProblem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"importProblem — importProblem","text":"","code":"importProblem(path)"},{"path":"/reference/importProblem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"importProblem — importProblem","text":"path file path","code":""},{"path":"/reference/importProblem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"importProblem — importProblem","text":"object class sdcMicro_GUI_export object class 'simple.error'","code":""},{"path":"/reference/importProblem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"importProblem — importProblem","text":"Bernhard Meindl","code":""},{"path":"/reference/indivRisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual Risk computation — indivRisk","title":"Individual Risk computation — indivRisk","text":"Estimation risk observation. risk computed one can use e.g. function localSuppr() protection values high risk.  details can found link given .","code":""},{"path":"/reference/indivRisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual Risk computation — indivRisk","text":"","code":"indivRisk(x, method = \"approx\", qual = 1, survey = TRUE)"},{"path":"/reference/indivRisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual Risk computation — indivRisk","text":"x object class freqCalc method approx (default) exact qual final correction factor survey TRUE, survey data FALSE deal population.","code":""},{"path":"/reference/indivRisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual Risk computation — indivRisk","text":"rk:  base individual risk method: method qual: final correction factor fk: frequency count knames: colnames key variables","code":""},{"path":"/reference/indivRisk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Individual Risk computation — indivRisk","text":"S4 class sdcMicro objects supported function measure_risk also estimates individual risk method.","code":""},{"path":"/reference/indivRisk.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Individual Risk computation — indivRisk","text":"base individual risk method developed Benedetti, Capobianchi Franconi","code":""},{"path":"/reference/indivRisk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Individual Risk computation — indivRisk","text":"Templ, M. Kowarik, . Meindl, B.  Statistical Disclosure Control Micro-Data Using R Package sdcMicro.  Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Franconi, L. Polettini, S. (2004) Individual risk estimation mu-Argus: review. Privacy Statistical Databases, Lecture Notes Computer Science, 262--272. Springer Machanavajjhala, . Kifer, D. Gehrke, J. Venkitasubramaniam, M. (2007) l-Diversity: Privacy Beyond k-Anonymity.  ACM Trans. Knowl. Discov. Data, 1(1) additionally, look vignettes sdcMicro reading.","code":""},{"path":[]},{"path":"/reference/indivRisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Individual Risk computation — indivRisk","text":"Matthias Templ. Bug method “exact” fixed since version 2.6.5. Youri Baeyens.","code":""},{"path":"/reference/indivRisk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual Risk computation — indivRisk","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) f <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) f #>  #>  -------------------------- #> 4 obs. violate 2-anonymity  #> 8 obs. violate 3-anonymity  #>  -------------------------- f$fk #> [1] 2 2 2 1 1 1 1 2 f$Fk #> [1] 110.0  84.5  84.5  17.0 541.0   8.0   5.0 110.0 ## individual risk calculation: indivf <- indivRisk(f) indivf$rk #> [1] 0.01714426 0.02204233 0.02204233 0.17707583 0.01165448 0.29706308 0.40235948 #> [8] 0.01714426"},{"path":"/reference/infoLoss.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate information loss after targeted record swapping — infoLoss","title":"Calculate information loss after targeted record swapping — infoLoss","text":"Calculate information loss targeted record swapping using original swapped micro data. Information loss calculated table counts defined parameter `table_vars` using either implemented information loss measures like absolute deviaton, relative absolute deviation absolute deviation square roots custom metric, See details .","code":""},{"path":"/reference/infoLoss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate information loss after targeted record swapping — infoLoss","text":"","code":"infoLoss(   data,   data_swapped,   table_vars,   metric = c(\"absD\", \"relabsD\", \"abssqrtD\"),   custom_metric = NULL,   hid = NULL,   probs = sort(c(seq(0, 1, by = 0.1), 0.95, 0.99)),   quantvals = c(0, 0.02, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, Inf),   apply_quantvals = c(\"relabsD\", \"abssqrtD\"),   exclude_zeros = FALSE,   only_inner_cells = FALSE )"},{"path":"/reference/infoLoss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate information loss after targeted record swapping — infoLoss","text":"data original micro data set, must either `data.table` `data.frame`. data_swapped micro data set targeted record swapping applied. Must either `data.table` `data.frame`. table_vars column names `data` `data_swapped`. Defines variables (multidimensional) frequency table constructed. Information loss calculated applying metric `metric` `custom_merics` cell-counts margin counts table `data` `data_swapped`. metric character vector containing one already implemented metrices: \"absD\",\"relabsD\" /\"abssqrtD\". custom_metric function (named) list functions. Functions defined must form `fun(x,y,...)` `x` `y` expect numeric values length. output functions must numeric vector length `x` `y`. hid `NULL` character containing household id `data` `data_swapped`. `NULL` frequencies reflect number households, otherwise frequencies reflect number persons. probs numeric vector containing values inervall [0,1]. quantvals optional numeric vector defines groups used cumulative outputs. applied results `m` information loss metric `cut(m,breaks=quantvals,include.lowest=TRUE)`, see also return values. apply_quantvals character vector defining output metrices `quantvals` applied . exclude_zeros `TRUE` `FALSE`, `TRUE` 0 cells frequency table using `data_swapped` ignored. only_inner_cells `TRUE` `FALSE`, `TRUE` inner cells frequency table defined `table_vars` compared. Otherwise also tables margins bei calculated.","code":""},{"path":"/reference/infoLoss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate information loss after targeted record swapping — infoLoss","text":"Returns list containing: * `cellvalues`: `data.table` showing long format table cell frequency counts `data` ~ `count_o` `data_swapped` ~ `count_s`.  * `overview`: `data.table` containing disribution `noise` number cells percentage. `noise` ist calculated difference cell values frequency table generated original swapped data * `measures`: `data.table` containing quantiles mean (column `waht`) distribution information loss metrices applied table cell. quantiles defined parameter `probs`. * `cumdistr\\*`: `data.table` containing cumulative distribution information loss metrices. Distribution shown number cells (`cnt`) percentage (`pct`). Column `cat` shows unique values information loss metric grouping defined `quantvals`.     * `false_zero`: number table cells non-zero using `data` zero using `data_swapped`. * `false_nonzero`: number table cells zero using `data` non-zero using `data_swapped`. * `exclude_zeros`: value passed `exclude_zero` calling function.","code":""},{"path":"/reference/infoLoss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate information loss after targeted record swapping — infoLoss","text":"First frequency tables build `data` `data_swapped` using variables defined `table_vars`. default also table margins calculated, see parameter `only_inner_cells = FALSE`. information loss metrices defined either `metric` `custom_metric` applied table cells frequency tables. done sense `metric(x,y)` `metric` information loss, `x` cell table created `data` `y` cell table created `data_swapped`.  One custom metrices can applied using parameter `custom_metric`, see also examples.","code":""},{"path":"/reference/infoLoss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate information loss after targeted record swapping — infoLoss","text":"","code":"# generate dummy data  seed <- 2021 set.seed(seed) nhid <- 10000 dat <- createDat( nhid ) #> Warning: Item 7 has 10000 rows but longest item has 34827; recycled with remainder. #> Warning: Item 8 has 10000 rows but longest item has 34827; recycled with remainder. #> Warning: Item 9 has 10000 rows but longest item has 34827; recycled with remainder.  # define paramters for swapping k_anonymity <- 1 swaprate <- .05 similar <- list(c(\"hsize\")) hier <- c(\"nuts1\",\"nuts2\") carry_along <- c(\"nuts3\",\"lau2\") risk_variables <- c(\"ageGroup\",\"national\") hid <- \"hid\"  # apply record swapping dat_s <- recordSwap(data = dat, hid = hid, hierarchy = hier,                     similar = similar, swaprate = swaprate,                     k_anonymity = k_anonymity,                     risk_variables = risk_variables,                     carry_along = carry_along,                     return_swapped_id = TRUE,                     seed=seed) #> Recordswapping was successful!   # calculate informationn loss # for the table nuts2 x national iloss <- infoLoss(data=dat, data_swapped = dat_s,                   table_vars = c(\"nuts2\",\"national\")) iloss$measures # distribution of information loss measures #>       what      absD   abssqrtD     relabsD #>  1:    Min  0.000000 0.00000000 0.000000000 #>  2:    10%  0.000000 0.00000000 0.000000000 #>  3:    20%  0.000000 0.00000000 0.000000000 #>  4:    30%  1.000000 0.02266939 0.002054402 #>  5:    40%  2.000000 0.04606798 0.004246399 #>  6:   Mean  3.642105 0.08434515 0.007822526 #>  7: Median  2.000000 0.04950741 0.004914005 #>  8:    60%  4.000000 0.09067496 0.008216906 #>  9:    70%  4.000000 0.09539014 0.009058038 #> 10:    80%  6.000000 0.13459612 0.012048388 #> 11:    90% 10.000000 0.23095825 0.021393566 #> 12:    95% 13.000000 0.29168934 0.026492789 #> 13:    99% 14.300000 0.32595429 0.031417566 #> 14:    Max 19.000000 0.44860772 0.043280182 iloss$false_zero # no false zeros #> [1] 0 iloss$false_nonzero # no false non-zeros #> [1] 0  # frequency tables of households accross # nuts2 x hincome  iloss <- infoLoss(data=dat, data_swapped = dat_s,                   table_vars = c(\"nuts2\",\"hincome\"),                   hid = \"hid\") iloss$measures   #>       what     absD   abssqrtD    relabsD #>  1:    Min 0.000000 0.00000000 0.00000000 #>  2:    10% 0.000000 0.00000000 0.00000000 #>  3:    20% 0.000000 0.00000000 0.00000000 #>  4:    30% 1.000000 0.05478394 0.01204819 #>  5:    40% 1.000000 0.05913160 0.01400626 #>  6:   Mean 1.508571 0.09285244 0.02290000 #>  7: Median 1.000000 0.06225775 0.01562500 #>  8:    60% 2.000000 0.11279864 0.02544628 #>  9:    70% 2.000000 0.12560138 0.03125000 #> 10:    80% 3.000000 0.17521323 0.04132742 #> 11:    90% 3.600000 0.22232623 0.05495495 #> 12:    95% 5.000000 0.28316703 0.06809524 #> 13:    99% 6.260000 0.36480767 0.08950688 #> 14:    Max 7.000000 0.46585680 0.11666667  # define custom metric squareD <- function(x,y){   (x-y)^2 }  iloss <- infoLoss(data=dat, data_swapped = dat_s,                  table_vars = c(\"nuts2\",\"national\"),                  custom_metric = list(squareD=squareD)) iloss$measures # includes custom loss as well #>       what      absD   abssqrtD     relabsD   squareD #>  1:    Min  0.000000 0.00000000 0.000000000   0.00000 #>  2:    10%  0.000000 0.00000000 0.000000000   0.00000 #>  3:    20%  0.000000 0.00000000 0.000000000   0.00000 #>  4:    30%  1.000000 0.02266939 0.002054402   1.00000 #>  5:    40%  2.000000 0.04606798 0.004246399   4.00000 #>  6:   Mean  3.642105 0.08434515 0.007822526  29.11579 #>  7: Median  2.000000 0.04950741 0.004914005   4.00000 #>  8:    60%  4.000000 0.09067496 0.008216906  16.00000 #>  9:    70%  4.000000 0.09539014 0.009058038  16.00000 #> 10:    80%  6.000000 0.13459612 0.012048388  36.00000 #> 11:    90% 10.000000 0.23095825 0.021393566 100.00000 #> 12:    95% 13.000000 0.29168934 0.026492789 169.00000 #> 13:    99% 14.300000 0.32595429 0.031417566 205.90000 #> 14:    Max 19.000000 0.44860772 0.043280182 361.00000"},{"path":"/reference/kAnon_violations.html","id":null,"dir":"Reference","previous_headings":"","what":"kAnon_violations — kAnon_violations","title":"kAnon_violations — kAnon_violations","text":"returns number observations violating k-anonymity.","code":""},{"path":"/reference/kAnon_violations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kAnon_violations — kAnon_violations","text":"","code":"kAnon_violations(object, weighted, k)  # S4 method for sdcMicroObj,logical,numeric kAnon_violations(object, weighted, k)"},{"path":"/reference/kAnon_violations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kAnon_violations — kAnon_violations","text":"object sdcMicroObj-class object weighted TRUE FALSE defining sampling weights taken account k positive number defining parameter k","code":""},{"path":"/reference/kAnon_violations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kAnon_violations — kAnon_violations","text":"number records violating k-anonymity based  unweighted sample data (case parameter weighted FALSE) computing number observations estimated violate k-anonymity population case  parameter weighted equals TRUE.","code":""},{"path":"/reference/localSupp.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Suppression — localSupp","title":"Local Suppression — localSupp","text":"simple method perfom local suppression.","code":""},{"path":"/reference/localSupp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Suppression — localSupp","text":"","code":"localSupp(obj, threshold = 0.15, keyVar)"},{"path":"/reference/localSupp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Suppression — localSupp","text":"obj object class freqCalc sdcMicroObj-class. threshold threshold individual risk keyVar Variable values might suppressed","code":""},{"path":"/reference/localSupp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Suppression — localSupp","text":"updated object class freqCalc sdcMicroObj-class object manipulated data.","code":""},{"path":"/reference/localSupp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local Suppression — localSupp","text":"Values high risk (threshold) certain variable (parameter keyVar) suppressed.","code":""},{"path":"/reference/localSupp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local Suppression — localSupp","text":"Templ, M. Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008. http://www.tdp.cat/issues/abs.a004a08.php Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4","code":""},{"path":[]},{"path":"/reference/localSupp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Suppression — localSupp","text":"Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/localSupp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Suppression — localSupp","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) keyVars <- paste0(\"Key\",1:4) if (FALSE) { # dontrun because Examples with CPU time > 2.5 times elapsed time f <- freqCalc(francdat, keyVars=keyVars,w=8) f f$fk f$Fk ## individual risk calculation: indivf <- indivRisk(f) indivf$rk ## Local Suppression localS <- localSupp(f, keyVar=\"Key4\", threshold=0.15) f2 <- freqCalc(localS$freqCalc, keyVars=keyVars, w=8) indivf2 <- indivRisk(f2) indivf2$rk identical(indivf$rk, indivf2$rk)  ## select another keyVar and run localSupp once again, # if you think the table is not fully protected  ## for objects of class sdcMicro: data(testdata) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- localSupp(sdc, keyVar='urbrur', threshold=0.045) print(sdc, type=\"ls\") }"},{"path":"/reference/localSuppression.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Suppression to obtain k-anonymity — localSuppression","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"Algorithm achieve k-anonymity performing local suppression.","code":""},{"path":"/reference/localSuppression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"","code":"localSuppression(obj, k = 2, importance = NULL, combs = NULL, ...)  kAnon(obj, k = 2, importance = NULL, combs = NULL, ...)"},{"path":"/reference/localSuppression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"obj sdcMicroObj-class-object data.frame k threshold k-anonymity importance numeric vector numbers 1 n (n=length vector keyVars).  vector represents \"importance\" variables used local suppression order obtain k-anonymity. key-variables importance=1 - possible - suppressed, key-variables importance=n used whenever possible. combs numeric vector. specified, algorithm provide k-anonymity combination n key variables (n value ith element parameter. example, combs=c(4,3), algorithm provide k-anonymity combinations 4 key variables k-anonymity combinations 3 key variables. possible apply different k subsets specifying k vector. k one element, value k used subgroups. ... see arguments keyVars: names (indices) categorical key variables (data-frame method) strataVars: name (index) variable used stratification purposes, used data.frame method. means k-anonymity provided within category specified variable. alpha: numeric value 0 1 specifying much keys contain missing values (NAs) contribute calculation fk Fk. default value 1, nothing changes respect implementation prior versions. wildcard-match counted alpha=0 keys missing values basically ignored. Used data-frame method method sdcMicroObj-class-objects, value extracted slot options.","code":""},{"path":"/reference/localSuppression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"Manipulated data set suppressions k-anonymity respect specified key-variables manipulated data stored sdcMicroObj-class.","code":""},{"path":"/reference/localSuppression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"algorithm provides k-anonymized data set suppressing values key variables. algorithm tries find optimal solution suppress values possible considers specified importance vector. specified, importance vector constructed way key variables high number characteristics considered less important key variables low number characteristics. implementation provides k-anonymity per strata, slot 'strataVar' set sdcMicroObj-class parameter 'strataVar' used appying data.frame method. details, look examples provided.","code":""},{"path":"/reference/localSuppression.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"Deprecated methods 'localSupp2' 'localSupp2Wrapper' longer available sdcMicro > 4.5.0. kAnon intutitive term localSuppression aim always obtain k-anonymity parts data.","code":""},{"path":"/reference/localSuppression.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4 Templ, M. Kowarik, . Meindl, B. Statistical Disclosure Control Micro-Data Using R Package sdcMicro. Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04","code":""},{"path":"/reference/localSuppression.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"Bernhard Meindl, Matthias Templ","code":""},{"path":"/reference/localSuppression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"","code":"data(francdat) ## Local Suppression localS <- localSuppression(francdat, keyVar=c(4,5,6)) localS #>  #> ----------------------- #> Total number of suppressions in the key variables: 4 (new: 4) #>  #> Number of suppressions by key variables: #> (in parenthesis, the total number suppressions is shown) #>  #>    Key2  Key3  Key4 #> 1 1 (1) 0 (0) 3 (3) #>  #> 2-anonymity == TRUE #> ----------------------- plot(localS)  if (FALSE) { ## for objects of class sdcMicro, no stratification data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- localSuppression(sdc)  ## for objects of class sdcMicro, with stratification testdata2$ageG <- cut(testdata2$age, 5, labels=paste0(\"AG\",1:5)) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight',   strataVar='ageG') sdc <- localSuppression(sdc)  ## it is also possible to provide k-anonymity for subsets of key-variables ## with different parameter k! ## in this case we want to provide 10-anonymity for all combinations ## of 5 key variables, 20-anonymity for all combinations with 4 key variables ## and 30-anonymity for all combinations of 3 key variables. sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') combs <- 5:3 k <- c(10,20,30) sdc <- localSuppression(sdc, k=k, combs=combs)  ## data.frame method (no stratification) keyVars <- c(\"urbrur\",\"roof\",\"walls\",\"water\",\"electcon\",\"relat\",\"sex\") strataVars <- c(\"ageG\") inp <- testdata2[,c(keyVars, strataVars)] ls <- localSuppression(inp, keyVars=1:7) print(ls) plot(ls)  ## data.frame method (with stratification) ls <- kAnon(inp, keyVars=1:7, strataVars=8) print(ls) plot(ls, showTotalSupps=TRUE) }"},{"path":"/reference/mafast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast and Simple Microaggregation — mafast","title":"Fast and Simple Microaggregation — mafast","text":"Function perform fast simple (primitive) method microaggregation. (large datasets)","code":""},{"path":"/reference/mafast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast and Simple Microaggregation — mafast","text":"","code":"mafast(obj, variables = NULL, by = NULL, aggr = 3, measure = mean)"},{"path":"/reference/mafast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast and Simple Microaggregation — mafast","text":"obj either sdcMicroObj-class-object data.frame variables variables microaggregate. obj class sdcMicroObj numerical key variables chosen per default. grouping variable microaggregation. obj class sdcMicroObj strata variables chosen per default. aggr aggregation level (default=3) measure aggregation statistic, mean, median, trim, onestep (default = mean)","code":""},{"path":"/reference/mafast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast and Simple Microaggregation — mafast","text":"‘obj’ class sdcMicroObj-class corresponding slots filled, like manipNumVars, risk utility.  ‘obj’ class “data.frame” “matrix” object class returned.","code":""},{"path":[]},{"path":"/reference/mafast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast and Simple Microaggregation — mafast","text":"Alexander Kowarik","code":""},{"path":"/reference/mafast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast and Simple Microaggregation — mafast","text":"","code":"data(Tarragona) m1 <- mafast(Tarragona, variables=c(\"GROSS.PROFIT\",\"OPERATING.PROFIT\",\"SALES\"),aggr=3) data(testdata) m2 <- mafast(testdata,variables=c(\"expend\",\"income\",\"savings\"),aggr=50,by=\"sex\") summary(m2) #>      urbrur           roof           walls           water       #>  Min.   :1.000   Min.   :2.000   Min.   :2.000   Min.   :1.000   #>  1st Qu.:2.000   1st Qu.:4.000   1st Qu.:2.000   1st Qu.:3.000   #>  Median :2.000   Median :4.000   Median :3.000   Median :4.000   #>  Mean   :1.859   Mean   :3.681   Mean   :2.803   Mean   :3.456   #>  3rd Qu.:2.000   3rd Qu.:4.000   3rd Qu.:3.000   3rd Qu.:4.000   #>  Max.   :2.000   Max.   :9.000   Max.   :9.000   Max.   :9.000   #>     electcon         relat           sex             age           hhcivil      #>  Min.   :1.000   Min.   :1.00   Min.   :1.000   Min.   : 0.00   Min.   :1.000   #>  1st Qu.:1.000   1st Qu.:2.00   1st Qu.:1.000   1st Qu.: 9.00   1st Qu.:1.000   #>  Median :1.000   Median :3.00   Median :1.000   Median :19.00   Median :1.000   #>  Mean   :2.002   Mean   :2.52   Mean   :1.499   Mean   :24.11   Mean   :1.509   #>  3rd Qu.:4.000   3rd Qu.:3.00   3rd Qu.:2.000   3rd Qu.:36.00   3rd Qu.:2.000   #>  Max.   :4.000   Max.   :9.00   Max.   :2.000   Max.   :95.00   Max.   :4.000   #>      expend             income            savings           ori_hid       #>  Min.   : 1117110   Min.   :  730220   Min.   : 104676   Min.   :   1.0   #>  1st Qu.:25091280   1st Qu.:24260000   1st Qu.:2370492   1st Qu.: 241.0   #>  Median :50335953   Median :49976000   Median :4999592   Median : 494.0   #>  Mean   :50499785   Mean   :50115690   Mean   :4964039   Mean   : 493.4   #>  3rd Qu.:75280845   3rd Qu.:74544000   3rd Qu.:7486752   3rd Qu.: 742.2   #>  Max.   :98533212   Max.   :98208333   Max.   :9837175   Max.   :1000.0   #>  sampling_weight household_weights #>  Min.   :100     Min.   :  8.333   #>  1st Qu.:100     1st Qu.: 14.286   #>  Median :100     Median : 20.000   #>  Mean   :100     Mean   : 21.834   #>  3rd Qu.:100     3rd Qu.: 25.000   #>  Max.   :100     Max.   :100.000    ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- dRisk(sdc) sdc@risk$numeric #> [1] 1 sdc1 <- mafast(sdc,aggr=4) sdc1@risk$numeric #> [1] 0.483871  sdc2 <- mafast(sdc,aggr=10) sdc2@risk$numeric #> [1] 0.01075269 if (FALSE) { ### Performance tests x <- testdata for(i in 1:20){   x <- rbind(x,testdata) } system.time(xx <- mafast(x,variables=c(\"expend\",\"income\",\"savings\"),aggr=50,by=\"sex\")) }"},{"path":"/reference/measure_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Disclosure Risk for Categorical Variables — measure_risk","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"function measures disclosure risk weighted unweighted data. computes individual risk (household risk reasonable) global risk. also computes risk threshold based global risk value. Prints 'measure_risk'-object Prints 'ldiversity'-object","code":""},{"path":"/reference/measure_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"","code":"measure_risk(obj, ...)  ldiversity(obj, ldiv_index = NULL, l_recurs_c = 2, missing = -999, ...)  # S3 method for measure_risk print(x, ...)  # S3 method for ldiversity print(x, ...)"},{"path":"/reference/measure_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"obj Object class sdcMicroObj-class ... see arguments data: Input data, data.frame. keyVars: names (indices) categorical key variables (data-frame method) w: name variable containing sample weights hid: name clustering variable, e.g. household ID max_global_risk: Maximal global risk threshold computation fast_hier: TRUE fast approximation computed household data provided. ldiv_index indices (names) variables used l-diversity l_recurs_c l-Diversity Constant missing integer value used missing value C++ routine x Output measure_risk() ldiversity()","code":""},{"path":"/reference/measure_risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"modified sdcMicroObj-class object list following elements: global_risk_ER: expected number re-identification. global_risk: global risk (sum indivdual risks). global_risk_pct: global risk percent. Res: matrix risk, frequency sample grossed-frequency population (hierachical risk) observation. global_threshold: given max_global_risk threshold risk observations. max_global_risk: input max_global_risk function. hier_risk_ER: expected number re-identification household structure. hier_risk: global risk household structure (sum indivdual risks). hier_risk_pct: global risk household structure percent. ldiverstiy: Matrix Distinct_Ldiversity, Entropy_Ldiversity Recursive_Ldiversity sensitivity variable. Prints risk-information console Information L-Diversity Measures console","code":""},{"path":"/reference/measure_risk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"used risk disclosure individuals within family considered statistical independent. Internally, function freqCalc() indivRisk used estimation. Measuring individual risk: individual risk approach based -called super-population models. models population frequency counts modeled given certain distribution.  estimation procedure sample frequency counts given population frequency counts modeled assuming negative binomial distribution. used estimation individual risk. extensive theory can found Skinner (1998), approximation formulas individual risk used described Franconi Polettini (2004). Measuring hierarchical risk: “hid” - index variable holding information hierarchical cluster structures (e.g., individuals clustered households) - provided, hierarchical risk additional estimated.  Note risk re-identifying individual within household may also affect probability disclosure members household. Thus, household cluster-structure data must taken account estimating disclosure risks. commonly assumed risk re-identification household risk least one member household can disclosed. Thus probability can simply estimated individual risks 1 minus probability member household can identified. Global risk: sum individual risks dataset gives expected number re-identifications serves measure global risk. l-Diversity: “ldiv_index” unequal NULL, .e. indices sensible variables specified, various measures l-diversity calculated. l-diverstiy extension well-known k-anonymity approach also uniqueness sensible variables pattern spanned key variables evaluated.","code":""},{"path":"/reference/measure_risk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"Franconi, L. Polettini, S. (2004) Individual risk estimation mu-Argus: review. Privacy Statistical Databases, Lecture Notes Computer Science, 262--272. Springer Machanavajjhala, . Kifer, D. Gehrke, J. Venkitasubramaniam, M. (2007) l-Diversity: Privacy Beyond k-Anonymity.  ACM Trans. Knowl. Discov. Data, 1(1) Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4 . #' Templ, M. Kowarik, . Meindl, B. Statistical Disclosure Control Micro-Data Using R Package sdcMicro. Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04","code":""},{"path":[]},{"path":"/reference/measure_risk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"Alexander Kowarik, Bernhard Meindl, Matthias Templ, Bernd Prantner, minor parts IHSN C++ source","code":""},{"path":"/reference/measure_risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"","code":"## measure_risk with sdcMicro objects: data(testdata) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','water','electcon'), numVars=c('expend','income','savings'), w='sampling_weight')  ## risk is already estimated and available in... names(sdc@risk) #> [1] \"global\"     \"individual\" \"numeric\"     ## measure risk on data frames or matrices: res <- measure_risk(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\")) print(res) #>  #> -------------------------- #> 165 obs. with higher risk as the main part #> Expected no. of re-identifications: #> 93 #> (2.03%) #> Threshold:0.03 #>  (for maximal global risk0.01) #> -------------------------- head(res$Res) #>             risk  fk  Fk #> [1,] 0.002785515 359 359 #> [2,] 0.002849003 351 351 #> [3,] 0.002785515 359 359 #> [4,] 0.002785515 359 359 #> [5,] 0.006211180 161 161 #> [6,] 0.006666667 150 150 resw <- measure_risk(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\"),w=\"sampling_weight\") print(resw) #>  #> -------------------------- #> 0 obs. with higher risk as the main part #> Expected no. of re-identifications: #> 1.53 #> (0.03%) #> Threshold:Inf #>  (for maximal global risk0.01) #> -------------------------- head(resw$Res) #>              risk  fk    Fk #> [1,] 2.793218e-05 359 35900 #> [2,] 2.857061e-05 351 35100 #> [3,] 2.793218e-05 359 35900 #> [4,] 2.793218e-05 359 35900 #> [5,] 6.249609e-05 161 16100 #> [6,] 6.710959e-05 150 15000 res1 <- ldiversity(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\"),ldiv_index=\"electcon\") print(res1) #> -------------------------- #> L-Diversity Measures  #> -------------------------- #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.000   2.000   3.000   2.374   3.000   3.000  head(res1) #>      electcon_Distinct_Ldiversity electcon_Entropy_Ldiversity #> [1,]                            3                    1.765424 #> [2,]                            3                    1.855345 #> [3,]                            3                    1.765424 #> [4,]                            3                    1.765424 #> [5,]                            2                    1.172525 #> [6,]                            2                    1.130836 #>      electcon_Recursive_Ldiversity MultiEntropy_Ldiversity #> [1,]                             1                       0 #> [2,]                             1                       0 #> [3,]                             1                       0 #> [4,]                             1                       0 #> [5,]                             1                       0 #> [6,]                             1                       0 #>      MultiRecursive_Ldiversity #> [1,]                         0 #> [2,]                         0 #> [3,]                         0 #> [4,]                         0 #> [5,]                         0 #> [6,]                         0 res2 <- ldiversity(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\"),ldiv_index=c(\"electcon\",\"relat\")) print(res2) #> -------------------------- #> L-Diversity Measures  #> -------------------------- #>  electcon_Distinct_Ldiversity relat_Distinct_Ldiversity #>  Min.   :1.000                Min.   :1.000             #>  1st Qu.:2.000                1st Qu.:5.000             #>  Median :3.000                Median :5.000             #>  Mean   :2.374                Mean   :5.524             #>  3rd Qu.:3.000                3rd Qu.:7.000             #>  Max.   :3.000                Max.   :8.000             head(res2) #>      electcon_Distinct_Ldiversity electcon_Entropy_Ldiversity #> [1,]                            3                    1.765424 #> [2,]                            3                    1.855345 #> [3,]                            3                    1.765424 #> [4,]                            3                    1.765424 #> [5,]                            2                    1.172525 #> [6,]                            2                    1.130836 #>      electcon_Recursive_Ldiversity relat_Distinct_Ldiversity #> [1,]                             1                         5 #> [2,]                             1                         8 #> [3,]                             1                         5 #> [4,]                             1                         5 #> [5,]                             1                         5 #> [6,]                             1                         4 #>      relat_Entropy_Ldiversity relat_Recursive_Ldiversity #> [1,]                 2.276001                          2 #> [2,]                 2.997907                          2 #> [3,]                 2.276001                          2 #> [4,]                 2.276001                          2 #> [5,]                 2.209202                          2 #> [6,]                 2.240133                          2 #>      MultiEntropy_Ldiversity MultiRecursive_Ldiversity #> [1,]                       0                         0 #> [2,]                       0                         0 #> [3,]                       0                         0 #> [4,]                       0                         0 #> [5,]                       0                         0 #> [6,]                       0                         0  # measure risk with household risk resh <- measure_risk(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\"),w=\"sampling_weight\",hid=\"ori_hid\") print(resh) #>  #> -------------------------- #> 0 obs. with higher risk as the main part #> Expected no. of re-identifications: #> 1.53 #> (0.03%) #> Threshold:Inf #>  (for maximal global risk0.01) #> -------------------------- #> -------------------------- #> Hierarchical risk  #> -------------------------- #> Expected no. of re-identifications: #> 7.18 #> (0.16% )  # change max_global_risk rest <- measure_risk(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\"),   w=\"sampling_weight\",max_global_risk=0.0001) print(rest) #>  #> -------------------------- #> 0 obs. with higher risk as the main part #> Expected no. of re-identifications: #> 1.53 #> (0.03%) #> Threshold:0 #>  (for maximal global risk0) #> --------------------------  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ## already interally applied and availabe in object sdc: ## sdc <- measure_risk(sdc)"},{"path":"/reference/mergeHouseholdData.html","id":null,"dir":"Reference","previous_headings":"","what":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"Replaces raw household-level data anonymized household-level data full dataset anonymization data household structure (hierarchical structure). Requires matching household ID files.","code":""},{"path":"/reference/mergeHouseholdData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"","code":"mergeHouseholdData(dat, hhId, dathh)"},{"path":"/reference/mergeHouseholdData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"dat data.frame full dataset hhId name household (cluster) ID (identical datasets) dathh dataframe treated household level data (generated example selectHouseholdData)","code":""},{"path":"/reference/mergeHouseholdData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"data.frame treated household level variables raw individual level variables","code":""},{"path":"/reference/mergeHouseholdData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"Thijs Benschop Bernhard Meindl","code":""},{"path":"/reference/mergeHouseholdData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"","code":"## Load data x <- testdata ## Create household level dataset x_hh <- selectHouseholdData(dat=x, hhId=\"ori_hid\",   hhVars=c(\"urbrur\", \"roof\",  \"walls\", \"water\", \"electcon\", \"household_weights\")) ## Anonymize household level dataset and extract data sdc_hh <- createSdcObj(x_hh, keyVars=c('urbrur','roof'), w='household_weights') sdc_hh <- kAnon(sdc_hh, k = 3) x_hh_anon <- extractManipData(sdc_hh)  ## Merge anonymized household level data back into the full dataset x_anonhh <- mergeHouseholdData(x, \"ori_hid\", x_hh_anon)  ## Anonymize full dataset and extract data sdc_full <- createSdcObj(x_anonhh, keyVars=c('sex', 'age', 'urbrur', 'roof'), w='sampling_weight') sdc_full <- kAnon(sdc_full, k = 3) x_full_anon <- extractManipData(sdc_full)"},{"path":"/reference/microData.html","id":null,"dir":"Reference","previous_headings":"","what":"microData — microData","title":"microData — microData","text":"Small aritificial toy data set.","code":""},{"path":"/reference/microData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"microData — microData","text":"format : num [1:13, 1:5] 5 7 2 1 7 8 12 3 15 4 ...  - attr(*, \"dimnames\")=List 2 ..$ : chr [1:13] \"10000\" \"11000\" \"12000\" \"12100\" ... ..$ : chr [1:5] \"one\" \"two\" \"three\" \"four\" ...","code":""},{"path":"/reference/microData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"microData — microData","text":"","code":"data(microData) microData <- as.data.frame(microData) m1 <- microaggregation(microData, method=\"mdav\") summary(m1) #> $meansx #>       one              two            three         four            five       #>  Min.   : 1.000   Min.   : 3.00   Min.   :21   Min.   :50.00   Min.   : 90.0   #>  1st Qu.: 4.000   1st Qu.:11.00   1st Qu.:49   1st Qu.:52.00   1st Qu.:111.0   #>  Median : 7.000   Median :14.00   Median :65   Median :57.00   Median :133.0   #>  Mean   : 6.538   Mean   :14.92   Mean   :61   Mean   :55.92   Mean   :134.8   #>  3rd Qu.: 8.000   3rd Qu.:19.00   3rd Qu.:73   3rd Qu.:60.00   3rd Qu.:155.0   #>  Max.   :15.000   Max.   :29.00   Max.   :99   Max.   :61.00   Max.   :188.0   #>  #> $meansxm #>       one             two             three            four       #>  Min.   :4.000   Min.   : 8.667   Min.   :30.67   Min.   :51.67   #>  1st Qu.:4.000   1st Qu.:13.333   1st Qu.:52.33   1st Qu.:54.75   #>  Median :4.333   Median :15.000   Median :69.67   Median :54.75   #>  Mean   :6.538   Mean   :14.923   Mean   :61.00   Mean   :55.92   #>  3rd Qu.:9.000   3rd Qu.:15.000   3rd Qu.:83.75   3rd Qu.:58.00   #>  Max.   :9.667   Max.   :22.667   Max.   :83.75   Max.   :59.67   #>       five       #>  Min.   :103.7   #>  1st Qu.:118.7   #>  Median :152.2   #>  Mean   :134.8   #>  3rd Qu.:152.2   #>  Max.   :158.7   #>  #> $amean #> [1] 0 #>  #> $amedian #> [1] 0.7083864 #>  #> $aonestep #> [1] 0.3452408 #>  #> $devvar #> [1] 1.591051 #>  #> $amad #> [1] 2.213889 #>  #> $acov #> [1] 0.7955257 #>  #> $arcov #> [1] NA #>  #> $acor #> [1] 1.686831 #>  #> $arcor #> [1] NA #>  #> $acors #> [1] 2.374987 #>  #> $adlm #> [1] 5.191309 #>  #> $adlts #> [1] NA #>  #> $apcaload #> [1] 8.456233 #>  #> $apppcaload #> [1] 7.476907 #>  #> $totalsOrig #>   one   two three  four  five  #>    85   194   793   727  1752  #>  #> $totalsMicro #> numeric(0) #>  #> $atotals #> [1] 0 #>  #> $pmtotals #> [1] 0 #>  #> $util1 #> [1] 22.84007 #>  #> $deigenvalues #> [1] 3.11481 #>  #> $risk0 #> [1] 0 #>  #> $risk1 #> [1] 0.4615385 #>  #> $risk2 #> [1] 0 #>  #> $wrisk1 #> [1] 0.9314044 #>  #> $wrisk2 #> [1] 0 #>"},{"path":"/reference/microaggrGower.html","id":null,"dir":"Reference","previous_headings":"","what":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"microaggregation based distances computed similar Gower distance. distance function makes distinction variable types factor,ordered,numerical mixed (semi-continuous variables fixed probability mass constant value e.g. 0)","code":""},{"path":"/reference/microaggrGower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"","code":"microaggrGower(   obj,   variables = NULL,   aggr = 3,   dist_var = NULL,   by = NULL,   mixed = NULL,   mixed.constant = NULL,   trace = FALSE,   weights = NULL,   numFun = mean,   catFun = VIM::sampleCat,   addRandom = FALSE )"},{"path":"/reference/microaggrGower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"obj sdcMicroObj-class-object data.frame variables character vector names variables aggregated (Default sdcMicroObj keyVariables numeric key variables) aggr aggregation level (default=3) dist_var character vector variable names distance computation character vector variable names split dataset performing microaggregation (Default sdcMicroObj strataVar) mixed character vector names mixed variables mixed.constant numeric vector length equal mixed, mixed variables probability mass trace TRUE/FALSE console output weights numerical vector length equal number variables distance computation numFun function: used aggregated numerical variables catFun function: used aggregated categorical variables addRandom TRUE/FALSE random value added distance computation.","code":""},{"path":"/reference/microaggrGower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"function returns updated sdcMicroObj simply altered data frame.","code":""},{"path":"/reference/microaggrGower.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"function sampleCat samples probabilities corresponding occurrence level NNs. function maxCat chooses level occurrences random maximum unique.","code":""},{"path":"/reference/microaggrGower.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"group distance computed, therefore introducing -groups significantly decreases computation time memory consumption.","code":""},{"path":[]},{"path":"/reference/microaggrGower.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"Alexander Kowarik","code":""},{"path":"/reference/microaggrGower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"","code":"data(testdata,package=\"sdcMicro\") testdata <- testdata[1:200,] for(i in c(1:7,9)) testdata[,i] <- as.factor(testdata[,i]) test <- microaggrGower(testdata,variables=c(\"relat\",\"age\",\"expend\"),   dist_var=c(\"age\",\"sex\",\"income\",\"savings\"),by=c(\"urbrur\",\"roof\"))  sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight')  sdc <- microaggrGower(sdc)"},{"path":"/reference/microaggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"Microaggregation — microaggregation","title":"Microaggregation — microaggregation","text":"Function perform various methods microaggregation.","code":""},{"path":"/reference/microaggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Microaggregation — microaggregation","text":"","code":"microaggregation(   obj,   variables = NULL,   aggr = 3,   strata_variables = NULL,   method = \"mdav\",   weights = NULL,   nc = 8,   clustermethod = \"clara\",   measure = \"mean\",   trim = 0,   varsort = 1,   transf = \"log\" )"},{"path":"/reference/microaggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Microaggregation — microaggregation","text":"obj either object class sdcMicroObj-class data.frame variables variables microaggregate. NULL: obj class sdcMicroObj, numerical key variables chosen per default. data.frames, columns chosen per default. aggr aggregation level (default=3) strata_variables data.frames, -variables applying microaggregation within strata defined variables. sdcMicroObj-class-objects, stratification-variable defined slot @strataVar used. slot can changed time using strataVar<-. method pca, rmd, onedims, single, simple, clustpca, pppca, clustpppca, mdav, clustmcdpca, influence, mcdpca weights sampling weights. obj class sdcMicroObj vector sampling weights chosen automatically. determined, weighted version aggregation measure chosen automatically, e.g. weighted median weighted mean. nc number cluster, chosen method performs cluster analysis clustermethod clustermethod, necessary measure aggregation statistic, mean, median, trim, onestep (default=mean) trim trimming percentage, measure=trim varsort variable sorting, method=single transf transformation data x","code":""},{"path":"/reference/microaggregation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Microaggregation — microaggregation","text":"‘obj’ class sdcMicroObj-class corresponding slots filled, like manipNumVars, risk utility. ‘obj’ class “data.frame”, object class “micro” following entities returned: x: original data mx: microaggregated dataset method: method aggr: aggregation level measure: proximity measure aggregation","code":""},{"path":"/reference/microaggregation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Microaggregation — microaggregation","text":"https://research.cbs.nl/casc/glossary.htm one can found “official” definition microaggregation: Records grouped based proximity measure variables interest, small groups records used calculating aggregates variables. aggregates released instead individual record values. recommended method “rmd” forms proximity using multivariate distances based robust methods. extension well-known method “mdav”.  However, computational speed important, method “mdav” preferable choice. proximity measure different concepts can used, aggregation naturally done arithmetic mean. Nevertheless, measures location can used aggregation, especially group size aggregation taken higher 3. Since median seems unsuitable microaggregation highly robust, mesures included can chosen. complex sample survey microaggregated, corresponding sampling weights determined either aggregate values weighted arithmetic mean weighted median. function contains also method data can clustered variety different clustering algorithms. Clustering observations applying microaggregation might useful.  Note, data automatically standardised clustering. usage clustering method ‘Mclust’ requires package mclust02, must loaded first. package loaded automatically, since package GPL comes different licence. also projection methods microaggregation included.  robust version ‘pppca’ ‘clustpppca’ (clustering first) fast implementations provide almost everytime best results. Univariate statistics preserved best individual ranking method (called ‘onedims’, however, often method named ‘individual ranking’), multivariate statistics strong affected. method ‘simple’ one can apply microaggregation directly (unsorted) data. useful comparison methods benchmark, .e. replies question much better sorting data aggregation.","code":""},{"path":"/reference/microaggregation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Microaggregation — microaggregation","text":"one variable specified, mafast applied argument method ignored. Parameters measure ignored methods mdav rmd.","code":""},{"path":"/reference/microaggregation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Microaggregation — microaggregation","text":"Templ, M. Meindl, B., Robust Statistics Meets SDC: New Disclosure Risk Measures Continuous Microdata Masking, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 5262, pp. 113-126, 2008. Templ, M. Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008.  http://www.tdp.cat/issues/abs.a004a08.php Templ, M. New Developments Statistical Disclosure Control Imputation: Robust Statistics Applied Official Statistics, Suedwestdeutscher Verlag fuer Hochschulschriften, 2009, ISBN: 3838108280, 264 pages. Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4 Templ, M. Meindl, B. Kowarik, .: Statistical Disclosure Control Micro-Data Using R Package sdcMicro, Journal Statistical Software, 67 (4), 1--36, 2015.","code":""},{"path":[]},{"path":"/reference/microaggregation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Microaggregation — microaggregation","text":"Matthias Templ, Bernhard Meindl method “mdav”: work supported International Household Survey Network (IHSN) funded DGF Grant provided World Bank PARIS21 Secretariat Organisation Economic Co-operation Development (OECD).  work builds previous work elsewhere acknowledged. Author integration code mdav R: Alexander Kowarik.","code":""},{"path":"/reference/microaggregation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Microaggregation — microaggregation","text":"","code":"data(Tarragona) m1 <- microaggregation(Tarragona, method='onedims', aggr=3) ## summary(m1) data(testdata) m2 <- microaggregation(testdata[1:100,c('expend','income','savings')],   method='mdav', aggr=4) summary(m2) #> $meansx #>      expend             income            savings        #>  Min.   : 1106874   Min.   :    2897   Min.   :  11751   #>  1st Qu.:25977689   1st Qu.:27750000   1st Qu.:2620342   #>  Median :45716872   Median :44850000   Median :4771488   #>  Mean   :48440371   Mean   :49180278   Mean   :4798498   #>  3rd Qu.:69426340   3rd Qu.:70650000   3rd Qu.:6940269   #>  Max.   :98685205   Max.   :99600000   Max.   :9984098   #>  #> $meansxm #>      expend             income            savings        #>  Min.   :14471827   Min.   : 4482460   Min.   : 872137   #>  1st Qu.:22752145   1st Qu.:24675000   1st Qu.:2353262   #>  Median :42916487   Median :46850000   Median :5116959   #>  Mean   :48440371   Mean   :49180278   Mean   :4798498   #>  3rd Qu.:71888065   3rd Qu.:65000000   3rd Qu.:7020042   #>  Max.   :91918606   Max.   :93725000   Max.   :9407783   #>  #> $amean #> [1] 0 #>  #> $amedian #> [1] 0.1782512 #>  #> $aonestep #> [1] 0 #>  #> $devvar #> [1] 0.3747106 #>  #> $amad #> [1] 0.5343033 #>  #> $acov #> [1] 0.1873553 #>  #> $arcov #> [1] NA #>  #> $acor #> [1] 0.25935 #>  #> $arcor #> [1] NA #>  #> $acors #> [1] 0.6424174 #>  #> $adlm #> [1] 0.1699611 #>  #> $adlts #> [1] NA #>  #> $apcaload #> [1] 0.6853318 #>  #> $apppcaload #> [1] 2.27684 #>  #> $totalsOrig #>     expend     income    savings  #> 4844037117 4918027777  479849813  #>  #> $totalsMicro #> numeric(0) #>  #> $atotals #> [1] 0 #>  #> $pmtotals #> [1] 0 #>  #> $util1 #> [1] 53.39995 #>  #> $deigenvalues #> [1] 0.0596172 #>  #> $risk0 #> [1] 0 #>  #> $risk1 #> [1] 0.29 #>  #> $risk2 #> [1] 0 #>  #> $wrisk1 #> [1] 0.7455491 #>  #> $wrisk2 #> [1] 0 #>   ## for objects of class sdcMicro: ## no stratification because @strataVar is NULL data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- microaggregation(sdc, variables=c(\"expend\",\"income\"))  ## with stratification by 'relat' strataVar(sdc) <- \"relat\" sdc <- microaggregation(sdc, variables=c(\"savings\"))"},{"path":"/reference/modRisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Global risk using log-linear models. — modRisk","title":"Global risk using log-linear models. — modRisk","text":"sample frequencies assumed independent following Poisson distribution. parameters corresponding parameters estimated log-linear model including main effects possible interactions.","code":""},{"path":"/reference/modRisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global risk using log-linear models. — modRisk","text":"","code":"modRisk(obj, method = \"default\", weights, formulaM, bound = Inf, ...)"},{"path":"/reference/modRisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global risk using log-linear models. — modRisk","text":"obj sdcMicroObj-class-object numeric matrix data.frame containing variables required specified model. method chose method model-based risk-estimation. Currently, following methods can selected: \"default\": standard log-linear model. \"CE\": Clogg Eliason method, additionally,  considers survey weights using offset term. \"PML\": pseudo maximum likelihood method. \"weightedLLM\": weighted maximum likelihood method, considers survey weights including one predictors. \"IPF\": iterative proportional fitting used deprecated method 'LLmodGlobalRisk'. weights variable name specifying sampling weights formulaM formula specifying model. bound number specifying threshold 'risky' observations sample. ... additional parameters passed , currently ignored.","code":""},{"path":"/reference/modRisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global risk using log-linear models. — modRisk","text":"Two global risk measures model output given specified model. method applied sdcMicroObj-class-object, slot 'risk' object ist updated result model-based risk-calculation.","code":""},{"path":"/reference/modRisk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global risk using log-linear models. — modRisk","text":"measure aims (1) calculate number sample uniques population uniques probabilistic Poisson model (2) estimate expected number correct matches sample uniques. ad 1) risk measure defined sample uniques $$ \\tau_1 = \\sum\\limits_{j:f_j=1} P(F_j=1 | f_j=1) \\quad , $$ .e. expected number sample uniques population uniques. ad 2) risk measure defined sample uniques $$ \\tau_2 = \\sum\\limits_{j:f_j=1} P(1 / F_j | f_j=1) \\quad . $$ Since population frequencies \\(F_k\\) unknown, need estimated. iterative proportional fitting method used fit parameters Poisson distributed frequency counts related model specified fit frequency counts. obtained parameters used estimate global risk, defined Skinner Holmes (1998).","code":""},{"path":"/reference/modRisk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Global risk using log-linear models. — modRisk","text":"Skinner, C.J. Holmes, D.J. (1998) Estimating re-identification risk per record microdata. Journal Official Statistics, 14:361-372, 1998. Rinott, Y. Shlomo, N. (1998). Generalized Negative Binomial Smoothing Model Sample Disclosure Risk Estimation. Privacy Statistical Databases. Lecture Notes Computer Science.  Springer-Verlag, 82--93. Clogg, C.C. Eliasson, S.R. (1987). Common Problems Log-Linear Analysis. Sociological Methods Research, 8-44.","code":""},{"path":[]},{"path":"/reference/modRisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Global risk using log-linear models. — modRisk","text":"Matthias Templ, Marius Totter, Bernhard Meindl","code":""},{"path":"/reference/modRisk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global risk using log-linear models. — modRisk","text":"","code":"## data.frame method data(testdata2) form <- ~sex+water+roof w <- \"sampling_weight\" (modRisk(testdata2, method = \"default\", formulaM = form, weights = w)) #> The estimated model (using method 'default') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.244 (24.436 %) #> \tRisk-Measure 2: 0.384 (38.400 %) (modRisk(testdata2, method = \"CE\", formulaM = form, weights = w)) #> The estimated model (using method 'CE') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.237 (23.740 %) #> \tRisk-Measure 2: 0.379 (37.936 %) (modRisk(testdata2, method = \"PML\", formulaM = form, weights = w)) #> The estimated model (using method 'PML') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.244 (24.436 %) #> \tRisk-Measure 2: 0.384 (38.400 %) (modRisk(testdata2, method = \"weightedLLM\", formulaM = form, weights = w)) #> The estimated model (using method 'weightedLLM') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.314 (31.424 %) #> \tRisk-Measure 2: 0.442 (44.249 %) (modRisk(testdata2, method = \"IPF\", formulaM = form, weights = w)) #> The estimated model (using method 'IPF') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.274 (27.354 %) #> \tRisk-Measure 2: 0.410 (41.038 %)  ## application to a sdcMicroObj data(testdata2) sdc <- createSdcObj(testdata2,  keyVars = c(\"urbrur\", \"roof\", \"walls\", \"electcon\", \"relat\", \"sex\"),  numVars = c(\"expend\", \"income\", \"savings\"),  w = \"sampling_weight\") sdc <- modRisk(sdc, form = ~sex+water+roof) slot(sdc, \"risk\")$model #> The estimated model (using method 'default') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.244 (24.436 %) #> \tRisk-Measure 2: 0.384 (38.400 %)  if (FALSE) { # an example using data from the laeken-pkg library(laeken) data(eusilc) f <- as.formula(paste(\" ~ \", \"db040 + hsize + rb090 +              age + pb220a + age:rb090 + age:hsize +              hsize:rb090\")) w <- \"rb050\" (modRisk(eusilc, method = \"default\", weights = w, formulaM = f, bound = 5)) (modRisk(eusilc, method = \"CE\", weights =  w, formulaM = f, bound = 5)) (modRisk(eusilc, method = \"PML\", weights = w, formulaM = f, bound = 5)) (modRisk(eusilc, method = \"weightedLLM\", weights = w, formulaM = f, bound = 5)) }"},{"path":"/reference/mvTopCoding.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection and winsorization of multivariate outliers — mvTopCoding","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"Imputation detection outliers","code":""},{"path":"/reference/mvTopCoding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"","code":"mvTopCoding(x, maha=NULL,center=NULL,cov=NULL, alpha=0.025)"},{"path":"/reference/mvTopCoding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"x object class matrix numeric entries maha squared mahalanobis distance observation center center data, needed calcualtion mahalanobis distance (provide) cov covariance matrix data, needed calcualtion mahalanobis distance (provide) alpha significance level, determining ellipsoide outliers placed upon","code":""},{"path":"/reference/mvTopCoding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"imputed winsorized data","code":""},{"path":"/reference/mvTopCoding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"Winsorizes potential outliers ellipsoid defined (robust) Mahalanobis distances direction center data","code":""},{"path":"/reference/mvTopCoding.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"Johannes Gussenbauer, Matthias Templ","code":""},{"path":"/reference/mvTopCoding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"","code":"set.seed(123) x <- MASS::mvrnorm(20, mu = c(5,5), Sigma = matrix(c(1,0.9,0.9,1), ncol = 2)) x[1,1] <- 3 x[1,2] <- 6 plot(x) ximp <- mvTopCoding(x) points(ximp, col = \"blue\", pch = 4)   # more dimensions Sigma <- diag(5) Sigma[upper.tri(Sigma)] <- 0.9 Sigma[lower.tri(Sigma)] <- 0.9 x <- MASS::mvrnorm(20, mu = rep(5,5), Sigma = Sigma) x[1,1] <- 3 x[1,2] <- 6 par(mfrow = c(1,2)) pairs(x)  ximp <- mvTopCoding(x) xnew <- data.frame(rbind(x, ximp)) xnew$beforeafter <- rep(c(0,1), each = nrow(x))  pairs(xnew, col = xnew$beforeafter, pch = 4)   # by hand (non-robust) x[2,2] <- NA m <- colMeans(x, na.rm = TRUE) s <- cov(x, use = \"complete.obs\") md <- stats::mahalanobis(x, m, s) ximp <- mvTopCoding(x, center = m, cov = s, maha = md) plot(x) points(ximp, col = \"blue\", pch = 4)"},{"path":"/reference/nextSdcObj.html","id":null,"dir":"Reference","previous_headings":"","what":"nextSdcObj — nextSdcObj","title":"nextSdcObj — nextSdcObj","text":"internal function used provide undo-functionality.","code":""},{"path":"/reference/nextSdcObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nextSdcObj — nextSdcObj","text":"","code":"nextSdcObj(obj)"},{"path":"/reference/nextSdcObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nextSdcObj — nextSdcObj","text":"obj sdcMicroObj-class object","code":""},{"path":"/reference/nextSdcObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nextSdcObj — nextSdcObj","text":"modified sdcMicroObj-class object","code":""},{"path":"/reference/orderData_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder data — orderData_cpp","title":"Reorder data — orderData_cpp","text":"Reorders data according column data set. NOTE: internal function used testing C++-function orderData used inside C++-function recordSwap() speed performance.","code":""},{"path":"/reference/orderData_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder data — orderData_cpp","text":"","code":"orderData_cpp(data, orderIndex)"},{"path":"/reference/orderData_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder data — orderData_cpp","text":"data micro data set containing numeric values. orderIndex column index data refering column data ordered.","code":""},{"path":"/reference/orderData_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder data — orderData_cpp","text":"ordered data set.","code":""},{"path":"/reference/plot.localSuppression.html","id":null,"dir":"Reference","previous_headings":"","what":"plot method for localSuppression objects — plot.localSuppression","title":"plot method for localSuppression objects — plot.localSuppression","text":"Barplot objects class localSuppression.","code":""},{"path":"/reference/plot.localSuppression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot method for localSuppression objects — plot.localSuppression","text":"","code":"# S3 method for localSuppression plot(x, ...)"},{"path":"/reference/plot.localSuppression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot method for localSuppression objects — plot.localSuppression","text":"x object class ‘localSuppression’ ... Additional arguments, currently available : showDetails logical, set, plot suppressions strata shown (possible)","code":""},{"path":"/reference/plot.localSuppression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot method for localSuppression objects — plot.localSuppression","text":"Just look resulting plot.","code":""},{"path":[]},{"path":"/reference/plot.localSuppression.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plot method for localSuppression objects — plot.localSuppression","text":"Bernhard Meindl, Matthias Templ","code":""},{"path":"/reference/plot.localSuppression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot method for localSuppression objects — plot.localSuppression","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) l1 <- localSuppression(francdat, keyVars=c(2,4,5,6)) l1 #>  #> ----------------------- #> Total number of suppressions in the key variables: 4 (new: 4) #>  #> Number of suppressions by key variables: #> (in parenthesis, the total number suppressions is shown) #>  #>    Key1  Key2  Key3  Key4 #> 1 1 (1) 1 (1) 0 (0) 2 (2) #>  #> 2-anonymity == TRUE #> ----------------------- plot(l1)   ## with details of suppression by strata data(testdata2) testdata2$ageG <- cut(testdata2$age, 5, labels=paste0(\"AG\",1:5)) keyVars <- c(\"urbrur\",\"roof\",\"walls\",\"water\",\"electcon\",\"relat\",\"sex\") strataVars <- c(\"ageG\") inp <- testdata2[,c(keyVars, strataVars)] ls <- localSuppression(inp, keyVars=1:7, strataVars=8) print(ls) #>  #> ----------------------- #> Total number of suppressions in the key variables: 109 (new: 109) #>  #> Number of suppressions by key variables and strata: #> (in parenthesis, the total number suppressions is shown) #>  #>       urbrur    roof   walls   water electcon relat   sex #> AG5    1 (1)   2 (2)   1 (1)   1 (1)    1 (1) 1 (1) 1 (1) #> AG3    2 (2)   3 (3)   3 (3)   7 (7)    0 (0) 2 (2) 0 (0) #> AG1    0 (0) 10 (10)   5 (5) 24 (24)    0 (0) 3 (3) 5 (5) #> AG2    2 (2)   5 (5)   3 (3) 13 (13)    2 (2) 2 (2) 1 (1) #> AG4    1 (1)   1 (1)   2 (2)   3 (3)    1 (1) 1 (1) 0 (0) #> Total  6 (6) 21 (21) 14 (14) 48 (48)    4 (4) 9 (9) 7 (7) #>  #> 2-anonymity == TRUE in all strata! #> ----------------------- plot(ls)  plot(ls, showDetails=TRUE)"},{"path":"/reference/plot.sdcMicroObj.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","title":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","text":"Descriptive plot function sdcMicroObj-class-objects. Currently visualization local supression implemented.","code":""},{"path":"/reference/plot.sdcMicroObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","text":"","code":"# S3 method for sdcMicroObj plot(x, type = \"ls\", ...)"},{"path":"/reference/plot.sdcMicroObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","text":"x object class sdcMicroObj-class type specified kind plot generated 'ls': plot local suppressions key variables ... currently ignored","code":""},{"path":"/reference/plot.sdcMicroObj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","text":"Bernhard Meindl","code":""},{"path":"/reference/plot.sdcMicroObj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","text":"","code":"data(testdata) if (FALSE) { # dontrun because Examples with CPU time > 2.5 times elapsed time sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','relat','sex'),   pramVars=c('water','electcon'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- kAnon(sdc, k=5) plot(sdc, type=\"ls\") }"},{"path":"/reference/plotMicro.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison plots — plotMicro","title":"Comparison plots — plotMicro","text":"Plots comparison original data perturbed data.","code":""},{"path":"/reference/plotMicro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison plots — plotMicro","text":"","code":"plotMicro(x, p, which.plot = 1:3)"},{"path":"/reference/plotMicro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison plots — plotMicro","text":"x object class micro p necessary parameter box cox transformation (lambda) .plot plot created? 1: density traces 2: parallel boxplots 3: differences totals","code":""},{"path":"/reference/plotMicro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparison plots — plotMicro","text":"Univariate multivariate comparison plots implemented detect differences perturbed original data, also compare perturbed data produced different methods.","code":""},{"path":"/reference/plotMicro.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Comparison plots — plotMicro","text":"Templ, M. Meindl, B., Software Development SDC R, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 4302, pp. 347-359, 2006.","code":""},{"path":[]},{"path":"/reference/plotMicro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Comparison plots — plotMicro","text":"Matthias Templ","code":""},{"path":"/reference/plotMicro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison plots — plotMicro","text":"","code":"data(free1) free1 <- as.data.frame(free1) m1 <- microaggregation(free1[, 31:34], method=\"onedims\", aggr=3) m2 <- microaggregation(free1[, 31:34], method=\"pca\", aggr=3) plotMicro(m1, p=1, which.plot=1)"},{"path":"/reference/pram.html","id":null,"dir":"Reference","previous_headings":"","what":"Post Randomization — pram","title":"Post Randomization — pram","text":"used categorical data stored factors. algorithm randomly changes values variables selected records (usually risky ones) according invariant probability transition matrix custom-defined transition matrix.","code":""},{"path":"/reference/pram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post Randomization — pram","text":"","code":"pram(obj, variables = NULL, strata_variables = NULL, pd = 0.8, alpha = 0.5)"},{"path":"/reference/pram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post Randomization — pram","text":"obj Input data. Allowed input data objects class data.frame, factor sdcMicroObj. variables Names variables obj post-randomization applied. obj factor, argument ignored. Please note pram can applied factor-variables. strata_variables names variables stratification (set automatically object class sdcMicroObj. One can also specify integer vector factor specifies desired groups. vector must match dimension input data set, however. possible use case, look examples. pd minimum diagonal entries generated transition matrix P. Either vector length 1 (recycled) vector length number variables postrandomized. also possible set pd numeric matrix. matrix used directly transition matrix. matrix must constructed follows: matrix must square matrix rownames colnames matrix must match levels (order) factor-variable postrandomized. rowSums colSums matrix need equal 1 also possible combine different ways. details look examples. alpha amount perturbation invariant Pram method. numeric vector length 1 (recycled necessary) vector length number variables. one specified transition matrix directly, alpha ignored.","code":""},{"path":"/reference/pram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post Randomization — pram","text":"modified sdcMicroObj object new object containing original post-randomized variables (suffix \"_pram\").","code":""},{"path":"/reference/pram.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Post Randomization — pram","text":"Deprecated method 'pram_strata' longer available sdcMicro > 4.5.0","code":""},{"path":"/reference/pram.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Post Randomization — pram","text":"https://www.gnu.org/software/glpk/ Kowarik, . Templ, M. Meindl, B. Fonteneau, F. Prantner, B.: Testing IHSN Cpp Code Inclusion New Methods sdcMicro, : Lecture Notes Computer Science, J. Domingo-Ferrer, . Tinnirello (editors.); Springer, Berlin, 2012, ISBN: 978-3-642-33626-3, pp. 63-77. doi:10.1007/978-3-642-33627-0_6 Templ, M. Kowarik, . Meindl, B.: Statistical Disclosure Control Micro-Data Using R Package sdcMicro. : Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Templ, M.: Statistical Disclosure Control Microdata: Methods Applications R. : Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4","code":""},{"path":"/reference/pram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Post Randomization — pram","text":"Alexander Kowarik, Matthias Templ, Bernhard Meindl","code":""},{"path":"/reference/pram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post Randomization — pram","text":"","code":"if (FALSE) { data(testdata)  # using a factor variable as input res <- pram(as.factor(testdata$roof)) print(res) summary(res)  # using a data.frame as input # pram can only be applied to factors # -- > we have to recode to factors beforehand testdata$roof <- factor(testdata$roof) testdata$walls <- factor(testdata$walls) testdata$water <- factor(testdata$water)  # pram() is applied within subgroups defined by # variables \"urbrur\" and \"sex\" res <- pram(   obj = testdata,   variables = \"roof\",   strata_variables = c(\"urbrur\", \"sex\")) print(res) summary(res)  # default parameters (pd = 0.8 and alpha = 0.5) for the generation # of the invariant transition matrix will be used for all variables res1 <- pram(   obj = testdata,   variables = c(\"roof\", \"walls\", \"water\")) print(res1)  ## specific parameter settings for each variable res2 <- pram(   obj = testdata,   variables = c(\"roof\", \"walls\", \"water\"),   pd = c(0.95, 0.8, 0.9),   alpha = 0.5) print(res2)  # detailed information on pram-parameters (such as the transition matrix 'Rs') # is stored in the output, eg. for variable 'roof' attr(res2, \"pram_params\")$roof  # we can also specify a custom transition-matrix directly mat <- diag(length(levels(testdata$roof))) rownames(mat) <- colnames(mat) <- levels(testdata$roof) res3 <- pram(   obj = testdata,   variables = \"roof\",   pd = mat) print(res3) # of course, nothing has changed!  # it is possible use a transition matrix for a variable and use the 'traditional' way # of specifying a number for the minimal diagonal entries of the transision matrix # for other variables. In this case we must supply `pd` as list. res4 <- pram(   obj = testdata,   variables = c(\"roof\", \"walls\"),   pd = list(mat, 0.5),   alpha = c(NA, 0.5)) print(res4) summary(res4) attr(res4, \"pram_params\")  # application to objects of class sdcMicro with default parameters data(testdata2) testdata2$urbrur <- factor(testdata2$urbrur) sdc <- createSdcObj(   dat = testdata2,   keyVars = c(\"roof\", \"walls\", \"water\", \"electcon\", \"relat\", \"sex\"),   numVars = c(\"expend\", \"income\", \"savings\"),   w = \"sampling_weight\") sdc <- pram(   obj = sdc,   variables = \"urbrur\") print(sdc, type = \"pram\")  # this is equal to the previous application. If argument 'variables' is NULL, # all variables from slot 'pramVars' will be used if possible. sdc <- createSdcObj(   dat = testdata2,   keyVars = c(\"roof\", \"walls\", \"water\", \"electcon\", \"relat\", \"sex\"),   numVars = c(\"expend\", \"income\", \"savings\"),   w = \"sampling_weight\",   pramVars = \"urbrur\") sdc <- pram(sdc) print(sdc, type=\"pram\")  # we can specify transition matrices for sdcMicroObj-objects too testdata2$roof <- factor(testdata2$roof) sdc <- createSdcObj(   dat = testdata2,   keyVars = c(\"roof\", \"walls\", \"water\", \"electcon\", \"relat\", \"sex\"),   numVars = c(\"expend\", \"income\", \"savings\"),   w = \"sampling_weight\") mat <- diag(length(levels(testdata2$roof)))  rownames(mat) <- colnames(mat) <- levels(testdata2$roof) mat[1,] <- c(0.9, 0, 0, 0.05, 0.05) sdc <- pram(   obj = sdc,   variables = \"roof\",   pd = mat) print(sdc, type = \"pram\")  # we can also have a look at the transitions get.sdcMicroObj(sdc, \"pram\")$transitions }"},{"path":"/reference/print.freqCalc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class freqCalc. — print.freqCalc","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"Print method objects class freqCalc.","code":""},{"path":"/reference/print.freqCalc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"","code":"# S3 method for freqCalc print(x, ...)"},{"path":"/reference/print.freqCalc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"x object class freqCalc ... Additional arguments passed .","code":""},{"path":"/reference/print.freqCalc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"information frequency counts key variables object class freqCalc.","code":""},{"path":[]},{"path":"/reference/print.freqCalc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"Matthias Templ","code":""},{"path":"/reference/print.freqCalc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) f <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) f #>  #>  -------------------------- #> 4 obs. violate 2-anonymity  #> 8 obs. violate 3-anonymity  #>  --------------------------"},{"path":"/reference/print.indivRisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class indivRisk — print.indivRisk","title":"Print method for objects from class indivRisk — print.indivRisk","text":"Print method objects class indivRisk","code":""},{"path":"/reference/print.indivRisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class indivRisk — print.indivRisk","text":"","code":"# S3 method for indivRisk print(x, ...)"},{"path":"/reference/print.indivRisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class indivRisk — print.indivRisk","text":"x object class indivRisk ... Additional arguments passed .","code":""},{"path":"/reference/print.indivRisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class indivRisk — print.indivRisk","text":"information method final correction factor objects class ‘indivRisk’.","code":""},{"path":[]},{"path":"/reference/print.indivRisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class indivRisk — print.indivRisk","text":"Matthias Templ","code":""},{"path":"/reference/print.indivRisk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects from class indivRisk — print.indivRisk","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) f1 <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) data.frame(fk=f1$fk, Fk=f1$Fk) #>   fk    Fk #> 1  2 110.0 #> 2  2  84.5 #> 3  2  84.5 #> 4  1  17.0 #> 5  1 541.0 #> 6  1   8.0 #> 7  1   5.0 #> 8  2 110.0 ## individual risk calculation: indivRisk(f1)"},{"path":"/reference/print.localSuppression.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class localSuppression — print.localSuppression","title":"Print method for objects from class localSuppression — print.localSuppression","text":"Print method objects class localSuppression","code":""},{"path":"/reference/print.localSuppression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class localSuppression — print.localSuppression","text":"","code":"# S3 method for localSuppression print(x, ...)"},{"path":"/reference/print.localSuppression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class localSuppression — print.localSuppression","text":"x object class localSuppression ... Additional arguments passed .","code":""},{"path":"/reference/print.localSuppression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class localSuppression — print.localSuppression","text":"Information frequency counts key variables object class ‘localSuppression’.","code":""},{"path":[]},{"path":"/reference/print.localSuppression.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class localSuppression — print.localSuppression","text":"Matthias Templ","code":""},{"path":"/reference/print.localSuppression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects from class localSuppression — print.localSuppression","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) l1 <- localSuppression(francdat, keyVars=c(2,4,5,6)) l1 #>  #> ----------------------- #> Total number of suppressions in the key variables: 4 (new: 4) #>  #> Number of suppressions by key variables: #> (in parenthesis, the total number suppressions is shown) #>  #>    Key1  Key2  Key3  Key4 #> 1 1 (1) 1 (1) 0 (0) 2 (2) #>  #> 2-anonymity == TRUE #> -----------------------"},{"path":"/reference/print.micro.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class micro — print.micro","title":"Print method for objects from class micro — print.micro","text":"printing object class micro","code":""},{"path":"/reference/print.micro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class micro — print.micro","text":"","code":"# S3 method for micro print(x, ...)"},{"path":"/reference/print.micro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class micro — print.micro","text":"x object class micro ... Additional arguments passed .","code":""},{"path":"/reference/print.micro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class micro — print.micro","text":"information method aggregation level objects class micro.","code":""},{"path":[]},{"path":"/reference/print.micro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class micro — print.micro","text":"Matthias Templ","code":""},{"path":"/reference/print.micro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects from class micro — print.micro","text":"","code":"data(free1) free1 <- as.data.frame(free1) m1 <- microaggregation(free1[, 31:34], method='onedims', aggr=3) m1 #>  #>  Object created with method onedims and aggregation level 3 #>  #>  ------------------------- #> x ... original values  #>      INCOME           MONEY           ASSETS          DEBTS      #>  Min.   :100100   Min.   : 5532   Min.   :10000   Min.   :1000   #>  1st Qu.:329075   1st Qu.:32311   1st Qu.:31695   1st Qu.:3340   #>  Median :549400   Median :53521   Median :53975   Median :5690   #>  Mean   :547254   Mean   :52610   Mean   :54300   Mean   :5587   #>  3rd Qu.:764875   3rd Qu.:74231   3rd Qu.:76298   3rd Qu.:7840   #>  Max.   :999400   Max.   :95431   Max.   :99960   Max.   :9990   #>  #>  ------------------------- #> mx ... microaggregated values #>      INCOME           MONEY           ASSETS          DEBTS      #>  Min.   :100300   Min.   : 5532   Min.   :10020   Min.   :1000   #>  1st Qu.:329167   1st Qu.:32311   1st Qu.:31707   1st Qu.:3340   #>  Median :549400   Median :53521   Median :53953   Median :5690   #>  Mean   :547254   Mean   :52610   Mean   :54300   Mean   :5587   #>  3rd Qu.:764792   3rd Qu.:74231   3rd Qu.:76299   3rd Qu.:7837   #>  Max.   :999075   Max.   :95431   Max.   :99848   Max.   :9990   #>  #>  ------------------------- #> Try names(your object from class micro) for more details #>"},{"path":"/reference/print.modrisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class modrisk — print.modrisk","title":"Print method for objects from class modrisk — print.modrisk","text":"Print method objects class modrisk","code":""},{"path":"/reference/print.modrisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class modrisk — print.modrisk","text":"","code":"# S3 method for modrisk print(x, ...)"},{"path":"/reference/print.modrisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class modrisk — print.modrisk","text":"x object class modrisk ... Additional arguments passed .","code":""},{"path":"/reference/print.modrisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class modrisk — print.modrisk","text":"Output model-based risk estimation","code":""},{"path":[]},{"path":"/reference/print.modrisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class modrisk — print.modrisk","text":"Bernhard Meindl","code":""},{"path":"/reference/print.pram.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class pram — print.pram","title":"Print method for objects from class pram — print.pram","text":"Print method objects class pram","code":""},{"path":"/reference/print.pram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class pram — print.pram","text":"","code":"# S3 method for pram print(x, ...)"},{"path":"/reference/print.pram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class pram — print.pram","text":"x object class pram ... Additional arguments passed .","code":""},{"path":"/reference/print.pram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class pram — print.pram","text":"absolute relative frequencies changed observations modified variable","code":""},{"path":[]},{"path":"/reference/print.pram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class pram — print.pram","text":"Bernhard Meindl, Matthias Templ Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/print.sdcMicroObj.html","id":null,"dir":"Reference","previous_headings":"","what":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"Descriptive print function Frequencies, local Supression, Recoding, categorical risk numerical risk.","code":""},{"path":"/reference/print.sdcMicroObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"","code":"# S4 method for sdcMicroObj print(x, type = \"kAnon\", docat = TRUE, ...)"},{"path":"/reference/print.sdcMicroObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"x object class sdcMicroObj-class type Selection content returned printed docat logical, TRUE (default) results actually printed ... type argument print method, currently supported : general: basic information input obj number observations variables. kAnon: displays information 2- 3-anonymity ls: displays various information local suppression applied. pram: displays various information post-randomization applied. recode: shows information categorical key variables recoding risk: displays information re-identification risks numrisk: displays risk- utility measures numerical key variables","code":""},{"path":"/reference/print.sdcMicroObj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"Possible values type argument print function : \"freq\": Frequencies, \"ls\": Local Supression output, \"pram\": results post-randomization \"recode\":Recodes, \"risk\": forCategorical risk \"numrisk\": Numerical risk. Possible values type argument freq function : \"fk\": Sample frequencies \"Fk\": weighted frequencies.","code":""},{"path":"/reference/print.sdcMicroObj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"Alexander Kowarik, Matthias Templ, Bernhard Meindl","code":""},{"path":"/reference/print.sdcMicroObj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"","code":"data(testdata) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','relat','sex'),   pramVars=c('water','electcon'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- microaggregation(sdc, method=\"mdav\", aggr=3) print(sdc) #> Infos on 2/3-Anonymity: #>  #> Number of observations violating #>   - 2-anonymity: 26 (0.568%) #>   - 3-anonymity: 52 (1.135%) #>   - 5-anonymity: 141 (3.079%) #>  #> ---------------------------------------------------------------------- #>  print(sdc, type=\"general\") #> The input dataset consists of 4580 rows and 15 variables. #>   --> Categorical key variables: urbrur, roof, walls, relat, sex #>   --> Numerical key variables: expend, income, savings #>   --> Weight variable: sampling_weight #> ---------------------------------------------------------------------- #>  print(sdc, type=\"ls\") #> Local suppression has not been applied! print(sdc, type=\"recode\") #> Information on categorical key variables: #>  #> Reported is the number, mean size and size of the smallest category >0 for recoded variables. #> In parenthesis, the same statistics are shown for the unmodified data. #> Note: NA (missings) are counted as seperate categories! #>  #>  Key Variable Number of categories     Mean size            #>        urbrur                    2 (2)  2290.000 (2290.000) #>          roof                    5 (5)   916.000  (916.000) #>         walls                    3 (3)  1526.667 (1526.667) #>         relat                    9 (9)   508.889  (508.889) #>           sex                    2 (2)  2290.000 (2290.000) #>  Size of smallest (>0)        #>                    646  (646) #>                     16   (16) #>                     50   (50) #>                      1    (1) #>                   2284 (2284) #> ---------------------------------------------------------------------- #>  print(sdc, type=\"risk\") #> Risk measures: #>  #> Number of observations with higher risk than the main part of the data: 0 #> Expected number of re-identifications: 2.41 (0.05 %) print(sdc, type=\"numrisk\") #> Numerical key variables: expend, income, savings #>  #> Disclosure risk is currently between [0.00%; 12.95%] #>  #> Current Information Loss: #>   - IL1: 384097.50 #>   - Difference of Eigenvalues: 0.020% #> ---------------------------------------------------------------------- #>  print(sdc, type=\"pram\") #> PRAM has not been applied! print(sdc, type=\"kAnon\") #> Infos on 2/3-Anonymity: #>  #> Number of observations violating #>   - 2-anonymity: 26 (0.568%) #>   - 3-anonymity: 52 (1.135%) #>   - 5-anonymity: 141 (3.079%) #>  #> ---------------------------------------------------------------------- #>  print(sdc, type=\"comp_numvars\") #> Compare original and modified numeric key variables #>  #>   Variable 'expend' has been modified. The correlation is 0.998 #>  #>        Type             Min.     1st Qu.           Median             Mean #> 1:     orig             3377 25610224.75       50462299.5 50499784.5991266 #> 2: modified 1151704.66666667    25359582 50285163.3333333 50499784.5991266 #>             3rd Qu.             Max. #> 1:      75513584.75         99962044 #> 2: 75370230.3333333 99174302.6666667 #>  #>   Variable 'income' has been modified. The correlation is 0.998 #>  #>        Type             Min.          1st Qu.           Median             Mean #> 1:     orig         2897.484         25100000         50750000 50115690.0034852 #> 2: modified 621527.033333333 25066666.6666667 50766666.6666667 50115690.0034852 #>     3rd Qu.     Max. #> 1:  7.5e+07    1e+08 #> 2: 75100000 99200000 #>  #>   Variable 'savings' has been modified. The correlation is 0.998 #>  #>        Type             Min.          1st Qu.  Median             Mean #> 1:     orig         2974.644       2434822.75 4982921 4964039.24334542 #> 2: modified 85811.8536666667 2373826.33333333 4990754 4964039.24334542 #>             3rd Qu.             Max. #> 1:          7487258          9997808 #> 2: 7522210.33333333 9928145.66666667 #>  #> ---------------------------------------------------------------------- #>"},{"path":"/reference/print.suda2.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class suda2 — print.suda2","title":"Print method for objects from class suda2 — print.suda2","text":"Print method objects class suda2.","code":""},{"path":"/reference/print.suda2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class suda2 — print.suda2","text":"","code":"# S3 method for suda2 print(x, ...)"},{"path":"/reference/print.suda2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class suda2 — print.suda2","text":"x object class suda2 ... additional arguments passed .","code":""},{"path":"/reference/print.suda2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class suda2 — print.suda2","text":"Table dis suda scores.","code":""},{"path":[]},{"path":"/reference/print.suda2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class suda2 — print.suda2","text":"Matthias Templ","code":""},{"path":"/reference/print.suda2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects from class suda2 — print.suda2","text":"","code":"if (FALSE) { data(testdata) data_suda2 <- suda2(testdata,variables=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\")) data_suda2 }"},{"path":"/reference/randSample_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Sampling — randSample_cpp","title":"Random Sampling — randSample_cpp","text":"Randomly select records given probability weight vector prob. NOTE: internal function used testing C++-function randSample used inside C++-function recordSwap().","code":""},{"path":"/reference/randSample_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Sampling — randSample_cpp","text":"","code":"randSample_cpp(ID, N, prob, IDused, seed)"},{"path":"/reference/randSample_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Sampling — randSample_cpp","text":"ID vector containing record IDs sample N integer defining number records sampled prob vector probability weights obtaining elements vector sampled. IDused vector containing IDs must sampled seed integer setting sampling seed","code":""},{"path":"/reference/rankSwap.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank Swapping — rankSwap","title":"Rank Swapping — rankSwap","text":"Swapping values within range , first, correlation structure original variables preserved, second, values record disturbed.  used numeric ordinal variables rank can determined correlation coefficient makes sense.","code":""},{"path":"/reference/rankSwap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank Swapping — rankSwap","text":"","code":"rankSwap(   obj,   variables = NULL,   TopPercent = 5,   BottomPercent = 5,   K0 = NULL,   R0 = NULL,   P = NULL,   missing = NA,   seed = NULL )"},{"path":"/reference/rankSwap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank Swapping — rankSwap","text":"obj sdcMicroObj-class-object data.frame variables names index variables rank swapping applied.  object class sdcMicroObj-class, numeric key variables selected variables=NULL. TopPercent Percentage largest values grouped together rank swapping applied. BottomPercent Percentage lowest values grouped together rank swapping applied. K0 Subset-mean preservation factor. Preserves means rank swapping within range based K0.  K0 subset-mean preservation factor \\(| X_1 -X_2 | \\leq \\frac{2 K_0 X_1}{\\sqrt(N_S)}\\), \\(X_1\\) \\(X_2\\) subset means field swapping, \\(N_S\\) sample size subset. R0 Multivariate preservation factor. Preserves correlation variables within certain range based given constant R0.  can specify preservation factor \\(R_0=\\frac{R_1}{R_2}\\) \\(R_1\\) correlation coefficient two fields swapping, \\(R_2\\) correlation coefficient two fields swapping. P Rank range percentage total sample size. can specify rank range directly, noted \\(P\\), percentage records. two records eligible swapping ranks, \\(\\) \\(j\\) respectively, satisfy \\(| -j | \\le \\frac{P N}{100}\\), \\(N\\) total sample size. missing missing - value used missing value C++ routine instead NA. NA, suitable value calculated internally. Note returned dataset, NA-values () replaced value. seed Seed.","code":""},{"path":"/reference/rankSwap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank Swapping — rankSwap","text":"rank-swapped data set modified sdcMicroObj-class object.","code":""},{"path":"/reference/rankSwap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rank Swapping — rankSwap","text":"Rank swapping sorts values one numeric variable numerical values (ranking).  restricted range determined rank two swapped values, differ, definition, \\(P\\) percent total number observations. positive P, R0 K0 used one must supplied. none supplied, sdcMicro sets parameter eqnR0 0.95 internally.","code":""},{"path":"/reference/rankSwap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rank Swapping — rankSwap","text":"Moore, Jr.R. (1996) Controlled data-swapping techniques masking public use microdata, U.S. Bureau Census Statistical Research Division Report Series, RR 96-04. Kowarik, . Templ, M. Meindl, B. Fonteneau, F. Prantner, B.: Testing IHSN Cpp Code Inclusion New Methods sdcMicro, : Lecture Notes Computer Science, J. Domingo-Ferrer, . Tinnirello (editors.); Springer, Berlin, 2012, ISBN: 978-3-642-33626-3, pp. 63-77. doi:10.1007/978-3-642-33627-0_6","code":""},{"path":"/reference/rankSwap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rank Swapping — rankSwap","text":"Alexander Kowarik interface, Bernhard Meindl improvements. underlying C++ code: work supported International Household Survey Network (IHSN) funded DGF Grant provided World Bank PARIS21 Secretariat Organisation Economic Co-operation Development (OECD).  work builds previous work elsewhere acknowledged.","code":""},{"path":"/reference/rankSwap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank Swapping — rankSwap","text":"","code":"data(testdata2) if (FALSE) { data_swap <- rankSwap(   obj = testdata2,   variables = c(\"age\", \"income\", \"expend\", \"savings\") )  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(   dat = testdata2,   keyVars = c(\"urbrur\", \"roof\", \"walls\", \"water\", \"electcon\", \"relat\", \"sex\"),   numVars = c(\"expend\", \"income\", \"savings\"),   w = \"sampling_weight\") sdc <- rankSwap(sdc) }"},{"path":"/reference/readMicrodata.html","id":null,"dir":"Reference","previous_headings":"","what":"readMicrodata — readMicrodata","title":"readMicrodata — readMicrodata","text":"reads data various formats R. Used sdcApp.","code":""},{"path":"/reference/readMicrodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"readMicrodata — readMicrodata","text":"","code":"readMicrodata(   path,   type,   convertCharToFac = TRUE,   drop_all_missings = TRUE,   ... )"},{"path":"/reference/readMicrodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"readMicrodata — readMicrodata","text":"path file path type format file . currently allowed values sas spss stata R rdf csv convertCharToFac (logical) TRUE, character vectors automatically converted factors drop_all_missings (logical) TRUE, variables contain NA-values dropped ... additional parameters. Currently used type='csv' pass arguments read.table().","code":""},{"path":"/reference/readMicrodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"readMicrodata — readMicrodata","text":"data.frame object class 'simple.error'. stata file read , resulting data.frame additional attribute lab variable value labels stored.","code":""},{"path":"/reference/readMicrodata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"readMicrodata — readMicrodata","text":"type either 'sas', 'spss' 'stata', values read NaN converted NA.","code":""},{"path":"/reference/readMicrodata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"readMicrodata — readMicrodata","text":"Bernhard Meindl","code":""},{"path":"/reference/recordSwap.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy Dataset for Record Swapping — createDat","title":"Dummy Dataset for Record Swapping — createDat","text":"[createDat()] returns dummy data illustrate targeted record swapping. generated data contain household ids (`hid`), geographic variables (`nuts1`, `nuts2`, `nuts3`, `lau2`) well household personal variables. Applies targeted record swapping micro data considering identification risk record well geographic topology.","code":""},{"path":"/reference/recordSwap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dummy Dataset for Record Swapping — createDat","text":"","code":"createDat(N = 10000)  recordSwap(data, ...)  # S3 method for sdcMicroObj recordSwap(data, ...)  # S3 method for default recordSwap(   data,   hid,   hierarchy,   similar,   swaprate = 0.05,   risk = NULL,   risk_threshold = 0,   k_anonymity = 3,   risk_variables = NULL,   carry_along = NULL,   return_swapped_id = FALSE,   log_file_name = \"TRS_logfile.txt\",   seed = NULL,   ... )"},{"path":"/reference/recordSwap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dummy Dataset for Record Swapping — createDat","text":"N integer, number household generate data must either micro data set form `data.table` `data.frame`, `sdcObject`, see createSdcObj. ... parameters passed `recordSwap.default()` hid column index column name `data` refers household identifier. hierarchy column indices column names variables `data` refer geographic hierarchy micro data set. instance county > municipality > district. similar vector list integer vectors column names containing similarity profiles, see details explanations. swaprate double 0 1 defining proportion households swapped, see details explanations risk either column indices column names `data` `data.table`, `data.frame` `matrix` indicating risk record hierarchy level. `risk`-matrix supplied swapping procedure use k-anonymity rule values found matrix swapping. ATTENTION: fully implemented yet currently ignored underlying c++ functions tested properly risk_threshold single numeric value indicating household considered \"high risk\", e.g. household must swapped. used `risk` `NULL`. ATTENTION: fully implemented yet currently ignored underlying c++ functions tested properly k_anonymity integer defining threshold high risk households (counts<k) using k-anonymity rule risk_variables column indices column names variables `data` considered estimating risk. used k-anonymity rule applied. carry_along integer vector indicating additional variables swap besides hierarchy variables. variables interfere procedure finding record swap calculating risk. parameter used end procedure swapping hierarchies. return_swapped_id, boolean `TRUE` output includes additional column showing `hid` record swapped . new column name `paste0(hid,\"_swapped\")`. log_file_name character, path writing log file. log file contains list household IDs (`hid`) swapped created households exist. seed integer defining seed random number generator, reproducibility. `NULL` random seed set using `sample(1e5,1)`.","code":""},{"path":"/reference/recordSwap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dummy Dataset for Record Swapping — createDat","text":"`data.table` containing dummy data `data.table` swapped records.","code":""},{"path":"/reference/recordSwap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dummy Dataset for Record Swapping — createDat","text":"procedure accepts `data.frame` `data.table` containing necessary information record swapping, e.g parameter `hid`, `similar`, `hierarchy`, etc ... First micro data `data` ordered `hid` identification risk calculated record hierarchy level. right now counts used identification risk inverse counts used sampling probability. NOTE: possible supply identification risk record hierarchy level passed C++-function. however fully implemented. parameter `k_anonymity` k-anonymity rule applied define risky households hierarchy level. household set risky counts < k_anonymity hierarchy level household needs swapped across hierarchy level. instance geographic hierarchy NUTS1 > NUTS2 > NUTS3 counts calculated geographic variable defined `risk_variables`. counts record falls `k_anonymity` hierarchy county record needs swapped across counties. Setting `k_anonymity = 0` disables feature risky households defined. targeted record swapping applied starting highest lowest hierarchy level cycling possible geographic areas hierarchy level, e.g every county, every municipality every county, etc, ... geographic area set values created records swapped. lowest hierarchy level made records fulfill k-anonymity already swapped. records swapped records belonging geographic area, already swapped beforehand. Swapping refers interchange geographic variables defined `hierarchy`. record swapped record containing `hid` swapped well. lowest hierarchy level every geographic area set records bswapped made records fulfill k-anonymity well remaining numer records proportion swapped records geographic area coherence `swaprate`. , due k-anonymity condition, records already swapped geographic area records fulfill k-anonymity swapped. Using parameter `similar` one can define similarity profiles. `similar` needs list vectors list entry containing column indices `data`. entries used searching donor households, meaning specific record set donor records made records values `similar[[1]]`. however important note, variables can variables related households (persons!). suitable donor can found next similarity profile used, `similar[[2]]` set donors made records values column indices `similar[[2]]`. procedure continues donor record found similarity profiles used. `swaprate` sets swaprate households swapped, single swap counts swapping 2 households, sampled household corresponding donor. Prior procedure swaprate applied lowest hierarchy level, determine target number swapped households lowest hierarchies. target numbers decimal point randomly rounded number households swapped total coherence swaprate.","code":""},{"path":[]},{"path":"/reference/recordSwap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dummy Dataset for Record Swapping — createDat","text":"Johannes Gussenbauer","code":""},{"path":"/reference/recordSwap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dummy Dataset for Record Swapping — createDat","text":"","code":"# generate 10000 dummy households library(data.table) seed <- 2021 set.seed(seed) nhid <- 10000 dat <- sdcMicro::createDat(nhid) #> Warning: Item 7 has 10000 rows but longest item has 34827; recycled with remainder. #> Warning: Item 8 has 10000 rows but longest item has 34827; recycled with remainder. #> Warning: Item 9 has 10000 rows but longest item has 34827; recycled with remainder.  # define paramters for swapping k_anonymity <- 1 swaprate <- .05 # 5% similar <- list(c(\"hsize\")) hier <- c(\"nuts1\", \"nuts2\") risk_variables <- c(\"ageGroup\", \"national\") hid <- \"hid\"  # apply record swapping dat_s <- recordSwap(   data = dat,   hid = hid,   hierarchy = hier,   similar = similar,   swaprate = swaprate,   k_anonymity = k_anonymity,   risk_variables = risk_variables,   carry_along = NULL,   return_swapped_id = TRUE,   seed = seed ) #> Recordswapping was successful!  # number of swapped households dat_s[hid != hid_swapped, uniqueN(hid)] #> [1] 500  # hierarchies are not consistently swapped dat_s[hid != hid_swapped, .(nuts1, nuts2, nuts3, lau2)] #>       nuts1 nuts2 nuts3  lau2 #>    1:     3    35  3406 34062 #>    2:     3    35  3406 34062 #>    3:     3    35  3406 34062 #>    4:     2    21  1104 11042 #>    5:     2    21  1104 11042 #>   ---                         #> 1682:     3    34  3204 32044 #> 1683:     3    34  3204 32044 #> 1684:     3    34  3204 32044 #> 1685:     3    34  3204 32044 #> 1686:     3    34  3204 32044  # use parameter carry_along dat_s <- recordSwap(   data = dat,   hid = hid,   hierarchy = hier,   similar = similar,   swaprate = swaprate,   k_anonymity = k_anonymity,   risk_variables = risk_variables,   carry_along = c(\"nuts3\", \"lau2\"),   return_swapped_id = TRUE,   seed = seed) #> Recordswapping was successful!  dat_s[hid != hid_swapped, .(nuts1, nuts2, nuts3, lau2)] #>       nuts1 nuts2 nuts3  lau2 #>    1:     3    35  3508 35085 #>    2:     3    35  3508 35085 #>    3:     3    35  3508 35085 #>    4:     2    21  2109 21093 #>    5:     2    21  2109 21093 #>   ---                         #> 1682:     3    34  3408 34083 #> 1683:     3    34  3408 34083 #> 1684:     3    34  3408 34083 #> 1685:     3    34  3408 34083 #> 1686:     3    34  3408 34083"},{"path":"/reference/recordSwap_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Targeted Record Swapping — recordSwap_cpp","title":"Targeted Record Swapping — recordSwap_cpp","text":"Applies targeted record swapping micro data set, see ?recordSwap details. NOTE: internal function called R-function recordSwap(). purpose include C++-function recordSwap() using Rcpp.","code":""},{"path":"/reference/recordSwap_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Targeted Record Swapping — recordSwap_cpp","text":"","code":"recordSwap_cpp(   data,   hid,   hierarchy,   similar_cpp,   swaprate,   risk,   risk_threshold,   k_anonymity,   risk_variables,   carry_along,   log_file_name,   seed = 123456L )"},{"path":"/reference/recordSwap_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Targeted Record Swapping — recordSwap_cpp","text":"data micro data set containing integer values. data.frame data.table R needs transposed beforehand data.size() ~ number records - data.[0].size ~ number varaibles per record. NOTE: data ordered hid beforehand. hid column index data refers household identifier. hierarchy column indices variables data refers geographic hierarchy micro data set. instance county > municipality > district. similar_cpp List entry corresponds column indices variables data considered swapping households. swaprate double 0 1 defining proportion households swapped, see details explanations risk vector vectors containing risks individual hierarchy level. risk_threshold double indicating risk threshold every household needs swapped. k_anonymity integer defining threshold high risk households (k-anonymity). used k_anonymity <= counts. risk_variables column indices variables data considered estimating risk. carry_along integer vector indicating additional variables swap besides hierarchy variables. variables interfere procedure finding record swap calculating risk. parameter used end procedure swapping hierarchies. log_file_name character, path writing log file. log file contains list household IDs (`hid`) swapped created households exist. seed integer defining seed random number generator, reproducibility.","code":""},{"path":"/reference/recordSwap_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Targeted Record Swapping — recordSwap_cpp","text":"Returns data set swapped records.","code":""},{"path":"/reference/removeDirectID.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove certain variables from the data set inside a sdc object. — removeDirectID","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"Delete variables without changing anything else sdcObject (writing NAs).","code":""},{"path":"/reference/removeDirectID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"","code":"removeDirectID(obj, var)"},{"path":"/reference/removeDirectID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"obj object class sdcMicroObj-class var name variable(s) remove","code":""},{"path":"/reference/removeDirectID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"modified sdcMicroObj-class","code":""},{"path":"/reference/removeDirectID.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"Alexander Kowarik","code":""},{"path":"/reference/removeDirectID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"","code":"## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata, keyVars=c('urbrur','roof'),  numVars=c('expend','income','savings'), w='sampling_weight') sdc <- removeDirectID(sdc, var=\"age\")"},{"path":"/reference/report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an Html-report from an sdcMicroObj — report","title":"Generate an Html-report from an sdcMicroObj — report","text":"Summary statistics original perturbed data set","code":""},{"path":"/reference/report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an Html-report from an sdcMicroObj — report","text":"","code":"report(   obj,   outdir = getwd(),   filename = \"SDC-Report\",   title = \"SDC-Report\",   internal = FALSE,   verbose = FALSE )"},{"path":"/reference/report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an Html-report from an sdcMicroObj — report","text":"obj object class sdcMicroObj-class reportObj outdir output folder filename output filename title Title report internal TRUE/FALSE, TRUE detailled internal report produced, else non-disclosive overview verbose TRUE/FALSE, TRUE, additional information printed.","code":""},{"path":"/reference/report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an Html-report from an sdcMicroObj — report","text":"application function provides html-report sdcMicro object contains useful summaries anonymization process.","code":""},{"path":"/reference/report.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate an Html-report from an sdcMicroObj — report","text":"Matthias Templ, Bernhard Meindl","code":""},{"path":"/reference/report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an Html-report from an sdcMicroObj — report","text":"","code":"if (FALSE) { data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') report(sdc) }"},{"path":"/reference/riskyCells.html","id":null,"dir":"Reference","previous_headings":"","what":"riskyCells — riskyCells","title":"riskyCells — riskyCells","text":"Allows compute risky (unweighted) combinations key variables either specified dimension using identification level. mimics approach taken mu-argus.","code":""},{"path":"/reference/riskyCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"riskyCells — riskyCells","text":"","code":"riskyCells(obj, useIdentificationLevel = FALSE, threshold, ...)"},{"path":"/reference/riskyCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"riskyCells — riskyCells","text":"obj data.frame, data.table object class sdcMicroObj-class useIdentificationLevel (logical) specifies tabulation done specific dimension (useIdentificationLevel=FALSE using argument maxDim) taking identification levels (useIdentificationLevel=FALSE using argument level) account. threshold numeric vector specifiying thresholds cells considered unsafe. case tabulation done specific level (useIdentificationLevel=FALSE), thresholds may specified differently dimension. case, threshold used tables. ... see possible arguments keyVars: index variable-names within obj used tabulation. case obj class sdcMicroObj-class, argument used pre-defined key-variables used. level: case useIdentificationLevel=TRUE, numeric vector specifies importance key variables. construction output tables follows implementation mu-argus, see e.g https://github.com/sdcTools/manuals/raw/master/mu-argus/MUmanual5.1.pdf. length numeric vector must match number key variables. maxDim: case useIdentificationLevel=FALSE, number specifies maximal number variables tablulate.","code":""},{"path":"/reference/riskyCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"riskyCells — riskyCells","text":"data.table showing number unsafe cells, thresholds combination key variables. input sdcMicroObj-class object modifications already applied categorical key variables, resulting output contains number unsafe cells original modified data.","code":""},{"path":"/reference/riskyCells.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"riskyCells — riskyCells","text":"Bernhard Meindl","code":""},{"path":"/reference/riskyCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"riskyCells — riskyCells","text":"","code":"if (FALSE) { ## data.frame method / all combinations up to maxDim riskyCells(testdata2, keyVars=c(1:5), threshold=c(50,25,10,5),   useIdentificationLevel=FALSE, maxDim=4) riskyCells(testdata2, keyVars=c(1:5), threshold=10,   useIdentificationLevel=FALSE, maxDim=3)  ## data.frame method / using identification levels riskyCells(testdata2, keyVars=c(1:6), threshold=20,   useIdentificationLevel=TRUE, level=c(1,1,2,3,3,5)) riskyCells(testdata2, keyVars=c(1,3,4,6), threshold=10,   useIdentificationLevel=TRUE, level=c(1,2,2,4))  ## sdcMicroObj-method / all combinations up to maxDim testdata2[1:6] <- lapply(1:6, function(x) {   testdata2[[x]] <- as.factor(testdata2[[x]]) }) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight')  r0 <- riskyCells(sdc, useIdentificationLevel=FALSE, threshold=c(20,10,5), maxDim=3) ## in case key-variables have been modified, we get counts for original and modified data sdc <- groupAndRename(sdc, var=\"roof\", before=c(\"5\",\"6\",\"9\"), after=c(\"5+\")) r1 <- riskyCells(sdc, useIdentificationLevel=FALSE, threshold=c(10,5,3), maxDim=3)  ## sdcMicroObj-method / using identification levels riskyCells(sdc, useIdentificationLevel=TRUE, threshold=10, level=c(c(1,1,3,4,5,5,5))) }"},{"path":"/reference/sampleDonor_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Random sample for donor records — sampleDonor_cpp","title":"Random sample for donor records — sampleDonor_cpp","text":"Randomly select donor records given probability weight vector. sampling procedure implemented differently randSample_cpp speed performance C++-function recordSwap(). NOTE: internal function used testing C++-function sampleDonor used inside C++-function recordSwap().","code":""},{"path":"/reference/sampleDonor_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random sample for donor records — sampleDonor_cpp","text":"","code":"sampleDonor_cpp(   data,   similar_cpp,   hid,   IDswap,   IDswap_pool_vec,   prob,   seed = 123456L )"},{"path":"/reference/sampleDonor_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random sample for donor records — sampleDonor_cpp","text":"data micro data containing hierarchy levels household ID similar_cpp List entry corresponds column indices variables data considered swapping households. hid column index data refers household identifier. IDswap vector containing records donor needs sampled IDswap_pool_vec set `IDswap` drawn prob vector probability weights obtaining elements vector sampled. seed integer setting sampling seed","code":""},{"path":"/reference/sdcApp.html","id":null,"dir":"Reference","previous_headings":"","what":"sdcApp — sdcApp","title":"sdcApp — sdcApp","text":"starts graphical user interface developed shiny.","code":""},{"path":"/reference/sdcApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sdcApp — sdcApp","text":"","code":"sdcApp(   maxRequestSize = 50,   debug = FALSE,   theme = \"IHSN\",   ...,   shiny.server = FALSE )"},{"path":"/reference/sdcApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sdcApp — sdcApp","text":"maxRequestSize (numeric) number defining maximum allowed filesize (megabytes) uploaded files, defaults 50MB debug logical TRUE, set shiny-debugging options theme select stylesheet interface. Supported choices 'yeti' 'flatly' 'journal' 'IHSN' ... arguments (e.g host) passed runApp starting shiny application shiny.server Setting parameter TRUE return app form  object rather invoking . useful deploying sdcApp via shiny-server.","code":""},{"path":"/reference/sdcApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sdcApp — sdcApp","text":"starts interactive graphical user interface may used perform anonymisation process.","code":""},{"path":"/reference/sdcApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sdcApp — sdcApp","text":"","code":"if (FALSE) { sdcApp(theme=\"flatly\") }"},{"path":"/reference/sdcMicro-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","title":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","text":"package includes methods popular software mu-Argus plus several new methods. comparison mu-Argus advantages package results fully reproducible even included GUI, package can used batch-mode software, functions can used flexible way, everybody look source code time-consuming meta-data management necessary. However, user detailed knowledge SDC applying methods data.","code":""},{"path":"/reference/sdcMicro-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","text":"package programmed using S4-classes comes well-defined class structure. implemented graphical user interface (GUI) microdata protection serves easy--handle tool users want use sdcMicro package statistical disclosure control used native R command line interface.  addition , interactions objects results anonymization process provided within GUI. allows automated recalculation displaying information frequency counts, individual risk, information loss data utility anonymization step. addition , code every anonymization step carried within GUI saved script can easily modified reloaded.","code":""},{"path":"/reference/sdcMicro-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","text":"Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4 Templ, M. Kowarik, . Meindl, B. Statistical Disclosure Control Micro-Data Using R Package sdcMicro. Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Templ, M. Meindl, B. Practical Applications Statistical Disclosure Control Using R, Privacy Anonymity Information Management Systems, Bookchapter, Springer London, pp. 31-62, 2010. doi:10.1007/978-1-84996-238-4_3 Kowarik, . Templ, M. Meindl, B. Fonteneau, F. Prantner, B.: Testing IHSN Cpp Code Inclusion New Methods sdcMicro, : Lecture Notes Computer Science, J. Domingo-Ferrer, . Tinnirello (editors.); Springer, Berlin, 2012, ISBN: 978-3-642-33626-3, pp. 63-77. doi:10.1007/978-3-642-33627-0_6 Templ, M.  Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008. http://www.tdp.cat/issues/abs.a004a08.php Templ, M.  New Developments Statistical Disclosure Control Imputation: Robust Statistics Applied Official Statistics, Suedwestdeutscher Verlag fuer Hochschulschriften, 2009, ISBN: 3838108280, 264 pages.","code":""},{"path":"/reference/sdcMicro-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","text":"Matthias Templ, Alexander Kowarik, Bernhard Meindl Maintainer: Matthias Templ <templ@statistik.tuwien.ac.>","code":""},{"path":"/reference/sdcMicro-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) f <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) f #>  #>  -------------------------- #> 4 obs. violate 2-anonymity  #> 8 obs. violate 3-anonymity  #>  -------------------------- f$fk #> [1] 2 2 2 1 1 1 1 2 f$Fk #> [1] 110.0  84.5  84.5  17.0 541.0   8.0   5.0 110.0 ## with missings: x <- francdat x[3,5] <- NA x[4,2] <- x[4,4] <- NA x[5,6]  <- NA x[6,2]  <- NA f2 <- freqCalc(x,  keyVars=c(2,4,5,6),w=8) f2$Fk #> [1] 149.0  84.5 194.5 563.0 566.0 549.0  22.0 149.0 ## individual risk calculation: indivf <- indivRisk(f) indivf$rk #> [1] 0.01714426 0.02204233 0.02204233 0.17707583 0.01165448 0.29706308 0.40235948 #> [8] 0.01714426 ## Local Suppression localS <- localSupp(f, keyVar=2, threshold=0.25) #> 2observations has individual risks >=0.25and were suppressed! f2 <- freqCalc(localS$freqCalc, keyVars=c(2,4,5,6), w=8) indivf2 <- indivRisk(f2) indivf2$rk #> [1] 0.01714426 0.02204233 0.02204233 0.17707583 0.01165448 0.29706308 0.40235948 #> [8] 0.01714426  ## select another keyVar and run localSupp once again, #if you think the table is not fully protected data(free1) free1 <- as.data.frame(free1) f <- freqCalc(free1, keyVars=1:3, w=30) ind <- indivRisk(f) ## and now you can use the interactive plot for individual risk objects: ## plot(ind)  ## example from Capobianchi, Polettini and Lucarelli: data(francdat) l1 <- localSuppression(francdat, keyVars=c(2,4,5,6), importance=c(1,3,2,4)) l1 #>  #> ----------------------- #> Total number of suppressions in the key variables: 5 (new: 5) #>  #> Number of suppressions by key variables: #> (in parenthesis, the total number suppressions is shown) #>  #>    Key1  Key2  Key3  Key4 #> 1 1 (1) 1 (1) 0 (0) 3 (3) #>  #> 2-anonymity == TRUE #> ----------------------- l1$x #>   Key1 Key2 Key3 Key4 #> 1    1    2    5    1 #> 2    1    2    1    1 #> 3    1    2    1    1 #> 4    3    3    1   NA #> 5    4    3    1   NA #> 6   NA    3    1    1 #> 7    6   NA    1   NA #> 8    1    2    5    1 l2 <- localSuppression(francdat, keyVars=c(2,4,5,6), k=2) l3 <- localSuppression(francdat, keyVars=c(2,4,5,6), k=4)  ## Data from mu-Argus: ## Global recoding: data(free1) free1 <- as.data.frame(free1) free1[, \"AGE\"] <- globalRecode(free1[,\"AGE\"], c(1,9,19,29,39,49,59,69,100), labels=1:8)  ## Top coding: topBotCoding(free1[,\"DEBTS\"], value=9000, replacement=9100, kind=\"top\")  ## Numerical Rank Swapping: ## do not use the mu-Argus test data set (free1) # since the numerical variables are (probably) faked. data(Tarragona) if (FALSE) { Tarragona1 <- rankSwap(Tarragona, P = 10, K0 = NULL, R0 = NULL) }  ## Microaggregation: m1 <- microaggregation(Tarragona, method=\"onedims\", aggr=3) m2 <- microaggregation(Tarragona, method=\"pca\", aggr=3) # summary(m1) ## approx. 1 minute computation time # valTable(Tarragona, method=c(\"simple\",\"onedims\",\"pca\"))   data(microData) microData <- as.data.frame(microData) m1 <- microaggregation(microData, method=\"mdav\") x <- m1$x  ### fix me summary(m1) #> $meansx #>       one              two            three         four            five       #>  Min.   : 1.000   Min.   : 3.00   Min.   :21   Min.   :50.00   Min.   : 90.0   #>  1st Qu.: 4.000   1st Qu.:11.00   1st Qu.:49   1st Qu.:52.00   1st Qu.:111.0   #>  Median : 7.000   Median :14.00   Median :65   Median :57.00   Median :133.0   #>  Mean   : 6.538   Mean   :14.92   Mean   :61   Mean   :55.92   Mean   :134.8   #>  3rd Qu.: 8.000   3rd Qu.:19.00   3rd Qu.:73   3rd Qu.:60.00   3rd Qu.:155.0   #>  Max.   :15.000   Max.   :29.00   Max.   :99   Max.   :61.00   Max.   :188.0   #>  #> $meansxm #>       one             two             three            four       #>  Min.   :4.000   Min.   : 8.667   Min.   :30.67   Min.   :51.67   #>  1st Qu.:4.000   1st Qu.:13.333   1st Qu.:52.33   1st Qu.:54.75   #>  Median :4.333   Median :15.000   Median :69.67   Median :54.75   #>  Mean   :6.538   Mean   :14.923   Mean   :61.00   Mean   :55.92   #>  3rd Qu.:9.000   3rd Qu.:15.000   3rd Qu.:83.75   3rd Qu.:58.00   #>  Max.   :9.667   Max.   :22.667   Max.   :83.75   Max.   :59.67   #>       five       #>  Min.   :103.7   #>  1st Qu.:118.7   #>  Median :152.2   #>  Mean   :134.8   #>  3rd Qu.:152.2   #>  Max.   :158.7   #>  #> $amean #> [1] 0 #>  #> $amedian #> [1] 0.7083864 #>  #> $aonestep #> [1] 0.3452408 #>  #> $devvar #> [1] 1.591051 #>  #> $amad #> [1] 2.213889 #>  #> $acov #> [1] 0.7955257 #>  #> $arcov #> [1] NA #>  #> $acor #> [1] 1.686831 #>  #> $arcor #> [1] NA #>  #> $acors #> [1] 2.374987 #>  #> $adlm #> [1] 5.191309 #>  #> $adlts #> [1] NA #>  #> $apcaload #> [1] 8.456233 #>  #> $apppcaload #> [1] 7.476907 #>  #> $totalsOrig #>   one   two three  four  five  #>    85   194   793   727  1752  #>  #> $totalsMicro #> numeric(0) #>  #> $atotals #> [1] 0 #>  #> $pmtotals #> [1] 0 #>  #> $util1 #> [1] 22.84007 #>  #> $deigenvalues #> [1] 3.11481 #>  #> $risk0 #> [1] 0 #>  #> $risk1 #> [1] 0.4615385 #>  #> $risk2 #> [1] 0 #>  #> $wrisk1 #> [1] 0.9314044 #>  #> $wrisk2 #> [1] 0 #>  plotMicro(m1, 1, which.plot=1)  # too less observations... data(free1) free1 <- as.data.frame(free1) plotMicro(microaggregation(free1[,31:34], method=\"onedims\"), 1, which.plot=1)     ## disclosure risk (interval) and data utility: m1 <- microaggregation(Tarragona, method=\"onedims\", aggr=3) dRisk(obj=Tarragona, xm=m1$mx) #> [1] 0.8717026 dRisk(obj=Tarragona, xm=m2$mx) #> [1] 0.004796163 dUtility(obj=Tarragona, xm=m1$mx) #> [1] 120.8887 dUtility(obj=Tarragona, xm=m2$mx) #> [1] 1512.416  ## S4 class code for Adding Noise methods will be included #in the next version of sdcMicro.  ## Fast generation of synthetic data with aprox. #the same covariance matrix as the original one.  data(mtcars) cov(mtcars[,4:6]) #>              hp        drat         wt #> hp   4700.86694 -16.4511089 44.1926613 #> drat  -16.45111   0.2858814 -0.3727207 #> wt     44.19266  -0.3727207  0.9573790 cov(dataGen(mtcars[,4:6],n=200)) #>              hp        drat         wt #> hp   4884.85671 -20.2554546 50.3170824 #> drat  -20.25545   0.3175838 -0.4234466 #> wt     50.31708  -0.4234466  1.0253063 pairs(mtcars[,4:6])  pairs(dataGen(mtcars[,4:6],n=200))   ## PRAM if (FALSE) { set.seed(123) x <- factor(sample(1:4, 250, replace=TRUE)) pr1 <- pram(x) length(which(pr1$x_pram == x)) summary(pr1) x2 <- factor(sample(1:4, 250, replace=TRUE)) length(which(pram(x2)$x_pram == x2))  data(free1) marstat <- as.factor(free1[,\"MARSTAT\"]) marstatPramed <- pram(marstat) summary(marstatPramed)  # FOR OBJECTS OF CLASS sdcMicro data(testdata)  # undo-functionality is by default restricted to data sets # with <= 1e5 rows; to modify, env-var `sdcMicro_maxsize_undo` # can to be changed before creating a problem instance Sys.setenv(\"sdcMicro_maxsize_undo\" = 1e6)  sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') head(sdc@manipNumVars) ### Display Risks sdc@risk$global sdc <- dRisk(sdc) sdc@risk$numeric ### use addNoise without Parameters sdc <- addNoise(sdc,variables=c(\"expend\",\"income\")) head(sdc@manipNumVars) sdc@risk$numeric ### undolast sdc <- undolast(sdc) head(sdc@manipNumVars) sdc@risk$numeric ### redo addNoise with Parameter sdc <- addNoise(sdc, noise=0.2) head(sdc@manipNumVars) sdc@risk$numeric ### dataGen #sdc <- undolast(sdc) #head(sdc@risk$individual) #sdc@risk$global #sdc <- dataGen(sdc) #head(sdc@risk$individual) #sdc@risk$global ### LocalSuppression sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global sdc <- localSuppression(sdc) head(sdc@risk$individual) sdc@risk$global ### microaggregation sdc <- undolast(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc <- microaggregation(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) ### pram sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global sdc <- pram(sdc,keyVar=\"water\") head(sdc@risk$individual) sdc@risk$global ### rankSwap sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc <- rankSwap(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) head(sdc@risk$individual) sdc@risk$global ### suda2 sdc <- suda2(sdc) sdc@risk$suda2 ### topBotCoding head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc@risk$numeric sdc <- topBotCoding(sdc, value=60000000, replacement=62000000, column=\"income\") head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc@risk$numeric ### LocalRecProg data(testdata2) keyVars <- c(\"urbrur\", \"roof\", \"walls\", \"water\", \"sex\") w <- \"sampling_weight\" sdc <- createSdcObj(testdata2,   keyVars = keyVars,   weightVar = w) sdc@risk$global sdc <- LocalRecProg(sdc) sdc@risk$global ### model-based risks #' formula form <- as.formula(paste(\"~\", paste(keyVars, collapse = \"+\"))) sdc <- modRisk(sdc, method = \"default\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"CE\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"PLM\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"weightedLLM\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"IPF\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model }"},{"path":"/reference/sdcMicroObj-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class save information SDC process","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class ","text":"","code":"createSdcObj(   dat,   keyVars,   numVars = NULL,   pramVars = NULL,   ghostVars = NULL,   weightVar = NULL,   hhId = NULL,   strataVar = NULL,   sensibleVar = NULL,   excludeVars = NULL,   options = NULL,   seed = NULL,   randomizeRecords = FALSE,   alpha = 1 )  undolast(object)  strataVar(object) <- value  # S4 method for sdcMicroObj,characterOrNULL strataVar(object) <- value"},{"path":"/reference/sdcMicroObj-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class ","text":"dat microdata set. numeric matrix data frame containing data. keyVars Indices names categorical key variables. must, course, match columns ‘dat’. numVars Index names continuous key variables. pramVars Indices names categorical variables considered pramed. ghostVars specified list element list exactly two elements. first element must character vector specifying exactly one variable name also specified categorical key variable (keyVars), second element character vector valid variable names (must listed keyVars). localSuppression kAnon applied, resulting suppression pattern key-variable transferred depending variables. weightVar Indices name determining vector sampling weights. hhId Index name cluster ID (available). strataVar Indices names stratification variables. sensibleVar Indices names sensible variables (l-diversity) excludeVars variables dat included result-object? Users may specify vector variable-names available dat specified either keyVars, numVars, pramVars, ghostVars, hhId, strataVar sensibleVar. options additional options (specified, list must used input) seed (numeric) number specifiying seed set allow reproducablity. number rounded saved element seed slot options. randomizeRecords (logical) TRUE, order observations input microdata set randomized. alpha numeric 0 1 specifying fraction much keys containing NAs contribute frequency calculation also crucial risk-estimation. object sdcMicroObj-class object value NULL character vector length 1 specifying valid variable name","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class ","text":"sdcMicroObj-class object object class sdcMicroObj modified slot @strataVar","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"sdcMicroObj\", ...).","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Templ, M. Meindl, B. Kowarik, .: Statistical Disclosure Control Micro-Data Using R Package sdcMicro, Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Bernhard Meindl, Alexander Kowarik, Matthias Templ, Elias Rut","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"sdcMicroObj\") #> Class \"sdcMicroObj\" [package \"sdcMicro\"] #>  #> Slots: #>                                                                                #> Name:           origData           keyVars          pramVars           numVars #> Class:   dataframeOrNULL     numericOrNULL     numericOrNULL     numericOrNULL #>                                                                                #> Name:          ghostVars         weightVar              hhId         strataVar #> Class:        listOrNULL     numericOrNULL     numericOrNULL     numericOrNULL #>                                                                                #> Name:        sensibleVar      manipKeyVars     manipPramVars      manipNumVars #> Class:     numericOrNULL   dataframeOrNULL   dataframeOrNULL   dataframeOrNULL #>                                                                                #> Name:     manipGhostVars    manipStrataVar      originalRisk              risk #> Class:   dataframeOrNULL      factorOrNULL        listOrNULL        listOrNULL #>                                                                                #> Name:            utility              pram  localSuppression           options #> Class:        listOrNULL        listOrNULL        listOrNULL        listOrNULL #>                                                                                #> Name:  additionalResults               set              prev       deletedVars #> Class:        listOrNULL        listOrNULL    sdcmicroOrNULL   characterOrNULL #>  #> Extends: \"sdcmicroOrNULL\" if (FALSE) { data(testdata) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') head(sdc@manipNumVars) ### Display Risks sdc@risk$global sdc <- dRisk(sdc) sdc@risk$numeric ### use addNoise without Parameters sdc <- addNoise(sdc,variables=c(\"expend\",\"income\")) head(sdc@manipNumVars) sdc@risk$numeric ### undolast sdc <- undolast(sdc) head(sdc@manipNumVars) sdc@risk$numeric ### redo addNoise with Parameter sdc <- addNoise(sdc, noise=0.2) head(sdc@manipNumVars) sdc@risk$numeric ### dataGen #sdc <- undolast(sdc) #head(sdc@risk$individual) #sdc@risk$global #sdc <- dataGen(sdc) #head(sdc@risk$individual) #sdc@risk$global ### LocalSuppression sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global sdc <- localSuppression(sdc) head(sdc@risk$individual) sdc@risk$global ### microaggregation sdc <- undolast(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc <- microaggregation(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) ### pram sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global sdc <- pram(sdc,keyVar=\"water\") head(sdc@risk$individual) sdc@risk$global ### rankSwap sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc <- rankSwap(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) head(sdc@risk$individual) sdc@risk$global ### suda2 sdc <- suda2(sdc) sdc@risk$suda2 ### topBotCoding head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc@risk$numeric sdc <- topBotCoding(sdc, value=60000000, replacement=62000000, column=\"income\") head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc@risk$numeric  ### LocalRecProg data(testdata2) keyVars <- c(\"urbrur\", \"roof\", \"walls\", \"water\", \"sex\") w <- \"sampling_weight\" sdc <- createSdcObj(testdata2,   keyVars = keyVars,   weightVar = w) sdc@risk$global sdc <- LocalRecProg(sdc) sdc@risk$global ### model-based risks #' formula form <- as.formula(paste(\"~\", paste(keyVars, collapse = \"+\"))) sdc <- modRisk(sdc, method = \"default\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"CE\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"PLM\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"weightedLLM\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"IPF\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model } ## we can also specify ghost (linked) variables ## these variables are linked to some categorical key variables ## and have the sampe suppression pattern as the variable that they ## are linked to after \\code{\\link{localSuppression}} has been applied data(testdata) testdata$electcon2 <- testdata$electcon testdata$electcon3 <- testdata$electcon testdata$water2 <- testdata$water  keyVars <- c(\"urbrur\",\"roof\",\"walls\",\"water\",\"electcon\",\"relat\",\"sex\") numVars <- c(\"expend\",\"income\",\"savings\") w <- \"sampling_weight\"  ## we want to make sure that some variables not used as key-variables ## have the same suppression pattern as variables that have been ## selected as key variables. Thus, we are using 'ghost'-variables. ghostVars <- list()  ## we want variables 'electcon2' and 'electcon3' to be linked ## to key-variable 'electcon' ghostVars[[1]] <- list() ghostVars[[1]][[1]] <- \"electcon\" ghostVars[[1]][[2]] <- c(\"electcon2\",\"electcon3\")  if (FALSE) { # dontrun because Examples with CPU time > 2.5 times elapsed time ## we want variable 'water2' to be linked to key-variable 'water' ghostVars[[2]] <- list() ghostVars[[2]][[1]] <- \"water\" ghostVars[[2]][[2]] <- \"water2\"  ## create the sdcMicroObj obj <- createSdcObj(testdata, keyVars=keyVars,   numVars=numVars, w=w, ghostVars=ghostVars)  ## apply 3-anonymity to selected key variables obj <- kAnon(obj, k=3); obj  ## check, if the suppression patterns are identical manipGhostVars <- get.sdcMicroObj(obj, \"manipGhostVars\") manipKeyVars <- get.sdcMicroObj(obj, \"manipKeyVars\") all(is.na(manipKeyVars$electcon) == is.na(manipGhostVars$electcon2)) all(is.na(manipKeyVars$electcon) == is.na(manipGhostVars$electcon3)) all(is.na(manipKeyVars$water) == is.na(manipGhostVars$water2))  ## exclude some variables obj <- createSdcObj(testdata, keyVars=c(\"urbrur\",\"roof\",\"walls\"), numVars=\"savings\",    weightVar=w, excludeVars=c(\"relat\",\"electcon\",\"hhcivil\",\"ori_hid\",\"expend\")) colnames(get.sdcMicroObj(obj, \"origData\")) }"},{"path":"/reference/selectHouseholdData.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"removes individual level variables selects one record per household based household ID. function can also used hierachical structures.","code":""},{"path":"/reference/selectHouseholdData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"","code":"selectHouseholdData(dat, hhId, hhVars)"},{"path":"/reference/selectHouseholdData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"dat data.frame full dataset hhId name variable household (cluster) ID hhVars character vector names household level variables","code":""},{"path":"/reference/selectHouseholdData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"data.frame household level variables one record per household","code":""},{"path":"/reference/selectHouseholdData.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"great importance users select variable containing information household-ids weights hhVars.","code":""},{"path":"/reference/selectHouseholdData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"Thijs Benschop Bernhard Meindl","code":""},{"path":"/reference/selectHouseholdData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"","code":"## ori-hid: household-ids; household_weights: sampling weights for households x_hh <- selectHouseholdData(dat=testdata, hhId=\"ori_hid\",   hhVars=c(\"urbrur\", \"roof\",  \"walls\", \"water\", \"electcon\", \"household_weights\"))"},{"path":"/reference/set.sdcMicroObj.html","id":null,"dir":"Reference","previous_headings":"","what":"set.sdcMicroObj — set.sdcMicroObj","title":"set.sdcMicroObj — set.sdcMicroObj","text":"modify sdcMicroObj-class-objects depending argument type","code":""},{"path":"/reference/set.sdcMicroObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set.sdcMicroObj — set.sdcMicroObj","text":"","code":"set.sdcMicroObj(object, type, input)"},{"path":"/reference/set.sdcMicroObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set.sdcMicroObj — set.sdcMicroObj","text":"object sdcMicroObj-class-object type character vector length 1 defining calculate|return|modify. Allowed types listed slot corresponding name replaced content input. origData: keyVars: pramVars: numVars: weightVar: hhId: strataVar: sensibleVar: manipPramVars: manipNumVars: manipGhostVars: manipStrataVar: risk: utility: pram: localSuppression: options: prev: set: additionalResults: deletedVars: input list depending argument type. content list must match allowed data-type slot sdcMicroObj-class-object replaced.","code":""},{"path":"/reference/set.sdcMicroObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set.sdcMicroObj — set.sdcMicroObj","text":"sdcMicroObj-class-object","code":""},{"path":"/reference/set.sdcMicroObj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set.sdcMicroObj — set.sdcMicroObj","text":"","code":"sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ind_pram <- match(c(\"sex\"), colnames(testdata2)) get.sdcMicroObj(sdc, type=\"pramVars\") #> NULL sdc <- set.sdcMicroObj(sdc, type=\"pramVars\", input=list(ind_pram)) get.sdcMicroObj(sdc, type=\"pramVars\") #> [1] 7"},{"path":"/reference/setLevels_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Swap-Levels — setLevels_cpp","title":"Define Swap-Levels — setLevels_cpp","text":"Define hierarchy levels record needs swapped according risk variables. NOTE: internal function used testing C++-function setLevels() applied inside recordSwap().","code":""},{"path":"/reference/setLevels_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Swap-Levels — setLevels_cpp","text":"","code":"setLevels_cpp(risk, risk_threshold)"},{"path":"/reference/setLevels_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Swap-Levels — setLevels_cpp","text":"risk vector vectors containing risks individual hierarchy level. risk[0] returns vector risks first unit hierarchy levels. risk[1] vector risks hierarchy level unit 2, . risk_threshold double defining risk threshold beyond record/household needs swapped. understood risk>=risk_threshhold.","code":""},{"path":"/reference/setLevels_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Swap-Levels — setLevels_cpp","text":"Integer vector hierarchy level record needs swapped .","code":""},{"path":"/reference/setRisk_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Risk — setRisk_cpp","title":"Calculate Risk — setRisk_cpp","text":"Calculate risk records swapped donor records.  Risks defined 1/counts, counts number records values specified risk_variables geographic hierarchy. risk used sampling probability sampling set donor set. NOTE: internal function used testing C++-function setRisk used inside C++-function recordSwap().","code":""},{"path":"/reference/setRisk_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Risk — setRisk_cpp","text":"","code":"setRisk_cpp(data, hierarchy, risk_variables, hid)"},{"path":"/reference/setRisk_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Risk — setRisk_cpp","text":"data micro data set containing numeric values. hierarchy column indices variables data refere geographic hierarchy micro data set. instance county > municipality > district. risk_variables column indices variables data considered estimating risk. hid column index data refers household identifier.","code":""},{"path":"/reference/show-sdcMicroObj-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show — show,sdcMicroObj-method","title":"Show — show,sdcMicroObj-method","text":"show sdcMicro object","code":""},{"path":"/reference/show-sdcMicroObj-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show — show,sdcMicroObj-method","text":"","code":"# S4 method for sdcMicroObj show(object)"},{"path":"/reference/show-sdcMicroObj-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show — show,sdcMicroObj-method","text":"object sdcmicro obj","code":""},{"path":"/reference/show-sdcMicroObj-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show — show,sdcMicroObj-method","text":"sdcMicro object","code":""},{"path":"/reference/show-sdcMicroObj-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show — show,sdcMicroObj-method","text":"Bernhard Meindl","code":""},{"path":"/reference/shuffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffling and EGADP — shuffle","title":"Shuffling and EGADP — shuffle","text":"Data shuffling General Additive Data Perturbation.","code":""},{"path":"/reference/shuffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffling and EGADP — shuffle","text":"","code":"shuffle(   obj,   form,   method = \"ds\",   weights = NULL,   covmethod = \"spearman\",   regmethod = \"lm\",   gadp = TRUE )"},{"path":"/reference/shuffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffling and EGADP — shuffle","text":"obj object class sdcMicroObj data.frame including data. form object class “formula” (one can coerced class): symbolic description model fitted.  responses consists least two variables class response variables class numeric.  response variables belongs numeric key variables (quasi-identifiers numeric scale). predictors can distributed way (numeric, factor, ordered factor). method currently either original form data shuffling (“ds” - default), “mvn” “mlm”, see details section. last method experimental mode almost untested. weights Survey sampling weights. Automatically chosen obj class sdcMicroObj-class. covmethod Method covariance estimation. “spearman”, “pearson” \\ dQuotemcd possible. latter one, implementation package robustbase used. regmethod Method multivariate regression. “lm” “MM” possible.  method “MM”, function “rlm” package MASS applied. gadp TRUE, egadp results fit original data returned.","code":""},{"path":"/reference/shuffle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffling and EGADP — shuffle","text":"‘obj’ class sdcMicroObj-class corresponding slots filled, like manipNumVars, risk utility.  ‘obj’ class “data.frame” object class “micro” following entities returned: shConf shuffled numeric key variables egadp perturbed (using gadp method) numeric key variables","code":""},{"path":"/reference/shuffle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shuffling and EGADP — shuffle","text":"Perturbed values sensitive variables generated.  sensitive variables stored responses argument ‘form’, usual formula interface regression models R. method “ds” EGADP method applied norm inverse percentiles. Shuffling ranks original values according GADP output. details, please see references. Method “mvn” uses simplification draws normal Copulas directly draws shuffled. Method “mlm” also simplification. linear model applied, expected values used perturbed values shuffling applied.","code":""},{"path":"/reference/shuffle.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shuffling and EGADP — shuffle","text":"version, covariance method chosen used covariance correlation estimations whole gadp shuffling function.","code":""},{"path":"/reference/shuffle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shuffling and EGADP — shuffle","text":"K. Muralidhar, R. Parsa, R. Saranthy (1999). general additive data perturbation method database security. Management Science, 45, 1399-1415. K. Muralidhar, R. Sarathy (2006). Data shuffling - new masking approach numerical data. Management Science, 52(5), 658-670, 2006. M. Templ, B. Meindl. (2008).  Robustification Microdata Masking Methods Comparison Existing Methods, : Lecture Notes Computer Science, J. Domingo-Ferrer, Y. Saygin (editors.); Springer, Berlin/Heidelberg, 2008, ISBN: 978-3-540-87470-6, pp. 14-25.","code":""},{"path":[]},{"path":"/reference/shuffle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shuffling and EGADP — shuffle","text":"Matthias Templ, Alexander Kowarik, Bernhard Meindl","code":""},{"path":"/reference/shuffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffling and EGADP — shuffle","text":"","code":"data(Prestige,package=\"carData\") form <- formula(income + education ~ women + prestige + type, data=Prestige) sh <- shuffle(obj=Prestige,form) #> Warning: rows with missing values have been imputed! plot(Prestige[,c(\"income\", \"education\")])  plot(sh$sh)  colMeans(Prestige[,c(\"income\", \"education\")]) #>     income  education  #> 6797.90196   10.73804  colMeans(sh$sh) #>     income  education  #> 6797.90196   10.73804  cor(Prestige[,c(\"income\", \"education\")], method=\"spearman\") #>             income education #> income    1.000000  0.573999 #> education 0.573999  1.000000 cor(sh$sh, method=\"spearman\") #>              income education #> income    1.0000000 0.5565376 #> education 0.5565376 1.0000000  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- shuffle(sdc, method=c('ds'),regmethod= c('lm'), covmethod=c('spearman'),     form=savings+expend ~ urbrur+walls)"},{"path":"/reference/subsetMicrodata.html","id":null,"dir":"Reference","previous_headings":"","what":"subsetMicrodata — subsetMicrodata","title":"subsetMicrodata — subsetMicrodata","text":"allows restrict original data subset. may useful test anonymization methods. function used graphical user interface sdcApp.","code":""},{"path":"/reference/subsetMicrodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subsetMicrodata — subsetMicrodata","text":"","code":"subsetMicrodata(obj, type, n)"},{"path":"/reference/subsetMicrodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subsetMicrodata — subsetMicrodata","text":"obj object class data.frame containing micro data type algorithm used sample original microdata. Currently supported choices n_perc restricted microdata n-percent sample original microdata. first_n first n observations used. every_n restricted microdata set consists every n-th record. size_n total n observations randomly drawn. n numeric vector length 1 specifying specific parameter respect argument type.","code":""},{"path":"/reference/subsetMicrodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subsetMicrodata — subsetMicrodata","text":"object class sdcMicroObj-class modified slot @origData.","code":""},{"path":"/reference/subsetMicrodata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"subsetMicrodata — subsetMicrodata","text":"Bernhard Meindl","code":""},{"path":"/reference/suda2.html","id":null,"dir":"Reference","previous_headings":"","what":"Suda2: Detecting Special Uniques — suda2","title":"Suda2: Detecting Special Uniques — suda2","text":"SUDA risk measure data (stratified) simple random sampling.","code":""},{"path":"/reference/suda2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suda2: Detecting Special Uniques — suda2","text":"","code":"suda2(obj, ...)"},{"path":"/reference/suda2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suda2: Detecting Special Uniques — suda2","text":"obj data.frame sdcMicroObj-object ... see arguments variables Categorical (key) variables. Either column names index variables used risk measurement. missing: Missing value coding given data set. DisFraction: sampling fraction simple random sampling, common sampling fraction stratified sampling. default, set 0.01. original_scores: argument TRUE (default), suda-scores computed described paper \"SUDA: Program Detecting Special Uniques\" Elliot et al., FALSE, computation scores slightly different done original implementation algorithm IHSN.","code":""},{"path":"/reference/suda2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suda2: Detecting Special Uniques — suda2","text":"modified sdcMicroObj object following list ContributionPercent: contribution key variable SUDA score, calculated row. score: suda score `disscore: dis suda score attribute_contributions: data.frame showing much total risk contributed variable. information stored following two variables: variable: containing name variable contribution: contains much risk variable contributes total risk. attribute_level_contributions: returns risks attribute-level data.frame following three columns: variable: variable name attribute: holding relevant level-codes contribution: contains risk level within variable.","code":""},{"path":"/reference/suda2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suda2: Detecting Special Uniques — suda2","text":"Suda 2 recursive algorithm finding Minimal Sample Uniques. algorithm generates possible variable subsets defined categorical key variables scans unique patterns subsets variables. lower amount variables needed receive uniqueness, higher risk corresponding observation.","code":""},{"path":"/reference/suda2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Suda2: Detecting Special Uniques — suda2","text":"Since version >5.0.2, computation suda-scores changed now default described original paper Elliot et al.","code":""},{"path":"/reference/suda2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Suda2: Detecting Special Uniques — suda2","text":"C. J. Skinner; M. J. Elliot (20xx) Measure Disclosure Risk Microdata. Journal Royal Statistical Society: Series B (Statistical Methodology), Vol. 64 (4), pp 855--867. M. J. Elliot, . Manning, K. Mayes, J. Gurd M. Bane (20xx) SUDA: Program Detecting Special Uniques, Using DIS Modify Classification Special Uniques Anna M. Manning, David J. Haglin, John . Keane (2008) recursive search algorithm statistical disclosure assessment. Data Min Knowl Disc 16:165 -- 196 Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4","code":""},{"path":"/reference/suda2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Suda2: Detecting Special Uniques — suda2","text":"Alexander Kowarik Bernhard Meindl (based C++ code Organisation Economic Co-Operation Development. C++ code: work supported International Household Survey Network funded DGF Grant provided World Bank PARIS21 Secretariat Organisation Economic Co-operation Development (OECD). work builds previous work elsewhere acknowledged.","code":""},{"path":"/reference/suda2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suda2: Detecting Special Uniques — suda2","text":"","code":"if (FALSE) { data(testdata2) data_suda2 <- suda2(testdata2,variables=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\")) data_suda2 str(data_suda2) summary(data_suda2)  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- suda2(sdc, original_scores=FALSE) }"},{"path":"/reference/summary.freqCalc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects from class freqCalc — summary.freqCalc","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"Summary method objects class ‘freqCalc’ provide information local suppressions.","code":""},{"path":"/reference/summary.freqCalc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"","code":"# S3 method for freqCalc summary(object, ...)"},{"path":"/reference/summary.freqCalc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"object object class freqCalc ... Additional arguments passed .","code":""},{"path":"/reference/summary.freqCalc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"Information local suppression variable (local suppression already done).","code":""},{"path":"/reference/summary.freqCalc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"Shows amount local suppressions variable local suppression applied.","code":""},{"path":[]},{"path":"/reference/summary.freqCalc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"Matthias Templ","code":""},{"path":"/reference/summary.freqCalc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) f <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) f #>  #>  -------------------------- #> 4 obs. violate 2-anonymity  #> 8 obs. violate 3-anonymity  #>  -------------------------- f$fk #> [1] 2 2 2 1 1 1 1 2 f$Fk #> [1] 110.0  84.5  84.5  17.0 541.0   8.0   5.0 110.0 ## individual risk calculation: indivf <- indivRisk(f) indivf$rk #> [1] 0.01714426 0.02204233 0.02204233 0.17707583 0.01165448 0.29706308 0.40235948 #> [8] 0.01714426 ## Local Suppression localS <- localSupp(f, keyVar=2, threshold=0.25) #> 2observations has individual risks >=0.25and were suppressed! f2 <- freqCalc(localS$freqCalc, keyVars=c(4,5,6), w=8) summary(f2) #>  #>  Suppressions:"},{"path":"/reference/summary.micro.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects from class micro — summary.micro","title":"Summary method for objects from class micro — summary.micro","text":"Summary method objects class ‘micro’.","code":""},{"path":"/reference/summary.micro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects from class micro — summary.micro","text":"","code":"# S3 method for micro summary(object, ...)"},{"path":"/reference/summary.micro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects from class micro — summary.micro","text":"object objects class micro ... Additional arguments passed .","code":""},{"path":"/reference/summary.micro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for objects from class micro — summary.micro","text":"meanx conventional summary original data meanxm conventional summary microaggregated data amean average relative absolute deviation means amedian average relative absolute deviation medians aonestep average relative absolute deviation onestep median devvar average relative absolute deviation variances amad average relative absolute deviation mad acov average relative absolute deviation covariances arcov average relative absolute deviation robust (mcd) covariances acor average relative absolute deviation correlations arcor average relative absolute deviation robust (mcd) correlations acors average relative absolute deviation rank-correlations adlm average absolute deviation lm regression coefficients (without intercept) adlts average absolute deviation lts regression coefficients (without intercept) apcaload average absolute deviation pca loadings apppacaload average absolute deviation robust (projection pursuit approach) pca loadings atotals average relative absolute deviation totals pmtotals average relative deviation totals","code":""},{"path":"/reference/summary.micro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary method for objects from class micro — summary.micro","text":"function computes several measures information loss, ","code":""},{"path":"/reference/summary.micro.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summary method for objects from class micro — summary.micro","text":"Templ, M. Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008. http://www.tdp.cat/issues/abs.a004a08.php","code":""},{"path":[]},{"path":"/reference/summary.micro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method for objects from class micro — summary.micro","text":"Matthias Templ","code":""},{"path":"/reference/summary.micro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for objects from class micro — summary.micro","text":"","code":"data(Tarragona) m1 <- microaggregation(Tarragona, method='onedims', aggr=3) ## summary(m1)"},{"path":"/reference/summary.pram.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects from class pram — summary.pram","title":"Summary method for objects from class pram — summary.pram","text":"Summary method objects class ‘pram’ provide information transitions.","code":""},{"path":"/reference/summary.pram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects from class pram — summary.pram","text":"","code":"# S3 method for pram summary(object, ...)"},{"path":"/reference/summary.pram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects from class pram — summary.pram","text":"object object class ‘pram’ ... Additional arguments passed .","code":""},{"path":"/reference/summary.pram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for objects from class pram — summary.pram","text":"summary object class ‘pram’.","code":""},{"path":"/reference/summary.pram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary method for objects from class pram — summary.pram","text":"Shows various information transitions.","code":""},{"path":"/reference/summary.pram.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summary method for objects from class pram — summary.pram","text":"Templ, M.  Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008.  http://www.tdp.cat/issues/abs.a004a08.php","code":""},{"path":[]},{"path":"/reference/summary.pram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method for objects from class pram — summary.pram","text":"Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/summary.pram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for objects from class pram — summary.pram","text":"","code":"data(free1) x <- as.factor(free1[,\"MARSTAT\"]) x2 <- pram(x) x2 #> Number of changed observations:  #> - - - - - - - - - - -  #> x != x_pram : 225 (5.62%) summary(x2) #> Variable: x #>  #>  ---------------------- #>  #> Frequencies in original and perturbed data: #>                                 x    1   2   3    4 NA #> 1:           Original Frequencies 2547 162 171 1120  0 #> 2: Frequencies after Perturbation 2561 168 156 1115  0 #>  #> Transitions: #>     transition Frequency #>  1:    1 --> 1      2453 #>  2:    1 --> 2        34 #>  3:    1 --> 3        21 #>  4:    1 --> 4        39 #>  5:    2 --> 1        34 #>  6:    2 --> 2       121 #>  7:    2 --> 3         4 #>  8:    2 --> 4         3 #>  9:    3 --> 1        29 #> 10:    3 --> 2        10 #> 11:    3 --> 3       130 #> 12:    3 --> 4         2 #> 13:    4 --> 1        45 #> 14:    4 --> 2         3 #> 15:    4 --> 3         1 #> 16:    4 --> 4      1071 #>"},{"path":"/reference/testdata.html","id":null,"dir":"Reference","previous_headings":"","what":"A real-world data set on household income and expenditures — testdata","title":"A real-world data set on household income and expenditures — testdata","text":"concise (1-5 lines) description dataset.","code":""},{"path":"/reference/testdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A real-world data set on household income and expenditures — testdata","text":"testdata: data frame 4580 observations following 15 variables. urbrur numeric vector roof numeric vector walls numeric vector water numeric vector electcon numeric vector relat numeric vector sex numeric vector age numeric vector hhcivil numeric vector expend numeric vector income numeric vector savings numeric vector ori_hid numeric vector sampling_weight numeric vector household_weights numeric vector testdata2: data frame 93 observations following 19 variables. urbrur numeric vector roof numeric vector walls numeric vector water numeric vector electcon numeric vector relat numeric vector sex numeric vector age numeric vector hhcivil numeric vector expend numeric vector income numeric vector savings numeric vector ori_hid numeric vector sampling_weight numeric vector represent numeric vector category_count numeric vector relat2 numeric vector water2 numeric vector water3 numeric vector","code":""},{"path":"/reference/testdata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A real-world data set on household income and expenditures — testdata","text":"International Household Survey Network, www.ihsn.org","code":""},{"path":"/reference/testdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A real-world data set on household income and expenditures — testdata","text":"","code":"head(testdata) #>   urbrur roof walls water electcon relat sex age hhcivil   expend   income #> 1      2    4     3     3        1     1   1  46       2 90929693 57800000 #> 2      2    4     3     3        1     2   2  41       2 27338058 25300000 #> 3      2    4     3     3        1     3   1   9       1 26524717 69200000 #> 4      2    4     3     3        1     3   1   6       1 18073948 79600000 #> 5      2    4     2     3        1     1   1  52       2  6713247 90300000 #> 6      2    4     2     3        1     2   2  47       2 49057636 32900000 #>     savings ori_hid sampling_weight household_weights #> 1  116258.5       1             100          25.00000 #> 2  279345.0       1             100          25.00000 #> 3 5495381.0       1             100          25.00000 #> 4 8695862.0       1             100          25.00000 #> 5  203620.2       2             100          16.66667 #> 6 1021268.0       2             100          16.66667 head(testdata2) #>   urbrur roof walls water electcon relat sex age hhcivil   expend   income #> 1      1    2     3     1        4     1   1  69       1 30772412 72500000 #> 2      1    2     3     3        4     3   1  35       1 77536815 10100000 #> 3      1    2     3     3        4     1   2  80       4 15103477 56700000 #> 4      1    2     3     4        1     3   1  14       1 99118978 12300000 #> 5      1    2     3     4        4     2   2  28       2 55576313 26300000 #> 6      1    4     2     1        1     3   1  25       1 46468920 88600000 #>   savings ori_hid sampling_weight represent category_count relat2 water2 water3 #> 1 1230366     893             100         1              1     10     10    100 #> 2 1856943     621             100         1              1     30     10    100 #> 3 4807111     621             100         1              1     10     10    100 #> 4 7195081     667             100         1             11     30     20    200 #> 5 4934387     658             100         1             20     10     20    200 #> 6 8165375     625             100         1             58     30     10    100"},{"path":"/reference/topBotCoding.html","id":null,"dir":"Reference","previous_headings":"","what":"Top and Bottom Coding — topBotCoding","title":"Top and Bottom Coding — topBotCoding","text":"Function Top Bottom Coding.","code":""},{"path":"/reference/topBotCoding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top and Bottom Coding — topBotCoding","text":"","code":"topBotCoding(obj, value, replacement, kind = \"top\", column = NULL)"},{"path":"/reference/topBotCoding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top and Bottom Coding — topBotCoding","text":"obj numeric vector, data.frame sdcMicroObj-class-object value limit, top- bottom-coded replacement replacement value. kind top bottom column variable name case input data.frame object class sdcMicroObj-class.","code":""},{"path":"/reference/topBotCoding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top and Bottom Coding — topBotCoding","text":"Top bottom coded data modified sdcMicroObj-class.","code":""},{"path":"/reference/topBotCoding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Top and Bottom Coding — topBotCoding","text":"Extreme values larger lower value replaced different value (replacement order reduce disclosure risk.","code":""},{"path":"/reference/topBotCoding.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Top and Bottom Coding — topBotCoding","text":"top-/bottom coding factors longer possible sdcMicro >=4.7.0","code":""},{"path":"/reference/topBotCoding.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Top and Bottom Coding — topBotCoding","text":"Templ, M. Kowarik, . Meindl, B.  Statistical Disclosure Control Micro-Data Using R Package sdcMicro.  Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04","code":""},{"path":[]},{"path":"/reference/topBotCoding.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Top and Bottom Coding — topBotCoding","text":"Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/topBotCoding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Top and Bottom Coding — topBotCoding","text":"","code":"data(free1) res <- topBotCoding(free1[,\"DEBTS\"], value=9000, replacement=9100, kind=\"top\") max(res) #> [1] 9100  data(testdata) range(testdata$age) #> [1]  0 95 testdata <- topBotCoding(testdata, value=80, replacement=81, kind=\"top\", column=\"age\") range(testdata$age) #> [1]  0 81  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2, keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),            numVars=c('expend','income','savings'), w='sampling_weight') sdc <- topBotCoding(sdc, value=500000, replacement=1000, column=\"income\") testdataout <- extractManipData(sdc)"},{"path":"/reference/valTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison of different microaggregation methods — valTable","title":"Comparison of different microaggregation methods — valTable","text":"Function comparison different perturbation methods.","code":""},{"path":"/reference/valTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison of different microaggregation methods — valTable","text":"","code":"valTable(   x,   method = c(\"simple\", \"onedims\", \"clustpppca\", \"addNoise: additive\", \"swappNum\"),   measure = \"mean\",   clustermethod = \"clara\",   aggr = 3,   nc = 8,   transf = \"log\",   p = 15,   noise = 15,   w = 1:dim(x)[2],   delta = 0.1 )"},{"path":"/reference/valTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison of different microaggregation methods — valTable","text":"x data.frame matrix method character vector defining names microaggregation-, adding-noise rank swapping methods. measure FUN aggregation. Possible values mean (default), median, trim, onestep. clustermethod clustermethod, method need clustering procedure aggr aggregation level (default=3) nc number clusters. Necessary, method need clustering procedure transf Transformation variables clustering. p Swapping range, method swappNum chosen noise noise addition, addNoise method chosen w variables swapping, method swappNum chosen delta parameter adding noise method \"correlated2\"","code":""},{"path":"/reference/valTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparison of different microaggregation methods — valTable","text":"Measures information loss splitted comparison different methods.","code":""},{"path":"/reference/valTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparison of different microaggregation methods — valTable","text":"Tabularize output summary.micro(). enhanced perturbation methods future versions. Methods adding noise named via addNoise:{method}, e.g. addNoise:correlated, {method} specifies desired method described addNoise().","code":""},{"path":"/reference/valTable.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Comparison of different microaggregation methods — valTable","text":"Templ, M. Meindl, B., Software Development SDC R, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 4302, pp. 347-359, 2006.","code":""},{"path":[]},{"path":"/reference/valTable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Comparison of different microaggregation methods — valTable","text":"Matthias Templ","code":""},{"path":"/reference/valTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison of different microaggregation methods — valTable","text":"","code":"data(Tarragona) if (FALSE) { valTable(   x = Tarragona[100:200, ],   method=c(\"simple\", \"onedims\", \"pca\"))  valTable(   x = Tarragona,   method = c(\"simple\", \"onedims\", \"pca\", \"clustpppca\", \"mdav\", \"swappNum\"))  ## clustpppca in combination with Mclust outperforms ## the other algorithms for this data set... }"},{"path":"/reference/varToFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","title":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","text":"Change scale variable","code":""},{"path":"/reference/varToFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","text":"","code":"varToFactor(obj, var)  varToNumeric(obj, var)"},{"path":"/reference/varToFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","text":"obj object class sdcMicroObj-class var name keyVariable change","code":""},{"path":"/reference/varToFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","text":"modified sdcMicroObj-class","code":""},{"path":"/reference/varToFactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","text":"","code":"## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- varToFactor(sdc, var=\"urbrur\")"},{"path":"/reference/writeSafeFile.html","id":null,"dir":"Reference","previous_headings":"","what":"writeSafeFile — writeSafeFile","title":"writeSafeFile — writeSafeFile","text":"writes anonymized dataset file. function used graphical user interface sdcApp .","code":""},{"path":"/reference/writeSafeFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"writeSafeFile — writeSafeFile","text":"","code":"writeSafeFile(obj, format, randomizeRecords, fileOut, ...)"},{"path":"/reference/writeSafeFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"writeSafeFile — writeSafeFile","text":"obj object class data.frame containing micro data format (character) specifies output file format. Accepted values : 'rdata' output saved R binary file-format. 'sav' output saved SPSS-file. 'dta' ouput saved STATA-file. 'csv' output saved comma seperated (text)-file. 'sas' output saved SAS-file (sas7bdat). randomizeRecords (logical) specifies, output records randomized. following options possible: '' default, randomization takes place 'simple' records just randomly swapped. 'byHH' slot 'hhId' NULL, clusters defined variable randomized across dataset. slot 'hhId' NULL, records dataset randomly changed. 'withinHH' slot 'hhId' NULL, clusters defined variable randomized across dataset additionally, order records within clusters also randomly changed. slot 'hhId' NULL, records dataset randomly changed. fileOut (character) file output written ... optional arguments used write.table argument format equals csv","code":""},{"path":"/reference/writeSafeFile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"writeSafeFile — writeSafeFile","text":"Bernhard Meindl","code":""}]
