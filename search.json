[{"path":"/articles/recordSwapping.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Targeted Record Swapping","text":"vignette R-Package recordSwapping, can used apply record swapping algorithm micro data set. implementation procedure done purely C++ based SAS code targeted record swapping ONS (https://ec.europa.eu/eurostat/cros/content/2-record-swapping_en). , however, substantial differences SAS C++ Code. differences result improving run-time C++ implementation. next section, differences 2 implementations presented . R-Package just front end easily call procedures testing purposes.","code":""},{"path":"/articles/recordSwapping.html","id":"functionality","dir":"Articles","previous_headings":"","what":"Functionality","title":"Targeted Record Swapping","text":"targeted record swapping can applied function recordSwap(). functions package called inside recordSwap() exported testing purposes. function following arguments: data micro data containing integer values, rectangular table format. hid column index  refers household identifier. hierarchy column indices variables  refer geographic hierarchy micro data set. instance county > municipality > district. similar vector vector containing similarity profiles sets variables  considered swapping households.  corresponds first set similarity variables,  second set . swaprate double 0 1 defining proportion households swapped, see details explanations risk vector vector containing risk individual hierarchy level. risk[0] corresponds risks first record hierarchy levels, risk[1] second record . ignored, now, fully tested yet. risk_threshold risk threshold, determines record swapped hierarchy level. overwrites k_anonymity. ignored, now, fully tested yet. k_anonymity integer defining threshold high risk households (k-anonymity). record risk k_anonymity > counts. risk_variables column indices variables  considered estimating risk. used risk supplied. carry_along column indices variables  additionally swapped. variables interfere procedure finding record swap . parameter used end procedure swapping hierarchies. count_swapped_records, count_swapped_hid count number households records swapped log_file_name path writing log file. log file contains list household IDs (hid) swapped created households exist. seed integer defining seed random number generator, reproducibility. IMPORTANT: argument data contains micro data can understood vector vectors. Inside function, data expected contain column input data std::vector<int> stored std::vector< std::vector<int> >. data[0] addresses variables first record data[0][0] first column first record. logic hold argument risk.","code":"recordSwap(std::vector< std::vector<int> > data, int hid,                                            std::vector<int> hierarchy,                                             std::vector<std::vector<int>> similar,                                            double swaprate,                                            std::vector<std::vector<double>> risk, double risk_threshold,                                            int k_anonymity, std::vector<int> risk_variables,                                              std::vector<int> carry_along,                                            int &count_swapped_records,                                            int &count_swapped_hid,                                            std::string log_file_name,                                            int seed = 123456)"},{"path":[]},{"path":"/articles/recordSwapping.html","id":"risk-definition","dir":"Articles","previous_headings":"Functionality > Some differences to SAS-Code","what":"Risk definition","title":"Targeted Record Swapping","text":"C++-Code: Risk calculated using counts geographic hierarchies (hierarchy) combination risk variables. SAS-Code: Risk calculated using counts geographic hierarchy (hierarchy) risk variable separately. risks combined produce single risk value record.","code":""},{"path":"/articles/recordSwapping.html","id":"sampling-probability","dir":"Articles","previous_headings":"Functionality > Some differences to SAS-Code","what":"Sampling probability","title":"Targeted Record Swapping","text":"C++-Code: Sampling probability \\(p_{y,h}\\) household \\(y\\) geographic hierarchy \\(h\\) derived risks \\(r_{,h}\\) individuals living household. risk \\(r_{,h}\\) individual \\(\\) geographic hierarchy (\\(h\\)) currently estimated k-anonymity rule. \\(r_{,h}\\) defined \\[ r_{,h} = (\\sum\\limits_{j=1}^{N_{g_1}}1[v_{1()}=v_{1(j)} \\land ... \\land v_{p()}=v_{p(j)}])^{-1} \\quad , \\] \\(v_1,\\ldots,v_p\\) set risk variables, \\(N_{g_1}\\) number persons living region \\(g_1\\) \\(1[...]\\) indicator function. \\(1[v_{1()}=v_{1(j)} \\land ... \\land v_{p()}=v_{p(j)}]\\) 1 individual \\(j\\) values risk variables \\(v_1,\\ldots,v_p\\) individual \\(\\) 0 otherwise. Casually speaking \\[ r_{,h} \\sim \\frac{1}{counts} \\quad . \\] sampling probability household \\(y\\), \\(p_{y,h}\\) hierarchy \\(h\\), defined maximum risk across household member \\[ p_{y,h} = \\max_{\\text{ household }y}(r_{,h}) \\quad . \\] sampling probability used selecting households swapping well donor households. SAS-Code: Sampling probability derived multiple factors. \\[ p_i = \\begin{cases} 0.999 \\quad \\text{low risk household} \\\\ \\frac{b\\cdot N_{high}}{SA\\cdot c-b\\cdot c} \\quad \\text{}b>0 \\\\ \\frac{0.2\\cdot N_{high}}{SA\\cdot c-0.2\\cdot c} \\quad \\text{}b=0 \\\\ \\frac{0.1\\cdot N_{high}}{SA\\cdot c-0.1\\cdot c} \\quad \\text{}b<0 \\end{cases} \\] \\[ b = SA - N_{high}\\\\ c = N_{netto} - N_{high} \\] \\(SA\\) sample size, \\(N_{high}\\) number high risk households geographic area \\(N_{netto}\\) number non-imputed records geographic area.","code":""},{"path":"/articles/recordSwapping.html","id":"swapping-records","dir":"Articles","previous_headings":"Functionality > Some differences to SAS-Code","what":"Swapping Records","title":"Targeted Record Swapping","text":"C++-Code: Swaps made every hierarchy level records fulfil k-anonymity swapped. donor set records swapped always made every record belong geographic area swapped households. lowest hierarchy level, additional number households swapped proportion households swapped equal number swaprate. proportion already swapped households succeeds values records fulfil k-anonymity also swapped. Example swapping households. number represents number high risk households hierarchy level. Figure 1 displays example hierarchy levels NUTS1 > NUTS2 > NUTTS3 numbers high risk households displayed end edges. instance, first NUTS1 region, 5 high risk households swapped households NUTS1 regions. first NUTS2 region, 10 high risk households swapped households NUTS2 region. lowest level, NUTS3 regions, number swaps, \\(n_{swaps}\\) first district defined \\[ n_{swaps} = 2 + Rest\\\\ Rest = \\max(0,N\\cdot s - n_{already})  \\] \\(N\\) number households district, \\(n_{already}\\) number already swapped households district \\(s\\) swap rate. SAS-Code Swaps made every hierarchy level depending sampling probability, high risk households likely swapped low risk households, mandatorily swapped. number swappes hierarchy level defined number high risk records total number records geographic area. instance, geographic hierarchy county > municipality > district, number Swaps municipality \\(m\\) county \\(n\\) defined \\[ SWAP_m = \\frac{SIZE_m+RISK_m}{2} \\] \\(SIZE_m\\) can derived using reciprocal number households municipality county \\(n\\). \\[ SIZE_m = \\frac{N_m^{-1}}{\\sum_iN_i^{-1}}\\cdot sN_n \\] \\(N_m\\) number households municipality \\(m\\), \\(s\\) global swaprate \\(N_n\\) number households county \\(n\\). \\(RISK_m\\) can derived using proportion high risk households municipality \\[ RISK_m = \\frac{H_m}{\\sum_iH_i}\\cdot sN_n \\] \\(H_m\\) proportion high risk households municipality \\(m\\).","code":""},{"path":"/articles/recordSwapping.html","id":"application","dir":"Articles","previous_headings":"","what":"Application","title":"Targeted Record Swapping","text":"package tested randomly generated data, contained 5 geographic levels sociodemographic variables. Applying record swapping dat look like procedure applied dat using every hierarchy level, nuts1 nuts2 using hsize similarity variable (households household size swapped) using hIncome, ageGroup, gender risk variables setting k-anonymity rule 3 setting swaprate 0.05 k_anonymity <- 0 swaprate considered. th*100% households swapped. sample small, actual number swaps can smaller, however, can happen regions small number households, e.g. 1,2,3,… Comparing number swapped households","code":"library(sdcMicro) dat <- createDat(N=100000) ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 7 has 100000 rows but longest item has 349697; recycled with ## remainder. ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 8 has 100000 rows but longest item has 349697; recycled with ## remainder. ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 9 has 100000 rows but longest item has 349697; recycled with ## remainder. dat hierarchy <- c(\"nuts1\",\"nuts2\") risk_variables <- c(\"hincome\",\"ageGroup\",\"gender\") k_anonymity <- 3 swaprate <- .05 hid <- \"hid\" similar <- \"hsize\"  dat_swapped <- recordSwap(data = dat, hid = hid,                           hierarchy = hierarchy,                           similar = similar,                           risk_variables = risk_variables,                           k_anonymity = k_anonymity,                           swaprate = swaprate) ## Recordswapping was successful! dat_swapped k_anonymity <- 0 swaprate <- .05 dat_swapped <- recordSwap(data = dat, hid = hid,                           hierarchy = hierarchy,                           similar = similar,                           risk_variables = risk_variables,                           k_anonymity = k_anonymity,                           swaprate = swaprate) ## Recordswapping was successful! dat_swapped dat_compare <- merge(dat[,.(paste(nuts1[1],nuts2[1])),by=hid],                      dat_swapped[,.(paste(nuts1[1],nuts2[1])),by=hid],by=\"hid\")  # number of swapped households nrow(dat_compare[V1.x!=V1.y]) ## [1] 5000 # swaprate times number of households in data dat[,uniqueN(hid)]*swaprate ## [1] 5000"},{"path":"/articles/recordSwapping.html","id":"supplying-index-vectors","dir":"Articles","previous_headings":"Application","what":"Supplying index vectors","title":"Targeted Record Swapping","text":"Instead column names, index vectors can supplied parameters hid, hierarchy, similar risk_variables. Please note underlying c++-routines expect indices starting 0 R indices start 1. wrapper function recordSwap() converts indices column names R correct format c++ routines. using column indices function call done usually R-fashion indices start 1.","code":"hierarchy <- c(1,2) # ~ c(\"nuts1\",\"nuts2\") risk_variables <- c(11,7,8) # ~ c(\"hincome\",\"ageGroup\",\"gender\") hid <- 5 # ~ \"hid\" similar <- 6 # ~ \"hsize\"  dat_swapped <- recordSwap(data = dat, hid = hid,                           hierarchy = hierarchy,                           similar = similar,                           risk_variables = risk_variables,                           k_anonymity = k_anonymity,                           swaprate = swaprate) ## Recordswapping was successful!"},{"path":"/articles/recordSwapping.html","id":"similarity-profiles","dir":"Articles","previous_headings":"Application","what":"Similarity profiles","title":"Targeted Record Swapping","text":"cases, condition finding similar household given parameter similarity might strict. thus, possible swap necessary number households due lack suitable donor household. expected number swapped households population 10000 households swapping rate 0.05 500. actual number swaps however: parameter similar multiple similarity profiles can defined, parameter input list. donor found first similarity profile (similar[[1]]) donor searched using next similarity profile (similar[[2]]) . Using multiple similarity profiles makes easy supply fall-back profiles initial profile specific.","code":"# demonstrate on small data set dat <- createDat(N=10000) ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 7 has 10000 rows but longest item has 35093; recycled with ## remainder. ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 8 has 10000 rows but longest item has 35093; recycled with ## remainder. ## Warning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = ## check.names, : Item 9 has 10000 rows but longest item has 35093; recycled with ## remainder. hierarchy <- c(\"nuts1\",\"nuts2\") risk_variables <- \"gender\" # similarity profile contains: # nuts1 + hsize + htype + hincome similar <- c(\"nuts1\",\"hsize\",\"htype\",\"hincome\")  # procedure will not always find a suitable donor dat_swapped <- recordSwap(data = dat, hid = hid,                           hierarchy = hierarchy,                           similar = similar,                           risk_variables = risk_variables,                           k_anonymity = 3,                           swaprate = 0.05,                           seed = 123456L) ## Donor household was not found in 1 case(s). ## See TRS_logfile.txt for a detailed list dat_compare <- merge(dat[,.(paste(nuts1[1],nuts2[1])),by=hid],                      dat_swapped[,.(paste(nuts1[1],nuts2[1])),by=hid],by=\"hid\")  # number of swapped households nrow(dat_compare[V1.x!=V1.y]) ## [1] 498 # additional profile contains only hsize similar <- list(similar) similar[[2]] <- \"hsize\" similar ## [[1]] ## [1] \"nuts1\"   \"hsize\"   \"htype\"   \"hincome\" ##  ## [[2]] ## [1] \"hsize\" # procedure found donors for every record dat_swapped <- recordSwap(data = dat, hid = hid,                           hierarchy = hierarchy,                           similar = similar,                           risk_variables = risk_variables,                           k_anonymity = 3,                           swaprate = 0.05,                           seed = 123456L) ## Recordswapping was successful! dat_compare <- merge(dat[,.(paste(nuts1[1],nuts2[1])),by=hid],                      dat_swapped[,.(paste(nuts1[1],nuts2[1])),by=hid],by=\"hid\")  # number of swapped households nrow(dat_compare[V1.x!=V1.y]) ## [1] 500"},{"path":"/articles/recordSwapping.html","id":"carry-along-variables","dir":"Articles","previous_headings":"Application","what":"Carry along variables","title":"Targeted Record Swapping","text":"Using function recordSwap() like always results swapping variables defined variable hierarchy. Sometimes might useful swap variables ones stated hierarchy. apply record swapping using hierarchy-levels nuts1 nuts2 nuts3 lau2-variable data set stay unchanged. Thus resulting data set, variables nuts1 nuts2 longer coherent nuts3 lau2. Let’s detailed look problem nuts1==1 nuts2==14 nuts3 variables takes values swapped data set however many values nuts3 now coherent nuts1==1 nuts2==14 Using parameter carry_along one can define certain variables additionally swapped interfere risk calculation, sampling procedure finding donor. original swapped data set value combinations nuts1, nuts2 nuts3. Setting parameter , however, interfere swapping procedure Using idea one can set return_swapped_id = TRUE return hid records swapped . output now additional column named hid_swapped, contains household ID household swapped . Number swapped hids","code":"hid <- \"hid\" hierarchy <- c(\"nuts1\",\"nuts2\") similar <- c(\"hsize\") risk_variables <- c(\"hincome\",\"htype\")  dat_swapped <- recordSwap(data = copy(dat),                         hid = hid,                         hierarchy = hierarchy,                         similar = similar,                         risk_variables = risk_variables,                         swaprate = 0.05,                         seed=1234L) ## Recordswapping was successful! # compare results dat_compare <- merge(dat[,.(paste(nuts1[1],nuts2[1])),by=hid],                      dat_swapped[,.(paste(nuts1[1],nuts2[1])),by=hid],by=\"hid\") head(dat_compare[V1.x!=V1.y]) ##    hid V1.x V1.y ## 1:   9 2 24 3 35 ## 2:  37 2 23 2 22 ## 3:  47 3 31 3 32 ## 4:  65 3 31 3 33 ## 5:  84 2 21 2 22 ## 6:  85 1 12 1 13 dat[nuts1==1&nuts2==14,sort(unique(nuts3))] ##  [1] 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 dat_swapped[nuts1==1&nuts2==14,sort(unique(nuts3))] ##  [1] 1105 1106 1113 1203 1205 1209 1212 1308 1312 1401 1402 1403 1404 1405 1406 ## [16] 1407 1408 1409 1410 1411 1412 1413 1414 1415 1509 1512 1515 2104 2105 2108 ## [31] 2205 2302 2303 2305 2403 2506 3105 3111 3201 3203 3303 3314 3414 3501 3515 dat_swapped2 <- recordSwap(data = copy(dat),                         hid = hid,                         hierarchy = hierarchy,                         similar = similar,                         risk_variables = risk_variables,                         swaprate = 0.05,                         carry_along = c(\"nuts3\",\"lau2\"), # <- swap nuts3 and lau2 variable as well                         seed=1234L) ## Recordswapping was successful! geoVars <- c(\"nuts1\", \"nuts2\", \"nuts3\") dat_geo <- dat[!duplicated(hid),..geoVars] setorderv(dat_geo,geoVars) dat_geo_swapped <- dat_swapped2[!duplicated(hid),..geoVars] setorderv(dat_geo_swapped,geoVars)  # check if value combinations of swapped and original data are the same all.equal(dat_geo,dat_geo_swapped) ## [1] TRUE dat_compare2 <- merge(dat[,.(paste(nuts1[1],nuts2[1])),by=hid],                      dat_swapped[,.(paste(nuts1[1],nuts2[1])),by=hid],by=\"hid\")  # check if same hid were swapped in both cases all.equal(dat_compare2[order(hid),.(hid)],           dat_compare[order(hid),.(hid)]) ## [1] TRUE dat_swapped3 <- recordSwap(data = copy(dat),                         hid = hid,                         hierarchy = hierarchy,                         similar = similar,                         risk_variables = risk_variables,                         swaprate = 0.05,                         carry_along = \"nuts3\",                         return_swapped_id = TRUE,                         seed=1234L) ## Recordswapping was successful! dat_swapped3[!duplicated(hid),.N,by=.(id_swapped = hid!=hid_swapped)] ##    id_swapped    N ## 1:      FALSE 9500 ## 2:       TRUE  500"},{"path":"/articles/recordSwapping.html","id":"information-loss","dir":"Articles","previous_headings":"Application","what":"Information loss","title":"Targeted Record Swapping","text":"function infoLoss() one can calculate various information loss measures pre defined frequency table. frequency table defined parameter table_vars, accepts column names original swapped micro data. frequency table internally constructed using original swapped micro data. Afterwards, various information loss measures estimated table cells. Per default absolute deviation (\\(abs(x,y)\\)), relative absolute deviation (\\(r\\_abs(x,y)\\)), absolute deviaion square roots (\\(abs\\_sqr(x,y)\\)) calculated table cells x y, see also parameter metric. \\[ abs(x,y) = |x-y|  \\] \\[ r\\_abs(x,y) = \\frac{|x-y|}{x} \\] \\[ abs\\_sqr(x,y) = |\\sqrt{x}-\\sqrt{y}| \\] also possible supply custom information loss metric using parameter custom_meric","code":"# calculate information loss for frequecy table nuts2 x national table_vars <- c(\"nuts2\",\"national\") iloss <- infoLoss(data=dat, data_swapped = dat_swapped3,                   table_vars = table_vars) iloss$measures ##       what      absD   abssqrtD     relabsD ##  1:    Min  0.000000 0.00000000 0.000000000 ##  2:    10%  0.000000 0.00000000 0.000000000 ##  3:    20%  0.000000 0.00000000 0.000000000 ##  4:    30%  1.000000 0.02255800 0.002036694 ##  5:    40%  2.000000 0.04430869 0.003924940 ##  6:   Mean  3.810526 0.08815064 0.008168092 ##  7: Median  3.000000 0.06907978 0.006342495 ##  8:    60%  4.000000 0.08919577 0.008027211 ##  9:    70%  6.000000 0.13525191 0.012513183 ## 10:    80%  7.000000 0.16260893 0.015042735 ## 11:    90%  9.000000 0.21403282 0.020263937 ## 12:    95% 11.000000 0.25629255 0.023603985 ## 13:    99% 16.060000 0.36777340 0.033217053 ## 14:    Max 17.000000 0.40273079 0.038901602 # define squared distance as custom metric squareD <- function(x,y){    (x-y)^2 }  iloss <- infoLoss(data=dat, data_swapped = dat_swapped3,                   table_vars = c(\"nuts2\",\"national\"),                   custom_metric = list(squareD=squareD)) iloss$measures # includes custom loss as well ##       what      absD   abssqrtD     relabsD   squareD ##  1:    Min  0.000000 0.00000000 0.000000000   0.00000 ##  2:    10%  0.000000 0.00000000 0.000000000   0.00000 ##  3:    20%  0.000000 0.00000000 0.000000000   0.00000 ##  4:    30%  1.000000 0.02255800 0.002036694   1.00000 ##  5:    40%  2.000000 0.04430869 0.003924940   4.00000 ##  6:   Mean  3.810526 0.08815064 0.008168092  30.29474 ##  7: Median  3.000000 0.06907978 0.006342495   9.00000 ##  8:    60%  4.000000 0.08919577 0.008027211  16.00000 ##  9:    70%  6.000000 0.13525191 0.012513183  36.00000 ## 10:    80%  7.000000 0.16260893 0.015042735  49.00000 ## 11:    90%  9.000000 0.21403282 0.020263937  81.00000 ## 12:    95% 11.000000 0.25629255 0.023603985 121.00000 ## 13:    99% 16.060000 0.36777340 0.033217053 257.98000 ## 14:    Max 17.000000 0.40273079 0.038901602 289.00000"},{"path":"/articles/recordSwapping.html","id":"sdcmicro-objects","dir":"Articles","previous_headings":"Application","what":"sdcMicro Objects","title":"Targeted Record Swapping","text":"function recordSwap() can called using micro data directly, seen , sdcMicro-Object. Parameters swapping routine can passed options-slot creating sdcMicro-Object.","code":"# define paramters hierarchy <- c(\"nuts1\",\"nuts2\") risk_variables <- c(\"hincome\",\"ageGroup\",\"gender\") k_anonymity <- 3 swaprate <- .05 hid <- \"hid\" similar <- \"hsize\"  # create sdcMicro object with parameters for recordSwap() data_sdc <- createSdcObj(dat,hhId = hid,                          keyVars=risk_variables,                          options = list(k_anonymity = k_anonymity,                                                     swaprate = swaprate,                                                     similar = similar,                                                     hierarchy = hierarchy)) dat_swapped_sdc <- recordSwap(data = data_sdc,                               return_swapped_id = TRUE) ## Recordswapping was successful! dat_swapped_sdc[!duplicated(hid),.N,by=.(id_swapped = hid!=hid_swapped)] ##    id_swapped    N ## 1:      FALSE 9500 ## 2:       TRUE  500"},{"path":"/articles/sdcMicro.html","id":"introduction-and-main-features","dir":"Articles","previous_headings":"","what":"Introduction and Main Features","title":"Using the interactive GUI - sdcApp","text":"Package sdcMicro contains shiny app help users non-experts R (command-line) apply disclosure limitation techniques. reason, users may upload (micro)data files different software products app start anonymize dataset working within interactive, graphical user interface (GUI). document give overview functionalities graphical user interface can started sdcApp(). main functionality GUI : Uploading microdata Modify analyze microdata Creating sdcMicroObj-instances Perform anonymization techniques sdcMicroObj-problem instance Obtain information disclosure risks /information loss Export anonymized data reports Keep reproducibility able download underlying code sdcMicro now describe features interactive graphical user interface detail. GUI separated 7 main categories, can selected navigation bar top screen. Initially, pages empty content changes microdata uploaded sdcMicroObj generated. also want note throughout GUI, questionmark signs shown. Hovering mouse small icons triggers pop window additional information help anonymization process.","code":""},{"path":"/articles/sdcMicro.html","id":"about","dir":"Articles","previous_headings":"","what":"About/Help","title":"Using the interactive GUI - sdcApp","text":"first page shown graphical user interface started using sdcApp() loading package sdcMicro. page, user presented information open package vignette contains extensive information use GUI. Furthermore, section Getting started, users advised either upload microdata upload previously saved problem instance. Clicking relevant buttons brings user automatically page desired functionality available. section Settings, possible change default output path. path used whenever user decides export data GUI hard disk. default value directory GUI started (e.g current working directory). valid path entered text input field, button labelled Update current output path appears input. Pressing input updates path. successful, current path shown placeholder text input well text input field. note can change path time anonymization process. Writing files disk always use current path. page, user can also stop interface clicking button labelled Stop GUI. feature used, current [uploaded microdata] modifications well current problem instance (already specified) (invisibly) returned R. case interface started x <- sdcApp(), x contains list two elements named inputdata sdcObj. allows one continue working R. Finally, users shown ways contact us bug reports issues. now continue describe functionality user interface detail.","code":""},{"path":"/articles/sdcMicro.html","id":"microdata","dir":"Articles","previous_headings":"","what":"Microdata","title":"Using the interactive GUI - sdcApp","text":"page, user can either upload data sets stored files hard drive GUI select data frames exist users’ workspace working graphical user interface started. allows perform common data manipulation steps directly R continuing anonymize dataset using GUI. note content page changes depending whether microdata already uploaded . former case, user can view, modify reset variables uploaded dataset described chapter Modify microdata. latter case, user asked upload data GUI. described chapter Upload microdata .","code":""},{"path":"/articles/sdcMicro.html","id":"upload_microdata","dir":"Articles","previous_headings":"Microdata","what":"Upload microdata","title":"Using the interactive GUI - sdcApp","text":"default, microdata loaded GUI. Therefore user upload data GUI can later anonymized. microdata available, left-sidebar shows following options can selected clicking appropriate action button. case selected data used (eg. data converted data.frame), user presented resulting error message button Try-. clicking button, another microdata file can imported.","code":""},{"path":"/articles/sdcMicro.html","id":"testdatainternal-data","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"Testdata/internal data","title":"Using the interactive GUI - sdcApp","text":"screen allows user select data.frames available users-workspace starting user interface. Two test-data sets (testdata testdata2, information available ?testdata) included sdcMicro always available. Pressing action button drop-selection input make GUI use selected data frame.","code":""},{"path":"/articles/sdcMicro.html","id":"r-dataset--rdata","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"R-dataset (.rdata)","title":"Using the interactive GUI - sdcApp","text":"users can opt upload file saved R binary format. Users can change options character vectors automatically converted factors variables contain missing-values dropped. clicking Browse button user needs select rdata-file disk wants upload. detailed explanation options, please see chapter additional options.","code":""},{"path":"/articles/sdcMicro.html","id":"spss-file--sav","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"SPSS-file (.sav)","title":"Using the interactive GUI - sdcApp","text":"users can opt upload file exported SPSS. Users can change options character vectors automatically converted factors variables contain missing-values (‘NA’) dropped. clicking Browse button user needs select sav-file disk wants upload. detailed explanation options, please see chapter additional options.","code":""},{"path":"/articles/sdcMicro.html","id":"sas-file--sasb7dat","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"SAS-file (.sasb7dat)","title":"Using the interactive GUI - sdcApp","text":"users can opt upload file exported SAS. Users can change options character vectors automatically converted factors variables contain missing-values (‘NA’) dropped. clicking Browse button user needs select sas7bdat-file disk wants upload. detailed explanation options, please see chapter additional options.","code":""},{"path":"/articles/sdcMicro.html","id":"csv-file--csv--txt","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"CSV-file (.csv, .txt)","title":"Using the interactive GUI - sdcApp","text":"users can opt upload text file variables separated characters. Typically data exported software Excel. crucial users indicate data file variable names first row variables separated. point, users option character vectors automatically converted factor variables contain missing-values (‘NA’) dropped data read GUI. columns read character (text), character \" ignored quoting character imported. clicking Browse button user needs select txt csv-file disk wants upload. detailed explanation options, please see chapter additional options.","code":""},{"path":"/articles/sdcMicro.html","id":"stata-file--dta","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"STATA-file (.dta)","title":"Using the interactive GUI - sdcApp","text":"users can opt upload file exported Stata. Users can change options character vectors automatically converted factors variables contain missing-values (‘NA’) dropped. clicking Browse button user needs select dta-file disk wants upload. detailed explanation options, please see chapter additional options.","code":""},{"path":"/articles/sdcMicro.html","id":"additional_options","dir":"Articles","previous_headings":"Microdata > Upload microdata","what":"Additional options","title":"Using the interactive GUI - sdcApp","text":"now describe choices users can make uploading data. Convert string variables (character vectors) factor variables? option available existing data frame current workspace selected/used. selection, radio button input two possible choices, TRUE (default value) FALSE. TRUE, variables read R character-vectors automatically converted factor variable. distinct value variable factor level imported dataset. FALSE, conversion applied. Drop variables missing values (NA)? option available existing data frame current workspace selected/used. selection, radio button input two possible choices, TRUE (default value) FALSE. TRUE, variables NA-values read removed data set. option set FALSE, variables () dropped. first row contain variable names? option available text/csv file imported. radio button input two possible choices, TRUE (default value) FALSE. TRUE, first row imported data set interpreted variable names, FALSE, variable names automatically generated. Select field separator (Comma, Semicolon, Tab) option available text/csv file imported. radio button input three possible choices, Comma (default value) Semicolon Tab defining value used separate variables input file. Comma: \",\" character used separator Semicolon: ; character used separator Tab: tabulators (\\t) used separators Select File Input: option available existing data frame current workspace used. selection, clicking Browse button allows user select file local hard drive. feature files accepted file ending (e.g .dta files Stata .rdata data exported R imported) shown. reduces risk, unsuitable file can selected. file selected, pushing Open button immediately uploads file GUI can process . file read system successfully, user presented resulting error message. everything works smoothly, microdata now available left sidemenu changes. user can now start anonymization process. information, please look following sections.","code":""},{"path":"/articles/sdcMicro.html","id":"modify_microdata","dir":"Articles","previous_headings":"Microdata","what":"Modify microdata","title":"Using the interactive GUI - sdcApp","text":"data uploaded, content Microdata-page changes users can select range possibilities current inputdata. data available, button Reset inputdata available bottom sidebar. Clicking button allows reset delete current input data. However, clicking button immediately reset problem. Instead, pop-window comes user confirm reset current microdata. action performed, user click button labelled Delete current inputdata. user clicks Dismiss, inputdata remains unchanged. button, list action buttons shown. Clicking buttons changes content main column. currently active selection different color currently inactive buttons. default, first entry (“Display Microdata”) selected. entries can selected clicking desired text directly button. now continue describe features can selected.","code":""},{"path":"/articles/sdcMicro.html","id":"display_microdata","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Display microdata","title":"Using the interactive GUI - sdcApp","text":"default selection, microdata successfully imported uploaded described uploading microdata. page gives short overview microdata. shows name imported file well number observations number variables available. information, user presented interactive table containing current microdata. variables can sorted clicking small arrows next variable names top table. Also top, dropdown field users can select many observations displayed one page. bottom table users can find dynamic pagination field allows users jump given “page” current table.","code":""},{"path":"/articles/sdcMicro.html","id":"explore_inputvars","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Explore variables","title":"Using the interactive GUI - sdcApp","text":"page users possibility explore variables current microdata. Users choose variable selecting variable dropdown field label “Choose variable”. default value input field first variable dataset. Optionally, second variable can selected choosing variable dropdown field labelled “Choose second variable (optional)” default value “None”. variables selected, graph additional information presented . specific output depends number variable(s) chosen well type: One variable selected: selected variable type factor character: case, barplot factor levels shown. , table showing factor level level , often occurs corresponding percentage shown. , number percentage missing values shown. selected variable type integer numeric: case, histogram selected variable shown. graph, table showing main summary statistics (Minimum, Mean, Median, Maximum 5%-, 25%-, 75%- 95%-quantiles) shown. table, number percentage missing values displayed. Two variables selected: variables type integer numeric: selected variables continuous (numeric integer), scatterplot two variables displayed. , correlation coefficient (Pearson) using pairwise complete observations two variables listed. , two tables shown. table shows main summary statistics one selected variables. information included tables (case one continuous variable selected) Minimum, Mean, Median, Maximum 5%-, 25%-, 75%- 95%-quantiles variable. Finally, information number percentage missing values shown variables. variables type factor character: case, mosaicplot selected variables shown well table, containing cross-tabulation levels (unique values case character input) shows number percentages combination codes given two selected variables including combinations NA. table, number percentage missing values displayed selected variables. One variables type factor character, variable type integer numeric: case, grouped boxplot continous variable (type integer numeric) shown level unique value non-continuous variable. , level non-continuous variable, summary statistics already described continuous variable shown. Finally, number percentage missing values displayed selected variables.","code":""},{"path":"/articles/sdcMicro.html","id":"reset_inputvars","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Reset variables","title":"Using the interactive GUI - sdcApp","text":"microdata set uploaded, backup unmodified dataset saved internally. allows users reset modifications variables inputdata file can done page. , user needs select one variables select field default empty. variables reverted selected, one click outside dropdown field close input. Afterwards, action button labelled Reset selected variable(s) original state occurs input field. Clicking button resets selected variables original state. case want remove already selected variables, can just click variable names input field either press “backspace”- “delete”” keys keyboard. case, pressing action button, GUI changes “Explore variables” page first selected variable(s) shown.","code":""},{"path":"/articles/sdcMicro.html","id":"use-subset-of-microdata","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Use subset of microdata","title":"Using the interactive GUI - sdcApp","text":"page possible decrease size input data. especially useful one wants test different parameter settings run complete dataset take long. reduce size input dataset, user select method using drop field Select method restrict number records select value slider Set 'n' selected method. following choices possible reduce dataset, range values can chosen slider depends choice. n percent data: n% data randomly chosen. slider ranges case 1 100. first n observations: data set decreased using first n% records. slider ranges case 1 total number records. every n-th observation: choice allows create simple, systematic sample input data selecting every nth observation. slider ranges case 1 max 500. exactly n randomly drawn observations: data set decreased taking random sample n% records. slider ranges case 1 total number records. desired selections applied, pushing button Create subset performs actual sub-subsampling. micro data set reduced, user taken Display microdata page reduced dataset can analyzed.","code":""},{"path":"/articles/sdcMicro.html","id":"convert-numeric-to-factor","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Convert numeric to factor","title":"Using the interactive GUI - sdcApp","text":"page allows convert numerical variables (numeric integer) factors. Users can choose range possibilites factor variable generated, ranging automatic conversion complete manual control. default, two input fields available. left hand side dropdown select field termed Choose numeric variables user can select list numeric variables input data set. Next element, two radio buttons labelled Use custom breaks? two options, (default) yes. selected input least one numeric variable clicked select input Choose numeric variable(s), button termed Convert factor(s) occurs. Pressing button converts selected numerical variables factors. Afterwards, user taken explore variables page first selected variable(s) shown. , however, radio buttons Use custom breaks? set yes, layout page changes. case, user able adjust way factor variable generated additional UI elements appear. first visible change , one numeric variable can now selected. Now, list radio buttons labelled Choose numeric variable shown available variables printed . Selecting specific variable works clicking either variable name radio button . next choice user make select input field termed Select algorithm equidistant (default), logEqui, equalAmount manual possible values. remaining user interface first three choices Select algorithm input slightly different manual selected. first case, numeric input field labelled Specify number intervals shown second case text input field labelled Specify custom breaks occurs right next select input field algorithm can selected. either equidistant, logEqui equalAmount selected, number specified numeric input field defines number levels new factor . difference methods : equidistant: uses breakpoints generate intervals equal length. number records interval might differ. logEqui: uses breakpoints generate intervals equal length based log transformation data. number records interval might differ. equalAmount: uses breakpoints group/interval number records. intervals might different length. Selecting manual allows user set breakpoints manually. Note: make sure values included specified intervals. syntax text field way breakpoints (numbers) entered separated colon (,). sequence numbers interpreted follows: values greater value colon values smaller equal value colon grouped together. non-matched values NA. example, entering 1,3,5,9 create factor numeric variable grouping together values x greater 1 less equal 3 first group, values greater 3 less equal 5 second group values greater 5 less equal 9 third group. values x less equal 1 greater equal 10 NA. However, -Inf Inf may entered first last value avoid generation NAs. Already existing missing values numeric input variable stay NA recoding. common choices Select algorithm button labelled Convert factor appears information entered correct. Also, bottom page table two columns shown. first columns shows unique values selected variable second column shows number occurances value. pressing action button, selected numeric variable recoded according parameters chosen. recode done, current view changes explore variable page recoded factor variable already selected.","code":""},{"path":"/articles/sdcMicro.html","id":"convert-variables-to-numeric","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Convert variables to numeric","title":"Using the interactive GUI - sdcApp","text":"page, variables type factor character input data can converted numeric variables. variables present microdata, user shown information conversion possible. Otherwise, user can select one variables input field labelled Choose variable(s). least one variable selected, button called Recode numeric occurs variable selection input. clicking button, conversion done view changes explore variable page first recoded variables selected. variables type factor, factor levels converted numeric values. Factor levels converted numeric values replaced missing values (NA). noted however - also shown GUI - , variables type character, feature used care internally, function .numeric() used perform conversion. Thus, resulting numeric vector contains underlying numeric (integer) representation input vector.","code":""},{"path":"/articles/sdcMicro.html","id":"recode_factors_inputdata","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Modify factor variable","title":"Using the interactive GUI - sdcApp","text":"option selected left hand sidebar, possible modify existing factor variables. common use case combine one levels factor. use case rename single factor levels. order proceed, user must first select existing factor variable select input labelled Choose factor variable. box, another input termed Select Levels recode/combine. input, levels active factor variable can choosen clicking selectable. Already selected levels may removed clicking mouse pressing either “backspace”- “delete” keys keyboard. least one factor level selected, text input called New label recoded values well radio input labelled Add missing values new factor level? appear. default, textbox containing name new level computed joining selected factor levels together using character _ separator. clicking text field, users can also start enter custom name new factor level. one level selected Select Levels recode/combine, entering value different default value input leads renaming specific factor level. radio button input labelled Add missing values new factor level? set default. changed yes, missing (NA) values factor added new level. input fields button labelled Group factor levels barplot showing absolute number current levels factors shown. Pressing action button results updating factor. case, page refreshes plot adjusts changes applied.","code":""},{"path":"/articles/sdcMicro.html","id":"create_strata_var","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Create a stratification variable","title":"Using the interactive GUI - sdcApp","text":"page, user able generate new variable based two ore variables current micro data. reason several anonymization techiques explained can applied independently subgroups input data given values called stratification variable. page allows create variable convinient way. user specify least two variables select field labelled Select variables generate stratification variable. field, variables available micro data set can possibly selected. two variables selected, two new inputs appear. first one appears right next variable selection field called Specify variable name stratification variable. field, user can enter desired name new variable. default, variable name listed consists selected variables chained together using _ separator. clicking field, user can enter customized variable name. current value text input field name already existing variable, button termed Create stratification variable appears . Clicking button adds new variable input data set. variable generated factor variable values contributing variables also chained together using _ separator. pressing button, page changes explore variable page newly generated variable already selected.","code":""},{"path":"/articles/sdcMicro.html","id":"set-specific-values-to-na","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Set specific values to NA","title":"Using the interactive GUI - sdcApp","text":"section, users can set values variables missing (NA). first step choose one two possible methods choosing either record ID (default selection) value radio button input labelled want select cells recoded missing? top page. record ID selected, user can set values one variables specific record missing. therefore needs select least one variable input called Select variable. least one variable selected, new input field occurs. input called Select record ID, number 1 number records can specified. selection refers row selected variables values set NA. user can change index either clicking small arrows right hand side input field allow increment decrement current number one. alternative, also possible directly enter number field. case value selected, choices slightly different. variable selection possible select one variable. difference input field user can select number. Instead, dropdown field user can select one distinct values selected variable. idea records values selected variable set NA. remaining part page identical choices method. inputs, interactive table showing current microdata shown. table can filtered navigated exactly way already described . selections valid, button labelled Set values NA shown table. Pressing button sets correspondig values NA micro data. Afterwards, page changes Exlore variables page shown. page, (first) selected variable values set missing pre-selected analyzed.","code":""},{"path":"/articles/sdcMicro.html","id":"hierarchical-data","dir":"Articles","previous_headings":"Microdata > Modify microdata","what":"Hierarchical data","title":"Using the interactive GUI - sdcApp","text":"page, users find functionality deal hierarchical data. idea follows. Often data contain clusters, eg. individual within households students within classes. case, often case variables data set relevant cluster-level others relevant individual level. also often case one wants apply different anonymization strategies different levels data. GUI offers way deal situation following way. radio buttons labelled want ? allow choose Prepare file anonymization household level variables (default) Merge anonymized household level file full dataset. former case, uploaded micro data set can restricted variables relevant cluster-level . done, user may anonymize household file can finally export anonymized file disk described . latter case, already exported, anonymized household-level file can imported GUI merged individual level file. anonymization process can started creating problem instance using individual-level variables keys. Finally, user able export anonymized file safe levels. now describe possibilities section: Prepare file anonymization household level variables case goal prepare household-level file, user first needs select identifier households clusters. select input termed Select household id variable initially empty. variable selected list variables available input data, additional select field called Please select variables refer households individuals appears next . input, one variables relevant households (means, variables feature contain values household) can selected. least one additional variable chosen, button labelled Create household-input data shown . Clicking button restricts current data set selected variables one (first) record value cluster identificator. Finally, page refreshes number observations variables updated, household level data set shown. Additionally, names variables well type presented tabular format. Merge anonymized household level file full dataset case, goal merge already anonymized household level file currently available data file. procedure performed two steps. first step, user needs click Browse button select anonymized file merged. Open button clicked file uploaded immediately. note possible upload data exported .rdata-files described . pressing button, file uploaded system. error occured (e.g selected data file contain data frame data set contain variables overlap current inputdata) error message shown user may upload different file disk. file successfully uploaded, layout page changes . button labelled Reset uploaded household data appears allows reset household level data makes possible upload yet another file. Additionally, dropdown field labelled Select variable containing household ids appears. input, user needs select variable list variables available datasets containing identification variable. selected variable finally used merge datasets. selection, button termed Merge household- individual level data shown. clicking button, merge performed. everything went well, page refreshes number observations variables updated micro data file shown. Additionally, names variables well type presented tabular format.","code":""},{"path":"/articles/sdcMicro.html","id":"anonymize","dir":"Articles","previous_headings":"","what":"Anonymize","title":"Using the interactive GUI - sdcApp","text":"page relevant creating sdc problem (class sdcMicroObj) can anonymized within GUI. user navigates page inputdata uploaded, page shows two options. user can either click button labelled Upload microdata button labelled Upload previously saved sdc problem. first case user taken Microdata page microdata can uploaded described , latter case user taken Undo page already exported problem instance can uploaded. microdata available problem defined, user can define new sdc problem instance. Details can done given chapter Set problem. problem instance defined, page layout changes user can either view modify problem instance described apply anonymization techniques categorical continuous variables. Details specific methods can applied given chapter Anonymization methods.","code":""},{"path":"/articles/sdcMicro.html","id":"setup_sdcproblem","dir":"Articles","previous_headings":"Anonymize","what":"Set up a problem","title":"Using the interactive GUI - sdcApp","text":"microdata already uploaded, first step anonymization procedure create sdc problem can done page. layout page split two parts. left hand side, user presented table choices required define new problem instance. right hand side, user given possibility explore variable. useful example, decide variables used categorical numerical key variables. discussion choice variables, user look ?createSdcObj underlying function used generate problem. now explain detail proceed. top right hand sidebar user shown select input field labelled Explore variables variables current micro data set can selected. default first variable data set chosen. select input graph depending variable type shown. selected variable either type factor, character integer (less equal 10 unique values), barplot shown. variables type numeric integer 10 unique values, histogram showing distribution plotted. plot, number unique values including missing (NA) shown. Finally, information even information selected variable shown. case continuous variable, typical main summary statistics (Minimum, Mean, Median, Maximum 5%-, 25%-, 75%- 95%-quantiles) presented factor variables (well integer variables 10 unique values), number occurences possible level shown. left hand side, interactive table row variable available microdata total 9 columns shown. table allows user specify relevant variables sdc problem. Also, shows additional information variable. variables : Variable name: variable name Type: class variable according class() : variable uses either categorical continuous key variable Cat.: variable used categorical key variable Cont.: variable used continuous key variable Weight: variable contains sampling weights () Hierarchical identifier: variable identifies clusters (example households) PRAM: variables suitable postrandomized Delete: variables excluded setting sdc problem. Number levels: number unique values variable Number missing: number missing values variable columns PRAM, Weight, Hierarchical identifier Delete, checkboxes present table. checkboxes default selected. checkboxes can enabled clicking . can one variable selected weight variable variable holding cluster ids, multiple variables may checked column Remove Pram. table, two slider inputs shown. first one, labelled Parameter \"alpha\" relevant frequency calculation given categorical key variables contain missing (NA) values. input, values 0 1 (default setting) steps 0.01 can selected. note leaving value 1 leads results versions sdcMicro <= 4.7.0. details parameter, please look ?freqCalc. second slider, termed Parameter \"seed\" can take values -250 250 steps 1 number used set seed random number generator ensure reproducability. default, value set 0. note sliders selected, values can also increased decreased clicking (left right) keys keyboard. Whenever values either radio buttons checkboxes changed, internally checked conditions successful generation new sdc problem fulfilled. case restrictions violated, either popup window containing additional information occurs red button error message shown. user can change variable settings table. checks passed, blue button labelled Setup SDC problem appears two sliders. Clicking button creates sdc problem. Finally, page refreshes layout changes. Anonymization Methods, changes explained.","code":""},{"path":"/articles/sdcMicro.html","id":"anonymization_methods","dir":"Articles","previous_headings":"Anonymize","what":"Anonymization Methods","title":"Using the interactive GUI - sdcApp","text":"sdc problem defined described , layout page changes. now features left sidebar main content shown right side screen. left sidebar, users can choose kind anonymization options want apply. bottom sidebar, button labelled Reset SDC problem shown. Clicking button allows reset current sdc problem. However, clicking button immediately reset problem instead, popup window appears. window user confirm current problem deleted. action performed, user clicks button labelled Delete current problem. user clicks Dismiss, sdc problem remains unchanged. button, several action buttons shown organized sections Reset Problem, View/Analyze existing sdcProblem, Anonymize categorical variables Anonymize numerical variables. default, first entry Show summary View/Analyze existing sdcProblem selected made clear due different color button. content center screen dependent choices left sidebar. now continue describe possible choices View/Analyze existing sdcProblem, Anonymize categorical variables Anonymize numerical variables. case anything different Show summary selected, layout page changed . case, sidebar right hand side page appears many useful statistics current anonymization process listed : Variable selection first section, “important” variables current sdc problem listed. categorical key variables, numerical key variables () well variables defining sampling weights cluster identification (). categorical key variables, number suppressions due establishing k-anonymity also listed table. Additional parameters second block lists - also tabular format - number records data set within current sdc problem instance value paramters alpha random seed used setting current problem. k-anonymity next table shows number percentages records violating 2-, 3- 5-anonymity current sdc problem. parenthesis corresponding numbers shown initial sdc problem without anonymization procedures applied. Risk numerical key variables case variables specified numerical key variables setting sdc problem, another table showing estimated minimal maximum risk numeric key variables shown original (possibly) modified variables. information look ?dRisk. Information loss section information loss also displayed continuous key variables available current problem instance. case, values utility measures IL1s Difference Eigenvalues shown original (possibly) modified variables. information look ?dUtility. sidebar always updated whenever sdc problem instance modified case anonymization procedure applied. cases also extended, example categorical variables post randomized explained .","code":""},{"path":"/articles/sdcMicro.html","id":"view_analyze_existing_problem","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods","what":"View/Analyze existing sdcProblem","title":"Using the interactive GUI - sdcApp","text":"page allows user view current anonymization state. Show summary page, lot detailed information current problem instance shown. applying anonymization techniques, GUI often changes page easily possible check changed. Furthermore, also possible explore variables within current problem modify problem instance linking variables categorical key variables described create random identification variables described .","code":""},{"path":"/articles/sdcMicro.html","id":"show_sdc_summary","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > View/Analyze existing sdcProblem","what":"Show summary","title":"Using the interactive GUI - sdcApp","text":"page gives overview current sdc problem. information listed dynamic updated whenever operation (rather, anonymization technique) applied problem instance. summary problem divided following subsections. However, sections present time. content possible parts explained chapter. Summary dataset variable selection section, information dimension (number records, number variables) current data set active problem instance shown. Additionally, important variables sdcMicro listed. variables : Categorical key variable(s): selected categorical key variables Numerical key variable(s): continuous key variables Sampling weight: variable containing sampling weights Hierarchical identifier: variable holding household cluster identificators Deleted variable(s): variables deleted setting current problem Linked variables: variables linked categorical key variables note first entry (Categorical key variables) always visible. entries shown specified sdc problem created described . Computation time section prints current time spent computations. refers time actually spent performing anonymization steps well setting problem instance. time shown however track time spent GUI. Information categorical key variables part summary, aggregation statistics categorical key variables printed tabular format. table holds 4 columns features row categorical key variable current problem instance. columns table : Variable name: name key variable Number levels: current number categories Average frequency: mean size existing categories Frequency smallest level (>0): number records smallest category frequencies >0 last three columns, information based data set used create problem instance shown parenthesis. note NA values (missings) counted separate categories table. Risk measures categorical variables section, expected number percentage re-identifications population given current set categorical key variables taking account possibly specified sampling weights printed. Furthermore, robust measure shown listing number observations whose individual risk larger median individual risk distribution plus two times “Median Absolute Deviation”, details look ?mad. information also listed initial data set used create current sdc problem. Information k-anonymity section, table showing number percentages observations violate k-anonymity shown. table following 3 columns: k-anonimity: shows parameter k Modified data: number percentages observations violating k-anonymity current (anonymized) data Original data: number percentages observations violating k-anonymity initial data set used set problem instance. table changes example, categorical key variables recoded, k-anonymity established, postrandomization applied (described ) values based individual risk value suppressed. PRAM case, variables postrandomized, described , transition matrices shown variable post-randomized. end section, table three columns summarizing postrandomization results printed. columns : variable: variable name variable postrandomized nrChanges: absolute number value-changes. percChanges: percentage changed values variable postrandomized, row added table. Compare numVars section, table showing important statistics numerical key variables printed. However, section shown least one variable specified numerical key variable setting current problem. case shown, table following 8 columns. Variable: name numeric key variable Type: shows whether values row refer current, possibly anonmyized variable (modified) initial data used create sdc problem (orig) Min.: minimum value variable 1st Qu.: value first quantile Median: median value Mean: arithmetic mean 3rd Qu.: value third quantile Max.: maximium value variable table updated, whenever numeric anonymization technique applied least one numeric key variable. Risk measures numerical key variables part shows global risk measure based numeric key variables current initial data set. information visible least one variable specified numerical key variable setting current problem. assumtion re-identification risk based numerical key variables initially always 0% 100%. numeric key variables changed, less upper bound risk interval . Information loss section information loss (data utility) numeric key variables also visible numeric key variables available current problem instance. case, values two measures, IL1s difference eigenvalues printed current, possibly modified numerical key variables well initial data set used problem instance created. details measures, look ?dataUtility. Anonymization steps bottom page, anonymization steps applied, listed. helps user get quick overview, already done protect data. section expecially useful previously exported problem instances imported. techniques applied, information also returned.","code":""},{"path":"/articles/sdcMicro.html","id":"explore_sdc_vars","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > View/Analyze existing sdcProblem","what":"Explore variables","title":"Using the interactive GUI - sdcApp","text":"view allows users explore variables current state sdc problem. functionality exactly already described Explore variables exploration variables originally uploaded micro data set. difference analyzed variables now currently available active problem instance.","code":""},{"path":"/articles/sdcMicro.html","id":"add_ghostvars","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > View/Analyze existing sdcProblem","what":"Add linked variables","title":"Using the interactive GUI - sdcApp","text":", users can link one variables specific categorical key variable. linked variable, anonymized dataset feature suppression pattern key variable. helpful example, similar variables exist make sense add categorical key variables. order link variable key variable, one select key variable using drop-menu field labelled Select categorical key variable. Next input another ‘select input’ field variables used either categorical numerical key variables, weight- stratification variable can selected linked key variable . input field, multiple variables may selected. least one variable selected linking, button labelled Add linked variables appears bottom page. Pressing button adds link current sdc problem view refreshes Show summary page. information also displayed top page section Important variables information.","code":""},{"path":"/articles/sdcMicro.html","id":"create_new_ids","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > View/Analyze existing sdcProblem","what":"Create new IDs","title":"Using the interactive GUI - sdcApp","text":"part GUI possible create new random variable. perform task, user needs specify two inputs. first one, termed Specify name new ID variable, desired variable name new id needs entered. second input drop field, either none (default value) variable available current sdc problem may selected. case variable selected input, newly generated variable features identical (random) numbers equal values selected variable. inputs chosen, button labelled Add new ID variable appears bottom page. Pressing button creates new variable adds current sdc problem. view finally updates Show summary page shown dimension data set updated.","code":""},{"path":"/articles/sdcMicro.html","id":"anonymize_categorical","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods","what":"Anonymize categorical variables","title":"Using the interactive GUI - sdcApp","text":"Anonymize categorical variables selected want ? left sidebar screen, options Recoding, k-Anonymity, PRAM (simple), PRAM (expert) Supress values high risk available radio button list termed Choose Method described .","code":""},{"path":"/articles/sdcMicro.html","id":"recoding_sdcproblem","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize categorical variables","what":"Recoding","title":"Using the interactive GUI - sdcApp","text":"page allows recode reduce level detail selected categorical key variables. functionality already described recoding factor variables original microsdcdata file. two slight differences, though. first one variables can selected input field termed Choose factor variable restricted categorical key variables chosen sdc problem created, described . difference recoding done, page refreshes content right sidebar recalculated. especially affects number observations violating k-anonymity shown block k-anonymity.","code":""},{"path":"/articles/sdcMicro.html","id":"kanon","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize categorical variables","what":"k-Anonymity","title":"Using the interactive GUI - sdcApp","text":"section allows generate k-anonymity categorical key vars (independently) within subsets key variables. done setting specific values categorical key variables NA. Thus, method parameter alpha specified creating sdc problem great importance. discussion parameter, reader advised read help pages ?freqCalc. feature algorithm users may enter preference specifying order variables required suppressions take place. Furthermore possible apply method independently groups defined stratification variable. also first choice user make page. select input field labelled want apply method group defined selected variable? possible select variable set variables type factor, integer character excluding variables specified categorical key variables. next input field termed want modify importance key variables suppression?. radio buttons two possible choices, (default) Yes. selected, importance variables internally calculated way unique values key variable , likely suppressions variable done. Yes selected clicking radio button, number additional select input fields appear . fields dynamically labelled Select importance key variable \"{var}\" {var} placeholder categorical key variable. select inputs, number 1 n (number key variables) selected. key variable importance 1 typically least additional suppressed cells variable importance equals n likely largest number introduced missing values. Typically, key variables used determine k-anonymity reached. number key variables large, sometimes helpful establish k-anonymity within subsets available key variables. radio buttons labelled Apply k-anonymity subsets key variables? set (default choice), key variables used determine k-anonymity. case, user needs specify required parameter k using slider input termed Please specify k-anonymity parameter. slider default value 2 can take values 2 50. choice Apply k-anonymity subsets key variables? Yes, additional elements appear . Specifically, values 1 number key variables, two additional inputs appear next . first one radio button input field labelled Apply k-anon subsets {n} key variables? default set . set yes, k-anonymity established combinations categorical key variables containing n variables. second parameter slider input termed k-Anonymity-parameter {n} combs, allows set parameter k specific combination. details establishing k-anonymity combination key variables, please look ?kAnon. settings applied, button labelled Establish k-anonymity shown bottom page. Clicking button starts process establish k-anonymity might take long time. bottom right screen, progress bar occurs showing process running. finished, page refreshes right sidebar updated. Users especially look first table, number suppressions within key variable shown. Also, section k-anonymity updated.","code":""},{"path":"/articles/sdcMicro.html","id":"pram_simple","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize categorical variables","what":"PRAM (simple)","title":"Using the interactive GUI - sdcApp","text":"page offers possibility randomize one variables based invariant probability transition matrix. apply method current sdc problem, user choose least one variable input field labelled Select variable(s) PRAM. default, variable selected field. user can select input set variables previously declared suitable postrandomization. PRAM variables declared setting problem instance Anonymize tab. least one variable pramed selected, also possible select variable used stratification, field named Postrandomize within different groups (stratification)?. default value stratification changed, post randomization selected variables performed independently unique value selected variable. field, one variable may selected. noted, stratification variables can created setting sdc problem instance described . create transition matrix, two parameters (pd alpha) need provided using slider inputs. pd refers minimum diagonal values (internally) generated transition matrix. higher value chosen, likely value stays category remains unchanged. Parameter alpha allows add perturbation calculated transition matrix. lower number , less perturbed matrix get. default, value Choose value 'pd' 0.8 value Choose value 'alpha' 0.5. details, look ?pram. selecting least one PRAM variable, button labelled Postrandomize appears bottom page. Pressing button performs postrandomization. Afterwards, page refreshes right sidebar section called PRAM summary either appears extended. part sidebar, variable postrandomized number percentages value changes listed.","code":""},{"path":"/articles/sdcMicro.html","id":"pram_expert","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize categorical variables","what":"PRAM (expert)","title":"Using the interactive GUI - sdcApp","text":"page offers possibility randomize variable using freely specified transition matrix. apply method current sdc problem, user choose one variable input field labelled Select variable PRAM default first possible variable selected. user can choose input variable specified possible variable postrandomization initialization sdc problem yet pramed current sdc problem. selecting least one variable, possible select variable used stratification. , input field Postrandomize within different groups (stratification)?, default value stratification changed, post randomization selected variables performed independently unique value selected variable. select field, one variable may selected. noted, stratification variables can created setting sdc problem instance described . input fields, interactive table shown. table edited user way can used transition matrix. given row, numbers specify percentages current value (actual row name) changes value specified respective colum name. default, diagonal table, values 100. means probability value change 100%. user can change table way sum values row equals 100. case, red button appears table giving instant feedback table needs edited. Values specific cells may changed clicking cell entering new values. transition matrix valid (eg. values rows sum 100), button labelled Postrandomize appears bottom page. Pressing button performs postrandomization. Afterwards, page refreshes right sidebar section called PRAM summary either appears extended. part sidebar, variable postrandomized number percentages value changes listed.","code":""},{"path":"/articles/sdcMicro.html","id":"supp_highrisk","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize categorical variables","what":"Supress values with high risks","title":"Using the interactive GUI - sdcApp","text":"page user can set values -risky records NA categorical key variable. , user needs select categorical key variable select input field labelled Select key variable suppression. default, first key variable already selected. next step set appropriate threshold value used identify “risky” records. records defined individual re-identification risk larger selected threshold. threshold may changed updating slider input termed Threshold individual risk. range slider starts 0 maximum value depends current sdc problem. input fields, histogram showing distribution individual risk values plotted. graph, vertical black line representing current value threshold also shown. Finally button labelled Suppress {nr} values high risk variable {var}. labelling button dynamic. shows number records set missing selected variable current choice threshold. button pressed, records selected variable whose individual risks threshold set NA. view finally updates Show summary page shown measures recalculated.","code":""},{"path":"/articles/sdcMicro.html","id":"anonymize_numerical","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods","what":"Anonymize numerical variables","title":"Using the interactive GUI - sdcApp","text":"Anonymize numerical variables selected want ? left sidebar screen Anonymize page, options Top/bottom coding, Microaggregation, Adding Noise Rank Swapping become available radio button list termed Choose Method. methods described subsequent chapters. note however first choice (Top/bottom coding) always available. remaining choices visible numeric key variables specified creating sdc problem described .","code":""},{"path":"/articles/sdcMicro.html","id":"top_bot_coding","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize numerical variables","what":"Top-/Bottom Coding","title":"Using the interactive GUI - sdcApp","text":"page allows replace values (“Top coding”) (“Bottom coding”) threshold custom number. page allows recode numeric key variables, numeric variables currently available. first step choose variable select input labelled Select variable. default, first numeric variable current sdc problem instance selected. Next field radio buttons labelled Apply top/bottom coding? default value top chosen. input fields, user required enter two numbers input fields labelled Threshold value Replacement Value. numbers relate threshold (larger case top coding less case bottom-coding) first input number replace current values selected variable. help users find suitable thresholds, boxplot showing distribution currently selected variable shown inputs. required input - especially threshold replacement values - set found valid, additional elements appear input fields boxplot. first additional element text stating many values replaced well corresponding percentage. information, button labeled Apply top/bottom coding appears. button pressed, values replaced according current setting page updates additional elements disappearing boxplot updated . Also, right sidebar updated. case recoded variable numeric key variable, values sections Risk numerical key variables Information loss may change.","code":""},{"path":"/articles/sdcMicro.html","id":"microaggregation","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize numerical variables","what":"Microaggregation","title":"Using the interactive GUI - sdcApp","text":"page possible apply microaggregation numeric (key) variables current sdc problem. user choice among total 12 different methods. details specific methods, user referred manual ?microaggregation. layout page changes depending specific method selected. Microaggregation methods can broadly categorized two categories, cluster-based non-cluster based. also first selection user can make page. Using radio buttons labelled Use cluster-based method?, choices (default) yes can selected clicking appropriate button. choice input field changes possible selections select field termed Select method shown next . Use cluster-based method? , following methods can selected: mdav rmd simple single onedims pca mcdpca pppca Use cluster-based method? yes, following choices possible: influence clustpca clustmcdpca clustpppca next choice user can make whether microaggregation performed entire data set independently groups defined unique values stratification variable. default, value stratification pre-selected select field labelled Apply microaggregation groups (stratification)?. possible variables include non-numeric variables available sdc problem. mention stratification variables can created setting sdc problem instance described . Finally, two additional input fields appear microaggregation methods. first one, labeled Aggregation-level slider input defines size groups formed. value slider default 3 ranges 1 15. input labelled Select Variables Microaggregation. input, numeric variables microaggregated can selected list numeric key variables. empty, variables used. tooltip user hovers input field also informs default numeric key variables microaggregated. specific methods, additional inputs appear . non-clusterbased methods, two additional inputs labeled Aggregation statistics Trimming-percentage shown variable selection input. input called Aggregation statistics list radio buttons choices mean (default), median, trim onestep. trim selected, trimmed mean using value slider input labeled Trimming-percentage calculated within group value used replace individual values. additional elements appear methods simple, onedims, pca, mcdpca pppca. method simple third additional element termed Select variable sorting appears. drop list, user select variable used sort data set computing required groups. details, see ?microaggregation. case clusterbased methods used, layout possible methods. additional element appear variable selection input Select variables microaggregation. Users can select - described - values AggregationsStatistics relevant Trimming-percentage trim selected aggregation measure. Furthermore, users can select desired cluster method radio buttons input labeled Clustermethod choices clara (default), pam, kmeans, cmeans bclust possible. also possible specify data transformed computing clusters. radio buttons list labeled Transformation, choices none (default), log boxcox possible. Finally, desired number clusters formed needs specified. number can set slider input labeled Number clusters. default set 3. options set, button labeled Perform Microaggregation shown bottom page. Clicking button performs microaggregation selected variables according options set. Since computation might take long time, bottom right screen progress bar appears, showing process running. finished, page updates Show summary page shown. page, section Compare numVars either updated added, sections Information risk numerical key variables, Information loss Anonymization steps updated display current values statistics.","code":""},{"path":"/articles/sdcMicro.html","id":"add_noise","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize numerical variables","what":"Adding Noise","title":"Using the interactive GUI - sdcApp","text":"section possible perturb numerical key variables adding stochastic noise. first option select numerical key variables select input labeled Select variables. input field left empty (default), noise added numerical key variables. Next field, users can select desired algorithm select input termed Select algorithm. choices : additive (default value) correlated2 restr ROMM outdect correlated note last method (correlated) available least two numerical key variables specified current problem instance. details methods, please refer section ?addNoise main page. two input fields, slider input shown. input dynamically labeled depending choice method. methods, however, slider used enter amount perturbation used. Since parametrization different methods different, slider different default values different ranges depending choice method. , refer ?addNoise details. options set, button labeled Add noise shown bottom page. Clicking button adds noise selected variables according options set. Since computation might take time, bottom right screen progress bar occurs showing process running. finished, page updates Show summary page shown. page, section Compare numVars either updated added, sections Information risk numerical key variables, Information loss Anonymization steps updated display current values statistics.","code":""},{"path":"/articles/sdcMicro.html","id":"rank_swapping","dir":"Articles","previous_headings":"Anonymize > Anonymization Methods > Anonymize numerical variables","what":"Rank Swapping","title":"Using the interactive GUI - sdcApp","text":"page, user can apply rank swapping numerical key variables. complete description parameters, please see corresponding main page sdcMicro, ?rankSwap. total 6 inputs can set. first input, labeled Select variables allows select numerical key variables swapping. select field empty (default), numerical key variables used. remaining inputs slider inputs defining required parameters algorithm described rankSwap. sliders Percentage lowest values grouped together rank swapping Percentage largest values grouped together rank swapping refer top- bottom- percentages grouped together method applied. sliders default value 0 (minimum) can take values 25. sliders Subset-mean preservation factor, Multivariate preservation factor Rank range percentage total sample size. allow fine-tune algorihm. first slider refers argument K0, second argument R0 third slider argument P rankSwap(). default values sliders equal default values function can changed within reasonable ranges. details impact parameters, please see ?rankSwap. options set, button labeled Apply rank swapping appears bottom page. Clicking button applies algorithm selected variables according options set. Since computation might take time, bottom right screen progress bar appears, showing process running. process complete, page updates Show summary page shown. page, section Compare numVars either updated added, sections Information risk numerical key variables, Information loss Anonymization steps updated display current values statistics.","code":""},{"path":"/articles/sdcMicro.html","id":"risk_utility","dir":"Articles","previous_headings":"","what":"Risk/Utility","title":"Using the interactive GUI - sdcApp","text":"tab possible find current values various risk measures based either categorical numerical key variables active sdc problem. also possible visualize tabulate variables well identify “risky” records anonymized data set. problem instance specified, two buttons appear. Clicking Create SDC problem changes view Anonymize page, new problem instance can generated. pushing button termed Upload previously saved problem, view changed Undo page, previously saved problem instance can uploaded. problem instance defined, page features three column layout. left sidebar features navigation divided three section labeled Risk measures, Visualizations Numerical risk measures. Specific measures can selected clicking action buttons shown sidebar. current selected button shown different color easy see selection active. right sidebar, two tables shown. first one, labeled Variable selection lists categorical numerical key variables. Additionally (present), also variables selected possibly postrandomized well variables holding sampling weights cluster ids shown. second table labeled Additional parameters shows number records well choice parameters random seed alpha used current problem specified. main content depends current choice navgigation menu. following chapters, possible selections discussed.","code":""},{"path":"/articles/sdcMicro.html","id":"res_cat","dir":"Articles","previous_headings":"Risk/Utility","what":"Risk measures","title":"Using the interactive GUI - sdcApp","text":"section, possible view current values based categorical key variables, identify risky observations compare plots individual re-identification risks original anonymized micro data described . Also, users may calculate suda2 l-diversity risk measures.","code":""},{"path":"/articles/sdcMicro.html","id":"cat_risk_info","dir":"Articles","previous_headings":"Risk/Utility > Risk measures","what":"Information of risk","title":"Using the interactive GUI - sdcApp","text":", users can either obtain information various risk measures based categorical key variables; identify risky records; visualize individual re-identification risks. select information view, user needs either select Risk measures (default value), Risky observations Plot risks radio button list labeled kind results want show?. Risk Measures , number percentages observations higher indidvidual re-identification risk main part records shown initial well anonymized data. individual re-identification risk computed based selected categorical key variables, reflects frequencies keys data individual sampling weights. record said re-identification risk different main part data personal re-identification risk either larger median + two times Median Absolute Deviation distribution individual risks (robust measure) deemed large. , setting choosen 0.1 (10%). Also shown number (corresponding percentages) observations expected re-identified. information shown initial dataset well anonymized data set comparisons can easily done. case cluster-variable specified setup problem instance, expected number re-identifications also shown cluster (e.g persons living households) information taken account well. Risky observations page allows filter records anonymized data set, depending threshold individual re-identification risk. , user can select specific threshold moving slider input labeled Minimum risk shown table. slider ranges 0 (default value) maximum risk-value currently available anonymized data set. default value changed, observations marked “risky” re-identification risk default larger 0. slider, number percentages observations individual re-identification risks larger currently specified threshold shown. , table containing categorical key variables, numbers fk, Fk individual risk shown observations marked “risky”. value threshold changed, number risky observations decrease. Plot risks page, two plots presented. first histogram shows distribution individual re-identification risks anonymized data set, plot shows information based original data set used problem instance created.","code":""},{"path":"/articles/sdcMicro.html","id":"suda2","dir":"Articles","previous_headings":"Risk/Utility > Risk measures","what":"Suda2 risk measure","title":"Using the interactive GUI - sdcApp","text":"page, users can apply SUDA algorithm. algorithm can used search Minimum Sample Uniques (MSU) data given current set key variables. algorithm looks records unique sample (sample uniques), checks sample uniques also special uniques. Special uniques defined records keys also subset selected key variables unique sample. See help files information SUDA scores. note algorithm can applied current problem instance features three categorical key variables. requirement fulfilled, information shown user. Else, user needs choose value parameter disFraction? sampling fraction simple random sampling common sampling fraction stratified sampling used within algorithm. default, value set 0.01 can changed modifying slider labeled Specify sampling fraction stratified sampling. pressing button termed Calculate suda2-scores, actual computation performed. computation complete, layout page changes. top page button labeled Reset choose different sampling fraction parameter. Pressing button resets results allows recompute suda2 scores using different value parameter disFraction. button, two tables shown. first table summarizes suda2 scores obtained. shows 0 8 intervals number records suda2 scores value within specific interval. second table shows categorical key variable much total risk contributed variables. amount shown second column (contribution) corresponding key variable listed column variable.","code":""},{"path":"/articles/sdcMicro.html","id":"ldiv","dir":"Articles","previous_headings":"Risk/Utility > Risk measures","what":"l-Diversity risk measure","title":"Using the interactive GUI - sdcApp","text":"can compute l-diversity sensitive variables. dataset satisfies l-diversity every combination categorical key variables least l different values sensitive variables. statistics refer value l record. calculate risk measure, user needs first select least one sensitive variable. can done input field Select one sensitive variables variables except categorical key variables can selected. choice set value l-diversity constant can done using slider named Select value recursive constant. constant used determine record unsafe. calculated value l-diversity record (specific key) less constant, said violate l-diversity. parameters set, button labeled Calculate l-diversity risk measure appears . Pressing button forces calculation measure using selected sensible variables constant. calculation finished, content page changes. top page, button named Reset choose different input parameters shown. Pressing button resets results allows specify parameters. , table containing selected sensible variable 5-number summary calculated l-diversity measure. , records violate l-diversity based choice recursive constant displayed interactive table. records safe, table shown.","code":""},{"path":"/articles/sdcMicro.html","id":"res_vis","dir":"Articles","previous_headings":"Risk/Utility","what":"Visualizations","title":"Using the interactive GUI - sdcApp","text":"section possible either compare current key variables original anonymized dataset graphically tabular format. also possible view measures information loss based recoding categorical key variables show number observations violate k-anonymity arbitrary values k.","code":""},{"path":"/articles/sdcMicro.html","id":"res_vis_plot","dir":"Articles","previous_headings":"Risk/Utility > Visualizations","what":"Barplot/Mosaicplot","title":"Using the interactive GUI - sdcApp","text":"page possible graphically compare key variables anonymization. select input labeled Variable 1, first categorical key variable already pre-selected value second input field Variable 2 default value none. one variable specified, users presented two graphs inputs. First, see barplot original data problem instance created. , another barplot showing anonymized variable shown. value Variable 2 different none, two graphs change. case mosaicplot two selected variables shown original anonymized variables.","code":""},{"path":"/articles/sdcMicro.html","id":"res_vis_tabulations","dir":"Articles","previous_headings":"Risk/Utility > Visualizations","what":"Tabulations","title":"Using the interactive GUI - sdcApp","text":"part interface possible compare tabulations categorical key variables anonymization. page built identically Barplot/Mosaicplot page. difference graphs tables displayed input fields relevant variables can selected. Also, tables shown next allow easier comparison less scrolling.","code":""},{"path":"/articles/sdcMicro.html","id":"res_vis_infoloss_recoding","dir":"Articles","previous_headings":"Risk/Utility > Visualizations","what":"Information loss","title":"Using the interactive GUI - sdcApp","text":"Recoding categorical key variables combining levels leads information loss. section possible compare key variable, effects recoding. Thus, table containing following columns categorical key variable shown: keyVar: name categorical key variable nrCategories.orig: number categories original variable nrCategories.mod: number categories anonymized variable mean.size.orig: mean number elements category original variable mean.size.mod: mean number elements category anonymized variable min.size.orig: size smallest category original variable min.size.mod: size smallest category anonymized variable table interactive case many key variables, can sorted clicking small arrow signs shown next column names.","code":""},{"path":"/articles/sdcMicro.html","id":"res_vis_violating_kanon","dir":"Articles","previous_headings":"Risk/Utility > Visualizations","what":"Obs violating k-Anon","title":"Using the interactive GUI - sdcApp","text":"page possible find many records anonymized dataset violate k-anonymity different choices k. slider input labeled Select value 'k' can take values 1 50. Dragging slider mouse changing value slider arrow-keys keyboard leads recalculation number percentage observations violate k-anonymity current choice k. information printed screen slider. Furthermore, table listing observations dataset violate k-anonymity printed. observations, interactive table contains categorical key variables. can browse records violate k-anonymity selected level k. categorical key variables shown well risk (individual risk), fk (frequency particular combination key variables record sample) Fk (estimated frequency combination key variables record population, taking sampling weights account) shown.","code":""},{"path":"/articles/sdcMicro.html","id":"res_numrisk","dir":"Articles","previous_headings":"Risk/Utility","what":"Numerical risk measures","title":"Using the interactive GUI - sdcApp","text":"section provides information important summary statistics numerical key variables original anonymized data; information current disclosure risk; well measures information loss.","code":""},{"path":"/articles/sdcMicro.html","id":"numres_summary_stats","dir":"Articles","previous_headings":"Risk/Utility > Numerical risk measures","what":"Compare summary statistics","title":"Using the interactive GUI - sdcApp","text":"section user can compare distribution numerical key variables current problem, original anonymized data. user can also calculate available measures given label categorical key variable. start, user needs select numerical key variable select input field labeled Choose numerical key variable. pre-selected numerical key variables available field. Next input another select input field labeled Optionally choose categorical variable. default value None. input field, users may select one categorical key variables. default value changed, summary statistics shown tabular form calculated level specified categorical key variable. selections made, important values printed section named Measures . values include Pearson correlation coefficient using pairwise complete information, standard deviations well interquartile range (robust measure difference 3rd 1st quantile data set) selected variable original anonymized data set. information, two tables presented. first refers original data shows Minimum, Mean, Median, Maximum well 5%-, 25%-, 75%- 95%-quantiles selected numerical key variable information shown table variable anonymized data set. case categorical variable choosen Optionally choose categorical variable, summary statistics calculated level selected categorical key variable. note since levels categorical key variables might differ beetween original anonymized data set, possible show information single table.","code":""},{"path":"/articles/sdcMicro.html","id":"numres_disclosure_risk","dir":"Articles","previous_headings":"Risk/Utility > Numerical risk measures","what":"Disclosure Risk","title":"Using the interactive GUI - sdcApp","text":"page, users can check estimated disclosure risk selected numerical key variables. measure can interpreted following way. original, unmodified data used create sdc problem, risk numeric key variables assumed 0% 100%. data anonymization techniques microaggregation adding noise applied data, less upper bound risk . users can compare estimated upper bound risk numerical key variables anonymized data compare much reduced initial value 100%. note larger deviations original data , lower upper risk bound . However, course also impact data utility measures can assessed menu button Information loss described .","code":""},{"path":"/articles/sdcMicro.html","id":"numres_infoloss","dir":"Articles","previous_headings":"Risk/Utility > Numerical risk measures","what":"Information loss","title":"Using the interactive GUI - sdcApp","text":", users can check two measures information loss, IL1s differences eigenvalues. Generally speaking, numerical key variables modified (anonymized), higher information loss values measures. also note information loss disclosure risk numerical variables always trade need balanced. Also shown page, values IL1s measure (definition provided) well differences robust eigenvalues data anonymization process.","code":""},{"path":"/articles/sdcMicro.html","id":"export_data","dir":"Articles","previous_headings":"","what":"Export Data","title":"Using the interactive GUI - sdcApp","text":"tab, GUI offers possibiliby export current state anonymized microdata current problem instance file various formats, save report summarizing anonymization process html-file disk. problem instance specified, user informed need create sdc problem first. clicking button labeled Create SDC-Problem, GUI changes Anonymize page, user can create problem. alternative, user may upload previously saved problem instance. clicking button Upload previously saved problem, user taken Undo page may upload previously saved problem instance. , however, problem instance defined, page features sidebar left hand side screen. sidebar, user can click one two buttons, Anonymized Data (default) Anonymization Report, clicking desired text button. active button finally colored differently content main page changed depending choice.","code":""},{"path":"/articles/sdcMicro.html","id":"export_anonymized_data","dir":"Articles","previous_headings":"Export Data","what":"Anonymized Data","title":"Using the interactive GUI - sdcApp","text":"page, microdata available present active sdc problem instance applied anonymization techniques described can saved disk. top page, interactive, sortable browsable table containing data written file shown. variables can sorted clicking small arrows next variable names top table. Also top, dropdown field users can select many observations displayed one page. bottom table, users find dynamic pagination field allows users jump given “page” current table. table, two sets radio buttons shown: Select file-format Using input, desired output format can specified. possible choices R-Dataset, SPSS-File, Comma-separated File, STATA-File SAS-File can selected clicking appropriate text button. Comma-separated File chosen, additional controls relevant generation output file appear . option, three additional radio button inputs available: Include variable names first row?: allows specify variable names written output file (yes) default setting () Field separator: allows specify separation character, possible choices Comma (default), Semicolon Tab Decimal separator: allows specify decimal character, possible choices Decimal point (default) Decimal comma STATA-File selected, additional radio button input shown: version STATA like export?: allows select version STATA export data , earlier versions STATA open STATA file formats later versions. Versions 8 14 available. Randomize Order Observations set radio buttons allows choose observations dataset randomized. possible choices randomization (default) Randomization record level. case former, order records remains unchanged. Randomization record level chosen, records dataset randomly changed. case household/cluster variable selected specifying current sdc problem described , two additional options possible. Randomize hierarchical identifier selected, values identification variable randomized across dataset. user opts choose Randomize hierarchical identifier within hierarchical units, values household identification variable randomly changed, order records within households/clusters also permuted. option, button labeled Save anonymized data shown. Clicking button finally creates file named exportedData_sdcMicro_{timestamp}.{filetype} using writeSafeFile() specified settings destination folder specified page (default) current working directory setting changed.","code":""},{"path":"/articles/sdcMicro.html","id":"anonymization-report","dir":"Articles","previous_headings":"Export Data","what":"Anonymization Report","title":"Using the interactive GUI - sdcApp","text":"page, anonymization report can generated saved disk. user can select type record can generated choosing radio button input. internal (detailed) (default) selected, quite long report generated resulting report external (short overview) selected just gives broad overview anonymization process. selection done, clicking button labelled Save report writes report disk. file sdcReport_internal_{timestamp}.html generated destination folder specified page (default) current working directory setting changed.","code":""},{"path":"/articles/sdcMicro.html","id":"change-stata-labels","dir":"Articles","previous_headings":"Export Data","what":"Change Stata Labels","title":"Using the interactive GUI - sdcApp","text":"uploaded microdata dta-file format, action button appears. page possibility edit variable labels interactive table. modifications internally saved added anonymized data file choose export file dta-file described .","code":""},{"path":"/articles/sdcMicro.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Using the interactive GUI - sdcApp","text":"tab, users find information able reproduce anonymization steps command line interface. inputdata uploaded Microdata page, page shows two buttons. Clicking button labelled Upload microdata sends user Microdata section GUI microdata may uploaded. Clicking button labelled Upload previously saved problem navigates Undo page problem instance saved disk can uploaded. inputdata problem instance available, left hand side page sidebar shown. sidebar, users can make choices described clicking appropriate buttons. possible View current script (default), Import previously exported sdcProblem disk Export/Save current sdcProblem disk later re-import. option however possible problem instance already successfully specified.","code":""},{"path":"/articles/sdcMicro.html","id":"viewsave-the-current-script","dir":"Articles","previous_headings":"Reproducibility","what":"View/Save the current script","title":"Using the interactive GUI - sdcApp","text":"page, users can view code applied far. code run sdcMicro directly limitation file path uploading microdata files relative fileInput()-functionality shiny gives way return path uploaded file local disk. full reproducibiliby, users may need adjust path listed current script. script output, button labelled Save Script File shown. Clicking button saves current script file exportedScript_sdcMicro_{timestamp}.R destination folder specified page (default) current working directory setting changed.","code":""},{"path":"/articles/sdcMicro.html","id":"import-a-previously-saved-sdcproblem","dir":"Articles","previous_headings":"Reproducibility","what":"Import a previously saved sdcProblem","title":"Using the interactive GUI - sdcApp","text":"page possible import previously saved problem instance GUI. user clicks Browse button, may locate previously exported problem instance. file chooser allows upload .rdata files minimize possible mistakes. file located Open button pressed, selected file loaded GUI. import successful, content GUI replaced data imported file. import successful, user presented resulting error message button labeled Try !. clicking button, possible upload different file. import problem instance works, GUI changes overview current sdc problem instance described .","code":""},{"path":"/articles/sdcMicro.html","id":"export_sdc_probleminstance","dir":"Articles","previous_headings":"Reproducibility","what":"Export/Save the current sdcProblem","title":"Using the interactive GUI - sdcApp","text":"option shown sidebar sdc problem instance generated described . button labeled Save current problem clicked, entire current problem instance (including GUI-relevant data) saved file named exportedProblem_{timestamp}.rdata destination folder specified page (default) current working directory setting changed. file successfully saved, page refreshes shows complete path recent saved file bottom page.","code":""},{"path":"/articles/sdcMicro.html","id":"undo","dir":"Articles","previous_headings":"","what":"Undo","title":"Using the interactive GUI - sdcApp","text":"page allows user undo last anonymization step. active sdc problem, user presented two options. user can either click button labeled Upload microdata case microdata uploaded GUI, button Create SDC problem case micro data available. former case page changed Microdata page latter case changed Anonymize page. cases user may also click Browse button import previously saved problem instance. note functionality always available page, independent availabilty inputdata, sdc problem instance, possibility undo anonymization steps. problem instance available, page layout changes. case possible undo anonymization step, last anonymization action applied printed top page. button termed Undo last Step. Clicking button opens pop window user confirm last anonymization step reverted. case button unintentionally pressed, clicking Dismiss closes popup window possible continue anonymization process. , button another action button labeled Save current state exactly functionality button described . problem successfully saved disk, page refreshes path exported file shown.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthias Templ. Author, maintainer. Bernhard Meindl. Author. Alexander Kowarik. Author. Johannes Gussenbauer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matthias Templ, Alexander Kowarik, Bernhard Meindl (2015). Statistical Disclosure Control Micro-Data Using R Package sdcMicro. Journal Statistical Software, 67(4), 1-36. doi:10.18637/jss.v067.i04","code":"@Article{,   title = {Statistical Disclosure Control for Micro-Data Using the {R} Package {sdcMicro}},   author = {Matthias Templ and Alexander Kowarik and Bernhard Meindl},   journal = {Journal of Statistical Software},   year = {2015},   volume = {67},   number = {4},   pages = {1--36},   doi = {10.18637/jss.v067.i04}, }"},{"path":"/index.html","id":"sdcmicro","dir":"","previous_headings":"","what":"Statistical Disclosure Control Methods for Anonymization of Data and\n    Risk Estimation","title":"Statistical Disclosure Control Methods for Anonymization of Data and\n    Risk Estimation","text":"sdcMicro R-package anonymize microdata. functionalities package also available via interactive shiny-based graphical user interface. online documentation can also found sdctools.github.io/sdcMicro.","code":""},{"path":"/reference/CASCrefmicrodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Census data set — CASCrefmicrodata","title":"Census data set — CASCrefmicrodata","text":"test data set obtained July 27, 2000 using public use Data Extraction System U.S. Bureau Census.","code":""},{"path":"/reference/CASCrefmicrodata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Census data set — CASCrefmicrodata","text":"data frame sampled year 1995 1080 observations following 13 variables. AFNLWGT Final weight (2 implied decimal places) AGI Adjusted gross income EMCONTRB Employer contribution hlth insurance FEDTAX Federal income tax liability PTOTVAL Total person income STATETAX State income tax liability TAXINC Taxable income amount POTHVAL Total persons income INTVAL Amt interest income PEARNVAL Total person earnings FICA Soc. sec. retirement payroll deduction WSALVAL Amount: Total Wage salary ERNVAL Business Farm net earnings","code":""},{"path":"/reference/CASCrefmicrodata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Census data set — CASCrefmicrodata","text":"Public use file CASC project.  information test data can found paper listed .","code":""},{"path":"/reference/CASCrefmicrodata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Census data set — CASCrefmicrodata","text":"Brand, R. Domingo-Ferrer, J. Mateo-Sanz, J.M., Reference data sets test compare SDC methods protection numerical microdata.  Unpublished. https://research.cbs.nl/casc/CASCrefmicrodata.pdf","code":""},{"path":"/reference/CASCrefmicrodata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Census data set — CASCrefmicrodata","text":"","code":"data(CASCrefmicrodata) str(CASCrefmicrodata) #> 'data.frame':\t1080 obs. of  13 variables: #>  $ AFNLWGT : int  270914 250802 299391 167656 176962 193328 178808 260530 187347 253471 ... #>  $ AGI     : int  45554 57610 56606 38993 40462 30406 8730 25938 95500 72700 ... #>  $ EMCONTRB: int  4173 2639 3315 1619 4604 3433 824 4145 5575 3894 ... #>  $ FEDTAX  : int  4621 6045 4765 3932 4349 2463 372 629 12830 8756 ... #>  $ PTOTVAL : int  45527 42008 56485 23580 21751 32167 8730 25001 95500 44850 ... #>  $ STATETAX: int  1428 1902 1903 1177 1219 830 186 693 3406 2496 ... #>  $ TAXINC  : int  30809 39234 31767 26216 28994 16420 2480 4194 65129 48915 ... #>  $ POTHVAL : int  27 1008 485 700 751 167 1030 1 6500 2850 ... #>  $ INTVAL  : int  27 808 485 700 1 50 22 1 5000 2500 ... #>  $ PEARNVAL: int  45500 41000 56000 22880 21000 32000 7700 25000 89000 42000 ... #>  $ FICA    : int  3480 3136 4284 1750 1606 2448 589 1912 5047 3213 ... #>  $ WSALVAL : int  45500 41000 56000 22880 21000 32000 7700 25000 89000 42000 ... #>  $ ERNVAL  : int  45500 41000 56000 22880 21000 32000 7000 25000 89000 42000 ..."},{"path":"/reference/EIA.html","id":null,"dir":"Reference","previous_headings":"","what":"EIA data set — EIA","title":"EIA data set — EIA","text":"Data set obtained U.S. Energy Information Authority.","code":""},{"path":"/reference/EIA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EIA data set — EIA","text":"data frame 4092 observations following 15 variables. UTILITYID UNIQUE UTILITY IDENTIFICATION NUMBER UTILNAME UTILITY NAME. factor levels 4-County Electric Power Assn Alabama Power Co Alaska Electric Appalachian Electric Coop Appalachian Power Co Arizona Public Service Co Arkansas Power & Light Co Arkansas Valley Elec Coop Corp Atlantic City Electric Company Baker Electric Coop Inc Baltimore Gas & Electric Co Bangor Hydro-Electric Co Berkeley Electric Coop Inc Black Hills Corp Blackstone Valley Electric Co Bonneville Power Admin Boston Edison Co Bountiful City Light & Power Bristol City Brookings City Brunswick Electric Member Corp Burlington City Carolina Power & Light Co Carroll Electric Coop Corp Cass County Electric Coop Inc Central Illinois Light Company Central Illinois Pub Serv Co Central Louisiana Elec Co Inc Central Maine Power Co Central Power & Light Co Central Vermont Pub Serv Corp Chattanooga City Cheyenne Light Fuel & Power Co Chugach Electric Assn Inc Cincinnati Gas & Electric Co Citizens Utilities Company City Boulder City City Clinton City Dover City Eugene City Gillette City Groton Dept Utils City Idaho Falls City Independence City Newark City Reading City Tupelo Water & Light D Clarksville City Cleveland City Cleveland Electric Illum Co Coast Electric Power Assn Cobb Electric Membership Corp Colorado River Commission Colorado Springs City Columbus Southern Power Co Commonwealth Edison Co Commonwealth Electric Co Connecticut Light & Power Co Consolidated Edison Co-NY Inc Consumers Power Co Cornhusker Public Power Dist Cuivre River Electric Coop Inc Cumberland Elec Member Corp Dakota Electric Assn Dawson County Public Pwr Dist Dayton Power & Light Company Decatur City Delaware Electric Coop Inc Delmarva Power & Light Co Detroit Edison Co Duck River Elec Member Corp Duke Power Co Duquesne Light Company East Central Electric Assn Eastern Maine Electric Coop El Paso Electric Co Electric Energy Inc Empire District Electric Co Exeter & Hampton Electric Co Fairbanks City Fayetteville Public Works Comm First Electric Coop Corp Florence City Florida Power & Light Co Florida Power Corp Fort Collins Lgt & Pwr Utility Fremont City Georgia Power Co Gibson County Elec Member Corp Golden Valley Elec Assn Inc Grand Island City Granite State Electric Co Green Mountain Power Corp Green River Electric Corp Greeneville City Gulf Power Company Gulf States Utilities Co Hasting Utilities Hawaii Electric Light Co Inc Hawaiian Electric Co Inc Henderson-Union Rural E C C Homer Electric Assn Inc Hot Springs Rural El Assn Inc Houston Lighting & Power Co Huntsville City Idaho Power Co IES Utilities Inc Illinois Power Co Indiana Michigan Power Co Indianapolis Power & Light Co Intermountain Rural Elec Assn Interstate Power Co Jackson Electric Member Corp Jersey Central Power&Light Co Joe Wheeler Elec Member Corp Johnson City City Jones-Onslow Elec Member Corp Kansas City City Kansas City Power & Light Co Kentucky Power Co Kentucky Utilities Co Ketchikan Public Utilities Kingsport Power Co Knoxville City Kodiak Electric Assn Inc Kootenai Electric Coop, Inc Lansing Board Water & Light Lenoir City City Lincoln City Long Island Lighting Co Los Angeles City Louisiana Power & Light Co Louisville Gas & Electric Co Loup River Public Power Dist Lower Valley Power & Light Inc Maine Public Service Company Massachusetts Electric Co Matanuska Electric Assn Inc Maui Electric Co Ltd McKenzie Electric Coop Inc Memphis City MidAmerican Energy Company Middle Tennessee E M C Midwest Energy, Inc Minnesota Power & Light Co Mississippi Power & Light Co Mississippi Power Co Monongahela Power Co Montana-Dakota Utilities Co Montana Power Co Moon Lake Electric Assn Inc Narragansett Electric Co Nashville City Nebraska Public Power District Nevada Power Co New Hampshire Elec Coop, Inc New Orleans Public Service Inc New York State Gas & Electric Newport Electric Corp Niagara Mohawk Power Corp Nodak Rural Electric Coop Inc Norris Public Power District Northeast Oklahoma Electric Co Northern Indiana Pub Serv Co Northern States Power Co Northwestern Public Service Co Ohio Edison Co Ohio Power Co Ohio Valley Electric Corp Oklahoma Electric Coop, Inc Oklahoma Gas & Electric Co Oliver-Mercer Elec Coop, Inc Omaha Public Power District Otter Tail Power Co Pacific Gas & Electric Co Pacificorp dba Pacific Pwr & L Palmetto Electric Coop, Inc Pennsylvania Power & Light Co Pennyrile Rural Electric Coop Philadelphia Electric Co Pierre Municipal Electric Portland General Electric Co Potomac Edison Co Potomac Electric Power Co Poudre Valley R E , Inc Power Authority State NY Provo City Corporation Public Service Co Colorado Public Service Co Inc Public Service Co NH Public Service Co NM Public Service Co Oklahoma Public Service Electric&Gas Co PUD 1 Clark County PUD 1 Snohomish County Puget Sound Power & Light Co Rappahannock Electric Coop Rochester Public Utilities Rockland Electric Company Rosebud Electric Coop Inc Rutherford Elec Member Corp Sacramento Municipal Util Dist Salmon River Electric Coop Inc Salt River Proj Ag & P Dist San Antonio City Savannah Electric & Power Co Seattle City Sierra Pacific Power Co Singing River Elec Power Assn Sioux Valley Empire E Inc South Carolina Electric&Gas Co South Carolina Pub Serv Auth South Kentucky Rural E C C Southern California Edison Co Southern Nebraska Rural P P D Southern Pine Elec Power Assn Southwest Tennessee E M C Southwestern Electric Power Co Southwestern Public Service Co Springfield City St Joseph Light & Power Co State Level Adjustment Tacoma City Tampa Electric Co Texas-New Mexico Power Co Texas Utilities Electric Co Tri-County Electric Assn Inc Tucson Electric Power Co Turner-Hutchinsin El Coop, Inc TVA U S Bureau Indian Affairs Union Electric Co Union Light Heat & Power Co United Illuminating Co Upper Cumberland E M C UtiliCorp United Inc Verdigris Valley Electric Coop Verendrye Electric Coop Inc Virginia Electric & Power Co Volunteer Electric Coop Wallingford Town Warren Rural Elec Coop Corp Washington Water Power Co Watertown Municipal Utils Dept Wells Rural Electric Co West Penn Power Co West Plains Electric Coop Inc West River Electric Assn, Inc Western Massachusetts Elec Co Western Resources Inc Wheeling Power Company Wisconsin Electric Power Co Wisconsin Power & Light Co Wisconsin Public Service Corp Wright-Hennepin Coop Elec Assn Yellowstone Vlly Elec Coop Inc STATE STATE UTILITY REPORTING. factor levels AK AL AR AZ CA CO CT DC DE FL GA HI IA ID IL KS KY LA MA MD MI MN MO MS MT NC ND NE NH NJ NM NV NY OH OK PA RI SC SD TN TX UT VA VT WA WI WV WY YEAR REPORTING YEAR DATA MONTH REPORTING MONTH DATA RESREVENUE REVENUE SALES RESIDENTIAL CONSUMERS RESSALES SALES RESIDENTIAL CONSUMERS COMREVENUE REVENUE SALES COMMERCIAL CONSUMERS COMSALES SALES COMMERCIAL CONSUMERS INDREVENUE REVENUE SALES INDUSTRIAL CONSUMERS INDSALES SALES INDUSTRIAL CONSUMERS OTHREVENUE REVENUE SALES CONSUMERS OTHRSALES SALES CONSUMERS TOTREVENUE REVENUE SALES CONSUMERS TOTSALES SALES CONSUMERS","code":""},{"path":"/reference/EIA.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"EIA data set — EIA","text":"Public use file CASC project.","code":""},{"path":"/reference/EIA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EIA data set — EIA","text":"Brand, R. Domingo-Ferrer, J. Mateo-Sanz, J.M., Reference data sets test compare SDC methods protection numerical microdata. Unpublished. https://research.cbs.nl/casc/CASCrefmicrodata.pdf","code":""},{"path":"/reference/EIA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EIA data set — EIA","text":"","code":"data(EIA) head(EIA) #>   UTILITYID                       UTILNAME STATE YEAR MONTH RESREVENUE RESSALES #> 1         0         State Level Adjustment    AK   96     1       4776    24339 #> 2       213 Alaska Electric Light&Power Co    AK   96     1       1402    15500 #> 3       599              Anchorage City of    AK   96     1       1463    15345 #> 4      3522      Chugach Electric Assn Inc    AK   96     1       4888    51647 #> 5      6129              Fairbanks City of    AK   96     1        392     3320 #> 6      7353    Golden Valley Elec Assn Inc    AK   96     1       2519    26527 #>   COMREVENUE COMSALES INDREVENUE INDSALES OTHREVENUE OTHRSALES TOTREVENUE #> 1       4871    29393       1032     7712       1328      8823      12008 #> 2        331     3855        340     4756        441      6343       2514 #> 3       4538    58554          0        0        156      1953       6157 #> 4       3255    44649        161     2797        109       529       8413 #> 5       1096    10817          0        0        110      1224       1598 #> 6       1624    17308       1053    14756         14       136       5210 #>   TOTSALES #> 1    70266 #> 2    30454 #> 3    75852 #> 4    99622 #> 5    15361 #> 6    58727"},{"path":"/reference/LocalRecProg.html","id":null,"dir":"Reference","previous_headings":"","what":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"used categorical numeric input variables, although usage categorical variables focus development software.","code":""},{"path":"/reference/LocalRecProg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"","code":"LocalRecProg(   obj,   ancestors = NULL,   ancestor_setting = NULL,   k_level = 2,   FindLowestK = TRUE,   weight = NULL,   lowMemory = FALSE,   missingValue = NA,   ... )"},{"path":"/reference/LocalRecProg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"obj data.frame sdcMicroObj-class-object ancestors Names ancestors cateorical variables ancestor_setting ancestor corresponding categorical variable k_level Level k-anonymity FindLowestK requests program look smallest k results complete matches data. weight weight variable (Default=1) lowMemory Slower algorithm less memory consumption missingValue output value suppressed value. ... see arguments categoricalNames categorical variables numericalNames numerical variables","code":""},{"path":"/reference/LocalRecProg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"dataframe original variables supressed variables (suffix _lr). / modified sdcMicroObj-class","code":""},{"path":"/reference/LocalRecProg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"record data represents category original data, hence records input data unique N Input Variables. achieve bigger category sizes (k-anoymity), one can form new categories based recoding result repeatedly apply algorithm.","code":""},{"path":"/reference/LocalRecProg.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"list(\"signature(obj=\\\"sdcMicroObj\\\")\")","code":""},{"path":"/reference/LocalRecProg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"Kowarik, . Templ, M. Meindl, B. Fonteneau, F. Prantner, B.: Testing IHSN Cpp Code Inclusion New Methods sdcMicro, : Lecture Notes Computer Science, J. Domingo-Ferrer, . Tinnirello (editors.); Springer, Berlin, 2012, ISBN: 978-3-642-33626-3, pp. 63-77.  doi:10.1007/978-3-642-33627-0_6","code":""},{"path":"/reference/LocalRecProg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"Alexander Kowarik, Bernd Prantner, IHSN C++ source, Akimichi Takemura","code":""},{"path":"/reference/LocalRecProg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local recoding via Edmond's maximum weighted matching algorithm — LocalRecProg","text":"","code":"# LocalRecProg data(testdata2) r1=LocalRecProg(testdata2,   categorical=c(\"urbrur\", \"roof\", \"walls\", \"water\", \"sex\", \"relat\"),   missingValue=-99) r2=LocalRecProg(testdata2,   categorical=c(\"urbrur\", \"roof\", \"walls\", \"water\", \"sex\", \"relat\"),     ancestor=c(\"water2\", \"water3\", \"relat2\"),     ancestor_setting=c(\"water\",\"water\",\"relat\"),missingValue=-99) r3=LocalRecProg(testdata2,   categorical=c(\"urbrur\", \"roof\", \"walls\", \"water\", \"sex\", \"relat\"),     ancestor=c(\"water2\", \"water3\", \"relat2\"),     ancestor_setting=c(\"water\",\"water\",\"relat\"),missingValue=-99,     FindLowestK=FALSE)  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- LocalRecProg(sdc)"},{"path":"/reference/Tarragona.html","id":null,"dir":"Reference","previous_headings":"","what":"Tarragona data set — Tarragona","title":"Tarragona data set — Tarragona","text":"real data set comprising figures 834 companies Tarragona area. Data correspond year 1995.","code":""},{"path":"/reference/Tarragona.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tarragona data set — Tarragona","text":"data frame 834 observations following 13 variables. FIXED.ASSETS numeric vector CURRENT.ASSETS numeric vector TREASURY numeric vector UNCOMMITTED.FUNDS numeric vector PAID..CAPITAL numeric vector SHORT.TERM.DEBT numeric vector SALES numeric vector LABOR.COSTS numeric vector DEPRECIATION numeric vector OPERATING.PROFIT numeric vector FINANCIAL.OUTCOME numeric vector GROSS.PROFIT numeric vector NET.PROFIT numeric vector","code":""},{"path":"/reference/Tarragona.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tarragona data set — Tarragona","text":"Public use data CASC project.","code":""},{"path":"/reference/Tarragona.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tarragona data set — Tarragona","text":"Brand, R. Domingo-Ferrer, J. Mateo-Sanz, J.M., Reference data sets test compare SDC methods protection numerical microdata. Unpublished. https://research.cbs.nl/casc/CASCrefmicrodata.pdf","code":""},{"path":"/reference/Tarragona.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tarragona data set — Tarragona","text":"","code":"data(Tarragona) head(Tarragona) #>   FIXED.ASSETS CURRENT.ASSETS TREASURY UNCOMMITTED.FUNDS PAID.UP.CAPITAL #> 1            0              0     6670            112349           37500 #> 2            0           6643     1892            -12126             500 #> 3            0          43279     6863             29125           34000 #> 4            0          98448        1              2712             500 #> 5            0         134917    11368             19893           10000 #> 6            0         162855      507            117733           30000 #>   SHORT.TERM.DEBT  SALES LABOR.COSTS DEPRECIATION OPERATING.PROFIT #> 1          183077 507061       60067         9006            27560 #> 2           13872  44727        5090            0             -770 #> 3           14154  92922        8583            0            -6434 #> 4           94684 665156        2663            0             3658 #> 5           40669  86020       27054            0            27468 #> 6           35180 297633       35086        19110            15194 #>   FINANCIAL.OUTCOME GROSS.PROFIT NET.PROFIT #> 1            -18931         9218       6338 #> 2               -60         -830       -830 #> 3               706        -5727      -5727 #> 4             -6625         -944       -685 #> 5            -25480         2580       1496 #> 6               725        16450      10692 dim(Tarragona) #> [1] 834  13"},{"path":"/reference/addGhostVars.html","id":null,"dir":"Reference","previous_headings":"","what":"addGhostVars — addGhostVars","title":"addGhostVars — addGhostVars","text":"specify variables linked key variable. results suppressions key-variable also applied corresponding 'ghost'-variables.","code":""},{"path":"/reference/addGhostVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addGhostVars — addGhostVars","text":"","code":"addGhostVars(obj, keyVar, ghostVars)"},{"path":"/reference/addGhostVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addGhostVars — addGhostVars","text":"obj object class sdcMicroObj-class keyVar character-vector length 1 refering categorical key variable within obj. ghostVars character vector specifying variables linked keyVar. Variables listed must listed either slots @keyVars, @numVars, @pramVars, @weightVar, @hhId @strataVar obj.","code":""},{"path":"/reference/addGhostVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"addGhostVars — addGhostVars","text":"modified sdcMicroObj-class object.","code":""},{"path":"/reference/addGhostVars.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"addGhostVars — addGhostVars","text":"Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4","code":""},{"path":"/reference/addGhostVars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"addGhostVars — addGhostVars","text":"Bernhard Meindl","code":""},{"path":"/reference/addGhostVars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"addGhostVars — addGhostVars","text":"","code":"data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ## we want to link the anonymization status of key variabe 'urbrur' to 'hhcivil' sdc <- addGhostVars(sdc, keyVar=\"urbrur\", ghostVars=c(\"hhcivil\")) ## we want to link the anonymization status of key variabe 'roof' to 'represent' sdc <- addGhostVars(sdc, keyVar=\"roof\", ghostVars=c(\"represent\"))"},{"path":"/reference/addNoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding noise to perturb data — addNoise","title":"Adding noise to perturb data — addNoise","text":"Various methods adding noise perturb continuous scaled variables.","code":""},{"path":"/reference/addNoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding noise to perturb data — addNoise","text":"","code":"addNoise(obj, variables = NULL, noise = 150, method = \"additive\", ...)"},{"path":"/reference/addNoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding noise to perturb data — addNoise","text":"obj either data.frame sdcMicroObj-class perturbed variables vector names variables perturbed noise amount noise (percentages) method choose ‘additive’, ‘correlated’, ‘correlated2’, ‘restr’, ‘ROMM’, ‘outdect’ ... see possible arguments ","code":""},{"path":"/reference/addNoise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adding noise to perturb data — addNoise","text":"‘obj’ class sdcMicroObj-class corresponding slots filled, like manipNumVars, risk utility. ‘obj’ class “data.frame” “matrix” object class “micro” following entities returned: x original data xm modified (perturbed) data method method used perturbation noise amount noise","code":""},{"path":"/reference/addNoise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adding noise to perturb data — addNoise","text":"‘obj’ class sdcMicroObj-class, continuous key variables selected per default. ‘obj’ class “data.frame” “matrix”, continuous variables specified. Method ‘additive’ adds noise completely random variable depending size standard deviation. ‘correlated’ method ‘correlated2’ adds noise preserves covariances described R. Brand (2001) reference given . Method ‘restr’ takes sample size account adding noise. Method ‘ROMM’ implementation algorithm ROMM (Random Orthogonalized Matrix Masking) (Fienberg, 2004).  Method ‘outdect’ adds noise outliers. outliers identified univariate robust multivariate procedures based robust mahalanobis distances calculated MCD estimator.","code":""},{"path":"/reference/addNoise.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adding noise to perturb data — addNoise","text":"Domingo-Ferrer, J. Sebe, F. Castella, J., “security noise addition privacy statistical databases”, Lecture Notes Computer Science, vol. 3050, pp. 149-161, 2004.  ISSN 0302-9743. Vol. Privacy Statistical Databases, eds. J. Domingo-Ferrer V. Torra, Berlin: Springer-Verlag. Ting, D. Fienberg, S.E. Trottini, M. “ROMM Methodology Microdata Release” Joint UNECE/Eurostat work session statistical data confidentiality, Geneva, Switzerland, 2005, https://www.unece.org/fileadmin/DAM/stats/documents/ece/ces/ge.46/2005/wp.11.e.pdf Ting, D., Fienberg, S.E., Trottini, M.  “Random orthogonal matrix masking methodology microdata release”, International Journal Information Computer Security, vol. 2, pp. 86-105, 2008. Templ, M. Meindl, B., Robustification Microdata Masking Methods Comparison Existing Methods, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 5262, pp. 177-189, 2008. Templ, M.  New Developments Statistical Disclosure Control Imputation: Robust Statistics Applied Official Statistics, Suedwestdeutscher Verlag fuer Hochschulschriften, 2009, ISBN: 3838108280, 264 pages. Templ, M. Meindl, B. Kowarik, .: Statistical Disclosure Control Micro-Data Using R Package sdcMicro, Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4","code":""},{"path":[]},{"path":"/reference/addNoise.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adding noise to perturb data — addNoise","text":"Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/addNoise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adding noise to perturb data — addNoise","text":"","code":"data(Tarragona) a1 <- addNoise(Tarragona) a1 #> $x #>     FIXED.ASSETS CURRENT.ASSETS TREASURY UNCOMMITTED.FUNDS PAID.UP.CAPITAL #> 1              0              0     6670            112349           37500 #> 2              0           6643     1892            -12126             500 #> 3              0          43279     6863             29125           34000 #> 4              0          98448        1              2712             500 #> 5              0         134917    11368             19893           10000 #> 6              0         162855      507            117733           30000 #> 7              0         170531     2274             -6118             500 #> 8             62           1389       97              1049             500 #> 9             78          26613     3490             13242           10000 #> 10            91         183865    22670             34555           10000 #> 11           140          10225     5281              2050             500 #> 12           142          75370    28605             55605            4000 #> 13           200          54989    25592             16084            6000 #> 14           224          31228     6951             20331            4000 #> 15           237            714        1               212              90 #> 16           249          65547    20558             50769           48000 #> 17           310         195474    38990             31160           10000 #> 18           323          63115     4916             54986           15000 #> 19           391          24611     1355              4324            1000 #> 20           408          29619      775              5395             500 #> 21           435           7807     7878               831           10000 #> 22           436          31314     2317             23651           16000 #> 23           465         354505    17608             42964           10000 #> 24           474          40515      736              3074             500 #> 25           684          16787        0              6303            6000 #> 26           893          10819    10106              6474           10000 #> 27           905          52413     1038             24818            6000 #> 28           989          45102     1369             17772           30000 #> 29          1000         615990      124           -515464           10000 #> 30          1013           1263   -12228            -10106             500 #> 31          1048          33783    12934             22042           10000 #> 32          1062          18946    19649              5268            2000 #> 33          1120          83212     2727             53973           15000 #> 34          1128          49746      584              9495             500 #> 35          1306          45305    12553             36218             725 #> 36          1307          12761      469              1381           10000 #> 37          1327          75294    30101             49158           10000 #> 38          1381          38433    20625             39598           36500 #> 39          1426          43934     3647             11229           10000 #> 40          1428          42005      963             26821           19260 #> 41          1465         369131     1721             79189          140000 #> 42          1489          68099       30            -26447            2000 #> 43          1490         188830    25095             16466            2000 #> 44          1496          39567       81              4023           15000 #> 45          1747          22079     9403              9526           10000 #> 46          1784         322333    11200             38217           10392 #> 47          1816         102019     6404             33755           12000 #> 48          1835          88524      374              4639             500 #> 49          1968          81069     1606             19452           11000 #> 50          2045          21484     7253             18694            2000 #> 51          2090          33917     2324             10031            1000 #> 52          2126          35771     1509             11687            7000 #> 53          2136           7906     4040              9686            7000 #> 54          2402          49630      310             33617           32000 #> 55          2429         207875       83             31867           23000 #> 56          2538          17093     2662              6273            1000 #> 57          2567         117238      671             14095            7850 #> 58          2739          23350        0             14778           10000 #> 59          2809          89592    13926             14141           10000 #> 60          2830          30250     5922              6424            3000 #> 61          2860          68515     1442             13120            2000 #> 62          2871          48713     9856             39106            1500 #> 63          2885         158347    16306             48499           10000 #> 64          3062          70586      465              6832           10000 #> 65          3243          98781    34576             31758           20000 #> 66          3274          67444     2216             15834            2000 #> 67          3452          53685     1252             20658            3000 #> 68          3487         134897      695             62728           10000 #> 69          3506          42499    23167             29732            6500 #> 70          3514         101242     7152             28771           15000 #> 71          3543          28253     2389              9413            1500 #> 72          3544          35812       81              8967             500 #> 73          3647              0        0             -1142             500 #> 74          3787          24615      985             10859            5000 #> 75          3819         107416     1400             27300           15000 #> 76          3822          39864     3993              3595            1000 #> 77          3879          74501       91             26123            3000 #> 78          3974         117178    13040             13318            1000 #> 79          3989          66278        0             38448            6000 #> 80          4026          25706     2524             -8034             500 #> 81          4156          25287    10455             14652           10000 #> 82          4199         105431      477             25499           10000 #> 83          4268         130077     1067             21735           20000 #> 84          4271          33161     3098             27291           11040 #> 85          4406          15050     5078             12083            3000 #> 86          4446          63931    30595             23258           10000 #> 87          4485          99270    23063             62109           15000 #> 88          4527          37601      213             13616            4000 #> 89          4557          65854     4031             26133           20000 #> 90          4619          58631     5451             61411           10750 #> 91          4621          22016     7628             10653            6750 #> 92          4924          77187    21008             52500           10000 #> 93          4970         249351     8843            105833           20000 #> 94          4994          75564    18550             11151            4500 #> 95          5096         102315     4193              6743            5900 #> 96          5129          11476      356              6237             500 #> 97          5164          35901     2253             13363           10000 #> 98          5167          61695     2760             24792           10000 #> 99          5248         280922    16840             88437           85000 #> 100         5265         119838    12076             29416           10000 #> 101         5357          48154     3381             13530            1000 #> 102         5392          86303     6919            -23911            1000 #> 103         5465          36284     1686             19699            8500 #> 104         5521           9629     3159             -6214            1000 #> 105         5586          25286     5580               854            6000 #> 106         5626          31326     3161             17903           10000 #> 107         5629          23376     4397              1484             500 #> 108         5949         106864    13230             31685           10000 #> 109         5969          62544     3484             32815           20000 #> 110         6008          30638      216             -6188             500 #> 111         6039         115482     5069             23942            2000 #> 112         6068          37592      421               769             500 #> 113         6088         241993    11578             51616           10000 #> 114         6105          33571     5587             32512           10200 #> 115         6133         172511     5248             40305           10000 #> 116         6300         101096    20413             20382           10000 #> 117         6352         111904    10663             59520           15000 #> 118         6476          28231     -188             10392             500 #> 119         6484          11593     3666              9060            3250 #> 120         6499          13798     2489              4323            5000 #> 121         6511         155310    47227              1447            3000 #> 122         6579          40307    -6699             17845            2200 #> 123         6673         177992   -32350             42587           24000 #> 124         6678          88449      265             66341           10100 #> 125         6756         216535    39820             36423           10000 #> 126         6779          28325     7294            -11033            1000 #> 127         6787          69354     5708             18877           10000 #> 128         6807          68633    15501             43668           12000 #> 129         6814          93883     4698             20381           10000 #> 130         6894          38237     2634              8783            1000 #> 131         6936         107094    43974             79894           10000 #> 132         7000          92780     2433             29448            6000 #> 133         7008          68469    11143             24641           10000 #> 134         7103          66752       48              7264            1000 #> 135         7153          70447     2271             28397           10000 #> 136         7175          91518     6538             26117           10000 #> 137         7266          44483    -7199            -35180            2000 #> 138         7302          58643    13735             31775           10080 #> 139         7303          95040     1859             25007           10000 #> 140         7389          19915     4140             22898           10000 #> 141         7414         101227     2043             14653           60000 #> 142         7454          95581    37044             75448           41000 #> 143         7479          99012     9709             24523           24210 #> 144         7498          55371     1663             17621            3000 #> 145         7503          59211   -11461             28236           27570 #> 146         7539          35811    27854             17322           11100 #> 147         7567          86093     9845             45187           37000 #> 148         7613          34931      559             26667            5025 #> 149         7746          80296      418             -1423           14340 #> 150         7827         112262    18826             41281           28600 #> 151         7848          16275     4147              4411             510 #> 152         7883          30695     4076              1706             800 #> 153         8021         103227      544              8338           15000 #> 154         8117         241826    14492            126796           15000 #> 155         8160          92627    25782             33696           10000 #> 156         8165          80864    14175             22572           10000 #> 157         8296          80077     1796             33801           12000 #> 158         8306           8026     3464             -2593           10000 #> 159         8390         258395    29409             15668           10000 #> 160         8390         258395    29409             15668           10000 #> 161         8460          38750    60038            -11264            6500 #> 162         8487          47080       87             13604            7000 #> 163         8586          82616     1712             43829           10000 #> 164         8642          18841      957             19553             500 #> 165         8654          37263     4633             23427           10000 #> 166         8669          29766     1795               -60           20000 #> 167         8692          20549     7969              2959             500 #> 168         8692          91831     -824             15808           10000 #> 169         8732          42222     2426             20789           10000 #> 170         8779          14159       97             12091           10200 #> 171         8813          76936    24606              5186            2500 #> 172         8819          45722     4180             31209            2000 #> 173         8900          67837        0              2542           34240 #> 174         8901          69652    61234             35634           10000 #> 175         8935          72650     1767             49064           16000 #> 176         8957          74163     2325             49353           25000 #> 177         9026         383355    16484             78051           32500 #> 178         9100         242267     9268             52313           50000 #> 179         9116          66016    15724             52007           10000 #> 180         9159         146131    12800             32588           12285 #> 181         9178          25096   -11338              3923            1000 #> 182         9200         197169      555             51456           35500 #> 183         9225          94401     5980             49040           25000 #> 184         9273          55695     4346             26870           24706 #> 185         9322          50338     2802             11940            6200 #> 186         9333          32175     8186             10608             500 #> 187         9351          59948       82             13193           10000 #> 188         9407          54574     3352              4133            1000 #> 189         9480         103342     3785             32834           12370 #> 190         9486              0    26914             20201             500 #> 191         9653         187990    -2098             47149           25000 #> 192         9755          49779    29801             43433           15000 #> 193         9833         116774    10899             21696            4500 #> 194        10047          73452     5442             59788           48000 #> 195        10128          54496     1597              4317           36000 #> 196        10172          89086    47035             68957            3500 #> 197        10241         373503    27230            122521           10000 #> 198        10251           9606     1673              3463            4000 #> 199        10251         110882     8635             31245           10000 #> 200        10377          52539    27761             49977           15000 #> 201        10510          27550      359             16576           10000 #> 202        10510          69010      113              4690           10120 #> 203        10540          20019     4726              6276            6750 #> 204        10628          14043     7069             12922           10000 #> 205        10702          36084     8035             25107           30000 #> 206        10720         155243      -46             13511           10000 #> 207        10789          31883    15990             17064            1000 #> 208        10854          43317    -3496             17322           10000 #> 209        10888          12794     1496             -4053            4000 #> 210        11255          95798     7479             24020           10000 #> 211        11397          72090     8905             60639           10000 #> 212        11423         102844     4129             40735            9000 #> 213        11639         195871   -19034             92138           42000 #> 214        11649          23020      526              4414            3200 #> 215        11723          90745     2498             54990           10300 #> 216        11903          36100     2089             23504            1000 #> 217        11952          71820     6296             57927           36325 #> 218        11963         140016       63             95601           63425 #> 219        12003         161749    23386            104605           50000 #> 220        12013          42366    27038             29502           18225 #> 221        12076          30702      499              6619             600 #> 222        12505          62908    -9006             29539           10000 #> 223        12585          78702    17225              1494           22500 #> 224        12671         169046     3182             30118           14000 #> 225        12679          35652     1069             20109           13700 #> 226        12760          58319     6820             10113           15200 #> 227        12876          35238      125             20565            7000 #> 228        12980         239233    24876             31017           10000 #> 229        13026         254328      109             53671           50000 #> 230        13167          34594    11554             19110           20000 #> 231        13167          87298     1517             18559           10000 #> 232        13293          22418    15219             29167           10000 #> 233        13293         121520     4377             27344           10000 #> 234        13600          38993     7571             28411           15000 #> 235        13714          22330     1957             12152             500 #> 236        13810          20719    -7980             12393           10000 #> 237        13828          35718    12579             38426           40000 #> 238        13914          83699     1725              3795           10000 #> 239        13937         100455   -17847             65699           32000 #> 240        14040          25190     3585             15128            2450 #> 241        14041          40830    22609             34674           10000 #> 242        14079          55656      593              5603           10050 #> 243        14086          72255     5889              8376           10000 #> 244        14102         198807     3384             60081           67000 #> 245        14135          90212     4013             19488            5000 #> 246        14282           1880      155              4083            1000 #> 247        14328          34953     3215              6673            1000 #> 248        14392         281699     5768             82996           35000 #> 249        14468          45740   -10563             32166           10050 #> 250        14560          66958     1003             53459           10000 #> 251        14687          62279    23032             36933           20000 #> 252        14732          67712    -3784             36272            5000 #> 253        14803          27352      432              5630            1000 #> 254        15114          43151     2800             18571             500 #> 255        15123          44387     2357             22611           10000 #> 256        15161          60571      -31             21857            4800 #> 257        15273          28955      163             17224           10000 #> 258        15888          23161     4414             17246            4000 #> 259        15907          16257     5925              2832            6500 #> 260        15939          61238     1203              4306             500 #> 261        15949          21168     7244             18191            5000 #> 262        15992         321942   162756            196721           10000 #> 263        16047          22849    20803              8818             500 #> 264        16262          40191    14510             31195           13750 #> 265        16288         285486     7347            109660           45000 #> 266        16311         214617    17551             39772           10000 #> 267        16448          43006     2932             21606             600 #> 268        16474         133748    10809              8398            5000 #> 269        16475          29867     2429             25784           10000 #> 270        16539          26497     -221              2972           15000 #> 271        16545          44670     3596              1307            1052 #> 272        16588         159714    42535            158706           30000 #> 273        16675          32102    11097             26948           10000 #> 274        16678          33358    17659             12781           10000 #> 275        16716          74276     9427             -4499           30000 #> 276        16716         112533    19535             42887           10000 #> 277        16757         204687    58776             85301           10000 #> 278        16883          66753     5619             11057            8000 #> 279        17034         117533    47632             82182           11000 #> 280        17051          19689     2519              9147           10000 #> 281        17064          91464     1599             40259           12000 #> 282        17109          33231    20556             48495           10800 #> 283        17286          14018   -23788             11564           10000 #> 284        17381         224043    47884             37060           10000 #> 285        17508          47062     4124              5519            3000 #> 286        17544          30393        0             20621           20080 #> 287        17581          70335     4345             64224           17250 #> 288        17638          91209    22703             33661           25000 #> 289        17675         124873    33564             76942           30000 #> 290        17727         169163    10121             62653           42600 #> 291        17762         236623    10611            111874           40000 #> 292        17773          35221     6185             24039            4000 #> 293        17981          69591    29599             32369            2000 #> 294        18136          53319      758             15215           14000 #> 295        18181         136542     3256             41867           10000 #> 296        18194         117133      873             18294           10000 #> 297        18241         173471     6248             57835           10000 #> 298        18270          28812      369             23631           10000 #> 299        18299         293922     4515             14873           10000 #> 300        18388          36085    14018             35108           10000 #> 301        18436         242510     9941            142930           25000 #> 302        18496          44916     6493             -9034             500 #> 303        18613          51187     1099             30275           12600 #> 304        18636          73795     9810             49865            3000 #> 305        18707          47127    11478              6622            3000 #> 306        18725          64438       20              3519            3000 #> 307        18887          64409      782             11867            1000 #> 308        18969          17401     2537             11146             500 #> 309        19007         197967     6358             33736           45000 #> 310        19035          85576    15494             48127           10000 #> 311        19158          60227   -15069             33195           40500 #> 312        19224          74605    10541             22001           10000 #> 313        19292          66552     4003             33228           11250 #> 314        19430          50634     3336             18573           10000 #> 315        19464         188368    18547             76700           10000 #> 316        19534          89023     1097             -7229           10000 #> 317        19575         208677     2898              2942           10000 #> 318        19762         177435    35581             52864           30000 #> 319        19846         118109    15849              6721           50717 #> 320        19922         111544    11856             10193           10000 #> 321        19964          65250    36733             31646           10000 #> 322        20019         144386     1544             36166           10000 #> 323        20121         414771     2683             72176           16000 #> 324        20163          94214    45088             30937           10000 #> 325        20517          22734     1007             13429           10000 #> 326        20648          98620     2960              -684            3000 #> 327        20717          68007   -10421             36888           20000 #> 328        20817          59508     8194             32837           20000 #> 329        20920         170466    75995            171266           10000 #> 330        21164         200508    12981            151811           83110 #> 331        21240          72884    11327             20994            2000 #> 332        21343          45744     8067             35428           10000 #> 333        21344          44744    11475             15472           16500 #> 334        21348          79616     1180             55499           10000 #> 335        21465          44093     3374             35164           31550 #> 336        21577         128170    19762             35545           10000 #> 337        21692         156392    44281            104005           80000 #> 338        21781          20141     1600              6456           10000 #> 339        21832         123317     3265             41495           25000 #> 340        21925          90600     5364             72115            3000 #> 341        21950         230687       31             31566            2000 #> 342        22071         203460     1197             45966           10000 #> 343        22225          97210     6259             35085            8100 #> 344        22229         128873   -27781             29282            3000 #> 345        22272          49480    17471             10876             540 #> 346        22319          33775     4711               106           10000 #> 347        22328          55795     9568             29873            1500 #> 348        22388         140011    22594             68040           17035 #> 349        22452          79381     5442               979           11000 #> 350        23388          51858     2102              2631           10000 #> 351        23541         155821    54301             95517           10005 #> 352        23706         522208    49871            123090           30370 #> 353        23724         201768    68937            100333           38000 #> 354        23771          79492     5255             10109            1000 #> 355        23827         341389    24901             23908           10000 #> 356        23970          85975    13020             45881           32300 #> 357        24104          81262   -27964             61638           10000 #> 358        24291          69945    28681             30052           30000 #> 359        24327         237268    11885             28126           16000 #> 360        24507          28049    11232             -1553           12200 #> 361        24586          64644    -6636             30273           10000 #> 362        24928         138548    14325             23479            4500 #> 363        25105         100177     1674             33019           22050 #> 364        25227          54780     4116              7788            5000 #> 365        25387         262327    62954            141787           85000 #> 366        25731          26464     2324             16800           16000 #> 367        25864         135027    69814             30300           10000 #> 368        26134         137563     2375             47439           33000 #> 369        26259          76616     8885             16612           10000 #> 370        26372          97580    31638             27268           10000 #> 371        26789         200252    19599            139335           10200 #> 372        26978         112390    11271             98729           50000 #> 373        27145          30005        0              -115           11400 #> 374        27188         142330     3030            104106           44000 #> 375        27204         108733       72            -24138            2000 #> 376        27852         111818    16196             95637            7100 #> 377        28039          54811     1670            -69864           46000 #> 378        28060         116470     3535            125277          100000 #> 379        28118          40531     1365             28258           10000 #> 380        28355          41814     4581             11477           11500 #> 381        28582          86537     4544             29300           18000 #> 382        28606          37971     5538              3984            3500 #> 383        28716          79251     2978             55988           20000 #> 384        28962         171001    27029             50670           21900 #> 385        29044         214347    68087             36846           10000 #> 386        29189          19144     9662             18431            2000 #> 387        29367          30873      590              -247           10000 #> 388        29591         266037     -792             44884           17000 #> 389        29755         121503     2299            107352           32000 #> 390        29981         140794    14518             76431           10000 #> 391        30022          90512      381             15407           15000 #> 392        30390         127960      187              8836            2560 #> 393        30622          45172     2754              3271           10000 #> 394        30826          27975     4663             14096            2000 #> 395        30858         259244     1127            162905           31000 #> 396        31037           1174      343             32126           10000 #> 397        31151          32676      126             36486            5000 #> 398        31189          49928     2410            -73540             500 #> 399        31848          26695     3159              8159           11000 #> 400        32004          -4320    -5585            -16257           10000 #> 401        32331          76155    18612             58607           21000 #> 402        32410         243864    -9349             21258           20000 #> 403        32428         342928    13844             80307           10000 #> 404        32499          99789     3764             33730           13200 #> 405        32698         131819     3890             30871           10600 #> 406        32841         104845      877             79149           56000 #> 407        33066          91928    18207             38540            1500 #> 408        33286          42725    20107             22295           18400 #> 409        33332         134161     3802             17058           10000 #> 410        33472          47479     2728             54681           10000 #> 411        33475          71458        0             61901           18000 #> 412        33538          80812     4505               769            2000 #> 413        33550          57951      240             34657           10000 #> 414        33570          40095    12976             33253           10000 #> 415        33700          79903     5636             69493           12000 #> 416        33771          41496      643             20824           14000 #> 417        33866          10185     2609              7820             500 #> 418        33995         308938   198130            244400           25000 #> 419        34336          55673     6677             80052             500 #> 420        34347          27100      100             37916           10000 #> 421        34610          19315     3778               630             500 #> 422        34651          39635     -709             23035           19000 #> 423        35237         128641    77131             39950           20000 #> 424        35438         178496    19109             13183            4000 #> 425        35649         199488    30056            106754             500 #> 426        35849         191915     6366             74479           20000 #> 427        35960          74164      547             29631           15000 #> 428        36140         130259    18705             18805            3500 #> 429        36159           4574      577             22238           15000 #> 430        36592         337218     2644            107805           16200 #> 431        36659          50725     8133             22587           21250 #> 432        36784          99856      676             54452           12060 #> 433        36896         145256     3568              9279           23000 #> 434        37037         197135    11861             17107           10000 #> 435        37648          69522     2185             46015           10000 #> 436        37838         214625    35118             53321            5000 #> 437        37841           2684      211              9032           12000 #> 438        38203          83096     7773              1775           36070 #> 439        38387         587341     1188            450722           10000 #> 440        39008          81457     4638             77128           50000 #> 441        39090         272740    10118            152382           25000 #> 442        39148         125471    -3644             57204            6000 #> 443        39224          44285    15895             26693           16980 #> 444        39528          -8613   -24044            -24471            1000 #> 445        39606         206467    47751             92850           16000 #> 446        39778          78758      317             38223           10600 #> 447        39909          96316     9588             55818            4000 #> 448        40160         214867    16296            102744            5000 #> 449        40309         103837    18856             36421           10000 #> 450        40412          61595     3398             24514           10000 #> 451        40517          92743     5776             23201           15500 #> 452        40585          89812      912             25281           10000 #> 453        40653          60801     6858             36048           19000 #> 454        40679          72779       32             41991           15500 #> 455        40872         178398      564             18239            1000 #> 456        41206          97712     3828            107652           41500 #> 457        41233          48109     5305             -7231            3000 #> 458        41354         266670    17898            193308           40000 #> 459        41403          51759     1585             -4695             500 #> 460        41414          79408     4239             63466            7000 #> 461        41437          43276      598             28125           10000 #> 462        41472         340058     6844            153599           72250 #> 463        41592          87467    26955             48325            5000 #> 464        41791          66441    -6187              3244             700 #> 465        42350         116011    17911            128751           50000 #> 466        42447         658633    44503            228783           40000 #> 467        42558         104984     5212             52841           40000 #> 468        42721          37160     3496             53033            6600 #> 469        43369          64667     1542             55004           17350 #> 470        43713         154473     9398             14816            4000 #> 471        43779          19997     9669             63431            4000 #> 472        43898          64065    10904             32936           10000 #> 473        44486         131005     5869            120250           10000 #> 474        44491         163593    11120             19418           10800 #> 475        44679         127388    37551            100418           72000 #> 476        44861          72049     8119             63161           38000 #> 477        44942         138819     4397             56747           10000 #> 478        45220         243658     3737             88036           10000 #> 479        45238          47739      131             24188            9800 #> 480        45482          41858    22455             48110           10000 #> 481        45586         556701   238879            138686           25000 #> 482        45666         345809     2146             -3023           10000 #> 483        45903         174242    30746             12847           20000 #> 484        45999          50030     6906             49956           48150 #> 485        46482          53477     3038             10841            1000 #> 486        46564          57788     3094             48837           27300 #> 487        46631          48094     5676             36409           10000 #> 488        46753         148337     4962             35273           10000 #> 489        47152         490613    16759            165693           35000 #> 490        47626         124300    29242            135469           24000 #> 491        47650          31135     9343             37906            3200 #> 492        47755          36706    22459             16462           14320 #> 493        47864          30685     1577             40700           10000 #> 494        48558         -26538   -28612            -22113            5000 #> 495        48720        1632098   203304           1392647         1493787 #> 496        49079         349960    19379            214826           58000 #> 497        49252         182994   143160            183958           10000 #> 498        49903          21808     7287              5161             500 #> 499        50164          18970     1470              8274           10000 #> 500        50436          77472     8649            130609           10000 #> 501        50825         207663    14819             82313           10000 #> 502        50864          66253     1151             24673           12480 #> 503        51027          84350     1923             40460           27000 #> 504        51774          60489     6261             60773           10000 #> 505        52046          65856       98             54911           53700 #> 506        52159          85641     1784             53599            9120 #> 507        52207         498306    25977            145424           96800 #> 508        52441          10370   -24281             61836           34900 #> 509        52819         318471     8669            103625           10000 #> 510        53180          79578      -67             38658            3000 #> 511        53582         369618    13737            221325           54000 #> 512        53793         172944      534            111084           15000 #> 513        53804         132210    47324            135602           30000 #> 514        54167         119977    78313              4405            1000 #> 515        54234          14313     2518             25088           20000 #> 516        54238         129852      327             48150           12000 #> 517        54302         103263     1509             68795           15000 #> 518        54340         164868    -1098             96259           10000 #> 519        54374         166160    15079            173277           37000 #> 520        54421          63846    28483             42498           12800 #> 521        54433           5559   -22580              -761            1000 #> 522        54663         182661     3743             19079           10000 #> 523        55389          85390     5732             93926           10000 #> 524        55398          94388     5941             45652           15000 #> 525        55411          32993     1610             81591           21000 #> 526        55472         262564     2127             15824           10000 #> 527        55791          49781     4669             45915           12750 #> 528        55866         173204     1333             93265           52500 #> 529        56090         506020    22076             23628           10000 #> 530        56302         115561     2132             35446            3000 #> 531        56369          95532      162             44913           10000 #> 532        57046         103897     3658             62283           10000 #> 533        57683          99380     5534             62867           40000 #> 534        58099           7696   -13793             37517            5000 #> 535        58200         198660      163             37716           25000 #> 536        58326         226767    20258             69203           26200 #> 537        58450         249071      812             60984           65000 #> 538        58923         144216     3846             61279           47910 #> 539        59520         113031     1834             88359           16000 #> 540        59976         233593    56964            234034           40200 #> 541        60074          47134     3517             37799           11250 #> 542        60282         121502      454            -81065           10000 #> 543        60355         194698    12654            -18479           10000 #> 544        60508         328147    52490            124450           44000 #> 545        60933          91094    18784             83471           10000 #> 546        61680          71670     4610             29399           20000 #> 547        61970          36503     4077             79444           17000 #> 548        62181         192618    34027            165336           40000 #> 549        62401         173414       39             33145           30000 #> 550        63320         323257    62699            249082           10560 #> 551        63546         201152     5164             63458            8010 #> 552        64285          24917     6193             32012           10750 #> 553        64286         158988    36216            133544           20250 #> 554        64483          79177        0             65497           10000 #> 555        64572          72758     5255             48347            4500 #> 556        64731         102648     8620            107102           23000 #> 557        65493          41532     6564             55998            6000 #> 558        65690          21599     1475             41608           10000 #> 559        66168         143888     4445             25561           10000 #> 560        66172         760014    63743             90114           10000 #> 561        66459         611921    24389            175208           30000 #> 562        66596          24855   -29944             12759            1650 #> 563        66659         351145    17838            196217           59000 #> 564        67037         295192       11             50895           11000 #> 565        67115          46347     9273             40740           10000 #> 566        67293         192581    30096             52763           10000 #> 567        67413         106803     4338             88040            2000 #> 568        68152          34455     -510             18532            4000 #> 569        68483          14935      808             50740           37500 #> 570        68556         272924    11565            118014           12000 #> 571        69352         176536    13058            114548           25000 #> 572        69834        1025722     8079            125775          125509 #> 573        70563         276150     5615              2451           11700 #> 574        72176          58259      689             32504           10000 #> 575        72485           1071    -9820              9074           10000 #> 576        72489         112478    20487             89985           10000 #> 577        72551          54087     5525             20880            7800 #> 578        72662          36934     1222             40005           34000 #> 579        73184          87962    18786              6097            1200 #> 580        73895          18516     7736             10196           10000 #> 581        73952         129939       47             12587           16860 #> 582        74126         133260    -2261            123475           50000 #> 583        74371        1108185   114388            207003           10000 #> 584        74465         258465    26822            171655           45000 #> 585        75172          88439     3376             54293           36000 #> 586        75172         110782     3018             23476           13500 #> 587        75646          99791    52172             13601           10000 #> 588        76241         507054    53390            313627          115000 #> 589        77134          60431     6570             80368           15000 #> 590        77544         203730      557             82651           35000 #> 591        77875          37200    23781             47091             500 #> 592        77924         195629    24527             41564           10000 #> 593        78391          43099      221             35554           10000 #> 594        78725          67659     3999             67191           25000 #> 595        79798          39001      582              9769           61000 #> 596        80202         264101     2468             25521           10000 #> 597        80656          58560      -48             -2408             500 #> 598        81548         148713    37185            113225           40000 #> 599        83867         234742      806             78063           30595 #> 600        84546         274398     2377             45228           30000 #> 601        85202          71300    48378             90106           14000 #> 602        86304         148374    16103            115977           20000 #> 603        86601          66583     2124             25875           25000 #> 604        87049         174944    11075            153176           94000 #> 605        87924          85704     1445            105700           95900 #> 606        88678         104917      767             99217           38000 #> 607        88987          68096    14454             64627           30000 #> 608        89108          97374     3252             74008           32000 #> 609        89206         218648     3131             44577            8400 #> 610        90087          91127     4044            134432           10010 #> 611        90609         118921    11962             88002           16000 #> 612        90926          25428     4803             66489           25000 #> 613        90962          62604    -1308              7347           10000 #> 614        91127         185146   119062            111533            3600 #> 615        91289          79253     2549             23814           24000 #> 616        91449          97871      720             34011           34500 #> 617        92478          65607     7309             69274           28000 #> 618        92559         125991    47660            147721           30000 #> 619        92663          81190    16464             31405           20000 #> 620        92995         109647    14950             35059           20000 #> 621        93448          60650    19675             61811           13000 #> 622        93851          87346    21384             78314           33600 #> 623        94585         128061     2478             46123           10700 #> 624        95034         102912     3502            137607           10000 #> 625        95684          81681     2469              3852            7000 #> 626        96095         254555     7420            142455           10000 #> 627        96355          49712     1178             67956           52000 #> 628        96426         157488    53454            196513           10000 #> 629        96463          60377     2854            -75782           25000 #> 630        97014         283449     1329             30376           10000 #> 631        97049          13084     2504             62432           10000 #> 632        97534          98879    13826            154531           10000 #> 633        97909           1453      639               184           16150 #> 634        98172          68789    11356            -35955             500 #> 635        99280         129635    19514            174200          140000 #> 636        99358           7022     3098             85118           18400 #> 637        99880         183647    15753            144552           15000 #> 638       100279          32884     2401             26292           10000 #> 639       100365         431164    12651            402808          132000 #> 640       100771         145719     8837             48802           11200 #> 641       100860         200737    14557             99815            6000 #> 642       101375         302925    26054            109318           35000 #> 643       101446         104071    -4045            -69812           22000 #> 644       101491         204355     3180             82597           45700 #> 645       102319          58639      952            114463           83225 #> 646       102577         111531    41277             99003           16500 #> 647       102930          13376    11412             96744           10000 #> 648       103020          98773    45307             56211           10000 #> 649       103585         263251    33884            195232           76848 #> 650       103735          65174     5728             80065            7200 #> 651       104785         399759    49465            196945           32000 #> 652       104895         168521      638            140102           10000 #> 653       104968          39986     7502             46306           10000 #> 654       105104         258522    57458            201800           61500 #> 655       107601         346112     5123            117426           10000 #> 656       107660         269983    49796            283426           50000 #> 657       107924         228578    46295             94375           49730 #> 658       108044         111960     9731            139887           14800 #> 659       108164          59215     3151             -1640           12000 #> 660       109215          51468     1432            148144           16000 #> 661       111015         257191    22142            144844           28000 #> 662       111243          70374     2644             18578           10000 #> 663       111952          15840     3720             84065           72310 #> 664       112224          90578    21178             52549           28000 #> 665       112542          51004     8245            112718           10000 #> 666       113203          58920    22408             60410             500 #> 667       113226         214390    48323            192646           56800 #> 668       113522          63543    23672             25335           15000 #> 669       113594         607878     4280            151745          190000 #> 670       113667         366153       44            201110           57300 #> 671       115249          27882    12916             71733           15000 #> 672       115257         157625    10861            187485          130000 #> 673       115324          78574     7021            -56111           10000 #> 674       116328          69423     4042            132041           11200 #> 675       117173          39555     7082             39799           40000 #> 676       119574        1279006    65760            198987           10000 #> 677       121202         181935     7113             22872           25000 #> 678       121604         812986    36860            501723          125000 #> 679       122046         119538     4497            152308           54000 #> 680       122464          57927     2073             18988           15000 #> 681       123210           9985   -13006             44288           15000 #> 682       123359         335504     1911            142360           75000 #> 683       123934         613778    89633            578547           60000 #> 684       124103          45025       -8             45615           20000 #> 685       125158         178945     8709            131317           21000 #> 686       125502         175632    28848            107252           15000 #> 687       126702         361707     9566             82175           20000 #> 688       127599          21146      230             56325           15000 #> 689       127996         289153    20636            241270           10010 #> 690       128548         382384    93353            329427           75000 #> 691       129138         264124      518             59037           20000 #> 692       129207          87499    26878            130363           24000 #> 693       129230         114431    13006             58867            4000 #> 694       131428         488117    -2714            121543           23000 #> 695       132235          98635     1037            119801            1000 #> 696       133188         214067     1272            144447          100000 #> 697       136054          49994      137             78359           32400 #> 698       138028         127188    17574            157502           18300 #> 699       145776          54846    19510            143048           20000 #> 700       146495          83855     3152            100218           98520 #> 701       146919         121314   156012             60587           15000 #> 702       147854          11983      602             59198           27000 #> 703       149257          26398     2253             64844          105700 #> 704       150895         108345     2275            110813           79400 #> 705       152187         473310    82220            208294          190000 #> 706       152865         581765   202415            663831           10000 #> 707       153817         387558    89675            364190           57400 #> 708       153834          55707    47887            183127           10000 #> 709       155025         601589     2049            309705          100000 #> 710       155820          35655     2893            112952           11500 #> 711       156375         239593      861             49877           50000 #> 712       161213         293749   164560            496730          300000 #> 713       164919         600166    25138             73733           12800 #> 714       167135         100950    12130           -137794           40000 #> 715       168538         390182    31460            449712          510000 #> 716       168587         372244    98879            354790          108350 #> 717       169733         121286    38201            140817           15000 #> 718       171332        4539074   416760           2444371           20000 #> 719       175048         352949    84032            196011           25000 #> 720       177368          90317    42559            175606          133050 #> 721       177371         210734    72805            224353           12000 #> 722       177394         331417      354            115281           25000 #> 723       181388        1064956     6531            127126           75000 #> 724       181418         750780     1889            216125           90000 #> 725       181466         170293    22425             87990           10000 #> 726       182329         716601      546            124272           85020 #> 727       186159          93507    19466             64888           10000 #> 728       188927         900922     8208            337919          145000 #> 729       191030         116069     7442            129084           83000 #> 730       192945         261920   -24455             87860           44920 #> 731       195629         637117    83870            456101           80000 #> 732       198277         175150    33593            252546           40000 #> 733       198656         769287   139859            576172          128000 #> 734       199331         506201    37868            274060           40000 #> 735       200498          60678     3446             24844           10000 #> 736       204553         235309     3503            162049           18290 #> 737       204639        1008876     2136            497917           85950 #> 738       215059         143659     7298             54296           70400 #> 739       216188         445614   100427            442298           36650 #> 740       219734         348620    10734            357770           60000 #> 741       222801          74737    62744            290114           61776 #> 742       223141        1092236   168319            351352           10000 #> 743       224106          22967    18643            222755          189000 #> 744       228787         538450    28214             96526           10000 #> 745       231454         203142     5773            409122           50000 #> 746       233057         143627     1786            261161          120000 #> 747       233473         216721    36963            343064           10000 #> 748       234120         229466     5545             98233           12500 #> 749       236314         519857     3139            357022           15000 #> 750       240168          53711    12841             61151             500 #> 751       244293           6240     1614            245965           30000 #> 752       245049        4407578   204217           1588809          224000 #> 753       246686          46356     1238            208129            3100 #> 754       247781          82891     7920             40250           12500 #> 755       248051         447373    32769            145638           20000 #> 756       248339        2107796   182249            713101           25320 #> 757       248776          55906   -30919            -97007           49000 #> 758       249840        1020384   123346            691851          525784 #> 759       250108         706920    28908            276535           30000 #> 760       250275        1021852    23712            181567           90000 #> 761       250275        1021852    23712            181567           90000 #> 762       250982         122026    13592             55224           70000 #> 763       253034         322760     2669            261478          130690 #> 764       256826         946750   111613            600237          292500 #> 765       256965         251111      748             92741           20000 #> 766       257817          66281    22663            150809           25000 #> 767       259223         367762   105688            396304           11210 #> 768       261961        1395420   183418            630475          162000 #> 769       267306         352066     6913             13996           26500 #> 770       271085         181671    56558            155331           50000 #> 771       276900           9006      900              7184           48000 #> 772       281062         337190     7923            301506           74500 #> 773       281541          76487    25572            306274           15000 #> 774       282347        1605837    42107            518117          145000 #> 775       283185          27481     -730            182409           26900 #> 776       287613        1030017    97777            699560          540000 #> 777       293377         758563    57968            343513           50000 #> 778       294888         555635    12229            145540           46000 #> 779       309406         105388    46468            158873           33000 #> 780       310092         571516    39180            368127           72000 #> 781       311837         738278    73940            343839           10000 #> 782       311898        1692372    30160            450399           75000 #> 783       312516          55154    49144             99273          180000 #> 784       313958         237384    30093            312366           10000 #> 785       318758         221904   -38776             21452           28000 #> 786       319871         125087    15048             88239           24500 #> 787       343584          42550    20445            244340          149000 #> 788       346475           7822      298             96530           50000 #> 789       347882         670707     1598            483390           82000 #> 790       360300         122453       38             45327           52000 #> 791       364695          66250    16368             80040          120000 #> 792       384961         689010    18358            467684          225000 #> 793       389630        2311812   326573            977718          300000 #> 794       392448         453164   129328            602413           78600 #> 795       415928         582986    26775            367776          655000 #> 796       418067         361873   173240            564082          200000 #> 797       418692         514710    33271            152869           25000 #> 798       420541        3881788   125173            664250           52516 #> 799       431274           6385     1682            137468          170000 #> 800       448274        1284039    48322            734180          284000 #> 801       461513         117369    71646            303403          278023 #> 802       471789        1749192    35446            649856          105000 #> 803       472901         823835     3296           1240894          100000 #> 804       480041        1388028    35652            829096          272320 #> 805       495540         937846    55803            584555          155000 #> 806       496875         589319    93166            342002          240000 #> 807       527424         153538    63762            561806          126000 #> 808       538817          62134    20050            531708          500000 #> 809       567009         793361   222941            967259          150000 #> 810       637551         139663   124173            132468           94000 #> 811       638494        1335833   497490           1220314          340000 #> 812       693382         532057    52421           -460175           50000 #> 813       717347        1603477     1675            697201          400000 #> 814       738553         363647     5384            535548          150000 #> 815       758872         968509   212348           1061788          680400 #> 816       792219         222106   151547            642349           60000 #> 817       801540         217195    68640            217320          150000 #> 818       802561         221996    22736            313308           11410 #> 819       828861         163531     5993            284235          264000 #> 820       929949         240732     7764            319252           75000 #> 821       937799         751703      639            687760          500010 #> 822       944712        3849479   424501           1671229          250000 #> 823      1056192        2060604   295406           2385687          400000 #> 824      1171886        1158396     3209            357841          930000 #> 825      1179865        1563965   229523           1208083          400000 #> 826      1192654         398222    15538            201026          150000 #> 827      1273843         219508   167530            408576           55000 #> 828      1350875         774006    62632           1616323           60487 #> 829      1518834        2143592    73190           1192320          500000 #> 830      1761903        3720758    83892           2549395          240000 #> 831      1956477         213371    45191           1250554          112000 #> 832      2229028        2823558     3190           3172220         1100000 #> 833      2618281        3056551    10497           2145857          178200 #> 834      4994098        1070705    33645           3939325         1078677 #>     SHORT.TERM.DEBT    SALES LABOR.COSTS DEPRECIATION OPERATING.PROFIT #> 1            183077   507061       60067         9006            27560 #> 2             13872    44727        5090            0             -770 #> 3             14154    92922        8583            0            -6434 #> 4             94684   665156        2663            0             3658 #> 5             40669    86020       27054            0            27468 #> 6             35180   297633       35086        19110            15194 #> 7            176649   378474        5105            0             5688 #> 8               402     7849        2376            0              243 #> 9             20948     3430        3112            8              103 #> 10           149402   637815        4085            0             8504 #> 11             8314   371017        5597            0              546 #> 12            19907   233917      179835          381             9704 #> 13            39105   139150      122103          210             1597 #> 14            11120    74373        4784          577             5115 #> 15              739     1857         201            7               64 #> 16            15027   339469        3548          110            -1565 #> 17           164623   441054       23564            0             6946 #> 18             8452   125582       18524          183             3884 #> 19            20678   380017         591           53             4750 #> 20            21333   233756       14679          372             2873 #> 21             7411   224768       23275          214             3947 #> 22             7579    69645        4357          141              878 #> 23           229572   116295           0          362             -593 #> 24            37915    46159         377          692            11871 #> 25            11167   116534        4253          805             3603 #> 26             4853    77844       10487           37               39 #> 27            28500   143403       11578          308            -4965 #> 28            28320    84497       11363          453            12563 #> 29           687142  2045712     1338127            0           -45996 #> 30             4638    34752        3290           92            -2101 #> 31            15789   378108       29709          559             5999 #> 32            14740    31969       14408          301              112 #> 33            10859     8317        3615          307             1539 #> 34            34103   100068       62352          271             1065 #> 35            10393    96500       21473         3118            10932 #> 36            12687   210422        5293            0            -8155 #> 37            27463   133921       13424          248             4436 #> 38              216   600266        4758          388             -456 #> 39            11931   100932        8865          286             2566 #> 40            16612    96499       12566          311             1620 #> 41            18128    94412         351          400            14395 #> 42            71036     3773       17177            0           -14777 #> 43           173854   726488       37010          497             8120 #> 44            22686   166380       20050          631             2762 #> 45            14300   130326       10037          183            -1300 #> 46            80751   130349       12034          128            11187 #> 47            70079   141827       23987          684             2004 #> 48            85720   135138       10738            0             4926 #> 49            63585   136766       17006          569             7843 #> 50             4359   127285       15007          251             3287 #> 51            25975   112162       16746          780             1057 #> 52            26199   118270       12044          465              606 #> 53              356    49335        4414          608              452 #> 54            18495    70200        3959          787             -360 #> 55           162415   292284       28000          817            14289 #> 56            12092   157843        6297          622            -2100 #> 57           105710   310463        9161          905             1607 #> 58            11310    99855        7822          618             2509 #> 59            46803    90834        9553          157             5701 #> 60            26657   133264       22891         1789             4305 #> 61            58254   207609        5835          579             2917 #> 62            10393    96519       19928         1561             3239 #> 63            90529   289985       59491         1526           -10360 #> 64            66816   141618       45310          184             -607 #> 65            70266   204889       10628          859            11448 #> 66            44884   113000       19826         1135             8773 #> 67            35581    86259       31731         1887            13633 #> 68            75656   352846       35952         1311            27396 #> 69            16273    52310       10444          107             1801 #> 70            18302   127663       26272          626            -2003 #> 71             3304   159372        7847          985             4052 #> 72            30389   135055        5176          697             1411 #> 73             4789    46891       16756            6            -3644 #> 74            17070    81321       14588          740              -15 #> 75            70662   168561        8741          572             8567 #> 76            38396   143473       16937         1404             1366 #> 77            52257   215208        8169          599             4920 #> 78           107834   245535       11593          544              473 #> 79            31820   206097       11143         1492             7220 #> 80            21815    45684       21898          769             9764 #> 81            13170    85493       10972         1085              204 #> 82            81631   130327       20422          780            -3734 #> 83           111994   235578       16247          347             5740 #> 84            10081   164324       11025         2157            -2920 #> 85             7373   163078       15785         1044              979 #> 86            44583   323728       14956          745            16533 #> 87            41646   106052       18477          329             2389 #> 88            28512    69515       28950         2186             2750 #> 89            42686   177734        8053         1426             1138 #> 90             1838   879764        9415          898             8114 #> 91            13190   158049       10753          851             1269 #> 92            28233   115199       21666          308            27685 #> 93           148488   640399      102980         1532            26591 #> 94            66053   429374       29405         2099             5321 #> 95            97396   214988       55340         1619             7166 #> 96             7440    45741        6220         1145             2284 #> 97            19790   132001       57657          697             5040 #> 98            41743   103927       29250         1182              540 #> 99           197733   381445       39806         1527            11073 #> 100           74042   292642       26615          787             4750 #> 101           39346   162586       11699         1255             1594 #> 102          110556   111411        4051            0           -16162 #> 103           20448   120047       21083          852            14102 #> 104           21366    95508        7070         1428            -2714 #> 105           24680   108395        5867          724              310 #> 106           19050   225082       20027         3426              518 #> 107           27422    87207       17414         1554             2656 #> 108           81129   290226       46004         1456            20626 #> 109           35699    93308       17547          908             2760 #> 110           34379     9002           0          520             5018 #> 111           97580   357815        4490         1368             7919 #> 112           13403   156250       23758          567             6012 #> 113          196388   383955       66326         1524             7442 #> 114           13385   353398       13987         1686             2004 #> 115           67472   406193        8461          971             8221 #> 116           89688   434426       90438         1433            31780 #> 117           58736   337812       27082         1692             7864 #> 118           12345    85976       36610          876             -510 #> 119            9017   113528       10826          701             -184 #> 120           15975   105504       13182          845            -3427 #> 121          159374   547947       20320         1346             6919 #> 122           29041    96392       44383          558             1583 #> 123          142078   309339       63979         2445            -1998 #> 124           28786    90060       32632          902           -14692 #> 125          185708   307478       30231         3114            13909 #> 126           46313   377912       17223         1741               29 #> 127           35412   192153       20546         1318             1268 #> 128           31648   136223       33682          966            10178 #> 129           80525   542260       24366         2215             4267 #> 130           33147   125440        8661          928             5877 #> 131           34136   419022       65033         2183            12605 #> 132           49963    27024       12090         1204            -7822 #> 133           54427   277754       14282         1718             3672 #> 134           54785   187649       16303         1997             3393 #> 135           49202   206025       28300          548             6608 #> 136           44098   144060       37838         2262            12969 #> 137           86987    39268        2089            0              217 #> 138           31440   169471       13779         1213             9394 #> 139           77336   185166       73529         2494            15200 #> 140            4407    90905       61258         1478             -699 #> 141           90275   158720       33770         2272           -12976 #> 142           27587   304445       51490         1764             -668 #> 143           76213   273646       26568         2468             5506 #> 144           44517   285045       47712         1791             1232 #> 145           29220   137569       15882         1171            10705 #> 146           14028    32643       21181          950             3378 #> 147           48473   130977       28477          374            -5408 #> 148           15390   102601       34856          356             3420 #> 149           40579   211542       32541         2416            10931 #> 150           73829   161308       15732         1515             2843 #> 151           17274    97580       23647         2172             3691 #> 152           36872   195803       21329         1259             9323 #> 153          101133   132852       20391         2223             6053 #> 154          123148   115218       57796         3164            25657 #> 155           54551   319728      247639         1035            13750 #> 156           65853   293020       17716         2056             9109 #> 157           32160   106850       20570         2421             3693 #> 158           18925   174534        7623          628             2213 #> 159          251126   277939       58629         2988             8525 #> 160          251126   277939       58629         2988             8525 #> 161           53475   120236       10911          622            -8360 #> 162           26054    53069       40204          993             -562 #> 163           47373   179818       19854         1409            11701 #> 164            7929     2588           0           95              225 #> 165           22489    85990       21090         2555             3391 #> 166           38496   172469       29918         2795             1700 #> 167           25513   145430       13900         1253             1566 #> 168           82631   282747       26739         1243             7372 #> 169           14777    81802       69471         2025             2758 #> 170           15947    77381       50196          831            -5429 #> 171           61113   181548       18259          654             1282 #> 172           21990   217748       29524         1417            13564 #> 173           47232     2200        1665            0            -1453 #> 174           42919   224744       34261         1741             6072 #> 175           32642   201870       53977         9210             6398 #> 176           33767   201322       20087         2801             6443 #> 177          214330  1596389        4179          426            31603 #> 178          199026   878936       46958         2167             5552 #> 179           23125   161655       18443          318            23689 #> 180          127844   235875       37492         1867             3328 #> 181           30299   201808       17755          739             3052 #> 182          134611   225813       47907         2743            18846 #> 183           52231   992905       39846         4124            10154 #> 184           38098   115535       28552         1567             5629 #> 185           47599   202988       33228         1876             7223 #> 186           27380    96192       83524          576              815 #> 187           55138   102623       15879         2459             6758 #> 188           26237   193278       33985         2217            13718 #> 189           78564   331231       24070         1670             7575 #> 190           50604   825168       54855          921            14221 #> 191          146559   295086       58763         2043             6084 #> 192           16101    95469       20277          899             2738 #> 193          104775   223687       76032         4350            23358 #> 194           23712   159558       25176         1497             6053 #> 195           60307   146725       23892         2273             2771 #> 196           25518   162998       36078         2072            18219 #> 197          261223  1258514       21701          681            47980 #> 198           10571   157390       24768         1066             2550 #> 199           89888   145666       21119         3323            12949 #> 200           12940   102619       20147         1349              845 #> 201           20107   147019       43804         1442             1729 #> 202           59830    86970       34751            0            -2743 #> 203           15233    48015       26725         1550            -4091 #> 204           11749   126884        5827          499              941 #> 205           19826   164477       24861         1285             4091 #> 206          152452   266237       57962            0             2052 #> 207           23815   171206       29112         3080             1238 #> 208           31865   110107       40121         -119             1486 #> 209            4535   114883       14174         1425            -3372 #> 210           78489   234802       25972         1380            20865 #> 211           17456   159120       24669         2376             2350 #> 212           70250   256184       17650         2620            12170 #> 213          115399   445017       40268         2512            30390 #> 214           15082   117734       10733         2382             3982 #> 215           44776   311906      187556         2590            41916 #> 216           33180   107650       26368            0             5963 #> 217           25845   230106       17991         1942            14560 #> 218           55584   185950       41873         5066              986 #> 219           69147   664592       30759         5913             8314 #> 220           11563   299373       15295          502             2890 #> 221           32573    89243       15626         2648            -1166 #> 222           45873   367061       20331         5523             4877 #> 223           90154   130240        9182         5053             7855 #> 224          142764   159173       46700         2962            17122 #> 225           21546   132658       30480         3503            10858 #> 226           47097   350212        4416         1647             9292 #> 227           27548    88253       46092         1447             2524 #> 228          221322   460348       46101         1657            22326 #> 229          213423   419916       86589         1751            29745 #> 230           16400    79943       16555         1222             6588 #> 231           82058   235042       24295         2185             6748 #> 232            6544   155341       34673         2230            -7170 #> 233           65811   238081       34386          701            10646 #> 234           22290   155142       19481          907             5150 #> 235           16324    91614        9677          787             4885 #> 236           17839    90160       28037          517             4546 #> 237           11148   381496       32675         3592             6796 #> 238           47847    69396       17740         2904            15751 #> 239           48692   269938       42404         3238             3858 #> 240            9035    52963       18300         5367             2293 #> 241           20196   224874       16771         4747             -370 #> 242           55632   155695       18473         1403             6692 #> 243           77965   147841       19550           59            -7138 #> 244          155250   332188       50423         2433            30157 #> 245           51865   182235       13621         1818             7913 #> 246           10484    79150       15089         1140             1393 #> 247           32685   327085       10993         1675             3238 #> 248          211663   488367      110879         2161            22651 #> 249           26943   125062       27746         2027             5198 #> 250           20784   138572      101812         1167             8707 #> 251           40032   174945       48025         3263            26514 #> 252           40881   175520       55388         1942            10424 #> 253           36524   266204       69685         1576            11578 #> 254           39694   107370       19108         1545            -8412 #> 255           32889   112374       29298         2739             8073 #> 256           35500   141452       18169         3391             2957 #> 257           26700   109697       32353         5283             2355 #> 258           19740   187202       17264         1052             6920 #> 259           27832   205947       33449         1690            -4078 #> 260           72870    13152       14091          752             2770 #> 261           11967   132935       35557         5046             2061 #> 262          141213   672802      290270         2038           129930 #> 263           30078   198265       75358         1238             2023 #> 264           25258   195756       10956         3631             3081 #> 265           52428   592751      437625          964            19838 #> 266          188924   584914       55240         4451             1392 #> 267           36430   172470       71585         1351             8077 #> 268          141824   420203       19911         2763            13742 #> 269           21307   194746       15958         1187              751 #> 270           21861    52080       14669            0            -1438 #> 271           50140   249905      218734         2887            -1766 #> 272           17595   177803       55077         1878             4891 #> 273           23330   127841       13126         1669            -3215 #> 274           22253   121665       11209         1044             4140 #> 275           92997   493296       35900         2157             -238 #> 276           86361   332694       44750         2497            12096 #> 277          136144   452094       52056         2167             6677 #> 278           53376   163299       22171          398             -301 #> 279           37121   219107      147666         4332            12734 #> 280           16239    69520        6604         2428             3939 #> 281           50559    43079       19303         1732            -5652 #> 282            5895    88567       47133         2880             4183 #> 283           15175   107268       16837            0             2058 #> 284          206864   694184       39965         3748            28982 #> 285           27442   221368       30334         1941              680 #> 286           14715   197178        6655         2734             3077 #> 287           23897   108991       30483         3600            11921 #> 288           73890   276228       32936         9009             5972 #> 289           65511   338705       32701         2540            31417 #> 290          122540   291192       50158         2125            21750 #> 291          116346   591131       40706         1945            16768 #> 292           26611   309316       17087         2978             4674 #> 293           48558   160656       14034          845             3964 #> 294           47030   234727       10760         2952             2575 #> 295          114836   279489      100845         3933             7975 #> 296           32736   257072       10841         3261             4634 #> 297          138230   308178       76324         5752            10279 #> 298           23395   348520        7106         1558             -620 #> 299          297348   631584       48453         3198            23453 #> 300           19208   106910       32176         3719             2851 #> 301          118017   361814       36398         2781            21317 #> 302           57845    48341       14288         2438             2636 #> 303           36738   134712       14723         2984             7137 #> 304           35566   148421       60850         5377             4390 #> 305           40903   302770        9677         4483             4047 #> 306           79644   222903       24197         3708            10256 #> 307           51911    41034       19644          131              873 #> 308           19587   152861       15110         3162              662 #> 309          131214   324383       97009         6268            28935 #> 310           55549   218520       29218         2925             8562 #> 311           46190   448009       22431         2885            -3356 #> 312           53697   339786       17440         2153             3728 #> 313           48304   422926       18738         3461             6120 #> 314           30858   198830       24788         3045            12741 #> 315          131132   929080       52601         4173            13971 #> 316          114663    87205       32880         3178            -6564 #> 317          188219   184063       36167            0             4602 #> 318          144333  1059859       83436         4044             6063 #> 319          203644   293779       27578         1372             8802 #> 320          120149   315945       23550         1624            16250 #> 321           45053   115367        8156         1366              741 #> 322          131707   242623       40836         2279              346 #> 323          359274   683923       27192         3650            12612 #> 324           40836    81020       29355         2125            24811 #> 325            5350    62571       12161         1572             8606 #> 326           63338    80566       30968         1140            -7174 #> 327           47585   117636       13188         4451             8309 #> 328           47488   149775       18656         1608            -2012 #> 329           19358   210542       68666         7389            27667 #> 330           69862   362780       41494         3120            12855 #> 331           69968   367890       20921         3864             5046 #> 332           30830   275533       61639         4164             3822 #> 333           40218   342686       21545         3124             2564 #> 334           39558     9689           0         1323            -7697 #> 335           30394   146469       38359         2274           -16280 #> 336          112408   240258       51196         3764            11049 #> 337           70924   381518       67692         6559            14891 #> 338           25457   106155       10788         2321              -95 #> 339           78654   258567       96735          964           -32360 #> 340           38960   132051       49951         1897            -2659 #> 341           40955   269717       52607         1939            23738 #> 342          183149   465202       57756         1988            15551 #> 343           83473   316849       23834         1758            12350 #> 344          121820  1110812        3253         1223            23960 #> 345           49548   155346       22578         2989             8271 #> 346           53426   211062       13910         1004             3849 #> 347           39101   161217       21054         5640            12448 #> 348           92768   309149       36814        21875            -4309 #> 349           85051   108058       35362         4715            -9766 #> 350           58912   162338       41889         1498            -8853 #> 351           83845   520086       27105          459            19215 #> 352          354155   456630       44607         3726            18679 #> 353          125158   541049       37286         2212            -1863 #> 354           84574   133910       62455         1974            10699 #> 355          339808   345832       36360         4855             9827 #> 356           64064  2963884       22828            0             5056 #> 357           23496   152541       25550         3231            10412 #> 358           64184   363487       24820         4549            24237 #> 359          212403   134785       20608         3277            10367 #> 360           33857    99279       43696         2257            19609 #> 361           43874   153548       38795         2204             6692 #> 362          127448   434031       21511         2858            10142 #> 363           92262   177518       58601         3810             3703 #> 364           46854   133731       35097         2957             7290 #> 365          143049   517061       65991         6149            18397 #> 366           26893    78948        9452          906             1413 #> 367          133930   495375       43039         3581            14996 #> 368          116258   567711      274549         5347            11317 #> 369           61264   155290       21643         2942            11183 #> 370           93408   379280       86492         4978            14929 #> 371           87705   495111       96760         4708           -29088 #> 372           40639   209870       18237         2930             5843 #> 373           45651   203285        7404            0            -8108 #> 374           63014   402218       49523         5409             3539 #> 375          144834   412910       21866         4390            10546 #> 376           43001   243574      121997         3916            24526 #> 377          142496   106807       14055          586           -21344 #> 378           19254   141342       16096          737             6829 #> 379           31420   163907       21065         4269            14275 #> 380           42438   225594       20616         3543              865 #> 381           74141   214456       27649         2895             8909 #> 382           31658   101222        8477         1387             -146 #> 383           27918   526823       17462        10676             4702 #> 384          123903   306522       48021         1451            17602 #> 385          201466   654845       31778         5668            19225 #> 386           21114   227123       26063          924             7001 #> 387           50617   106817       13780          500             9101 #> 388          236421  1106446       28289         3363            37582 #> 389           41076   240563       97331         4168             -499 #> 390           98094   217399       17693          598             3791 #> 391           85260    85110       11000          834             2191 #> 392           92311   124587       25575         2599            20304 #> 393           67450    94286       35274         9635             2165 #> 394           16269   333919       13657         2927             2435 #> 395          105011   348217       43388         7553            15048 #> 396              85     2430           0         1731              768 #> 397           24820  1571043        9863         1243             3260 #> 398          111990    36501       24873            0           -19814 #> 399           31511   179580       40376         1111             5474 #> 400           39525     6399        4734            0            -2670 #> 401           49879   382065       41209         4867             9012 #> 402          253913   504682       30780         1221            13993 #> 403          297357  1906410       30275         2184            46468 #> 404           86841   322228       27357         4561             7558 #> 405          125308   164284        8195          935            27855 #> 406           58537   142977       36837         4381            11635 #> 407           67274    85828       26891          883             7170 #> 408           35415   308242       76133         5536             7217 #> 409          139786   102752       40420          468             6229 #> 410           26270   211276       36528         8743            18056 #> 411           43032   335208       96849         6914             7557 #> 412           85292   328379       24036         3819            12041 #> 413           56995   139055       81855         8609             1870 #> 414           31777   136467        8161         8261             2625 #> 415           43227   203776       73866         1957            31719 #> 416           47089   122544       19788         2328             5363 #> 417           34380   216245       17249         2015             5417 #> 418           96607   746612       98834         1164           108999 #> 419            9958    76107       65060          740            11106 #> 420           23531   199715       65482         5179             3859 #> 421           34692   136144       14528         2029             8552 #> 422           42978   313652       33323         4918             4401 #> 423          118242   413096       16622         3711             7017 #> 424          182222   279335       23218        18915             8192 #> 425          127434   422980       67046         2227            18776 #> 426          153285   498747      165873         4375            -8611 #> 427           79879    99802       26381         2899             4778 #> 428           54531   308829       14644         4056             3247 #> 429           18571    15720        9374         8501            -7962 #> 430          266006   496612       69513        10357            47112 #> 431           53723   159375       19192         3643             3203 #> 432           70027   165924       26617         9606            12356 #> 433          154634    12652        8965         2162            -7534 #> 434          202884   480476       20684         2104             3586 #> 435           46290   131824       42027         4811             3410 #> 436          152298   551770       79979         5562            67467 #> 437           21599   103869       33473         4511               23 #> 438          107437   252290       50066         8308           -30933 #> 439           25850    47415       11296         2383            14094 #> 440           43338   147544       55093         3630            -6284 #> 441          159402   850082       29713         1203             7245 #> 442          106414   261845       29785         8673            18170 #> 443           34816   163701        9227         1363           -13354 #> 444           46318     9298       14981          400           -38266 #> 445          143493   434589       50383        54398            39025 #> 446           68186   321835       35815         3821            10158 #> 447           80407   170172       12144         4301             3976 #> 448          149696   528484      118131         9246            20300 #> 449           87593   366323       36169         3947             6075 #> 450           52081   184116       14854          229             3729 #> 451          109259   408823      119829         8395            13611 #> 452           46705   116873       37117        16192            10699 #> 453           65407   472848       16291         4067             2619 #> 454           73467   254514       20715         2646              340 #> 455          199094   291317       63414         5822            20490 #> 456           31266   232268       31551         7123            17248 #> 457           86028   261997       18394         4763           -29358 #> 458          114716  1206736      103003         4539            29425 #> 459           47684   193299       70089         9139             -944 #> 460           50145   221918       98610         3895            33201 #> 461           53169   299693       53547         4633             7719 #> 462          216362   514408       26297         3663            26452 #> 463           80734   123745       31069         1990             7917 #> 464           64529   102116       11447            0             7968 #> 465           28710   269752       84342        14512             5157 #> 466          470768  1121266      105966         7384            57666 #> 467           94701   179088       14672         4748             2241 #> 468           18498   235730       50432         8615             9994 #> 469           48664   135659       17115         4166            12561 #> 470          172208   367671       17883         2992            20637 #> 471             346   121455       35110         2670             4173 #> 472           75027    52884        6075          120             3258 #> 473           47427   131789       42884         3145             4192 #> 474          154036   235082       30113         4272            29641 #> 475           71662   661414       79443        11785            50732 #> 476           51976   803466       56904        12215             2657 #> 477          127100   318796      163712         4243            31952 #> 478          197984  1521462       67678         5525            25210 #> 479           36541   241944       26387         5441             4169 #> 480           43247    49639        4987         6486             2243 #> 481          462341  1308738      213736         6078            77488 #> 482          347331  1042083       37716         2920            12325 #> 483          208404   863313       53295         5560            11108 #> 484           42070    95287       35373         8054            -6182 #> 485           70426   328408       13480         2983            14689 #> 486           51465   646397       56180         3279             1675 #> 487           58316   367741       47977         9579             3603 #> 488          129682   473521       32529         2524            -3412 #> 489          352469   874361      133834        13657            37903 #> 490           36457   227875       73138        25214            22540 #> 491           38353   221321       25371        11317            35309 #> 492           51947   373611       86101         3288                0 #> 493           25014   100616       16249          671             4145 #> 494           27667    27166       30770            0           -12904 #> 495          288171  3666486      226163        29063           120274 #> 496          180466   874582       87484        14700           -20388 #> 497           35913   112511       48457         4230           -23304 #> 498           26463   271300       23039         3628             5034 #> 499           25659    58364       13667         5449            10795 #> 500           -2701   114038       26041         8251            15951 #> 501          162123   451537       82992         5607             7057 #> 502           92444    94839       39368         6410            15969 #> 503           70896   191476       75233         6692             9364 #> 504           49565   223026       39872        14689             5343 #> 505           60204   156839        5042         1964             5146 #> 506           61347   133512       46207         6818             6668 #> 507          171786   585234       42096         7326            38704 #> 508             975   220590       25450        10399             6368 #> 509          258598   418486      118668         4743            41976 #> 510           75588   542767       32418        14148             5182 #> 511          198474  2585548       99697        13004            76174 #> 512          112605   294996       71289         8044            24130 #> 513           47701   384306       70469         7611            27471 #> 514          122826   300730       38656         5746            13185 #> 515            9314   113662       67121         8446            -7901 #> 516          119881   317046       71430         9711             5585 #> 517           71693   280916       38053         7333            22904 #> 518           97778   417532       43760         2897            28288 #> 519           45857   434760       72629         9223             9155 #> 520           36405   184583       60367         6639            40690 #> 521           60754   126450       42247         4461             4751 #> 522          221360   369657       85920         6190            34071 #> 523           42627   195587       59835         5472            18692 #> 524           76698   208548       56261         5137             9689 #> 525            6814    86847       35615         4831            19297 #> 526          284484   743417       52592         4046             2630 #> 527           23186   201912       35832         2452            15583 #> 528          135806   995791       34261         7501            16801 #> 529          536327   342975       89779         6289            36072 #> 530          119154   158831       45813         5890             5975 #> 531           94110   256361       73315         9797            16125 #> 532           78659   134528       43786         5958           -10729 #> 533           75527   207786       59891        17780            10585 #> 534           28278    86957        7389         1687             6842 #> 535           59584   599909       32253         3641             1317 #> 536          196763   416504       46002         7866            29427 #> 537          246537   285467       49064          417           -14450 #> 538          107243   144187       36231         1695            13763 #> 539           60643   288555       99512         6868            13841 #> 540           59675   543498           0        11279             6388 #> 541           63963   168886       62533        14208             5335 #> 542          258348    72588       35331            0           -18515 #> 543          110707   954702       47722         6238            58172 #> 544          264206  1085694       54140         5191             3976 #> 545           64943   166619       23803         4242             -877 #> 546           70305   353682       29975         9227            16423 #> 547           18970   126498       86073         4387             8447 #> 548           66400   621206       74497         6816           -42009 #> 549           91875    93791       21429         9088             7258 #> 550          137494   634841      285508         8911            44910 #> 551          190172   437193       69164        10656            23450 #> 552           57189   250455       33196         3838             7004 #> 553           89731   343808      131276        13621            41963 #> 554           65125   361267       46350         5700            29638 #> 555           76715   291096       38628         7815            35553 #> 556           46867   275508      131446         8224            -2934 #> 557           32570   193106       37824         8909            29507 #> 558           12563    17005           0         7322             7880 #> 559          161375   509226      143754        18484            15191 #> 560          742072   527380       78638         4582            12171 #> 561          505223  1340515           0         7229            95749 #> 562           54691   176326       86743         5881            13505 #> 563          212108   798829       83389         4051            28219 #> 564          311335   879659       93069        12601            18827 #> 565           39603    68759       33536         6641             2700 #> 566          179442   493368       37945         6662            16376 #> 567           81170   181151       24720         6944            35471 #> 568           65680    81825       13320        13173             4943 #> 569           31593   212567       70712        15081            15463 #> 570          221198  1053112       42206        15246            48627 #> 571          103949   496241       50765         4496             4028 #> 572          968477  1380249      155608        10115            66522 #> 573          330559   280563      113336         6530            18590 #> 574           78498   193507       59290         8743            44480 #> 575           46306   139313       42925        10556            -2435 #> 576           88191   405250       51039        10984            18949 #> 577           75743   276617       43886         4120            24568 #> 578           41619   172290       26381        10982             3318 #> 579          113649   558197      234969         5401            31590 #> 580           51104   217865       65042        15895             9001 #> 581           90281   200595       98054        10759            16106 #> 582           73279   418517      284653        24959            42973 #> 583          875439  1372977      143186         3904           102636 #> 584          161284   413606       49099        12019            69834 #> 585          104540   529339       32539        11306            33699 #> 586          143039   241079       66112         9309            14025 #> 587           90060   205695       28021        16275            17995 #> 588          269669   139553        4864          661            12363 #> 589           39994   189192       26858         4260            17326 #> 590          172975   401441       40082         7322             7375 #> 591           21182   110977       53188         1648            16824 #> 592          186882   286692       41538         3933            12903 #> 593           89514   241994       72311        10057            -2222 #> 594           55097   172771       73102        15506             7878 #> 595          109030        0           0         4053            -4136 #> 596          270146   441182      218442        15310            17072 #> 597          140749    15498       11258          980             1508 #> 598          109741   707711      102979         1773                0 #> 599          229617   312518       91421         3545            42324 #> 600          124550  1138354       79437         5522            37136 #> 601           64565   544275       50512        13900             1644 #> 602           80600   223430       68060        12571            26412 #> 603          123884   313159       11642         1186            14249 #> 604          108817   336026      101482        14300           -26835 #> 605           43354   141617       39852            0             4234 #> 606           83602   401129      172205        31634            24836 #> 607           14978   422701       41471        17163            13283 #> 608           69523   242494       63064         4799            27954 #> 609          221773   381236       52436        13747            16958 #> 610           45955   141026       51330            0             5618 #> 611           99643   519701        6032        21348             4076 #> 612           25731   238304       48537        13219            21992 #> 613           79473   148693       46870        10922            12460 #> 614           81080   347819       66024         2602            44819 #> 615          133558   132691       17905        12187            13387 #> 616          128530   217868       24326         3079            22334 #> 617           61900   311617       87133        11067            20840 #> 618           70828   509355      102062         9981            36379 #> 619           99385   377135      195147        24563            15360 #> 620           98011   355250       82463         7938            20998 #> 621           63284   231508       84317        11013            12272 #> 622           96927   439878       13629        15220           -14768 #> 623          126114   198304       63780         6478            23217 #> 624           60338   240484       65661         6082            14636 #> 625          167630   655163       47075            0            11375 #> 626          192663   596058      100994        14347            10149 #> 627           53061   277358       15268        14822            16909 #> 628           48215   361234      125960         8526            32463 #> 629           89574    15707       23990            0           -77180 #> 630          288686   933724       64296         5051            46374 #> 631           39983   146235       33172         4791             -591 #> 632           32682   381208       14521         6663            16749 #> 633           23779    33000        8268         4968             9047 #> 634          205505   595836       30861        17971             6780 #> 635           49279   342731       44397         6072             1370 #> 636           21262   100408       23777         1760            17630 #> 637           97974   465436      102353        23888            14417 #> 638           78972   184735       27778        15125            11857 #> 639          123388   709929      244141        14015           124169 #> 640          108249   193189       32013         2538            14994 #> 641          197885   447519       87439        10293           133439 #> 642          294982   763019       15764         5715             5478 #> 643          153874    31086       33388            0             1522 #> 644          216995   403475       52368         4130            18144 #> 645           27298    14700           0         2219            10033 #> 646           48251   121691        4951         3268            17330 #> 647           19600   342857       55649        20412            31365 #> 648           81878   234311       45951        14287            39009 #> 649          161096   484726       98937         6488            76902 #> 650           41016   109897       22350        10736             -117 #> 651          260455   672685       54668        10269             1632 #> 652          133253   457911       36279         8164            25383 #> 653           55192   188415       67864        25428             9650 #> 654          140100   526880      139791        15490            49162 #> 655          256758   742052      144234        32601            51862 #> 656           94218   458218       41230         5010            45156 #> 657          131454  1258288       61523         6947            19517 #> 658           50507   307281      101219        23580            23703 #> 659          153159   117184       60400        10368             6407 #> 660            4740    17031       15819         3467            -4475 #> 661          223362  1044544       79017         4174            16989 #> 662          140587   470861       39624         7261            16850 #> 663            9724    89551       10905         8392            19406 #> 664           23628   287793      105047        20489            27048 #> 665           48658  1023576       80386        10133            31154 #> 666           37861   654635      171904        26781            23712 #> 667          110368  1463965       99784        18286            39814 #> 668           56097   317992       85442        19198            98282 #> 669          558892  1244897      232428        20672           -25628 #> 670          239735  1703267       28376        14471            70394 #> 671           27509   434904       74947        27685            30562 #> 672           50397   556820       79133        25003            15131 #> 673          253715   215123       30298         4934            51232 #> 674           53246   506085       45749            0            -2361 #> 675           79899   809507       49434            0            27025 #> 676         1158280  4236793       50755         5794           117418 #> 677          163431   638999       77871        20722            33167 #> 678          396291  1490007      477447        11636           172418 #> 679           89277   432447      129752        14352            42334 #> 680           64498   239435       64925        10344            76016 #> 681           88907    47560       19241        19029           -23305 #> 682          316503   449758       72810        26037            17574 #> 683          159165   578491       95305        12673            86803 #> 684           34286   164810       26521        18734            14310 #> 685          172787   699257       67042         4373            11849 #> 686          164562   594560      229390        22344            18180 #> 687          401038   674277      220433        14377            47282 #> 688           49229   141360       45428         8110            23202 #> 689          176687   780257      204909        27578           132069 #> 690          181129    81030        3989         2713            48806 #> 691          242950   293799       83278         9044           -19755 #> 692           86343   581679      207340        77762            24238 #> 693          148317   432567       43590        13667            48756 #> 694          457227  4033911       53800        10933            77759 #> 695           91190   200361       88683        12183            30660 #> 696          179277   331584      194685         8708            19275 #> 697           72122   389910       55240        68668            18363 #> 698           84193   403962      117727        30366             1068 #> 699           15414   124027       54353         7461             8067 #> 700           95178   630973       86507         9057             5722 #> 701          133402   345407       68706        15199            36403 #> 702           34814   112486       38453         6062             1616 #> 703           39682   185437       55920        16182             5296 #> 704           95317   419468      115059        23543            39595 #> 705          417203   420786       91360        22919            17166 #> 706           63850   228380       44513        16578            50007 #> 707          177144   968454       96634        23499           188678 #> 708           26414   217456       52378         7358            27527 #> 709          284695   481864       89276         1754            51868 #> 710           11941   171721       80098         8461            19428 #> 711          287773   649651       90072         8559             9384 #> 712           90732   406335       35957        75214            74708 #> 713          551816   775557      115186        18907            21028 #> 714           16131   145037       16642        51342           -66205 #> 715          109008  1415708      171407        86277            98703 #> 716           85207   328721       10037         1535           129644 #> 717           83760   844306       61783        11303            22015 #> 718         2266035 15382214      751130        33853           631320 #> 719          279969   851472      132463        26835            63716 #> 720           92079   112765       21815         2565            12711 #> 721          163752   606442       79383         3188           -12229 #> 722          277592   487102      100184         6058              312 #> 723         1101067  1042736      269172        19849            77458 #> 724          716073  1569768       88346         9068            45077 #> 725          195677   606335      391580        24708            51968 #> 726          643624  1634916      208107        29965            -1817 #> 727           51104   244054       35705        14434             6864 #> 728          520015   906841      244750         6251            50127 #> 729           84098   389309       75577        33254            26087 #> 730          144951   322311        7863         1251            15044 #> 731          374820  2849751      260175        15097            43367 #> 732           84261   537844       78476        94841            40637 #> 733          333331   860027      179128        21953            68095 #> 734          401971  4969838       75391        40848            53069 #> 735           58379   282497       88810         9055            40097 #> 736          253391   427609      175116        31573            35159 #> 737          618416  2743389       91679         6261           -37652 #> 738          181525   363910      145190        15748            43905 #> 739          219504  2130423      197057         8717            14839 #> 740          208127   677497      278161        43821            94731 #> 741            7424    37452       27788            0             4724 #> 742          964025  2174636      225368        32995           232242 #> 743            8802    61225        6791        41942             4131 #> 744          634435  2271177      226205        19880            15286 #> 745           22554   121389           0         6823            23267 #> 746          115523   331569       42587        28751            31702 #> 747          107130  1206118       31665        16371           176879 #> 748          269241   488700      132087        23811            39805 #> 749          399262  1797318       95029        16814            32296 #> 750          152689   671265       33526        15025            31106 #> 751            4567        0           0          227            -1185 #> 752         3063818  3317081      898092        18614           110441 #> 753           13550    23562       19496         6478           -19533 #> 754           44069   184884       78016        11540            29682 #> 755          510336   825910      123387        19735            79467 #> 756         1582260  5732893      212561        37486           149761 #> 757          264474   617284      131582         2750           -67414 #> 758          565123  1607361     1048056        25666           -25484 #> 759          641749   293158      166475        21402           130159 #> 760         1075859  2335678      173899        15180           194674 #> 761         1075859  2335678      173899        15180           194674 #> 762          169606   629604       51459        13069            27476 #> 763          261186  1150159       79351        30450            47572 #> 764          528694  3637876      181020         2498            78630 #> 765          410901   196104       50511         6722             9641 #> 766           96207    46976       22389         5969            11676 #> 767          211191  1374454      136791        16318            94411 #> 768          981314  3050326      760807        53895           124122 #> 769          123084   724751       86835        11897           -95659 #> 770          135504   679008      140075        17524            31570 #> 771           58083   270542       74961        11689            43582 #> 772          193195   978425      652380        67266            -5257 #> 773           51753   496381      148160        35345           126312 #> 774         1205941   677857      126213        12331            70841 #> 775           58906   306509       96093        26367            44588 #> 776          617727  5001441      225607        50244           223567 #> 777          673448  1777527      415627        60627           116583 #> 778          704983   687910       63481        25930           -43078 #> 779          162358    91158       23327         5850             3577 #> 780          359573   985449      146871        30258            30445 #> 781          618873  1271693       96672        10412           175882 #> 782         1548145  6426185      316635        39319           402652 #> 783          268098   403919       62842        19589            -2226 #> 784           60612   387079      114814        72221            57299 #> 785          369156   566809      136136        26335             4992 #> 786          149011   783668      299365        64366            46622 #> 787           51048   282959       23328         9318            87907 #> 788           52980   365653      112388        25855            92661 #> 789          451525  1712797      144114        19983            58149 #> 790           51852  1011180       14991         4588             5905 #> 791          122813   102186       14393         6396            34626 #> 792          580304  2630940       79569        21698           128675 #> 793         1706670  6502885      165418        43204           323623 #> 794          206745   658733      127925        90849           184394 #> 795          469917  2052085      219703        29924          -234691 #> 796           96885   543952      123349         3808           209447 #> 797          605264  1861824      171833        31159            30049 #> 798         3601182  6841432      765972        21789           235332 #> 799           38901   138135       28123        14151            41076 #> 800          836229  2503513      401360        65850           238135 #> 801          100068   338949      115252        31843            65309 #> 802         1030290  1900027      212215        59788            83216 #> 803           55842   355809      114519         4467           -41163 #> 804          483738  5359376      263110        46761            42683 #> 805          681430  2139970      757516       168928           228348 #> 806          635221  2901907      414045        58822            48779 #> 807           50118   213753       18440        18176            63004 #> 808           69761   246591       61300        38683            11073 #> 809          372779  2715834       37498        18729           131520 #> 810          554239   349516       31858       135941            27771 #> 811          721298  2452911      454464        61106           744375 #> 812         1390330   294391      267725         4377             1796 #> 813         1285092  3484626      296944        69994           222104 #> 814          557403   200677       79031        19825             1599 #> 815          664008  2251217     1372449        35006           141038 #> 816          157050   716395      211631        51775           153038 #> 817           98071   987200      139548         4258            46563 #> 818          154720   543126      117059         9916            12039 #> 819          121293   467437       77419        55864           130981 #> 820          130280   389181       67675        76502            75346 #> 821          562120  2104339      505078       109414           272885 #> 822         3057183  6677418      773365        64264           862586 #> 823          666197  7826119      638451       140903           327230 #> 824          910463  1678055      212369        68767          -251798 #> 825         1409861  3046552      305080       215771           470413 #> 826          669225  1092903      196189        56534           214187 #> 827          280751   685837      216323       108252            61533 #> 828          489841  2499461      657603       141529           209172 #> 829         1992183  1101805      244377        53359           215760 #> 830         2404310  9115585      775829       199391           878802 #> 831          304181  1685663      810960       115725           330227 #> 832         1803136 13230758     1213615       302198           574246 #> 833         2809802  7340888      840208       265963           666685 #> 834         1627156  8135185      387482       378927          1207056 #>     FINANCIAL.OUTCOME GROSS.PROFIT NET.PROFIT #> 1              -18931         9218       6338 #> 2                 -60         -830       -830 #> 3                 706        -5727      -5727 #> 4               -6625         -944       -685 #> 5              -25480         2580       1496 #> 6                 725        16450      10692 #> 7              -13442        -7753      -7753 #> 8                  -9          234        152 #> 9                 281          664        432 #> 10                  0         3117       1955 #> 11                500         1047        857 #> 12                999        10703       6957 #> 13               1218         1203        782 #> 14                 89         5205       3307 #> 15                -43           -5        -14 #> 16               2165          600        390 #> 17              -5028         1947       1272 #> 18              -2741         1142        742 #> 19              -3563         1178        771 #> 20              -2817          263        107 #> 21              -3353          594        386 #> 22               -387          491        319 #> 23             -11552       -12615      -8200 #> 24              -1324        10682       7141 #> 25              -1013         2589       1683 #> 26                 15         2822       1834 #> 27               -212        -5074      -5074 #> 28                 30        12866      12866 #> 29             -18660        26007      26007 #> 30               -983        -3045      -3005 #> 31              -4882         1116        726 #> 32               1336         1448        963 #> 33                 75         1614       1049 #> 34              -3179        -2114      -2114 #> 35                838        11771       7651 #> 36               -145        -8281      -6481 #> 37               2819         7855       5134 #> 38               1072          615        448 #> 39              -3573        -1006       -654 #> 40                -58         1561       1561 #> 41             -32081       -17643     -17643 #> 42                -28       -14806     -14806 #> 43              -2574         5546       3642 #> 44              -2555          207        134 #> 45               -242        -1542      -1520 #> 46             -24580       -13393      -8750 #> 47                -15         5584       3647 #> 48              -4514          411        411 #> 49              -6960          882        882 #> 50                 83         3253       1991 #> 51               -866          147         95 #> 52               -799         -193       -125 #> 53                  0          452        312 #> 54               1301          992        992 #> 55             -12682         1953       1269 #> 56               -888        -2988      -1028 #> 57              -4338        -2700      -1755 #> 58                488         2985       1940 #> 59              -4298         1402        911 #> 60               1941         2364       2364 #> 61              -2956        -2956      -1921 #> 62                844         4052       2633 #> 63               -950         2011       1307 #> 64              -7615          141        141 #> 65               1984        13600      10127 #> 66              -6830         1852       1180 #> 67              -3478         2823       2823 #> 68              -5091        22389      14552 #> 69               1711         3512       2342 #> 70              -5661         1723       1163 #> 71              -3754          298        193 #> 72               -802         1218        759 #> 73              -2039        -5684      -5684 #> 74               -137          250        182 #> 75              -6658         1909       1240 #> 76              -1103          262        184 #> 77              -2622         2862       1903 #> 78                733         1207        933 #> 79              -3970         3221       2197 #> 80              -5833         3896       3968 #> 81                130          253         91 #> 82              -4555         1815       1180 #> 83              -3344         2705       1758 #> 84               -175        -3095      -1798 #> 85                290         1305        863 #> 86               1419        17952      11669 #> 87               1727         4157       2702 #> 88               -830         1970       1280 #> 89              -4290         2415       1569 #> 90               2207        10321       7444 #> 91                 -1         1268        922 #> 92              25246        31565      31501 #> 93              -5119        21626      14126 #> 94               -161         5159       3688 #> 95              -9293        -2111      -1372 #> 96               -976         1308        905 #> 97              -1379         3100       2424 #> 98               -829          402        261 #> 99              -3777         7296       6450 #> 100             -5253          677        440 #> 101             -1722          818        576 #> 102             -7407       -23570     -23570 #> 103             -9697         4408       2873 #> 104               -11        -1274      -2726 #> 105              -334          833        541 #> 106              -360          137         -9 #> 107             -2303         -146       -303 #> 108             -4652        16371      10341 #> 109             -1296         1464        951 #> 110             -1306        -6665      -4332 #> 111               787         8806       7463 #> 112             -5626          442        420 #> 113              1989         9623       6298 #> 114               528         1506        979 #> 115             -3213         7323       4883 #> 116            -26631         5862       3881 #> 117             -6560         1325        945 #> 118             -4407        -4590      -4590 #> 119               219           52         33 #> 120              1299        -2127      -1382 #> 121              -753         6166       4008 #> 122              -219         1363        886 #> 123             -9374         -369       -240 #> 124              -604       -15422     -15422 #> 125            -14605         4058       2638 #> 126              -831         -983      -1014 #> 127             -4066        -2739      -1792 #> 128              -292         9902       6436 #> 129             -1921         2346       1433 #> 130             -4194         1941       1262 #> 131              6200        19820      12910 #> 132              2936           10         -8 #> 133                 1         3670       2402 #> 134             -2182         1480       1070 #> 135             -3209         3399       2353 #> 136            -12225          743        483 #> 137               -36          181        181 #> 138               656         9403       6186 #> 139             -6020        10332       6715 #> 140               362         -328       -213 #> 141             -2454       -15203       1131 #> 142              1629          961        614 #> 143             -6145          454        260 #> 144             -3849        -2616      -1818 #> 145             -3045         7659       4979 #> 146              1391         4769       3218 #> 147              5617          324        210 #> 148             -1370         2206       1310 #> 149             -9168         3789       2463 #> 150             -1052         1642       1133 #> 151              -231         2054       1478 #> 152             -8191          968        748 #> 153             -9227        -3223      -3223 #> 154             13415        39073      25412 #> 155            -28133       -26236     -30768 #> 156              8342         7518       4757 #> 157             -1505         2497       1623 #> 158             -2104          272       1768 #> 159             -3184         6140       3991 #> 160             -3184         6140       3991 #> 161             -3524       -11884     -11884 #> 162             -5174        -6236       6860 #> 163             -1420        11538       4896 #> 164               272          461         40 #> 165             -1596         1795       1166 #> 166              -947          799        519 #> 167              -425         1291        839 #> 168             -6199         1035        985 #> 169             -2581         -268       -469 #> 170             -1025        -6454      -4195 #> 171             -6429        -4936      -3208 #> 172               108        13899      10590 #> 173             -7639        -9092      -5910 #> 174             -3252         2919       1983 #> 175             -1398         6062       3940 #> 176             -3250         4038       2624 #> 177            -37069         1022        755 #> 178             -2787         2765       1797 #> 179              2378        26067      17119 #> 180             -2060         1267        833 #> 181             -2101          254        254 #> 182            -13227         5622       3739 #> 183             -5859         4291       2789 #> 184             -2323         3245       1955 #> 185             -6339          883        598 #> 186             -1668        -1607      -1044 #> 187             -6173         1715       1715 #> 188             -6393         7179       7179 #> 189             -5206         2367       1613 #> 190             10396        24618      16071 #> 191             -3380        -1037      -2510 #> 192              -425         2631       1896 #> 193            -19502         1964        758 #> 194             -5522          530        344 #> 195             -8433        -5662      -5662 #> 196              1523        19701      12922 #> 197             10230        58506      38103 #> 198             -2676         -125       -125 #> 199             -6836         6113       4021 #> 200              2070         2772       2086 #> 201             -2055          572        388 #> 202             -2309        -4189      -1847 #> 203              -643        -4308      -4308 #> 204              -845           96         62 #> 205             -2256         2498       1623 #> 206             -1707          334        216 #> 207              -295         1800       1390 #> 208             -1751           24         24 #> 209              -236        -3424      -3424 #> 210             -2948        18360      11934 #> 211               694         4002       2878 #> 212             -1745        10461       6814 #> 213            -22856         7602       4991 #> 214             -3538         1001        651 #> 215              -589        41300      26846 #> 216             -3006         4122       4122 #> 217            -12698         2007       1304 #> 218             -3527        -2541      -2541 #> 219             -2108         8920       6093 #> 220              -253         2636       1713 #> 221             -1324        -2236      -2236 #> 222             -3814        11507      11507 #> 223             -5274         2580       2387 #> 224            -17772         -451       -526 #> 225             -6890         1524       1925 #> 226             -6827         2503        834 #> 227             -2072          451        164 #> 228            -13739         6888       3563 #> 229            -17339        12405       -109 #> 230             -3992         2479       1611 #> 231             -6525         1966       1278 #> 232              1245          497        497 #> 233             -9830          857        662 #> 234             -1116         4286       3966 #> 235             -1763         3122       2404 #> 236             -6429        -1882      -1882 #> 237              -412         6493       4875 #> 238             -8646         7104       7104 #> 239              -719         3138       3138 #> 240             -2113          270        101 #> 241              1864         1270        857 #> 242             -5777          630        197 #> 243             -6805       -13864      -9019 #> 244            -22481         7676       7676 #> 245             -1133         6794       5033 #> 246             -1009          384        254 #> 247             -2205         1033        671 #> 248            -14733         8472       5837 #> 249             -2191         3007       1984 #> 250             -2194         6483       4441 #> 251            -22045         4495       2922 #> 252             -1689         8826       6064 #> 253             -2050         9747       6349 #> 254             -1120         1120        728 #> 255             -2194         4548       3511 #> 256             -4462        -1177       -765 #> 257             -1291         1475        801 #> 258             -5131         2889       1910 #> 259              -581        -4645      -4645 #> 260             -2010          719        556 #> 261              -481         2591       2506 #> 262              5292       135222      87894 #> 263              3556         3659       1706 #> 264                 2         3147       2296 #> 265            -35048       -15209      -9669 #> 266              -799          213        138 #> 267             -7559         1517       1067 #> 268            -11332         1246       1246 #> 269              -593          158         81 #> 270             -2825        -3662        724 #> 271             -6587        -7975      -7470 #> 272             10143        14456      14456 #> 273                89        -1088       -720 #> 274             -2352         1788       1162 #> 275                43         -194       -194 #> 276              -893        11202       7809 #> 277               986        10351       6973 #> 278             -4012        -3198      -2078 #> 279              6948        16850       8832 #> 280             -2556         1560       1014 #> 281             -3979        -9380      -9380 #> 282              1366         5550       3694 #> 283             -5033        -5033      -3271 #> 284            -20340         8642       6416 #> 285             -4267         -783       -783 #> 286             -1602         1444       1444 #> 287              1652        13700       9547 #> 288              -357        -2466      -2466 #> 289              1966        34556      22554 #> 290             -5048        17756      12241 #> 291              -751        14965      10040 #> 292              -575         3999       2599 #> 293               945         6313       3885 #> 294             -3046         1041        980 #> 295             -5181         3293       2300 #> 296             -5220         -229       -229 #> 297             -6259         3870       2600 #> 298              -945        -1565      -1017 #> 299            -21390         2615       1700 #> 300                17         2953       2003 #> 301             -4509        17347      11913 #> 302             -2511          223        223 #> 303             -2257         4892       3347 #> 304             -2459         1931       1491 #> 305             -1354         2692       1873 #> 306             -8324         1931       1338 #> 307              -932        -5486      -5486 #> 308             -1357         -694       -694 #> 309             -9960        20735      20735 #> 310              -409         8153       5299 #> 311             -2608        -6482      -6852 #> 312             -2059         1188        809 #> 313             -1059         5500       3565 #> 314            -10408         3008       2307 #> 315             -7471         6499       4388 #> 316             -2760       -10325     -10325 #> 317            -15318       -11064      -7191 #> 318             -5181          772        597 #> 319             -5559         3307      36535 #> 320             -8268         8170       8170 #> 321             -1429        -2170      -1410 #> 322             -7321         4217       3136 #> 323            -30848        11696       8219 #> 324               -69        14835       9486 #> 325              -612         7994       7800 #> 326            -11058          762        713 #> 327             -4329         5076       4778 #> 328               349        -1731      -1731 #> 329              7551        35342      24033 #> 330              1110        13965       9102 #> 331              3091         8138       5615 #> 332              -346         3072       2012 #> 333             -1307         3790       2463 #> 334             -3472       -21647     -21647 #> 335             -2820        23258      15051 #> 336              6847         2957       1807 #> 337             -2211        12720       8460 #> 338             -2937        -1445       -939 #> 339             -5788         2930       1904 #> 340               118        -2407      -1197 #> 341            -17593        10436       6521 #> 342            -15018          532        411 #> 343             -7188         5162       3395 #> 344             -2298        21661      14097 #> 345             -4073         4175       3203 #> 346             -3237          612        398 #> 347              -881        11683       7706 #> 348              1789         8454       5342 #> 349            -13767       -22392     -14554 #> 350             -1616       -10469      -6805 #> 351              8183        27399      17894 #> 352            -23126         3671       2563 #> 353             14409        11534       7712 #> 354             -9026         1713       1113 #> 355            -11221         4469       2164 #> 356             -3899         1157       1157 #> 357             -7919         6371       4325 #> 358             -3506         4582       4582 #> 359             -7397         2970       2190 #> 360             -5242        14353      14353 #> 361             -3898        -3598      -1119 #> 362             -5974         1098        905 #> 363             -9568        -8514      -9597 #> 364             -5896         1474        949 #> 365              1903        21291      13840 #> 366              -441          971        631 #> 367             -8107         6888       4477 #> 368             -1707         9609       6595 #> 369             -8857          380        -82 #> 370             -5186         9526       7026 #> 371             29617          528        538 #> 372               762         6606       4371 #> 373               215        -7893      -7893 #> 374                 9         3561       2519 #> 375             -5033         5329       5329 #> 376              -191        24437      15922 #> 377            -11437       -32782     -32782 #> 378             -1562         5267       3235 #> 379            -10530         3745       2687 #> 380             -4393        -2469       -492 #> 381             -7961         1125       1125 #> 382               171           24         24 #> 383             -3641         4483       2914 #> 384            -11729         5736       3728 #> 385             -3000        16225      10221 #> 386              -568         6433       4596 #> 387             -5762         4427       4427 #> 388            -31908         5698       4994 #> 389             -1299        -1613      -1613 #> 390              2320         6710       4583 #> 391             -3834        -1643      -1643 #> 392            -15735         4545       2489 #> 393             -4534        -3721      -3148 #> 394             -4606        -2169      -1422 #> 395             -8213         7241       4781 #> 396                 6          -62        -62 #> 397              -635         2632       1711 #> 398             -1862       -21607     -21607 #> 399             -2715         2672        224 #> 400              -229        -4358      -4358 #> 401             -2031         7010       4621 #> 402            -12749         1017        302 #> 403            -12414        34053      22184 #> 404             -3448         2954       1697 #> 405             -7146        20718      13653 #> 406             -9551         1661       1353 #> 407             -4356         2621       1708 #> 408             -2207         5358       3667 #> 409             -9954          433        433 #> 410               566        18868      12662 #> 411              -830        12977       8661 #> 412             -6671         5370       5370 #> 413             -5588        -3718      -3792 #> 414              -459         2124       1343 #> 415             -1570        29714      19697 #> 416             -4941          461        193 #> 417             -1168         4248       3281 #> 418             -5823       102949      66917 #> 419               406        11512       7483 #> 420               782         4641       3585 #> 421             -6294         2260       2260 #> 422             -1238         3027       3027 #> 423              1982         9726       6495 #> 424             -8175           16         12 #> 425              1245        20021      13147 #> 426             -1500        -9474       9474 #> 427             -3270         4946       3103 #> 428                17         3069       2038 #> 429             -1600        -9558     -11278 #> 430            -16578        32324      20538 #> 431             -7182          282        127 #> 432             -3832         8523       5629 #> 433             -7340       -14676      -9631 #> 434              -417         3310       2441 #> 435             -3471          838        322 #> 436            -34757        32709      21304 #> 437             -1349        -2019      -2019 #> 438             -4830        -8809      -5726 #> 439             25782        44982      30340 #> 440             -6283       -12676      -8239 #> 441             15171        22219      14463 #> 442               499        18631      13358 #> 443             -4403         -662       -430 #> 444              -224       -25710     -25710 #> 445             -1101        47450      30832 #> 446             -3482         6544       4809 #> 447               -88         3934       2951 #> 448            -20191         3562       2757 #> 449             -1036         5038       3275 #> 450             -1604         2371       2371 #> 451             -8442         4506       3166 #> 452             -8481         1918       1246 #> 453               136         2755       2192 #> 454               941         4152       2698 #> 455            -18832         3455       1326 #> 456             -3658         9474       6453 #> 457              -683         1069       1069 #> 458              6744        36244      23498 #> 459             -4729        -5324      -3461 #> 460             -3036        30161      20066 #> 461             -5994         1895       1219 #> 462             -6208        27147      17645 #> 463              1060         9003       5885 #> 464             -9185         -725       -471 #> 465              3479         9626       7478 #> 466            -16981        37251      22965 #> 467             -1996          244      -1592 #> 468              1516        12050       9166 #> 469             -5887         4869       3823 #> 470            -16894         3743       3014 #> 471              2689         7113       5245 #> 472               -29         3414       2388 #> 473              4034         8471       6093 #> 474            -23403         6237       6237 #> 475            -43524         7208       4685 #> 476             -1107         1605       1043 #> 477            -11526        18502      11346 #> 478            -22785         2718       1767 #> 479             -4799         -858      -1364 #> 480              1252         3496       2532 #> 481            -32380        34359      22094 #> 482            -17480        -4201      -2730 #> 483             -4862        15224      15224 #> 484               256        -5558      -3612 #> 485            -11971         2718       2127 #> 486              3805         5484       3516 #> 487             -2274         1328        979 #> 488              2062          483        367 #> 489            -17695        20013      14068 #> 490               771        21312      14074 #> 491             -2524        33448       9058 #> 492                 0         -166       -166 #> 493              -795         3350       2177 #> 494             -4723       -17628     -17628 #> 495            -37473        40493      24867 #> 496             -6458       -34465     -34465 #> 497             19203       116693     116693 #> 498             -4128         1190        933 #> 499             -5867         4928       4238 #> 500              4124        20116      14456 #> 501             -5319         3575       2372 #> 502              -110        12196      12196 #> 503             -8656          733        733 #> 504              -465         4878       3639 #> 505             -1211         3935       2821 #> 506             -4558         2109       1718 #> 507            -29890         8813       8813 #> 508             -3773         3165       3165 #> 509            -27702        14273       9277 #> 510             -3177         6004       4591 #> 511             -5558        57394      33082 #> 512             -2807        21662      14574 #> 513              2990        30645      19919 #> 514             -7174         3159       2261 #> 515             -3616       -11492     -11492 #> 516             -4925          935       3626 #> 517            -10759        12305       9070 #> 518             -2027        26907      18612 #> 519              3504        13584       8919 #> 520             -8497        32008      22390 #> 521             -4755          328        328 #> 522            -31042         3800       2819 #> 523             -2949        12715       7372 #> 524             -5124         5703       4503 #> 525              1558        18802      12374 #> 526            -17580       -14752      -9718 #> 527            -12947         2772       1912 #> 528             -9370         7498       5093 #> 529            -28732         5507       5507 #> 530             -4057         1894       1216 #> 531            -10164         7215       5020 #> 532             -7413         5174       5664 #> 533             -4616         6457       5292 #> 534               165         7474       5773 #> 535              -411          906        589 #> 536            -20540         8899       6645 #> 537             -7324         1290        838 #> 538            -13603         1610       1345 #> 539             -9271         4775       4842 #> 540              1439         7667       6413 #> 541             -3836         1365         56 #> 542             -6584       -24870     -24870 #> 543            -49872         1236        782 #> 544               590         4521       3085 #> 545             -1052        -1929      -2543 #> 546            -10750         6228       4654 #> 547             -6714         1732          8 #> 548             -5213        -8542      -8314 #> 549            -11721          383        283 #> 550              7370        52031      47181 #> 551             10061        10690       8579 #> 552             -2026         4977       3844 #> 553               707        42671      30143 #> 554             -1898        28368      18439 #> 555             -7494        28070      18245 #> 556               237        -2804      -2282 #> 557            -14488        15189      11341 #> 558             -4356         3639       2372 #> 559             -7672         7518       7141 #> 560              5201        17372      11285 #> 561             58697        58624      38248 #> 562            -11787         1562        920 #> 563            -16214        12005       7803 #> 564            -16841         1402         84 #> 565              -514         9418       5218 #> 566             -6057        11385       7536 #> 567             -5489        29878      20669 #> 568             -3469         2359       1526 #> 569             -3132        12096       7893 #> 570            -26534        24562      14931 #> 571              3133         8839       6470 #> 572            -17572        42811      27079 #> 573            -15705         2200       2200 #> 574            -13357        28841      18795 #> 575             -2978        -1618      -1618 #> 576            -10855         8292       6265 #> 577             -9247        15711      14326 #> 578             -3710         2383       1549 #> 579            -23641         4815       2779 #> 580              -663         4209       4209 #> 581             -5534        15075       9816 #> 582            -17430        25088      16365 #> 583              1923        79472      53109 #> 584            -15319        55344      34229 #> 585            -19948        12560       9214 #> 586            -12860         1165        859 #> 587            -17538         1189        773 #> 588             13451        25814      16779 #> 589              5389        12510       8474 #> 590            -14944         1350       1350 #> 591               319        17199      11179 #> 592             -9538         3361       2162 #> 593             -4388         4423        467 #> 594             -5078        12710      10924 #> 595              3735         9746       4685 #> 596            -15361         1710       1710 #> 597             -1526          -17        -11 #> 598              1958         6634      -6634 #> 599            -24253        13973       8903 #> 600            -39165        -1648      -1648 #> 601              6658         8511       5532 #> 602             -7239        19247      12465 #> 603              -651        12765       8364 #> 604              3363       -23421     -23421 #> 605            -10202        -3471      -2609 #> 606             -5331        23635      20753 #> 607             -7121         6950       4903 #> 608             10993        11858       7708 #> 609            -15230         1977       1977 #> 610             -8515        -2896      -2896 #> 611                27         2555       1918 #> 612             -4302        10755       8351 #> 613            -12250          813         87 #> 614             -2040        42779      29942 #> 615             -9112         4274       2912 #> 616            -17021         5313       3238 #> 617             -4166        19310      14129 #> 618             -6481        29448      23837 #> 619             -7181         2300       1603 #> 620             17815         4518       3333 #> 621             -5775         7846       7717 #> 622             13233         5549       4363 #> 623            -22295         2543       2006 #> 624              -182        15041      10001 #> 625             -7367         2813        908 #> 626             -9963         1341        882 #> 627             -8102        14359      14204 #> 628              5114        37762      25049 #> 629               -56       -77237     -77237 #> 630            -54955        -8580      -5577 #> 631              5694         5103       3321 #> 632              6598        24280      18446 #> 633            -11465         -202      -2620 #> 634             -6871          270        175 #> 635               500         2120       1378 #> 636                25        17655      11896 #> 637            -10907         8034       5830 #> 638            -10930         4444       3044 #> 639              3644       127769      84207 #> 640            -12750         1989       1292 #> 641             -7987       125848      81801 #> 642             16935        28413      18417 #> 643              -245         1277        830 #> 644            -13007         6636       5206 #> 645               170          756        756 #> 646             -4887        12442       8087 #> 647            -17741        11747       8391 #> 648             -8634        30252      19664 #> 649             -9724        75424      47958 #> 650             -4552        -4669      -4669 #> 651              1925        13318       8397 #> 652             -3768        22102      15129 #> 653            -12223         2034       2034 #> 654             -3678        34169      23956 #> 655            -18761        33101      29215 #> 656              -409        44746      31810 #> 657            -15067         7234       7234 #> 658             -6383        15478      11992 #> 659             -1897         4500       2925 #> 660                42          402        390 #> 661             -8291         8698       5697 #> 662            -14035         2814       2486 #> 663             -4005        15565      13457 #> 664             -9947        17028      13065 #> 665               603        33340      21671 #> 666             -9077        15630      15630 #> 667            -12108        29594      20246 #> 668           -117116       -52326     -47149 #> 669            -18298       -41317     -41317 #> 670            -19134        51358      34265 #> 671            -15052         9836       8192 #> 672             -3541        25714      25714 #> 673              -746        -3151      -3151 #> 674              3590          965        745 #> 675            -18014         9010       5857 #> 676             11313       129989      84493 #> 677            -15971        19732      19732 #> 678             12701       185427     120726 #> 679            -10842        31652      21221 #> 680            -84636       -29868     -29295 #> 681             -5434            0     -14477 #> 682            -12974         4600       3518 #> 683             20271       107138      75410 #> 684            -12669         3386       2850 #> 685             -6931         4206       3027 #> 686            -17244         1781       1157 #> 687            -24612        23221      15468 #> 688             -9487        13715      10127 #> 689            -88813        42841      29471 #> 690             12790        61596      40463 #> 691            -12753        12889       8170 #> 692             -2780        20714      15276 #> 693            -10923        42017      29753 #> 694            -60233        21722      21722 #> 695              3969        40781      27688 #> 696            -18156        12114       8514 #> 697             -6866        13673       9746 #> 698             -1366         2111       1372 #> 699             -5159         4909       3153 #> 700             -5224         1252        827 #> 701            -10226        28247      18360 #> 702             -7552        -5936      -3858 #> 703             -9969        -4673      -4673 #> 704            -19981        13619       9693 #> 705             -6651        10515       8123 #> 706             23071        74245      53712 #> 707              2588       196338     129582 #> 708              7508        35022      23569 #> 709            -30007        22511      14641 #> 710             -6220        12581       8301 #> 711            -17530        -4129      -2845 #> 712              4888        79589      54275 #> 713            -13808         5045       4339 #> 714             -5060       -46120     -46120 #> 715             -5164        91268      91268 #> 716             -3806       113345      75386 #> 717             -3555        18459      14427 #> 718            -52343       584640     385101 #> 719            -23018        41413      31424 #> 720              1889        20127      13002 #> 721             32881        20652      16313 #> 722              1121        19355      12704 #> 723            -61110        18714      12601 #> 724            -45994          310        224 #> 725            -26908        25060      16898 #> 726            -57318       -53677     -34890 #> 727             -3120         6025       1381 #> 728            -51706         5568       4052 #> 729            -18734         7557       4168 #> 730             -6722         9698       5387 #> 731              6002        60447      39574 #> 732            -22219        61498      52325 #> 733             18391        87030      57844 #> 734            -17695        35504      27427 #> 735            -32608         6759       4898 #> 736            -17402        14754      10067 #> 737            -28705        21791      14701 #> 738            -16470        99971      64981 #> 739             15604        31527      20492 #> 740             -7625        87729      66088 #> 741             20350        27541      23776 #> 742             10095       242337      99572 #> 743              -575         5891       3883 #> 744            -20389         8761       6577 #> 745             -4169        -5741      -5741 #> 746             -9759        21966      14278 #> 747             -5857       171367     116369 #> 748            -22561        14518      11213 #> 749             12916        34669      20861 #> 750            -18623        12470       6975 #> 751                96        -1086      -1086 #> 752             72507       182949     119482 #> 753              2049       -13546     -13546 #> 754            -29912         -230       -230 #> 755            -31677        31967      20215 #> 756           -116656        34053      25694 #> 757              2905       -64995     -66191 #> 758             47349        10986       7832 #> 759              8640       139484      97410 #> 760           -108965        61756      56770 #> 761           -108965        61756      56770 #> 762            -20760        28330      18414 #> 763            -21489        35873      29641 #> 764            -54962       -27029     -19400 #> 765             -8133         1508       1011 #> 766              1217        82749      79323 #> 767              4445       101333      69657 #> 768            -78943        53048      38506 #> 769            -39656       -13302     -13302 #> 770            -20962        10607       7146 #> 771            -27801        15780      11388 #> 772            -11407       -26170     -15477 #> 773               -11       126239      85003 #> 774            -12342        58345      38348 #> 775            -10337        34730      34730 #> 776              9683       224824     144871 #> 777            -46496        71839      55394 #> 778             13543        19079      16709 #> 779             -3504       123071     123071 #> 780            -17385        -3117      -4792 #> 781            -13505       167319     113592 #> 782           -143761       281283     215745 #> 783            -37128       -40580     -40580 #> 784            -17208        56278      47220 #> 785            -47779         4182       2839 #> 786            -36149        10504       6862 #> 787            -15492        72414      47304 #> 788            -35975        56214      37818 #> 789            -10334        72815      47155 #> 790            -10351         -580       -580 #> 791            -33322        12153      12153 #> 792             -9124        90468      59613 #> 793            -11710       299793     212456 #> 794              -249       182341     127280 #> 795             -4737            0    -239666 #> 796              6792       216961     143009 #> 797             38877         2564       2087 #> 798           -200310        35022      35022 #> 799            -30723        10352       8684 #> 800             39408       187752     129704 #> 801            -40566        19205      10377 #> 802            -33282        49247      34170 #> 803             33604        27406      17210 #> 804            -69248       254959     250284 #> 805            -56677       175412     115855 #> 806            -34323        18137      14773 #> 807             -2416        65272      46488 #> 808             -5359         5714       3714 #> 809             28777       169351     113918 #> 810            -52302         2470       1605 #> 811            108058       856268     561311 #> 812              -514         2121       2121 #> 813            -76394       137108     140758 #> 814             -7368         1170        883 #> 815             33270       174919     118182 #> 816            -17790       128472      83693 #> 817              1123        48186      31328 #> 818             -7225         4814       3712 #> 819            -53602        65842      33488 #> 820            -89906        61434      39810 #> 821            -82687       202053     202053 #> 822            -47012       743965     433780 #> 823             16064       368634     239068 #> 824            -59835      -301172    -301172 #> 825            -81434       388979     268796 #> 826           -117350        91528      59493 #> 827            -85028         9825       9825 #> 828            -10828       184402     116138 #> 829            -50907       163964     109971 #> 830           -357071       643512     474666 #> 831             11820       337251     221033 #> 832           -225585       322184     189148 #> 833           -273549       402390     272972 #> 834             21537      1267541     873843 #>  #> $xm #>      FIXED.ASSETS CURRENT.ASSETS      TREASURY UNCOMMITTED.FUNDS #> 1    -828604.8422     309231.454  101313.60912      -461980.4378 #> 2     887917.4593      70988.815   62035.30136      -333616.7326 #> 3    -309459.2053    -196563.403  -79038.07568      -311190.1437 #> 4     372998.3608     723536.673   -3374.52368        12867.4656 #> 5      78048.3726    -680249.219      21.85038      1016184.5699 #> 6    -281436.8524      51733.638  -70065.67273       172506.4629 #> 7     128452.1528    1541352.587   12843.79821       293433.6539 #> 8    -424701.8138     400604.633  -64576.90563      -217566.7035 #> 9    -217534.8787     552905.380   52981.24672       761088.0126 #> 10    176003.6525    -185522.054   21270.05800      -643928.8430 #> 11    893129.1463    -374999.102  104596.87487        61337.6383 #> 12    -94999.1025    1091340.161    9658.45701       132814.1873 #> 13    583429.1625    1189829.520  -56495.14404      -496037.1586 #> 14   -548122.3549    -434422.944  -94396.09227       120538.8220 #> 15    130875.8562    -127723.464   18442.60028      -200031.0208 #> 16    760526.5252    -210595.530   96858.55415      -732749.0392 #> 17   -560434.9646     808446.250   65669.74223        78347.0326 #> 18  -1081423.7477     331935.726   66953.56554       115743.1134 #> 19     60670.8326     413996.537  145378.78027         4946.9028 #> 20    265582.3153     910356.404  -64771.21739       -90396.4382 #> 21    524809.3980     155226.368   45125.02367      -501846.5069 #> 22    517481.6761    -133787.220   15075.11548      -117337.0636 #> 23     54762.9361     525497.727   -6224.98187      -108789.1944 #> 24    -78395.8406     255679.344 -123606.76027      -250095.9844 #> 25    -77566.4574     361520.568   31588.61049       174647.6161 #> 26   -250929.6709     -80851.963   46219.02818      -266224.8744 #> 27   -185336.8066      67434.531  -19679.56245       547740.5782 #> 28    272600.9136      30210.890   66266.56771        -1151.6105 #> 29  -1036207.7013    -454756.637  -18397.07038      -777169.7086 #> 30    368325.0265      10330.374   33175.00193       -32971.9088 #> 31     90203.0263     273631.950  -52030.13529       408061.6126 #> 32    396328.1941    -563689.553   28489.37789       -94859.1620 #> 33   1025508.8632     430035.037 -107566.08409      -193243.2745 #> 34     17800.6605      79540.740  108919.59924      -277187.5769 #> 35    668869.7887    -381933.100    5906.10331        10957.2918 #> 36   -177738.2859    -596170.968  -60812.95753       727869.5669 #> 37   -405115.5420     193050.624   65074.74267      -727835.3193 #> 38    133697.6068     260913.280   40677.21153       243014.0513 #> 39    -91725.1104    1703450.034   59001.59186      -445632.9565 #> 40    565164.2114    -185071.969   -9842.75003       694900.9462 #> 41    577294.8980      64813.854     897.78321      -630501.3430 #> 42    -27906.1659    1728260.783  153958.42638       180711.3017 #> 43    854553.9389    -176535.363    1793.90900      -221127.1620 #> 44   -908121.9745     -94106.341  -50945.24372      -533932.3342 #> 45   -931201.1716    -685461.996   93640.71525       209755.7409 #> 46   -281315.6307    1189808.193   40980.88665      -426521.2113 #> 47    137995.6574      34283.686   -5123.00152       -50018.0225 #> 48    350914.7306    -319722.759   83151.12720       734478.5965 #> 49   -340438.6100    -607737.104    -632.01787       -13754.9701 #> 50   -314148.7582    -795257.217  113918.11451       189621.8354 #> 51    -75338.4820     695594.121   48417.78455       196169.2826 #> 52    -92948.2244    -336658.975  -32181.24568      1085026.4525 #> 53   -129281.4846     725555.840  -38167.31681       -14551.3956 #> 54     92209.2386    -472867.406  -59188.25813      -131917.9748 #> 55    -35532.7345     704676.512  -18675.46104       657600.7007 #> 56   -251319.4611    1326787.437    -573.74209       -33454.6106 #> 57   -104632.2997     109076.703    5893.89476      -305868.0005 #> 58   -434674.5636     754955.190   65791.70150       620729.6818 #> 59   -333541.8456     568853.223  -14526.00478       -36654.8790 #> 60   -120554.3606     693067.201  -84617.03736       -38849.7080 #> 61    213523.7335    -159881.418   12209.12226       -54500.4954 #> 62    212835.2424     804435.166  176851.96166       215157.2997 #> 63   -143412.9099    -933492.502   52045.44683      -129017.1228 #> 64   -258133.0810     278550.407   13137.22895       329578.3165 #> 65   -384793.9785     963775.295  106471.66905      -150142.2179 #> 66   -610134.4097    -270048.835  -37024.68038      -107008.3873 #> 67    131289.8853    1097183.295   24773.34540       562785.0302 #> 68    110207.6357     243008.319   20195.43961        19785.9028 #> 69    230194.0317     772229.248  -85371.11754       607567.6634 #> 70    227455.7693    -487269.975   44088.50772       560468.7197 #> 71    678632.6544     785457.714   23716.13080       459314.1643 #> 72   -203751.6656     844642.908   91570.91689       170991.3465 #> 73   1125420.1710    -579422.362   86931.46688      -152198.9802 #> 74   -116558.3639    -203051.846  -59317.47065      -258756.3397 #> 75     31227.0984     239182.301   82328.30699      -234104.1898 #> 76   -807339.6503     272662.645  -10761.00890     -1145867.2150 #> 77   -257393.8216    -114155.041  -64153.32877       178829.5376 #> 78     46423.6724    -125162.387  -54004.17901      -281662.7021 #> 79    152062.7829     116337.202  -34292.42861       858715.3002 #> 80     94489.6641    -579422.414  -60427.02843       335203.2460 #> 81     99779.0374     717509.923   33717.07500      -469002.9713 #> 82    417785.3536    -482830.511   48227.72704       433270.9000 #> 83   -761118.3967      87836.222  -20340.39093        46620.8126 #> 84    771437.0835     -50208.980   39527.00639      -231173.0069 #> 85    -48318.2772     -97591.387  -86102.94653       930237.6823 #> 86   -328685.2384     614918.210    -576.54075       103471.2027 #> 87     85932.1768    1286367.678 -107959.71787       108416.2109 #> 88    493816.2008     225199.972  114271.89539        21977.9966 #> 89   -372994.5752    -687757.460   34427.08532      -371369.0112 #> 90    -13644.0153    -844553.469    7060.10547      -875356.5207 #> 91   1375751.3846     201858.057   36472.58958       141532.0048 #> 92    127523.5310     562900.751   -7688.59263      -562335.9624 #> 93   -191008.2279     615881.789   -2893.61868       201008.9122 #> 94    198431.3472      45773.121   39111.30143       284404.0813 #> 95   -180549.8495     315633.781   99025.44334       288011.5256 #> 96   -462113.1425    -605874.888   23252.77199      -357691.3648 #> 97   -255217.2628    -615081.730  107318.18436        53477.0092 #> 98   -605053.0764    -261410.202   59738.68527       282908.6584 #> 99   -287630.1649      82901.086   75569.59828       493495.9190 #> 100  -208831.8587    -249624.587   81310.20204       421181.7151 #> 101  -727102.0052     -69912.426   10543.55951       204674.3412 #> 102  -329439.8376    -458287.825   18075.53672       -16722.1993 #> 103  -339784.3268    1315394.597  141931.12074      -971923.0363 #> 104    31222.2072     -14360.159   53626.03426        34054.5517 #> 105   265643.8336     476639.440  -48958.57681      -341626.8809 #> 106     5539.1866     453356.050  -62783.50034       265843.0607 #> 107  -177770.5918     220998.267  -71486.96127       168081.1674 #> 108   257413.2829    -788488.137   26259.54814      -305518.8175 #> 109   -38410.7563     586012.075   77504.10259       164930.6673 #> 110     -300.8735      51910.112  -69688.84560       102582.2495 #> 111  -456258.9608     108799.129   53227.58854       304035.2357 #> 112    50970.0924      50114.266   -7584.05120       230112.1270 #> 113  -584442.0186    -375643.894  100498.03734       544976.7465 #> 114   -67648.0561    -579300.872 -125069.34559       504418.8007 #> 115   403658.0536     558906.646  -80560.07392       640910.1801 #> 116   396723.5997    -449818.503   -5663.32174       -40181.3578 #> 117  -294098.5628     -73538.416  -32927.78475      -194548.3340 #> 118   135548.4637    -280254.050  -91316.79714      -590725.1146 #> 119  -146536.6965     225739.390    9735.52081       106043.4034 #> 120  -525350.4707     331409.423  -12300.07700      -411516.8210 #> 121     3300.3945    -333886.329   55154.81003      -373625.6280 #> 122   275409.5841     -85773.010   55264.48926       248933.2484 #> 123  -654698.5073     684264.331 -131960.14888      -610761.8388 #> 124  -328112.9710    -526990.860   56941.11907      -286029.0215 #> 125   130825.0704     149593.731  194262.46466      -159105.7499 #> 126   -90186.3727     955778.006   36746.38572       -98629.7555 #> 127   303466.3922    1144812.581   70828.36586      -263476.8070 #> 128   139563.9999     498552.163   40538.99475      1020870.8339 #> 129   107045.9829     265403.792  -30573.47213       274963.6223 #> 130    99460.7075     152294.575  -57712.14462      -167313.5173 #> 131   113235.6847     -28416.367   36494.09746      1408138.0208 #> 132  -560863.9516    -127870.590  -85754.26610       473760.9446 #> 133  -355736.5173    -460833.981  -17947.49171       204615.0527 #> 134   370257.9100    -256910.792  -60080.16738       693466.3513 #> 135   -99806.3290      49618.906   96462.53205     -1088808.4768 #> 136  -406249.5877    -255830.091  120000.94616        53845.2311 #> 137  -173971.0240     153060.368   39517.73363       139556.8313 #> 138  -426444.1225    -840980.331  -39908.65787       798380.3107 #> 139  -341535.6073     488420.887 -124012.74738       595815.8855 #> 140  -423998.1307    -124883.827   68315.82725      -157102.0506 #> 141  -175124.5049     955483.427  -87090.87354       668779.7818 #> 142  -324913.5116    -355344.824  -49332.73257       113279.0018 #> 143  -432854.0891     196244.109  -69000.97609      -280416.2187 #> 144   -87773.5132     511021.665   -1761.44900       285215.9392 #> 145    34959.7478    -516182.774   28663.06148       -96724.0377 #> 146  -161171.7823   -1332971.605   29460.52833      -405842.1296 #> 147  -102784.8963    -311615.744   12952.16161      -153198.8076 #> 148   675982.7386    -386225.674  -28360.48601       304427.0395 #> 149   217096.0366      37485.385  136322.90490     -1317390.1422 #> 150   123599.4894     986703.918  124869.11664      -177691.9108 #> 151  -485022.7993     490208.624   46883.57146       250115.9797 #> 152  -196424.3827     424189.330  -25146.26471      -350996.9125 #> 153   725306.3447     279474.001  -52971.43113      -288579.7965 #> 154   283618.4511    1007625.577  -60911.27739       103881.4646 #> 155   422143.8195     589478.806  -73657.46250       725788.0849 #> 156   911801.2738    1434886.753   79054.25540       157396.7636 #> 157   149745.0508    -583503.988    2083.30630       156386.5786 #> 158   492945.4944     364567.666   66806.89998       873429.6773 #> 159   569268.8023    -375630.425  158915.22248       119566.6978 #> 160  -366362.2195    1929735.156   23033.29361      -137389.8434 #> 161    29615.0556     884298.633   -7806.14126       446054.9516 #> 162    97882.9788     260227.623   56583.08495       496963.2773 #> 163    59728.5727      61054.730  -60082.51579      -333011.6803 #> 164   856137.1900     115241.917   59933.53525       375727.0854 #> 165  -461959.9849     721765.075  188496.49377       349201.1398 #> 166  -243111.5563     628714.806  -18034.97995       790439.4490 #> 167  -458293.7371   -1526387.224  103288.00285       322374.6369 #> 168   -47584.4158    -668162.867 -116215.17657      -177193.8489 #> 169   126038.8504   -1521920.178    9715.65851       -63912.2445 #> 170  -480042.3286    -277325.221  -42886.08861      -165077.9294 #> 171   -27382.6124     109543.670  -36541.03615      -151292.9210 #> 172  -246760.9856    -823663.849  -29962.36878      -628222.1682 #> 173  -182314.4148     395142.384  101558.29178      -206572.1071 #> 174   224424.8889    -260768.970   14697.43440       315582.8489 #> 175   -70156.9560    -649000.886   82081.67695       198918.7982 #> 176  -303465.7680     -22036.271 -157649.35032      1036413.5159 #> 177   346078.6739     235043.440   74532.65420       290421.4224 #> 178   -12611.5805    1014661.822   77244.05238       188917.7565 #> 179   401551.4329     111108.685   -5216.53354      -247654.9377 #> 180   156414.7295    1081393.518   19446.11515      -239106.0678 #> 181  -244151.9307      71293.585  -28034.07309      -280337.4709 #> 182   651154.0486     323741.672  -46144.48490        14796.2734 #> 183    37472.9725    1517064.819   -4731.89277        75788.6260 #> 184   276850.9431     288352.218   63012.87396       -17696.1639 #> 185  -240256.1832     236737.909  -77243.27462       206781.2494 #> 186  -141163.2562    -256768.980  133714.06533        95342.7865 #> 187  -416336.9477     472640.274  142220.07924      -719780.4172 #> 188   -58646.9707     630558.084    7806.86642       378695.7245 #> 189   196464.0172    -567328.980 -126187.69288      -828328.5409 #> 190  -233091.6448     452488.226  -15987.72642        35553.1173 #> 191  -340545.2687    -330386.302   34801.28905      -201091.8657 #> 192   456369.5277     -84299.010    1008.60978       697263.5221 #> 193  -257390.1105    -470445.147  -46186.20494       235489.4920 #> 194  -432504.2040     463216.753  -19099.83339       711104.9562 #> 195  -588720.3961    -942346.522  -77342.27348        13487.4439 #> 196  -244336.6717     497364.057  118291.32710      -103698.2795 #> 197    61575.3921    1453087.252  122128.26859       -89329.1962 #> 198    21409.1221    -170647.256  -65859.28280       -59300.5468 #> 199  -594514.3054    -529528.959   79775.84338       131260.8618 #> 200  -761719.5950    -182207.158   21343.74428       607074.2053 #> 201  -630853.3994     205727.386   50955.57136       -73867.3932 #> 202   507488.7587     463809.826  -67282.75762      -879870.2694 #> 203  -544017.6192    -961131.434   -4887.98443       -64686.1355 #> 204  -184049.6644      58097.850  -40583.30544      -489522.4878 #> 205   131000.4431     -41291.296   18546.91377       366026.6999 #> 206  -334312.9186     898057.252   51899.66975       424982.2871 #> 207  -702752.5186    1022077.228   59545.16397       387421.6637 #> 208   453324.4548    1425608.346 -113579.90922       226846.2890 #> 209   851997.0080     738089.644   -2498.34756       409693.0619 #> 210  -455678.4317     448173.395  -74360.13687       265031.1629 #> 211  -353441.1348     283139.137   11464.02931       566975.9612 #> 212  -199698.7171     457175.242  -15461.06491       203692.9417 #> 213  -282966.4274     266885.762 -177918.50034      -288938.0804 #> 214   278848.5881     243208.300  -69234.55444      -603765.2424 #> 215   584962.8803    -892024.157  -14862.96713      -108675.7481 #> 216   -54252.4887     456733.235  115826.95318       658464.7567 #> 217  -227688.8026     289811.449  -11227.34704        90864.6156 #> 218   292300.2552    -151793.801   33228.92893       247616.1594 #> 219  -475853.2977     123853.320 -117636.57671         1715.5344 #> 220  -511473.3820     539319.989   38449.91236      -143774.7724 #> 221  -131411.0519     457566.133  -13803.12883       -31425.1458 #> 222   195970.0013    1145520.376   21915.26781        26269.0473 #> 223   -16285.6277    1084710.129   63915.12373       356181.5889 #> 224  -475666.2886     -67858.486  -33943.33017       158019.2410 #> 225   455883.5467     223659.227    5947.15274       862595.0381 #> 226  -174262.9482    -121102.419  -73887.99632       101481.6634 #> 227  -124615.1424      90389.072 -222365.25420       717586.8160 #> 228   131446.3940     940242.359  119947.53695       -99060.7339 #> 229   168083.4245     237100.668  -30018.16694       653631.5931 #> 230   259499.6943    -340022.463   62011.75406        61743.2735 #> 231  -405213.9144    -199571.493  -83187.07168      -404498.6674 #> 232   167203.3607    -616986.971   99767.87108       -90520.3037 #> 233   115749.5251     498441.577  -57867.34188      -425082.5794 #> 234  -853514.5202     288922.662  -34162.16722      -814998.5363 #> 235  -877165.7748     601309.215  -31783.11708       -48459.4134 #> 236  -326733.6077    -132378.434  -35802.58805       305510.4415 #> 237   171884.5057      83328.645    3434.76088      -577000.9085 #> 238  -838132.4350     397896.488    4339.39074        51392.4384 #> 239  -619882.8466    -379797.232  -96151.91492        -4975.7642 #> 240  -512902.0457     431919.584  -77668.58408      -116595.8289 #> 241  -349313.2288    1466965.607   71872.84641       -40891.3547 #> 242  -291230.0542    -643739.578   33217.68104      -647796.6957 #> 243   349787.0882     922973.787  -67667.12212       391495.5839 #> 244   -23359.5870     842484.358     430.91399       718565.6869 #> 245    12754.2877     652395.689   28863.47342       119624.5603 #> 246   613962.1449     996933.989   -3178.35464       371504.2851 #> 247  -417211.0994    1439859.510  -81710.83815       -47212.3417 #> 248   117184.4018     517732.159  -33155.73975       373116.1796 #> 249   -40682.9428    -401041.650  -55551.62038       357072.8978 #> 250   225686.4980    -370783.233   20365.55607        92779.5266 #> 251   562800.8963     264000.546   70783.46018       -96956.8849 #> 252  -367032.7830    -413435.922   20413.41233       -61492.8478 #> 253   433801.9771     368693.587   40917.19150       129675.1984 #> 254   102412.1453     461667.479   30784.05894      -223363.9552 #> 255  -674936.7733    1041106.905    8691.91067       499525.0030 #> 256   295463.5439   -1248170.072  -15108.70520        15031.8867 #> 257  -290089.7115     798876.497  -54473.02469       -77990.9266 #> 258  -296590.2210     187161.067  -25381.68538      -577903.8781 #> 259   583961.2177    -310404.076  -82781.90664       870337.1279 #> 260  -384972.3380     597324.645  -50176.01447      -954829.2696 #> 261  -677050.4499    -631528.804  -76116.02376      -612479.4399 #> 262   138455.8858     219758.095  157647.02034      -174799.3758 #> 263   -60996.1041    -447601.157   43293.95534       338770.5252 #> 264   489950.0186     285237.105   22829.32874      -588770.2599 #> 265   508966.2175      28002.328  -39814.80660       253223.5920 #> 266   -80893.0961    -508521.605  -15683.73502        44615.8003 #> 267   403853.5291    -161272.379  -53433.23204      -308362.1059 #> 268  -450239.9987    -574791.036  -75649.12384       158845.2524 #> 269  -876182.0027    -645718.828   72775.94737       184510.9652 #> 270   698373.0943    -334007.762 -144101.37633      -121632.6750 #> 271  -115392.1469    -868543.646  -26231.92446       -95259.0621 #> 272   373678.2261    1952888.451   16027.29291       412836.0378 #> 273   237700.4950    -103694.563  169486.45676      -107110.8629 #> 274    24931.0512     896565.983  -18173.09831       387274.9629 #> 275  -389692.1363     -15225.629   48996.91348       499423.3832 #> 276   230476.4744     895314.801   26758.74462       244114.9226 #> 277  -125096.7140     230954.343   98691.09565       835941.7761 #> 278  -253734.9676    -953706.922   52960.26459      -294880.5465 #> 279   221642.9671     -44537.086   19779.94725       409973.2450 #> 280  -123259.6717     819185.069  -39623.80076      -487035.0782 #> 281  -340542.6459    -445153.182   47277.24777       -30936.5669 #> 282  -264695.9086    -297115.661  -41742.82867       671475.7271 #> 283  -128546.7356    -545452.465 -146323.33162       410356.3993 #> 284   457776.3765   -1034452.215   41042.48802       467889.3138 #> 285   272895.3629    -972490.167  -60641.44837       -47155.0042 #> 286   738888.5798    1372554.511   -9751.85453       186419.5591 #> 287   -95763.2001      -2887.336  136704.16087       394874.2322 #> 288  -332254.8919   -1699697.457   90768.59148       220643.1029 #> 289   199874.3438     408550.913   35867.39474       425954.7133 #> 290   339168.1137    -260078.989   69769.18524       417385.0592 #> 291   253921.8669   -1043041.926  -11048.26763      -907837.0307 #> 292   474540.5474    1064511.215  -51720.88888       322177.0683 #> 293   -16863.6180    -618778.398   53623.85485        44994.4428 #> 294   277862.5857     -14367.575   15758.91172      -142705.5351 #> 295    65514.2050     113358.632   57504.59343       272696.7456 #> 296  -288691.9919     409017.907  -38492.06666      -520232.5845 #> 297   605440.2551     799323.408   32539.26724      -817781.9477 #> 298   -34359.7046     218165.856  -39845.47075      -125763.5156 #> 299   -35699.2639    -174199.212   58616.66280       160352.1500 #> 300  -135127.7280    -369419.631  -73528.51220        97319.8438 #> 301  -272254.2998     698878.378  113750.92108       -63342.6804 #> 302   415502.2684     -64594.213   73352.97013       -93471.1551 #> 303   -29773.8457    -437797.997   41167.03647        85162.2241 #> 304   421986.5562     737658.593   23061.68202      -761489.7786 #> 305  -163139.9306    -193967.850 -102898.86692     -1278806.4771 #> 306  -102506.5624     685372.206   24384.88948      -674573.9171 #> 307  -165193.3339     913376.183  -36466.36555       181464.3075 #> 308   418680.3381    -134786.194  -57190.07778        90364.8248 #> 309  -463028.7724    -942725.243   36874.34692       -50311.4938 #> 310   392022.5878      38538.337   78458.17531       152566.6762 #> 311  -170204.8649     103114.014  -97954.50324       171594.6149 #> 312  -123488.0859     -20120.793  122329.40614       646731.8964 #> 313   170738.6378    -464478.964   31237.67226       825111.0307 #> 314  -104377.0803     256981.178  139498.71570       417338.8182 #> 315    99387.4293    -377289.544  102899.89384       535536.1120 #> 316  -254198.1480    -121026.556   21640.26677       -56223.3844 #> 317    52556.0199     442899.743   60093.46249       247967.2966 #> 318  -504819.6769     287439.442  107832.04199       -94651.1105 #> 319   326179.6210    -144739.734   60655.02684        24744.4500 #> 320   263303.0145    -831781.188   55498.19778       567722.9668 #> 321  -279643.7987     927587.976   -2902.32964      -378323.7804 #> 322  -793132.9143    1248547.139  113071.83448       169015.3552 #> 323    45027.9392    -158258.844   21120.69405       175743.7953 #> 324     6478.6730     556511.733   42051.26353       363659.5176 #> 325   313326.7299    -472531.978   77993.45263      -355568.0735 #> 326  -265456.8860     528415.037    2894.98832      -422210.5607 #> 327   194305.8000    -412635.643   98464.97399       276767.7559 #> 328   546831.0344    -383759.777   56882.34799       400392.2148 #> 329   133466.1868     628966.315  -22782.58703       642077.0623 #> 330  -634674.7387     341355.055   41561.32445       741153.6129 #> 331  -206580.7483     627335.497    9195.18432       422024.9686 #> 332  -140818.7021    -324263.258   17240.32485       654992.9436 #> 333    23893.1870    -880816.941  -76008.09188      -616863.0553 #> 334   895749.1541    -872864.019  124066.36395       200188.3598 #> 335   149336.5897     348164.913  -24629.53828       507450.6807 #> 336   115633.1588     426365.909   65166.53769       614662.5985 #> 337   212855.7362    1196457.827   11317.03688         2514.0942 #> 338  -814231.2175     444742.855  -46459.04781      -950677.9015 #> 339  -135524.9591     198125.765   51469.05078      -549541.6280 #> 340    40605.5511   -1094851.402   72194.27333      -297470.4320 #> 341   -78156.1955     901745.852   90252.70241        70348.7437 #> 342  -236700.3711     286961.406   28230.47224        -5435.6049 #> 343   281041.0454    -383257.536  155219.60059       183880.5299 #> 344   531511.1772      72644.328   78050.46234       202710.2984 #> 345  -457003.9923      66241.101  -17726.21709       -30415.7692 #> 346   672965.3065    -600075.286  -60471.32102      -247575.9569 #> 347   171332.6185    -123368.770 -156689.91934      -257091.8817 #> 348  -224289.4215     325684.616   52945.29351       133574.1577 #> 349  -433215.9734     594282.903   87887.92293       145742.8185 #> 350  -742878.1433     737234.764  -34587.98021       141017.8643 #> 351   587181.4913     318818.009  110624.08397       174869.4562 #> 352   414803.7663     544104.710   -7605.13621       569637.5205 #> 353   187590.5122    -159529.067   49730.15845       116766.2351 #> 354  -145734.0806    1193418.122    5607.68218      -291459.4402 #> 355   484096.2756    -611590.667  126261.30521      -192377.3272 #> 356   136291.5620     673187.884   -8618.68009       427733.9862 #> 357  -460861.8583    -369088.984  -16176.15762       126816.2842 #> 358  -788140.4388    -196650.614   61962.39168       178861.4841 #> 359  -522743.3664     379165.851   76054.94917       537735.8458 #> 360  -246845.0121     664703.835  153610.14169      -241586.5026 #> 361   461145.1832     616688.647  -64162.12757      -289280.5072 #> 362  -789012.5692    -296369.521     804.26615       230840.2441 #> 363  -110508.3073    -322891.161   14200.45216       188478.7198 #> 364   261583.4907     766931.217   76550.72134       659474.2991 #> 365  -240459.3809     422938.855   17170.80738       277090.8274 #> 366    62712.4029     982715.048   63701.18088      -545054.6532 #> 367    84419.1312     883548.106  247143.59040       -41722.1907 #> 368   222114.2573     280117.522  -47704.43925       349517.2405 #> 369  -291243.3494   -1036103.306  -24025.90628      -440751.6885 #> 370   243823.7409      74914.317  -45741.38415       293425.1008 #> 371   759103.8412     681044.081  105155.71764       105288.7542 #> 372  -123203.7037    -397757.827  105932.69804      -673927.0217 #> 373   491136.2302    -824289.808  -64254.51558       492407.9201 #> 374   466883.8892      32313.511  -14448.87002      -185446.6937 #> 375   261532.7684    -153259.922   25285.56208       490987.2970 #> 376   332239.9014     773708.265   10721.76981        80818.6658 #> 377  -299166.8143    -392232.445   76810.12060       248543.7607 #> 378  -611473.6374    -315390.303   22915.35730       390214.8106 #> 379   173080.4133    -676923.530  -14486.01058      -506218.3673 #> 380  -457222.9791    -106415.164  -40712.31396       569777.4116 #> 381   352346.1842    -210635.644  -75517.60934      -139616.9133 #> 382  -119517.3406     471858.594  -63822.46703      -527555.8675 #> 383   275291.4315      42524.902    4939.87198       370105.2799 #> 384  -718309.2144   -1280148.854  102638.34224       304886.8083 #> 385    -3606.6134      73069.109   51544.26869      -319317.0655 #> 386  -501693.9067     763364.676   52343.41569        97133.1686 #> 387   148107.2894    -371920.763  -11370.47912       226079.1053 #> 388  -601295.9478     721065.763   21010.97486       -49200.5060 #> 389   384976.7377    1584786.464  -12511.89387       865616.8752 #> 390   162801.7323      38753.756   42234.41025      -102950.0630 #> 391    77971.7380     540239.998  -42147.52824       198254.5006 #> 392  -360173.5854    -696328.422  -66320.61812       152676.0611 #> 393   113706.9870    -202002.592  -63320.78406      -399207.8943 #> 394  -214877.5831     349621.183 -124126.84014        63023.9593 #> 395  -194577.3776     203019.994  -31944.57943      -704423.8790 #> 396  -601022.4299     -71984.634  -40261.21118        41397.6739 #> 397  -468259.9857    1210743.747   38693.46261      -498682.0243 #> 398   216505.8286     769809.303   79606.57466       135984.3125 #> 399  -260039.8625     559741.251  -27473.49657      -112854.8361 #> 400   284409.0454    1466496.684 -138669.66239      -255011.0692 #> 401  -129907.0939   -1422462.430  -25771.10726       -47855.1138 #> 402  -628508.5224     943336.142  -85726.28554       240911.3947 #> 403  -154198.7721     969745.351  -85042.99245        96747.6805 #> 404  -679589.0210     430604.209  -35520.74740       -83319.9754 #> 405    22984.5024    -205166.114 -115668.20251       195204.3732 #> 406   571584.5753     237210.211  -70364.79785      -385234.0663 #> 407  -410095.0025    -854156.198  -10935.97832      -274499.7161 #> 408  -844148.0519    1844764.180   40461.51084      -191609.4842 #> 409  -248162.7251     -27583.077   32595.01058       863526.5792 #> 410   621170.8390    -231154.628   13627.08045        -9170.6262 #> 411   472411.7496    -222423.368    3837.28061      -363433.9805 #> 412   415254.8018    -344464.128   94401.42689      -300270.9428 #> 413   -28763.6790     133118.064   44016.05626       350422.8152 #> 414    37390.0985    -288398.414    4093.48803       295542.9564 #> 415  -191771.8377     539013.310   -1265.66717       568752.1458 #> 416   328795.2890     229906.221  -10392.39677      -781478.1127 #> 417  -272725.5849     -59607.883    3305.16309       147836.7904 #> 418  -579729.2775      88821.274  101248.77730       153566.8383 #> 419   273260.0774    1826217.402   20371.78037       121758.2698 #> 420   320624.2438    1666588.038  -49137.00576       -67035.8273 #> 421   -33646.5912     -64912.590  -51802.23091      -714312.5431 #> 422   -67213.6232    -628470.766   86564.44089        22297.3469 #> 423  -808807.0904     570851.219   49560.88537       394116.7737 #> 424   124824.5146   -1023014.785    6488.98188        54816.9914 #> 425   580035.2432   -1103438.766  135476.03379      -316200.0919 #> 426   652313.8544     206516.434    1727.36869       430024.1377 #> 427   576775.9020    -118796.789   85420.36221      -995197.9323 #> 428    53577.2608     485414.177   38410.86759       -23691.5550 #> 429   -82278.7330     281959.132  -85538.49357       990076.8182 #> 430    -2129.2544     230088.222   -6749.54820      -199352.9048 #> 431   356475.2574      36675.951  -61542.89015       405111.9790 #> 432  -355960.6398     447569.267   38428.47992      -506087.5669 #> 433  -151580.0257    1129021.532  -88590.27266       -69790.6045 #> 434  -536447.2991    -301823.453   11985.21080       255028.2133 #> 435   372422.0882    -193840.948   44918.08719        97065.7221 #> 436   790657.0707     115459.573   38125.66558      -181752.0892 #> 437   247051.1306    -431315.832   10746.14429      -517898.6747 #> 438   -62157.2935    -427407.842   25513.59513       953758.7192 #> 439  -347557.5020     427361.645  -67243.00154       320825.8355 #> 440  -373188.0618    1122076.314   59745.24076       339283.5411 #> 441  -336479.4276    -485123.681   24099.18398      -415632.6314 #> 442   808948.0954     526649.327  -10055.63309       -50277.3616 #> 443   383115.8437     241798.758   30618.59996       899707.8686 #> 444   231266.3763     836468.701  -13003.47013       482228.3960 #> 445  -210703.0949     585800.976   91898.65561      -505210.4536 #> 446  -513954.2987    -314140.939   -9272.85196      -446979.6018 #> 447   -96014.0981    -169316.659  -46214.43088       382275.9196 #> 448   272707.3757    1028575.972   20474.92561        43745.2266 #> 449   -72767.0508     127173.630 -218658.54069        15302.7950 #> 450  -136530.3255     750347.694 -116651.21053      -309488.7492 #> 451    29173.7505     665682.162   60334.78028      -831151.1750 #> 452   376057.4832     318939.879   30311.05643       179404.4420 #> 453  -817441.7135      35599.875   64262.95934       499250.1537 #> 454   594260.8899      85918.679  -45493.90433      -105250.8105 #> 455  -182329.3927    -222880.914  -62795.33884       213312.1673 #> 456   293004.1890   -1143809.687   -1568.57727       373076.6559 #> 457  -209035.0547    -500923.411   26936.74564      -124456.1488 #> 458  -358866.6007     876576.731  158795.92180       -12184.7524 #> 459   740696.4634    -609932.048   95836.22341      -113497.3568 #> 460   431992.2769    1672911.050  -26392.36526      -771074.6375 #> 461    92070.2567     533976.465   45522.45205       172528.9294 #> 462  -324769.7779    -267633.260   12603.89462        73530.0841 #> 463  -169169.0266     235738.524   11862.17434      -577446.6338 #> 464  -137203.2877    -466371.736    2481.81865      -315175.2127 #> 465   -49305.4428     140433.271  -15535.70594      -459224.3534 #> 466   400449.6080    -108835.390   50987.20034      1111997.1077 #> 467  -170216.1283     246724.271  -59257.21132      -242097.3624 #> 468  -228942.2795    -407011.745   26858.06731       673874.8978 #> 469   781763.1376      -1226.708  -78752.65140      -327187.2730 #> 470  -379702.2062    -483084.282 -128761.69817       -75140.8038 #> 471   -62988.6841      99826.542   -5146.89760       609713.1607 #> 472  -272259.8370   -1187349.150   40984.59789       126804.7457 #> 473  -643299.2796    -226683.031  -39380.42528       332665.5150 #> 474   443312.3511     907637.520  -48774.24348      -571481.1088 #> 475   -71476.0913    -951065.408    5443.37124       -95702.6473 #> 476   -38250.3940     975573.762   63474.21811       693577.9508 #> 477   -23053.9183     736595.277   23301.97786        75821.7210 #> 478   542483.5894     300691.174     543.27531       577261.5992 #> 479  -508080.8937     262150.678   74776.95370      -208947.7725 #> 480  -558150.4531     158186.696   58376.29562       986721.3926 #> 481   -23704.8867    1450955.698  221269.89683      1157505.6614 #> 482   780453.6569    -261836.931  -44062.75852       522345.3286 #> 483  -157282.8617     695638.499   85057.94295      -208298.7654 #> 484    38019.3909    -306588.154   49941.28875       571587.3151 #> 485   447281.7352    -942597.108   60517.82390       327812.7318 #> 486   489669.0650     453053.323    3577.54079        59373.4984 #> 487   350631.1683    -291026.681   55483.18834      -626124.4789 #> 488   423892.2816    -287503.230  -66979.73389      -355422.4331 #> 489   992207.6226     158518.904  -73418.23611      -202583.7801 #> 490   395166.8710    1378323.818   -9965.73250       495926.4400 #> 491   567718.3125    -556424.428   17363.82897       -13676.5834 #> 492  -434638.5688   -1000719.751  110623.68152       249577.0777 #> 493   418048.2004    -458954.316   66920.22694       -44165.8252 #> 494  -566327.5646     -67400.569  -47537.11093       669880.0318 #> 495   255589.2094     877030.825  209025.65921      1445600.6853 #> 496   -55335.1121      75628.741   79325.05297       278215.0158 #> 497   445558.3367     110152.457  117632.74101      -631116.6873 #> 498   230991.5259    -485202.221  -86177.49651        55647.4175 #> 499   464262.2390      83495.568  -18074.74546      -515570.7687 #> 500   330234.7354      84095.180   64583.71900       769522.7865 #> 501   371279.5389    1060012.331    1385.09673      -593100.7972 #> 502   333028.8499     534709.179  -19560.63928        26069.2576 #> 503    98198.6729     649260.210    4727.21255      -625640.6501 #> 504   282006.9685    -149538.413  -99719.42226       270946.9737 #> 505   -98323.0110    -627166.146   65017.94250       683771.6611 #> 506   -12299.3727     654042.446   65391.31997       401959.5833 #> 507   670879.5449    1141557.897   44607.57192       589242.5032 #> 508  -630346.8435   -1538615.037  -20043.38558      -349983.6549 #> 509  -395682.8400    -176968.232  -19873.83246        68326.8732 #> 510   728717.8477   -1015312.153 -118623.46034       197322.5335 #> 511    14730.2240    -292204.185   66642.14657       140037.3765 #> 512   688530.9954     930529.785   33714.14780        23921.1161 #> 513  -367200.5247    -373215.453   33773.37497      -282452.8407 #> 514   105098.3457    -187694.264   89705.60048       381974.5349 #> 515    18769.3929     267472.886   30296.23374       404294.0076 #> 516   565879.8829     767072.874  -30493.64482      -224325.6930 #> 517   -54234.1730    -692183.199  -52009.86532       131068.2291 #> 518  -554220.3005     192671.099   43729.06598       -80771.0915 #> 519  -479130.9009    -741041.483  -50857.43168       678832.2703 #> 520   712775.9970     434338.500   32207.00711       199035.7349 #> 521  -655243.0940     383282.451  -91301.04462       741240.0703 #> 522    43198.5110     178643.688  -16551.95651      -232552.8169 #> 523   476505.0418     777519.799   73556.03108      -188378.8045 #> 524    13460.3458     138898.396  -58466.79643       312921.7008 #> 525    67234.3899    1638427.648   24199.17050         6446.8922 #> 526   288162.5020     784045.861  123987.78947       565297.2506 #> 527   210372.2646     142764.484   -1462.18268       -11538.5704 #> 528   124552.8713      34433.850   20615.76793       -20643.2261 #> 529   548623.3037     203439.224  -10503.86488      -185063.1039 #> 530  1077059.6929     427165.858  -33744.51194      -418141.3643 #> 531   399339.8147    1219400.601   12415.69794       277038.0910 #> 532  -243718.6974    -408354.284  116800.53315       464663.6891 #> 533   250724.6957    -735472.263 -161942.04684       103630.3567 #> 534   -60851.9664     424133.431  -18344.35562      -261852.2996 #> 535  -103758.9011     513788.588   65718.57939       243514.9616 #> 536    13933.2016     377196.878   49060.26890       104626.5136 #> 537  -321336.3443     541132.417  -69997.14372      -106672.8359 #> 538  -610631.4402     179235.899  -69823.83962       467542.2777 #> 539   445802.1067     619386.924   -8452.07309      -279759.5434 #> 540    87094.6407     311379.621  182161.76390       -15476.2680 #> 541   -14631.2793     535202.629   50412.20809       467329.0720 #> 542  -193143.4635     454266.644   70576.25984      -218456.2995 #> 543  -394046.3819    -428190.849  -15799.41547      -115899.6952 #> 544   795834.4510     754429.967  -16588.05069       609727.0711 #> 545   831778.0716     678201.434    3431.74151      -240467.9580 #> 546   677843.0964     -77247.718   22081.85952       322773.8804 #> 547   284687.1678    -548212.349  -29786.57843       920357.2427 #> 548   459997.2209     775905.698  -32734.58083      -397945.2673 #> 549  -342281.3376     691450.893   37078.97673      -251950.6673 #> 550   386843.3192     269883.838  147393.35210        96350.4348 #> 551   382148.5124   -1326710.864   24700.65448       -98387.0390 #> 552   172183.9166    -246471.215   78233.64514     -1219931.3913 #> 553   -31479.3751     133880.909   86706.10854      1060820.3467 #> 554   513701.6273   -1337787.665  -53160.28869       709767.4308 #> 555  -404109.3672    -457040.472   92024.83496       502351.7903 #> 556   726948.2276     856173.807  111961.61398      -325882.9580 #> 557   153066.9255     617194.209 -148175.70926       523138.3078 #> 558    41359.6139    -496048.857   17555.60175       163135.6439 #> 559  -442461.5382      10384.421  102150.36517      -431754.9770 #> 560  -898127.2153     656156.437   83553.45268       710209.3210 #> 561   -42386.7049    -299429.608  -73846.86602       356845.9323 #> 562  -373016.9545    -306553.898   -7082.06832       362658.8958 #> 563   -99250.4897     458018.616  -90681.48742       398744.0582 #> 564   621602.5185     -61246.906   96334.88857      -576942.8183 #> 565   146872.2609    -450122.737  -16590.33811      -943567.8695 #> 566   826639.9738     953496.001   34608.60734       327962.6352 #> 567   201169.3056    -363681.434  -64412.00683      -577896.0960 #> 568   -86841.4136    -869248.739   29430.56606       332570.5154 #> 569   131184.9306     744439.981   60714.09926       -46987.7884 #> 570  -225365.1307   -1042512.333  -29396.46245      -641338.2773 #> 571   206484.6860    1089220.569   62146.21081      -345514.1415 #> 572    97157.4193    1759587.523   72549.95888       -73375.8909 #> 573   942002.3372   -1537291.483   98609.24911       227557.6130 #> 574   201936.2250    -566784.024   36792.22343       -70352.1795 #> 575   852225.6233    1510421.456  -12143.13864      -103825.3603 #> 576   313366.5893     531905.471  -20677.78145      -333953.2776 #> 577   862714.8773    -647309.938  177951.19766      -206483.3709 #> 578  -491721.4196   -1198861.134  155651.98288      -183238.8694 #> 579   232914.4496     324457.736  -48212.33430        80635.5654 #> 580   -47521.2169     -64793.368 -103464.93318      1022034.5433 #> 581  -708861.3563     225021.582  -69335.68613       245687.9528 #> 582    96260.3917    -470361.692      80.85131        83955.6220 #> 583   711826.5399    1171185.583   46319.96812       455952.7001 #> 584   361093.9514    -682923.993   63412.79350       793501.4647 #> 585  -705020.8471     425929.950  -13772.82793       538837.5137 #> 586  -509918.7664     208673.195  -26940.88052       288823.8788 #> 587  -691042.3935    1346845.142   54683.34914      -363418.8602 #> 588  -452883.7063     339239.928   94939.34558       941233.7759 #> 589   551449.3885      88809.167  -21245.19018        58275.1676 #> 590    98979.5862     482612.269  -38646.14926        50530.5772 #> 591   353780.8416    -161355.391  149891.31015      -247293.6046 #> 592   634913.4100    -335916.620  118566.92832       531935.0590 #> 593  -517832.2628     190351.772  -78569.15734       700755.9352 #> 594   561682.3699     665565.798  -57497.54852      -336870.8635 #> 595   513904.0628    -355305.508   55419.56032       581285.1190 #> 596  -791349.5073    1544993.400  -63002.42593      1038336.4730 #> 597  -363080.2035     289637.090  126051.03894       207087.4027 #> 598  -890343.3457     101579.304  148551.00186       465161.6868 #> 599  -174768.0611     792953.609    -180.21611       427503.5694 #> 600    94526.4121    -634874.098   50907.53303        -1397.3943 #> 601   172201.7855    -222120.699  134480.55032      -384037.8735 #> 602   211616.8334    -331912.929  -71649.14892      -930424.7997 #> 603   -90072.9372    1277610.515  139576.56423      -347216.9970 #> 604  -107307.3085    -139751.047   43315.41220        61467.0254 #> 605   416696.6484    1578373.076    4984.00335       628145.4368 #> 606    13198.8994    -332646.290   -9198.77596       384467.6276 #> 607  -879125.4272      40628.376   47629.89812      -122020.0423 #> 608   -11196.1173    -175603.305  -61456.55553       752890.7056 #> 609  -887690.3167     916951.096   86388.93112       603903.8911 #> 610  -181867.2606    1297411.615  -79838.90836       372521.5326 #> 611  -194160.3954   -1490942.882    8379.33275        69737.7155 #> 612    28139.5054    1161539.430   64770.56873       778448.5886 #> 613   618014.4061     367049.987   23936.74029        55373.6114 #> 614   425699.6394    -292073.221   91520.06568       392768.8317 #> 615   439279.2676    1388757.058 -155593.52485         2132.9181 #> 616   861046.8471     318951.117 -105679.40393      -493454.8281 #> 617  -168779.5771     518037.793   36241.32722      -246199.7372 #> 618  -256902.6637     474803.840   56347.48816       574578.2521 #> 619  -298804.7171    -893909.683  -64156.80138       266960.6437 #> 620   112751.5293    -506553.072  192831.90746       513182.5922 #> 621 -1021680.3624     349722.155   11690.53686       237543.0315 #> 622   302215.5049     209956.786   81776.24870        46315.5462 #> 623  -121744.4256     395613.642   88606.68003      -141180.5239 #> 624   -93478.5077     364795.098 -128806.67645        84299.9817 #> 625   343984.8488    1048213.693  -75972.18680       193604.1513 #> 626   -74076.1136     256946.444   28341.72007       219505.9806 #> 627    69226.8055    -916522.408   55151.05707      -218523.8785 #> 628   579035.7494     -19913.884   47425.63892       -40458.4144 #> 629   382082.9404       8163.804   -3713.13640       288973.8450 #> 630    91827.9449   -1098016.362  -58636.70534       -68585.8429 #> 631  -170344.6086    -265322.330   -3508.13672       623488.5925 #> 632   211628.1196     -23532.965   -1632.48066      -524332.9184 #> 633   297694.5572    -290241.102 -198125.95880       107134.7684 #> 634  -672145.0073     295699.625  -32235.74328       471055.5718 #> 635   107830.0616     621653.500  157884.42414       111272.2100 #> 636   -66675.3786    -541943.066  -61109.78987      -170349.3549 #> 637   719881.1388    1049400.107   57296.76768       535576.4317 #> 638   178141.2953     329551.548  -14294.24831      -799798.4499 #> 639   -38719.4040    -216060.654   77191.03802       371312.9688 #> 640   -92768.7494     451430.007   -8951.60562       632954.9690 #> 641   477240.8321      19238.761  -67087.17743       162945.6703 #> 642    -5247.3114    -267079.185  169045.21805        50103.7979 #> 643   429502.7162      28080.301   74452.49536      -190190.1678 #> 644   -65674.9590      49076.729  -72081.33410       501701.6593 #> 645   157480.4943      28047.440   95029.84125       411435.4564 #> 646    59682.2409     723538.632   18709.66602       565446.6229 #> 647  -176689.1360     651600.992    -726.61447       659988.7532 #> 648  -363535.4028   -1604367.740  -37753.80325      -493393.2215 #> 649  -306661.2113    -551202.531  127904.93974       757175.9944 #> 650   566987.2450    -922361.269  -32004.87132      -332247.9393 #> 651  -106359.9681      88241.417 -136249.74369       215796.2718 #> 652   241893.3921    -881265.123   28165.52690      -245104.8523 #> 653    54137.5423     579221.339  110334.48315       395540.1815 #> 654    48398.9434     275142.534   71814.83130        98013.0518 #> 655   214791.2170     529833.704  -92140.59216       913503.9373 #> 656   -87355.4078    -304961.387  125359.21729      1185231.3844 #> 657   118370.1830    -363755.239   -9040.61768      -391523.9821 #> 658  -153017.4199   -1295650.305   16792.88386      -650935.9086 #> 659   310837.0930    -712113.680   82746.48214       523298.2345 #> 660    41112.2611      68294.069  -42685.45274       700433.1006 #> 661   173546.0741     187569.609   13959.19187      -333972.1887 #> 662   615297.1517     -52536.319  152871.32016       152953.7370 #> 663  -215859.3346     -58212.772 -111193.78084      -801296.2823 #> 664  -576347.5425     -25359.478  122851.30622       772298.0530 #> 665  -467025.5009    -223491.753   64529.97017       351838.8348 #> 666   108310.2460    1323844.194    7533.65114       173547.2136 #> 667   415566.4443    -509870.808  -12840.64889       425200.4474 #> 668  -115466.7177     715002.230  126041.01228       180901.2750 #> 669   806152.4407     875957.022   70309.50035       135125.1569 #> 670  -558945.2884     504008.549    6934.82953       504394.2004 #> 671  1142831.7632   -1012777.873   50697.57260       642246.0545 #> 672  -265093.3252     -70549.075  -26955.29093      -135264.6537 #> 673   615636.2493    1437999.265  -74150.49519      -109603.8555 #> 674 -1319607.5767     153384.477  -50364.56225      -487755.8084 #> 675    73290.8121     760869.203   76756.81898      -697189.5465 #> 676   327357.3312    2174899.337  104650.70512       267053.6248 #> 677   -31748.5503     703205.506   82515.83108       224267.2350 #> 678   248375.3073    -240301.504  -27313.68320       578516.2547 #> 679   179591.3597     471423.915   81283.04725      -347272.7281 #> 680   796704.3438    1194351.969  -24846.28375      -152727.3437 #> 681   579520.7899    -919001.203 -126679.92153      -346089.7654 #> 682  -167311.3273    -142386.995  -59008.90074        14497.5600 #> 683   937094.9295     410946.839   49548.44172       293560.8382 #> 684     3645.9962     -59250.008 -118539.15170     -1128031.3625 #> 685  -507342.2207     448114.663    5270.16176        25674.8530 #> 686    16949.6834     276814.483   21862.95702      -289124.8029 #> 687   383568.5872     782754.999    2591.65367        69190.1092 #> 688   818295.8144     819245.086   12908.02521      -383468.0735 #> 689    61168.1941     557274.222   24487.45314       -89221.9084 #> 690   321178.4051    1158033.618   54626.35916       506463.9244 #> 691   535644.7164    -418925.338   17367.68077      -137076.2568 #> 692   935069.4101    -665787.745   11881.91114       -21489.8081 #> 693   -60097.3453    -583989.699   27947.74754      -138590.5845 #> 694   466223.4665    1228441.489  -53435.25414       -29049.1947 #> 695   296965.2097    -555290.783   36096.46945       420404.2024 #> 696   339797.7153     217145.154   96140.66829      -142067.4576 #> 697   303488.9404    -535675.570 -149268.02624        12343.6594 #> 698   751005.8130    1240052.787   97315.56178       622648.8403 #> 699  1073615.8338     105116.578   71352.81015       215534.1485 #> 700   786610.8561      59948.525  -37655.73288       762896.6200 #> 701   386578.9484    1242723.848  143996.87240       276534.3316 #> 702   436539.0867      32833.146   23537.22052      -676133.6796 #> 703   305843.2422     636049.568   60401.43427       -40836.2010 #> 704    31724.3811      22832.996 -100555.84396      -152454.7258 #> 705  -281493.8805      76637.871  153606.25732       325955.2525 #> 706   324940.8856     866290.106  282402.57785        62320.1251 #> 707   336024.3659     194550.895  193942.26464      -130020.5306 #> 708   289913.9926   -1168833.149   38389.96082       104156.8673 #> 709  -120563.8139    1127197.266  -21351.49658       343764.5604 #> 710   526216.1749     258514.998  -15785.70203       970839.2016 #> 711   315438.2136    -564186.797   -6750.33494        58955.6955 #> 712   -95809.4862    1021124.852   70021.33964       556915.1154 #> 713  -401905.7245     932625.668   59366.56170       913354.4766 #> 714    53132.9149    -141614.901   10169.75283       -22231.8424 #> 715  -503996.6449    1389532.647  151372.95974       284587.1870 #> 716   415060.4902     843690.057  104597.59464       -61792.9775 #> 717   461696.2857     536432.758  110432.94404       -28761.7256 #> 718  -128478.3740    4333736.724  438133.37608      2390729.5913 #> 719  -223775.8214     -93625.018   70060.42833      -277488.4441 #> 720  -301246.7143    -103743.656   28602.60964        -2176.6608 #> 721  1158328.9043     622381.794  101108.83051       568638.7576 #> 722   251385.9663     604235.640  -67144.30814        59022.8508 #> 723   243512.1573    1058215.984  -98193.91198      -154547.8895 #> 724   529295.1997     393905.653  -35473.25404       481350.2806 #> 725   361144.7813    -418388.732   94905.87509      -409534.7438 #> 726  -320103.4830     449175.988   32792.32849      -179019.3357 #> 727   103622.7214    -176390.537   61892.29947       529958.0190 #> 728  1262616.7391    1006102.834   33164.51528      1160903.1224 #> 729   106881.4329    1039864.132  -25830.61469       503130.5078 #> 730    56377.8305    -372191.794  -64761.57585       -89411.8680 #> 731   111181.0571    1862288.611  143731.68754       232166.5326 #> 732  -342940.9904     397188.922  156760.96953      -216227.9409 #> 733    46834.4670    1059119.433   62726.42776       457887.2896 #> 734   342080.4187     370819.650   39152.64529      -165674.8642 #> 735 -1231721.3410     689020.738   34993.53873      -660941.3563 #> 736   243757.4974     550604.579   -6007.42555       318859.3537 #> 737    -8153.7182    1382382.873  168592.79984       -78874.7341 #> 738   170659.3188    -380425.134  -61749.66208      -664728.6811 #> 739   114090.0909    -894013.870  198411.28563       617518.8930 #> 740  -330271.6191     706115.047  -32403.68264      -841084.9141 #> 741   322496.3344     610673.123   47172.01909       -56735.2492 #> 742  -192892.3305     694083.693  143837.90410       933406.1888 #> 743   309589.2477     950116.236  167079.94475       550618.7826 #> 744   294503.8218     -79823.102   78448.33831       667326.9649 #> 745  -161003.5245    -447325.208   32100.07517       570263.4314 #> 746   753035.4674     735105.241   26441.13305       793917.5976 #> 747   449157.9534    -198871.437  -32092.83415       215708.7965 #> 748  -301230.3045     261417.246   39666.91130      -519119.2612 #> 749   793139.8737    -636210.553  -56572.32232      -102479.3937 #> 750  -411465.3363    -288910.710  -10630.04195       673504.3125 #> 751   212577.5250      74989.076   52644.32777       256788.9545 #> 752  -295727.0452    4545826.084  214765.09462      1289841.4710 #> 753    97482.0917      71090.333  -26216.15194       160751.9277 #> 754  -449252.9572    1004763.695   -1986.20085      -903428.7011 #> 755   485317.9724     176168.484  -39891.93172      -197852.8943 #> 756    57298.3968    1671916.167  247888.33112      1308412.2143 #> 757  -237128.0450     819786.930  -53806.11572       241469.7735 #> 758   -93289.4537    1139548.614  233359.76148       531938.7465 #> 759   389661.7350     383864.818  -37329.59802      -578798.5089 #> 760   220613.3248    1643807.895   59449.26097       -93418.6617 #> 761   418914.1995    1727410.163   58139.29378       738011.1141 #> 762   586349.8109     944879.580   89988.49671       109973.6139 #> 763   751373.6180    -195757.937   41093.31024       467659.8087 #> 764   340352.2196    1067158.402  142483.41805        10240.5130 #> 765   391070.7598    -925665.477  -45970.38109        51880.4159 #> 766   642162.0454     790540.628  236039.50071       217079.0264 #> 767   -12142.3791     301765.864  122126.87784        -3545.9364 #> 768    39284.9844    1768824.174  181536.36772      1146259.5511 #> 769   370549.5749     983981.468   -1072.92293       456015.3028 #> 770  -189321.9853    -804482.139   76512.34631       597747.7318 #> 771  -516241.0800   -1065932.449   38001.96122       800294.5668 #> 772   427692.2003    -179082.382 -100865.87461       156282.7617 #> 773   821009.8224     222321.902    1384.66643       437051.0574 #> 774   396573.9233    1212871.940 -130362.06788       903076.8155 #> 775   430837.2882     140066.304   21038.82612       666215.7744 #> 776   263881.5553     604932.607   64476.69107       280006.2407 #> 777  1056528.0950    1730123.682  -72505.35410       590161.9030 #> 778   122823.3122     768916.121  -21588.21908      1197383.7411 #> 779   324714.4957    -871135.818  -14638.27637      -830869.2689 #> 780   273442.2284     581321.964   -6319.49836       864520.5502 #> 781  1123249.0761     233648.054   77508.08948       241919.6303 #> 782  -429226.0785    2140181.977   56971.06026       122172.4064 #> 783   123446.5726     172058.931   80867.41791      -406632.6734 #> 784  1029344.1513     822036.338   18280.37612       515711.8612 #> 785   -95139.2899    -360439.029  -32935.10477      -189412.6350 #> 786   103740.8119    -130051.311  115223.28169       356806.9904 #> 787   538678.2915     -87817.671   49553.91230       157761.8053 #> 788   343504.3030     983894.944 -100037.47556       676559.8533 #> 789  1054655.3643    -185406.385   69268.99360       446672.0437 #> 790  1338292.5115     602898.559  -83898.01896      -274453.6105 #> 791   972518.5225     160064.035  -23898.48479      -242846.2242 #> 792   362836.8687     358467.971   85984.65854       279193.8453 #> 793   637597.1933    2019174.289  391472.16588       793577.1130 #> 794  -114250.9258     362975.677  194830.72824       693756.3103 #> 795   579176.0411     637754.935    2474.42739        83811.9785 #> 796   365716.4403     510295.783  263512.42009      1080378.5405 #> 797   232775.6901    1653115.521   36436.36240       262826.6651 #> 798   742538.6845    3653672.735   77426.84957      1025333.2787 #> 799    24278.2379   -1011283.539  -23605.41767      -477100.6303 #> 800   505889.3881    1894365.407  -84185.36037       764994.6941 #> 801   460560.3230     390229.731   58795.46804       469612.0224 #> 802   582338.6129    1692005.463   17066.37340       535815.9463 #> 803   141261.2756     258575.246  -25523.48659      1500788.9045 #> 804   542250.1871     530264.511   31391.58708       455109.0636 #> 805     8217.3648    1646646.931  116794.36466      1202101.9815 #> 806   840584.4032     471540.090   -2541.00239       742764.4719 #> 807   183833.1076   -1043922.784  127815.37120         -957.8342 #> 808   486215.3989    1045569.982    2539.77807      1698360.8723 #> 809   600048.9356    1199599.040  262019.54795      1009350.4807 #> 810   447907.1216    1640083.348  162661.35696      1628776.4921 #> 811   433085.3615    2099232.074  414140.99699      1119071.1677 #> 812  1125355.8886    -785272.132  162330.47032      -474304.2250 #> 813   511787.3599    1899993.362   -5519.97650       522863.7066 #> 814   646942.3150   -1170792.422    9114.89244      1038847.9037 #> 815  1174004.8791    1064519.762  113554.06182      1587766.8047 #> 816   515031.1432     -70724.302  -10399.80683      1570250.9077 #> 817   846837.4939    -761226.628   53963.65339      -159319.7967 #> 818   959793.9970    -360451.918    4495.12319       256232.5693 #> 819  1219400.0019       9815.158  -72521.48065       304485.9438 #> 820  1123212.1435   -1030359.427  -50548.37108      1111811.6537 #> 821   887897.8263     531581.362   23980.60943       479308.1134 #> 822   827885.9445    4042175.861  410606.93012      1566098.9782 #> 823  1772455.0529    1460768.621  184360.08385      2120852.3415 #> 824  1302872.7853     370671.554  -33353.88425       259334.0731 #> 825   601597.3550     756216.694  274888.69894      1515253.8128 #> 826  2190780.1701     765392.867  -78701.12423      -287861.1342 #> 827  1814961.6130    -294207.544  143389.24699       594029.0840 #> 828  1608802.5823     579283.185  179736.11686      1448887.5498 #> 829   950685.9354    2121596.648   40927.90531       741737.4076 #> 830  2407737.9079    3135107.539   75545.37484      2866257.5488 #> 831  1735283.8311     429571.435   64018.58013      1876587.1661 #> 832  1900562.7949    2131552.862   17067.30132      3397765.4043 #> 833  2760074.7970    3644668.718    9083.63862      1680219.7426 #> 834  5308645.5725    1290211.350   36137.40914      3476360.3791 #>     PAID.UP.CAPITAL SHORT.TERM.DEBT        SALES  LABOR.COSTS  DEPRECIATION #> 1      -105711.7126     1027509.022     9045.215  392867.0965   59033.10414 #> 2       -71855.9242      398687.456   999589.897   64033.0443   23479.36664 #> 3        97606.4304       96240.110   162368.340  171334.6304   43094.07267 #> 4       -76654.3361      281994.805 -1220304.279 -133048.5099  -58460.60122 #> 5        95766.4221     -335989.102  3100808.425  247841.4443  -15947.07844 #> 6       -49223.9546      337841.518   607105.380  141098.7797  -38324.96475 #> 7      -221129.9364      848682.155  1586545.373  273633.8410  -84559.33671 #> 8       -67174.6628     -543451.492  2035722.860  187908.7047  -35229.28112 #> 9      -155080.0058      380878.363  3742364.445 -240960.5810  -32463.65218 #> 10     -128953.1210     -682039.355  1867064.484  125335.7253  -11312.97042 #> 11     -142600.4380    -1061058.887  2000936.050  245114.1859  -46585.80246 #> 12     -454266.3676      344877.598   976620.423  317996.4922   17369.33973 #> 13       -2879.6113      870215.996  1527524.705  317623.6221   18794.16473 #> 14        6526.1846     -436414.655 -1808449.905  -67431.9851   29077.80367 #> 15      -67397.8475      234710.593   -99929.245  153419.3228  -23664.56149 #> 16       56249.8367      -83142.328 -2862492.134 -404032.6866  -25101.40465 #> 17       55003.5880      129591.659   -11856.028   16285.6765   36688.14982 #> 18       39614.0134      260137.564  2243645.425  124013.5657  -22667.76218 #> 19     -213338.1388     -836609.073  1080159.268  352492.7144   56432.85234 #> 20      184417.4828     -779997.129  1152303.152 -114010.2786   11295.18568 #> 21       -9941.4191      494432.108  -768919.635  -29390.5175   35422.85917 #> 22      148405.4904       63375.916   510692.810  107330.6889   56812.25869 #> 23     -263374.4930      274807.991  1086832.049  -39951.8949  -59133.07263 #> 24     -226846.4256      121220.675    61760.018 -280359.0909  -40386.41415 #> 25        6221.1629      560065.025 -3362039.995 -556784.4369   -4058.75733 #> 26      107641.1062      188416.390  3086469.051  -17016.4127  -10421.90063 #> 27      -57834.3787     -270383.476  1033319.185   -6210.8594   15308.23162 #> 28       17755.7941     1234158.660  1659963.453  385407.5315   21983.02541 #> 29      -58221.8528     -306639.335  1622377.818 1501249.1786  -72336.00137 #> 30       16981.1921      584171.508  1955523.677   81031.2742  -29595.28182 #> 31      -24545.2105       -4434.195  1852426.566  529556.0470  -54809.97822 #> 32       56081.8750      430279.179  2176101.967  -91581.7895   21706.56268 #> 33      126092.9281     -797966.660  -826766.345  209860.4165   -7003.69823 #> 34       34184.5020      459835.116 -1861472.477  229803.5119   12118.13399 #> 35      103223.7831     -373973.639  1611214.191  121340.8985  -14537.98042 #> 36      124900.5003     -739620.197  -300508.889 -496097.6500   28595.25872 #> 37       65191.4307     -424847.085  -471981.074  376756.1115   24016.49299 #> 38      -25756.1679     -196501.142  1286590.599  107796.8983  -71080.43513 #> 39      184697.9250     -934772.046  -359867.245  231312.5050   23316.52284 #> 40      -70623.3176      119812.000   876430.276  159144.3122   -9643.28246 #> 41      418554.4914     -235432.708  -479932.591   98121.2298  -11288.30194 #> 42      -99900.2294      249754.436 -1864666.960   35502.0541  -20004.94552 #> 43      103221.1833      439389.946  1940860.318  257709.7911    6628.32193 #> 44      -42245.5089     -611553.648  -618254.749 -172973.1917   -8607.00095 #> 45      115647.3312     -310070.143  1245200.110  101789.6950    -973.37227 #> 46      172931.6164     -134671.716  1175590.421 -104153.9025   22036.65209 #> 47      -92410.4555       -5009.682    64818.624 -192932.4330   20966.67457 #> 48       31989.5346      164710.617 -1533671.406  221301.0230   71164.92647 #> 49      138341.4533     -437615.076 -1555198.668  249280.9398  -32732.85268 #> 50     -151593.8403     -438375.037  1702173.978 -178271.1331   -2317.42717 #> 51      131420.6991      397083.492 -3644800.068 -241513.2313  -33240.73456 #> 52       47202.4729      309515.370 -1930727.122   87941.8184   -2847.58312 #> 53     -147920.7695     1076496.011 -1707339.822  245496.0234   17161.16029 #> 54      -49500.9393       62626.276 -4343387.268 -113005.6485  -63717.71522 #> 55       18351.9934      787052.265 -2085723.347   70655.4124   28272.69473 #> 56      -28378.7579     -435595.528  1705684.785   74655.1608   60836.13039 #> 57      256265.9787      894293.509   818686.242  121624.9391   23255.46165 #> 58     -206064.2658      -13341.707 -1491794.920 -199062.0488    9364.86453 #> 59     -120891.8877      169796.688 -1153239.631 -224015.0002  -36982.94381 #> 60      -39783.7611      570704.666   974989.793  -79118.2248    1626.36491 #> 61       17423.6870     1325459.353   -95971.201 -209862.1294  -18185.47295 #> 62      -72924.7358       56919.492  2671611.263 -166126.8257   33653.13901 #> 63      -73656.4378      239300.135   510683.952 -247118.7286   28418.86643 #> 64      303815.2324     1153061.934  2545460.784  249228.8640   16501.46671 #> 65       17023.7511      198311.999  -886440.855  -96757.6561   33501.81320 #> 66     -120604.2575     -237586.119  1074465.528  -16453.8191   19891.14186 #> 67      -42255.5955      368927.385  1153277.245  184744.8180   12265.99781 #> 68       56063.9833       79199.082 -3682889.089  255309.1168  -26452.36442 #> 69      -29410.4107     -291019.683 -1501564.699 -330033.9545    5524.64953 #> 70      216794.7817     -327740.097  4051056.824  132543.6264   63428.00313 #> 71      -63962.8937      127633.623 -1287964.152  231470.2516   13526.49208 #> 72     -285440.3317      287560.452  1313714.781 -131936.1622  -41768.65384 #> 73      168699.5361      -83421.522  -980843.976  184286.0484    -178.62019 #> 74      204775.3762      362796.502  2937495.721  -69063.5883   58443.81587 #> 75      -92846.2410      118043.847  -101542.770  437984.8603  -22957.71715 #> 76     -267048.0794     -246053.318 -1598858.304  -36901.6506   44815.64224 #> 77       62693.2728      857880.020 -1931455.158 -735812.3034  -45839.72553 #> 78      266006.7700     -240120.868   774764.928  153810.8121 -114733.20283 #> 79      152916.8119     -299157.595  -583911.921  -53197.8397  -13292.10720 #> 80     -164242.3013      179603.746 -3070428.986  -95758.1410    5606.29076 #> 81      116210.0753      122807.016 -1248059.360 -263809.9425  108696.71804 #> 82       68221.6131      -11017.364  -231959.891   53870.2280   54479.15088 #> 83      116157.8273    -1258166.693  1168469.372 -422099.5808  -49586.30705 #> 84     -320502.5326     -592356.344   935551.455  -46130.4855   37636.77985 #> 85     -160977.2482      739707.315   144668.678  -76860.0117   44262.30673 #> 86      127093.2145      238646.792  1734184.102  243934.6489   -4895.83208 #> 87     -231348.1773       85307.832  1560457.044  167550.5832    1555.09436 #> 88      130074.3518        2794.914 -1460745.677 -245398.0855  -97135.94122 #> 89       91835.0859      195876.164  1129860.967   90981.4673  -48017.31070 #> 90       -5662.1021     -607228.841   898795.926    7010.1591   57195.62196 #> 91     -147096.1457     -117502.093  -544604.609  148168.9111    6728.61894 #> 92     -250984.3471     -411306.406 -2230547.649  145473.9655   23895.70077 #> 93      -54603.1427      927581.510   401289.635  546263.0336  -29981.24320 #> 94      295006.7613      641899.106 -3350906.228 -199560.9105   31700.22702 #> 95      228728.6499     -142996.230 -1373943.793    9673.7314  -31166.18937 #> 96      -38419.8977      472655.623  2077477.058   36814.4070   29456.17843 #> 97     -120684.7747      690348.717 -1025121.279  158048.3399  -40654.94256 #> 98     -114688.4787      -65409.889 -1699144.706  125320.4271   16913.61263 #> 99      -26285.3003     -285769.293  -480594.735  123901.6882   12517.23682 #> 100    -130890.0102     -298720.292  3117492.705   56857.1445  -16622.99241 #> 101    -146792.7326     -688597.590  1753958.381  134220.1565  -39807.77169 #> 102    -194336.0910      -29977.036   421215.954 -139712.7074   16283.09175 #> 103      24495.2062     -498038.146 -1221504.177   31942.0797  -18981.03107 #> 104      72529.0068        9136.540   194472.014   22266.3283  -43578.81506 #> 105     -65073.9712     -553819.606  -962830.640 -353837.6445    9202.69583 #> 106    -186394.6889     -136407.380   672076.243 -231374.1707  -13063.99231 #> 107    -137334.1294     -310590.351  1426060.155  307205.0589   -8700.42208 #> 108      78101.7975       56954.052   -42294.941  -47547.9175  -14288.63103 #> 109    -253080.1820    -1179958.301  -205320.526  -12938.7317    9330.62187 #> 110      94790.1142      543726.586  1471312.114  220748.6550   48525.95622 #> 111    -215847.6179      284492.438   817436.626  233418.8470  -87263.26951 #> 112    -172997.6600     1179667.898  2969145.553  -92468.0444   18324.65356 #> 113      86882.4553     -548771.440   143537.362  216634.0286   -4692.66412 #> 114      50150.5045      100764.327 -2390466.881  -70035.9403   40452.50618 #> 115     -84229.5504      316512.865  2139043.068   72994.9282   44177.67980 #> 116     175283.0895      -96602.489  3706519.295  200159.2215  -58483.32032 #> 117       7637.1323     -208687.481  -494584.271  193843.3969   26989.58030 #> 118      71241.2132      803686.557  -442529.306  254911.9428   58628.97082 #> 119    -115255.6377      -43709.111   -92594.704  149461.4473   10029.29193 #> 120      60977.5085      636537.344  2122170.405  124332.8849    9943.21518 #> 121    -203265.8057     -827221.406  1194988.773   48161.9250  -85503.03986 #> 122      43112.2500      108966.325 -2173294.904  224128.1534   -2031.73242 #> 123     130286.4687       34025.098 -3123347.796  -92717.1680   60541.23420 #> 124    -180127.8748      -53817.398  1249485.324   57697.4482  -12362.18362 #> 125     -17575.7741      510215.619  1920126.697  179680.9771    2156.86526 #> 126     244098.7859     -549404.934   395048.392   -2892.3517   -3387.25214 #> 127    -113553.4376     -714894.103  -564817.053 -182824.0078  -14620.59660 #> 128     -12065.5314      -65576.094  2146751.207  119622.3481  -19047.17913 #> 129      61400.3252     -300202.294   563291.223  115156.8623   25754.49955 #> 130     -46857.4270     -158708.768  -934066.862 -100825.0255    8863.65683 #> 131     -80740.5485      159700.108  4444930.173 -185177.3599   -4736.73921 #> 132     296737.4020       -6624.089 -2036583.722  -32194.1131   12452.94577 #> 133      66059.8745     -359091.126  1711555.607    1032.0955  -55241.91461 #> 134     -69474.8932      136622.672  1518747.665  352812.6328    -387.53063 #> 135      65746.2934      949915.970 -5035893.627  261662.9952   54661.38808 #> 136      32500.5958      352427.388  -959807.097 -162600.9420   57946.96981 #> 137      86919.2966     -175880.299  2420985.048  246910.7940   14562.01003 #> 138       5057.1354     -255258.205 -4185190.966  -16440.4252  -72978.39022 #> 139     -68689.1574      313492.964  -885908.154  -38305.6962   -9226.39124 #> 140    -159564.6697     -577341.699  2149013.381 -186246.8344   55068.46221 #> 141        502.8995       -2471.614  2313459.320   -1946.2429  -76110.72192 #> 142    -199305.5218     -191612.301 -1159672.375  197895.2704  -21663.62615 #> 143    -251801.4682      542393.639   350581.760 -132508.5823   31294.96898 #> 144    -311290.0712     -190297.823  1732379.357   41915.9556   17329.86795 #> 145    -125715.8991     -489741.843   648235.856 -137050.3516  -98369.03974 #> 146     -76860.2822      306081.086  1232758.080  144474.8788   -3509.08485 #> 147     120756.3233       44877.869   598686.393 -147011.2306    6987.97295 #> 148      63161.1363      -86176.788  2114540.554 -244230.1011   37387.73277 #> 149     -23521.8912      295912.651    -5422.061 -190448.0734  -19102.95199 #> 150      60545.3108      997063.050  2236343.088  317262.2611   75703.40895 #> 151    -129576.6152     -656477.511   509457.044 -134321.2790   52161.54381 #> 152     100929.1821     -460694.288   468663.084  172312.5874   22869.59259 #> 153    -264939.7594      135043.318  1342764.587   -6365.3774  -10427.16390 #> 154    -243654.7606      492559.649  1015303.078 -183662.9265   -8244.10222 #> 155       3977.1797       20688.131   717092.788  494338.4929  -41728.21722 #> 156      -4408.4251      742729.853   507339.042  182923.0867  -66665.15092 #> 157     -46403.4974     -119587.487  -119595.412   -1292.8993  -18982.04965 #> 158      -9486.6980     -274057.907 -1704259.803   63606.4591  -34561.03148 #> 159     -12106.6606      505051.690 -1079267.316  235290.1125   -4560.73599 #> 160      78295.7723      478260.629  -565273.668  247975.4809  -20541.58853 #> 161     -44298.5705     -731346.543   708728.354 -164199.0628  -56124.31004 #> 162      23485.1197      488679.215 -2797726.487  380862.4839    4572.64029 #> 163     -27258.0236     -256872.606   875718.370   39783.4127   52915.36138 #> 164     117036.9360      108936.661  1975627.734  285425.8124  -45605.98676 #> 165    -172470.6735     -544281.302   833687.878  241093.1755   20651.01084 #> 166    -139978.1177     -161749.546 -1557116.215  229998.0655   -2604.22251 #> 167     -47626.5591     -521353.080  1035624.437   83132.8615     253.19301 #> 168    -138761.2836     -137971.165  1542318.616  -12263.0818    3033.08396 #> 169       7096.3226     -202880.060  -316474.439  -76733.3771  -86163.29130 #> 170     -49749.9920      345147.735  2166927.294   65605.0225  -19714.10352 #> 171     184860.3856      596170.039  -408422.596 -121486.2471   24360.25801 #> 172        583.4126     -128467.854  -999997.088  210468.9612  -49499.01822 #> 173      62368.2108     -100196.879 -2427890.809   49334.0083   -5610.42632 #> 174      26743.4828      210056.158  2278418.040  338973.2219   40436.56213 #> 175     354099.2550      814358.066  -884052.902  515373.4613   44752.78867 #> 176     -96310.5636      239528.986 -1608888.964    2775.4459    4738.02625 #> 177     124577.2641      152056.588   682322.035   57774.6231  -79809.89859 #> 178    -127853.0429      -67370.922  2203842.309  -33726.1507    7378.74297 #> 179      27807.0715      326813.672  -478762.915   38505.2907    6379.94437 #> 180     -95508.2643     -153283.147   665446.999 -452631.1888    7201.11640 #> 181     226881.0155      418370.224  -483015.695   40017.8304  -29654.40564 #> 182    -265584.5725     -101193.884  2794133.213   84964.9042   15446.64046 #> 183     162171.3313      286082.582 -2496925.331  -28665.9036    7376.12838 #> 184     131585.6111     -139490.973  -834766.440  106077.7716   84003.75065 #> 185     320815.6065      -46842.922  1292542.701  131281.1757  -32916.01304 #> 186    -289204.8028      257908.887  2365036.687  115803.7555   -8743.28805 #> 187     -13331.6614      114584.753  -240837.047  157183.6677    6666.08468 #> 188      -5866.2586      212748.253  1130328.339  129373.6651  -59516.31714 #> 189      24330.5410     -905826.763  -387447.314   58176.2701   31605.81544 #> 190     -28023.9999     -299564.766  1180307.844   13395.9745   24264.87996 #> 191      48892.8639       71349.968   222558.653 -206642.9227    3724.82786 #> 192    -141709.1020     -206593.761   464536.752  357529.4778   39710.65082 #> 193    -222603.5571     -864667.220 -2138251.460   58970.3317  -24464.58942 #> 194     228009.7967     -401115.609  1067603.690  436106.3413   54819.50044 #> 195     -57059.3348     -254130.267  1053221.101  185459.4403    5182.75163 #> 196      20797.0789      142969.250   428975.293  121666.0615  -28764.72770 #> 197       1026.3658      735643.905 -1155602.683 -172512.5256   60584.21066 #> 198     -87075.5487     1173467.462   143520.119  276426.1403  -16588.62911 #> 199      39147.7700      594987.253  -289248.291  253800.7364  -27507.47328 #> 200     100639.3219     1110876.181  1039915.690  333556.1430  -18321.82011 #> 201     187482.0271     -156735.123  2585031.815 -289595.4670   88055.99397 #> 202     119360.5384     -139413.631  2275019.449  184567.4999   72908.64710 #> 203    -256445.8269      244875.440   170090.373 -476825.4567    5243.78334 #> 204     381090.2406      290029.829 -1245069.135 -246975.6368   43058.53134 #> 205     -58690.1289      139235.172   104909.087   62263.3678  -82755.64930 #> 206      -1041.8197      676202.352 -1582327.072   51706.5702 -109462.75983 #> 207     113198.9863      538533.144   459487.072  107148.8135  -68069.98543 #> 208      48547.6585      -73468.558  2902675.590  205657.7837   25071.82556 #> 209     -12403.9720      266298.143  -101388.930 -131651.1527  -32138.76053 #> 210      23022.8549      119435.352   675980.497  264648.0362  -52227.00565 #> 211    -352085.7217      270961.376   818687.897  106960.8076   84158.12551 #> 212     -56590.6251     -617266.873   340703.422   12737.6165  -15848.28473 #> 213    -149692.2052       55992.902  1483822.559  213673.6525   -5132.59918 #> 214    -171656.8840     -155717.933  -506228.588 -165405.6211  -30297.41735 #> 215     139774.8210     -220382.515   575715.053  396429.5129  -21066.14113 #> 216      -7105.6808     -616006.292  -440194.497  190495.0321   25378.59418 #> 217    -191617.6496     -237242.203  1583179.903  123636.8383  -10135.55043 #> 218       4251.9396      565547.718 -3223529.322 -157908.5581   -3086.05522 #> 219     296746.6434       15057.928    70411.827   73767.9172   80187.26913 #> 220     -32998.3602      978847.446  1938338.814 -132190.6715  -42079.19170 #> 221     187875.7106     -558413.762   229307.763  -10428.3363   -1386.78546 #> 222    -194730.8903      815034.550  2355247.165  -58587.1944  -27485.65134 #> 223     -61687.3189      361505.719  2076998.725 -166069.8359    1168.97684 #> 224     207085.1964      891397.273   -21255.952 -283057.7254   -8279.23417 #> 225      33580.0053       40143.264   576004.654   36094.7255  -64007.55605 #> 226     143562.8099      176803.643  2652288.177  337580.6449  -61924.41517 #> 227    -103738.7939      327335.213  4169790.675 -100255.5307   -5521.40173 #> 228     313276.6323      649621.852 -2439254.272   74966.1535   19506.73319 #> 229     -20272.9202      657037.768  2877174.650 -263195.4164   20553.67258 #> 230      -5886.5118      -16666.420  1818014.748  -28004.4779   21697.69868 #> 231     -49179.1263     -937951.916 -1809600.039  -28656.2662   34388.59461 #> 232    -129416.8624      251979.459  -706534.819  209321.8572    5046.62764 #> 233    -175132.4169     -326186.629 -3135178.215 -250690.3802   42078.27646 #> 234     252158.8401       15487.072 -1965060.648  437360.5555     413.66168 #> 235       7645.5724       26169.975  1416347.590  218927.1871   24731.04105 #> 236      34573.6974     -469753.528  4261516.822 -328856.6663   45580.31920 #> 237     167195.1293       13690.011   306819.347   -3672.7143   -7513.80578 #> 238      88702.1195      532634.039  3671582.317  312829.2022   -8009.65246 #> 239      -6725.9123     -227760.524  -379322.653   28798.3455   98375.11918 #> 240     -41093.6117       60525.930  2050489.350  319600.4788   12805.72261 #> 241    -197015.1433     -158973.850   697811.761 -185313.4700   19269.03739 #> 242      31470.1606       97563.968  1218472.074 -329016.4563   34827.92306 #> 243       5254.0811      -51777.111  3723110.588 -113498.5282   11955.48209 #> 244     315603.9898      528019.079  -740528.183   43639.8426  -19299.13070 #> 245       7915.7608     -718421.817 -1149946.517  330084.7451    7664.10560 #> 246     -54830.6965      318309.010  -143854.373  118051.4282   15993.25943 #> 247    -148523.0712      647787.827  -591455.143   70826.3657   85157.15471 #> 248     161856.5562     1093528.150  2900076.437  247502.3773   47494.47236 #> 249    -122637.2433    -1123903.246    67638.868  238775.3929   22200.24793 #> 250     -36132.9204      120183.419   789804.773  296712.5006   60991.43053 #> 251      74332.0294      608267.795  -255974.590  249558.8907   -1317.74032 #> 252     -18816.9860     -439160.854  -289126.554  321918.1617   27990.75728 #> 253    -247130.2287      527245.775  3239993.076  189099.1379  -24013.14498 #> 254     -34888.3971      626491.366 -1649658.426 -144796.9367     595.89222 #> 255      -6561.7027      205126.337  -886163.418 -270263.9671   44901.47173 #> 256     221618.3431      428613.560  -603825.561  522401.9299   63364.23000 #> 257     238798.6829     -212410.997  1971410.437   -6056.4356  -85642.38540 #> 258     159994.4024      317783.987  2194909.297  116781.5025    6675.08658 #> 259     -33409.1397       37397.417 -3066540.671  102208.3217  -31152.52431 #> 260     186838.6556      183834.143   375792.235 -115471.5256   15677.40531 #> 261     -73073.8304      386516.880  -375898.867  723993.8801   -7744.37068 #> 262     -46511.8198     -111179.467  1063486.911  -87333.4288   63826.65075 #> 263    -132957.1742     -151116.558  -680787.859  320279.1342  -14142.88810 #> 264     -96252.0956      110295.663  1378655.265  -58093.8005  -57714.22954 #> 265      82573.0648      513675.392 -1410523.054  842086.4342   26523.75578 #> 266     192978.5740     -537131.043  1094104.901 -218124.9186    6251.61006 #> 267      14760.1807     -127046.566  -991213.971  112636.6349   48880.09425 #> 268     -78989.9198      420093.382  -955340.990  -92464.0454   11339.56048 #> 269    -133056.2012      851461.000  -816462.223  174007.4157    7548.94938 #> 270     -91153.0832      299235.688 -4579138.424  280883.0033   -3147.76020 #> 271     167542.4408      389875.062   480041.427  146756.4370   37850.95705 #> 272    -168712.2055     -441506.968 -2329287.183 -101086.1645   54598.56578 #> 273     -10881.3916     -157803.928 -1282704.707   23154.9098  -18022.48617 #> 274     100420.3538       36113.627 -1204060.620  131332.6064  -34913.09009 #> 275     -19912.4114      -88682.259   635326.302  -43340.4834   35704.62203 #> 276      85675.3757       29181.146  2402261.380   73932.4736  -29012.03671 #> 277     254808.6217      475482.290 -3406223.026 -256779.9151  -55524.35413 #> 278      40793.9350      696905.311  1556107.964  242757.8443   30487.91473 #> 279    -347652.7220      686309.180  1200907.994  203095.8725   10373.36791 #> 280    -108495.2275     -267805.108  1247548.438  144814.1510   47195.14080 #> 281     105563.4589      -32514.095  3136896.508 -158460.6965   12065.37254 #> 282    -115189.2711     -353892.233   938240.316 -172770.9971  -19369.95248 #> 283    -254842.3613      640539.866  -765533.668   26758.0971   27676.49076 #> 284      97313.2453     1581481.455  -126918.149  -87515.2542  -63270.94501 #> 285     -68753.3668     -528492.026 -1461096.500  113048.2101   56406.79380 #> 286      39530.2410       61090.181 -1395982.932   88625.5865   55937.37187 #> 287    -211094.8801      -78732.608  -411916.717 -184678.0651    3530.30268 #> 288      11284.8851     -156928.102   412890.162  -44048.6317   14875.05802 #> 289     -25135.7452     -288054.302  1481032.302   18538.9473   52632.82246 #> 290    -171266.4102     -789962.739  2104345.608   20650.2281   59272.63285 #> 291    -125233.0497    -1061137.388  1243725.632  140005.7944  -37239.38995 #> 292      11644.6693     1132164.990 -1110829.508  -89713.6157   16994.05004 #> 293    -158382.2393      348676.395  2158101.683 -120374.0243   43886.38058 #> 294      -9767.5933     1118678.583  2018710.723 -112849.3271     801.06564 #> 295     129161.3684       46701.376  1073743.508  -83268.8198  -25515.10286 #> 296     180998.4522       41034.139  -906440.162  -14029.5472  -11162.85117 #> 297    -159525.2937      111143.368 -2007034.635  132628.2122   12006.37705 #> 298     -24751.5316     -542798.807  -581359.827 -202305.8624   37669.13545 #> 299     -54589.7119     1511103.751  -457845.541   61255.0268  -49830.88328 #> 300      -7967.7632     -199519.084   -75949.226 -263153.1775  -31032.76557 #> 301     125028.3929     1079354.556  -257176.697   56628.3433  -45441.11233 #> 302     -39124.8151      119059.836    84628.008 -104668.0669  -40381.88802 #> 303     -29084.3110     -583913.145  1031851.937 -157120.0958  -57151.09479 #> 304      62248.7964      597407.081   978223.853  -52995.0516   43942.09529 #> 305    -128950.5104     -620154.349  -359589.363  326269.3259   42355.56282 #> 306    -130630.5679      638525.423  -791452.787  -88721.7460    1697.31850 #> 307    -159285.7967      -27545.546  1116679.779   34179.5739  -20852.72893 #> 308      65503.7931       12647.488  1265670.273  562962.3216   39112.80123 #> 309     116358.2730      473378.684    47875.248  148949.8974   77919.38108 #> 310     177256.3494     -565856.045 -1188504.296 -164522.5127  -27491.73163 #> 311    -136910.9345       31653.053  3099098.387  248342.3113   46554.62374 #> 312      51986.3061      401342.541  -131174.387  212369.5389   47240.99317 #> 313    -115566.8869      878149.247 -3163108.916  492057.6788  -66344.16899 #> 314     315188.1106     -834432.238  -598465.801   43396.3607   10060.86383 #> 315      29989.9137     -295403.019  3171711.897   78445.8740   21217.90145 #> 316      58458.2456      307540.423   528935.116 -403752.9176   11829.37652 #> 317      13367.7127    -1094124.853  -484728.710  146145.5200  -48527.26142 #> 318     -54547.4868     -278246.250   440953.108  271026.6421   28289.72430 #> 319    -130918.2531      653784.031  -746137.247  272502.5952   30543.10417 #> 320     -22064.9420      114704.381  -239437.743  207264.9787  -63162.79923 #> 321     -17178.9919     -291530.416   660721.174 -256237.9516   37056.43001 #> 322     -15552.3745      705239.404  5887618.119 -296517.6674     217.07951 #> 323      67262.2329     -199637.974 -3534655.908  -22885.7384   41401.67175 #> 324      39036.2995      128231.683   224475.547  103680.6874   63576.14120 #> 325     -43817.8772      314211.285  -428757.924  -43079.1298  -41005.88250 #> 326      37385.1053      111004.304   390527.923  122833.6103  -20222.83301 #> 327      16156.9662      452677.368  1933981.867  298810.9868   79516.55289 #> 328    -149483.4675     -419372.120  -205798.672  -73803.0215  -16566.37458 #> 329      71394.3060      296631.120   291236.243 -209896.8881   11623.74269 #> 330    -310854.4239      786031.476   101046.401   45622.7786   18931.44864 #> 331    -277096.2202       90497.447  -421796.914 -229376.9952   26914.48713 #> 332    -120913.3091      280864.464 -1124524.112 -102517.1830  -25045.17409 #> 333     107301.8031     1187357.987  -113379.323   21092.5963   -6486.75672 #> 334     183850.9021     -128810.966  -528623.665 -217747.8619  -31250.31180 #> 335     234234.5813     -339687.166   281496.258  204828.0625  -42653.81437 #> 336    -171106.2846     -833274.513 -1414524.631  363066.9139    2452.05432 #> 337       6680.6171      217889.795 -3347177.485  212137.6870  -31818.72177 #> 338      66173.6266      -92121.520 -3397029.279  107006.5957  -29210.52500 #> 339      26295.0827     -185652.569   142205.497  198427.8356  -50683.69170 #> 340     -74374.3867     1044189.291 -1236888.626 -138189.6715  -60191.44634 #> 341      26865.4567      495207.073  -322865.741  164697.9972  -47668.83139 #> 342    -150353.9364      710019.156  1823314.178  107946.7327   75110.84075 #> 343     -16988.5328      575689.294 -2411893.939  274199.3964  -30334.27298 #> 344     -27710.9967      141398.981  5165964.901  212351.2888  -18368.13858 #> 345     143473.1608     -130702.007  1579304.295  475015.7423   -6468.21734 #> 346      12340.3871     -135568.837  2869274.048  -99508.0322   13814.75196 #> 347     119700.7931     -249524.585  1136302.521  239441.4310   66504.83819 #> 348      70197.8795       -9946.604  3559172.988  -44234.5818    2000.54155 #> 349    -141250.2312      365264.640  -703504.195  290002.3699   64324.18130 #> 350      -2309.1774     -187036.435   927120.638 -128070.2487   76488.57068 #> 351     223902.6526     -168619.927 -1594195.204 -465084.9170  -15497.84961 #> 352      20290.3947      654042.175  1673251.696 -220090.6781   23012.42962 #> 353      62793.4929     -104281.134   710755.584  266874.3240   13393.03973 #> 354     -32065.4951     -191920.649  -566452.787  -55734.7638    8260.10361 #> 355     117223.0434     1552437.794  -325715.962 -104654.0133 -110871.94936 #> 356       2405.0283     -306028.538  6023487.621 -117180.7527    8943.31806 #> 357      -7962.4335      301827.018   -47013.848  -63347.5000   25978.42350 #> 358     -38034.2716      341058.899  -762418.784  -83784.0410   73808.46703 #> 359     254605.3693      281602.534 -1459491.260 -239396.8350  -41577.77394 #> 360    -138286.4177      608259.134 -2646823.521  -70358.4127  -22687.30733 #> 361     247660.4854      680059.201  1557641.206   14018.9488  -43743.14667 #> 362     -34582.4571       26969.564   -64058.876  237287.2958   28043.09542 #> 363     340593.2591     -390062.052 -1692605.625   21529.5355   10839.97833 #> 364     -56445.4690      155554.544  4051060.890  342802.3963  -11826.55439 #> 365    -113130.6568     -162299.644  1100974.428  216127.1245  -56439.34964 #> 366    -132147.6174     -861718.950  -474605.525   38017.2932  -34534.76291 #> 367      18441.6752      104369.511  4012759.611  181666.3090   76866.80087 #> 368     222405.8523      297098.092  -641377.656  423865.1520   21618.99275 #> 369    -314494.5321     -395523.096  -291206.537 -202880.6737  -61689.05282 #> 370    -107122.8455     -132026.257   156302.743 -133115.9821   93168.27359 #> 371      -5048.9327     -494853.608 -3444419.891   40376.0295  -81903.59956 #> 372    -153260.1789     -868600.675  1526704.936   71198.1230   23173.68968 #> 373    -192348.4128      -30132.381  -797252.612  239625.4241   28766.52554 #> 374      41764.5859     -338107.804   420876.689 -127666.0664   16670.80934 #> 375    -193033.7298     -630959.576  -401125.609  102798.8398  -14175.35839 #> 376     220620.9890      776500.648  -174113.813  -50847.9694   62356.80228 #> 377     -23772.6136      751195.554   708900.659  224880.5530    -610.57389 #> 378     251680.8724     -146233.370  -405119.363 -214960.4215   51593.26497 #> 379      35008.7277      -80389.984   665619.039 -139839.5223   -7674.86384 #> 380     176805.0184      364068.794  3770746.918  547431.4569  -71592.62508 #> 381      76641.9187     -362438.743 -2068811.176 -338477.0174    2287.87843 #> 382    -236487.2685      307508.708  -329715.217 -241753.5798   -8965.02158 #> 383      62627.2751       39390.802   418330.808 -300837.2607   23089.01721 #> 384       8136.0694      -96705.869  1654936.249 -315360.1922  -48335.12772 #> 385     103063.6854     -368838.673 -1220740.730  -61461.9999  -40984.07296 #> 386     -92133.8462     -603387.229  2626512.670  159814.3244   81290.16819 #> 387     176965.9375      247240.842  -696927.392   43521.0658   86373.02683 #> 388    -147956.1542      348652.694 -1327183.066 -229873.4793  -30742.49800 #> 389     134953.9152      -40037.565  -353926.903 -141508.6269  -53226.17356 #> 390      -8884.5727     -387784.364   800933.744  -93938.3338  -25576.20555 #> 391     -12861.4464     -201690.808   937433.151 -264192.3495  -41842.34240 #> 392      76405.9556      651162.389  3214300.048  -76505.3390  -37538.07270 #> 393      88103.4217      275956.098  1642430.398  476950.6992   54341.31703 #> 394    -113964.0863      137197.083   586786.264  -77880.0107    7263.16851 #> 395     -20653.7039     -698444.220 -3119486.817  126247.1006   25915.40984 #> 396     250187.7326     -733922.352 -2690832.613   89843.9885    5016.67418 #> 397     286390.8043      172633.391  2232956.087  260775.7082  -21531.65182 #> 398     135684.2338      -44583.144   210239.827 -175686.0106   71380.97801 #> 399     165813.6232      -33875.514  -776571.625  145306.7581   38017.28503 #> 400     -17772.1556      518727.363  -516821.408  -31867.7506  -14269.77234 #> 401      40717.0734      214807.504   664928.757  193925.3980   43426.97920 #> 402     107591.5388      218431.590  1445254.542  -73919.4914  -50615.42049 #> 403    -123604.8830     -262098.648   691638.285  211680.2471   46067.90280 #> 404     169132.2640     1066229.191 -1303432.157  383483.5356   85312.19147 #> 405     -52686.0649     -249049.415  1250514.581   70413.5849   -9898.25696 #> 406      -2545.8511     -409516.206  -382291.772  373748.8483  -29021.42054 #> 407      69864.6701     -328416.488 -1348010.980  -38285.5207   25322.36658 #> 408     112805.0341     -327771.413  1491795.584  141577.1501    6321.61946 #> 409     161425.6364      830641.636  2388619.405  181769.9513  -63975.43247 #> 410      38798.0509      227692.847  1673610.881  -94964.5190  -54351.60364 #> 411      -5494.1489      375534.417  1346205.221  -63007.9545   29807.08254 #> 412      39655.0440     -374117.522   681771.837  105805.2729   33224.46717 #> 413     -37510.0558       41528.170   160166.486 -254269.7205  -50194.86866 #> 414      81578.3660     -462311.520  -204776.932 -210789.5409   57239.23620 #> 415     -57874.0492     1149955.047 -3162622.303  347348.8956  -85155.15479 #> 416     127232.2263      691082.609 -2733630.826  106878.5143   42814.69143 #> 417     179713.9054     1242942.074  -490317.007  125495.0779   56633.41113 #> 418     -53092.7663       77880.503  1893031.901  -37627.2936    3686.21378 #> 419      -1854.3220     -656477.008 -1758915.268  342306.5942   -5589.66772 #> 420      39026.4980      621377.300  -183117.261 -241748.0844  -50241.33271 #> 421     -50314.2322     -176880.009    47209.753 -298360.4546   16579.76700 #> 422     223333.5653       59293.043 -1579834.170 -101725.1941   74391.69424 #> 423    -194680.2480        9327.462 -3465007.021  396792.2015  -62475.70171 #> 424     175342.5635      143246.474 -5765672.645   89167.2417    2405.92503 #> 425    -241039.6258      -86892.368  -262060.999  215393.5284   -1509.53907 #> 426    -132352.1541      454389.112  5377284.810   54713.5588   88341.09308 #> 427     -64012.0638      273924.155 -2275915.432 -155349.7839  -30841.37406 #> 428    -100538.4090    -1115822.733  -489279.943  -81096.3258   44858.74958 #> 429     359920.2644      628200.652  1456759.263  304857.7027  -41716.49272 #> 430     110889.1664      191810.835 -3671956.352  221758.7362   80368.89767 #> 431     334864.9435       34392.647   526879.969 -140138.2161   22602.92860 #> 432    -153862.0776      567721.833  3240311.636  203436.9157   95222.82112 #> 433      -2940.6711      119897.721 -2757478.877  -91644.3488  -29870.79932 #> 434    -137491.6090     -388864.334 -1647769.346  -67417.2516   49806.27559 #> 435      -2225.2144      434939.283  2337341.072 -335768.5812  -20020.51987 #> 436     129168.7670       17000.895 -3036722.606 -126823.2703   54535.42377 #> 437    -153373.1926     -443824.756  -552113.949  262500.0626   67963.49506 #> 438      97260.6229      -75998.916  1911891.245 -306423.1825   66868.78463 #> 439     -67522.6181     -607349.928  1618338.435   39870.4298  -84835.64633 #> 440      80679.5554      492709.769  2629746.077  -99213.4790   17644.07990 #> 441    -160233.2718      368646.222  1988716.242  -99997.5504  -59228.71283 #> 442     -33816.2721     -205856.881  -747937.988   42110.1838  -20880.65422 #> 443    -145504.5922      661207.127 -1208115.508 -113275.7816   37596.25846 #> 444     -13834.2089      -18133.581   610230.669  -83108.6363  -61218.50681 #> 445     100932.0557     -523410.455 -2211664.303  293880.8680   57939.36728 #> 446    -137990.0068     -305445.208  -366934.127  272660.4670   46343.91306 #> 447    -262913.2079      146735.205 -2029683.607  103587.4549  -52329.35957 #> 448      -8298.4717     -732192.483  -916666.844   19466.2287   -1640.32672 #> 449     188236.8374     -746380.976   837379.057  -63024.2694    7708.53459 #> 450      78017.6852     1003148.758 -2715335.329   33806.3863  -19845.16974 #> 451    -128176.3039      883124.079  -433875.812  166565.6359   46057.76415 #> 452     216358.7712      338962.934  -288361.170  -62133.0199   77418.63256 #> 453     127479.0033     -579040.206 -2068794.728  -98740.1449     720.82360 #> 454     242518.9462       46325.549 -2701007.708  -84149.7216   12233.43231 #> 455     -65918.0840      217918.221 -1774750.458  -30798.4754    5180.33712 #> 456     120001.9474      -85571.424  -200858.776  157519.7931  -13094.77219 #> 457     -58575.7278       28133.361  2525219.075   84350.9840   15435.08974 #> 458     -32556.3229      -54129.314 -1218108.500   -6181.9730   -1500.37395 #> 459      79408.9913     -322733.849  -589950.274   46924.5358    2849.47668 #> 460      49530.2510     -586246.518  3559221.110  169537.0449   40123.62289 #> 461    -223213.7812     -664830.768  1713980.581  301141.4510    7743.25536 #> 462     -49118.0242      981060.802   382729.905  124221.1285     493.15405 #> 463      62107.0626      157475.777  1010292.618 -204971.9841   -3928.35918 #> 464     135878.2211       42404.736   483983.032  340380.9422  -50415.09053 #> 465      53085.9446      185943.438  -702960.405  198702.5921   88290.70260 #> 466    -177659.0277      524421.938 -1021895.511  -78265.9776   19938.78169 #> 467     150122.4567      141927.624  1978803.357  -15172.2696   77331.46666 #> 468      88048.3231      -57806.682 -1348453.528 -375507.2531   43467.72380 #> 469        443.3378      648818.173   -94473.039 -113865.2117   69318.23013 #> 470     257765.1382     -187854.145   967922.545   68651.8518    4351.56855 #> 471      -7796.8174     1084700.993   432463.466  155678.1378   18902.02600 #> 472      16131.4367      747798.649   113026.499  193041.1756   21808.87079 #> 473     111410.7265      377735.408  -578355.366  173814.0837   23659.43243 #> 474    -219903.6894      143786.581  1604245.331  281639.1187    3019.45773 #> 475       5235.3575       45821.113  2326940.042  131196.1139   11043.41148 #> 476      -5506.3612     -203734.478  1681029.264  163162.5646   16426.35872 #> 477    -205286.3221      470184.465 -3647722.018  661908.5217  -34834.30914 #> 478      99121.7580       -9223.221  3069416.476 -117074.3461   58824.13778 #> 479      96742.3383       83855.284 -1648755.526 -165842.6081    7233.15469 #> 480    -209401.3318      908555.545   941802.396 -108932.7762   49369.03447 #> 481     199301.1220      246422.627   966520.976  214255.3256   45441.43835 #> 482    -192354.0595      272788.240   185032.921  357063.9789   14157.70602 #> 483     223468.8478      -65801.637 -1691332.745  102046.7692  -34790.70393 #> 484     167508.5214      586940.424  1643011.089  140647.8175  -33396.09982 #> 485     180347.4499      318894.550  3209548.103   61791.2225   41338.41862 #> 486    -109031.3997     -943118.030 -1306010.830 -147451.8615  -38682.34507 #> 487     -28678.2978     1166702.303  1488459.896    4657.4584   26593.46414 #> 488     -17508.6118     -676188.681  1395024.662   46203.8662  -92764.62695 #> 489    -247821.0583     -443554.817  2927847.918  130803.8612   17335.85608 #> 490     339275.3631     -270614.965  2513595.425  -65421.8029  -34617.63794 #> 491      15853.6737     -767055.956  2565114.346  -26878.7485   15071.92476 #> 492     -81099.2013      275931.054   385687.112 -166696.6545  -28637.09023 #> 493     -31283.8433      -14867.638  2612876.635 -239460.4479  -56091.60432 #> 494     164680.7296        1326.152   224707.054 -174811.0082    -737.66449 #> 495    1595654.8939      458524.437  3130874.874  455467.3899   -3835.94222 #> 496     131307.8366     1042048.143   480237.431  448866.8158   10107.92414 #> 497    -119648.9788      211607.167 -2837842.063   42432.4216   34846.94700 #> 498     150196.2688     -628975.465  1408336.934 -223834.8909  -39219.36836 #> 499     -24373.9521     -390830.387  1802710.916  176795.6588   47453.51382 #> 500    -241055.5501      -68440.420   382748.194 -126881.2801   10892.79239 #> 501      31925.4812      972493.614  -842392.499  179843.5269   19042.94415 #> 502     360603.3659       74486.488 -3470517.413  206908.6248   89486.59324 #> 503     343739.5328      590636.437   317972.435 -121493.7379   19774.66956 #> 504    -126687.1740      396685.208 -3869811.090  -58253.4456   -5782.90040 #> 505     -15611.6631       39058.120  -795028.548   29954.9903  -63102.88922 #> 506     140715.4062      538337.625  1516524.331  140325.6877   -1385.16231 #> 507    -122812.5541      581972.831  2303566.884  169625.5106   76122.86016 #> 508      66091.0997     -247143.037  4017124.845 -348740.5097   29441.61012 #> 509     -16051.2299      112706.292   371986.235  383080.9307  -72194.58589 #> 510      23572.1622      170077.387 -1740013.344 -620529.0063   37195.14972 #> 511     -31396.4456     -435162.546   351111.559  114615.6499      60.77575 #> 512     246772.1729     -256989.362  1700898.395  361634.4979  -14449.55339 #> 513     -36559.0385      193696.164 -3180962.738  -78760.2009   44282.33460 #> 514    -108793.9883      -54602.664  2501300.781  459061.4544  -31702.05164 #> 515     391372.3686     -305462.582 -1900771.093   97964.9558  -21872.22226 #> 516    -274300.1954      909584.040  2335005.506  357409.9009   38380.58747 #> 517     124257.7463      891520.079  1434020.629  329672.6970   74427.23646 #> 518     -11099.3705    -1006821.508  1478167.560  -33600.8059   -3181.99942 #> 519     -79230.1089      316576.664   517118.090   46754.9114   35004.00196 #> 520    -229759.4531       55578.047   892523.691   99053.5684  -54368.21598 #> 521     136164.2530     -247889.633 -1930109.982  324960.5475  -16214.66911 #> 522    -101038.4114      311752.056  2223634.320  -92277.6996   44454.07114 #> 523     169001.1620      133242.426 -3717291.289 -195998.5225  -33331.53796 #> 524     -72961.1554      207521.073  2299803.413 -114335.2543   55063.11303 #> 525    -132141.3861       33612.202   834677.780 -275100.4701  -46403.37559 #> 526    -201934.7665      721047.815  1128964.980 -306008.6165   13127.10550 #> 527        904.3711     -575717.463  1890939.491  436139.5814    9325.53027 #> 528      20952.3215     -756255.701  -139948.851  282904.5035    5009.21132 #> 529     409768.0004      358904.339  -903764.719 -121478.9988   16011.68281 #> 530     240385.9518      942117.046   -54089.412   85876.5633   -4718.79891 #> 531     161805.0154       43331.813  1047032.508   25588.9497   10878.87464 #> 532    -123679.3654      286942.798  -359981.930   92200.3941     992.68176 #> 533      85399.3228      367181.793 -1380382.633 -139523.3629   13909.70673 #> 534      28518.3418     1016090.064   684352.464  222845.0219  -16465.43821 #> 535     132368.5001      370108.787   495113.848  231880.4342 -103480.54850 #> 536    -252781.8863       50575.337   329602.125 -109234.0582   43953.35549 #> 537     -66552.4552       72837.464  3641636.057  191243.1613   58522.20406 #> 538     -34948.0999      999935.150 -1759865.228 -251011.9601  -17384.55902 #> 539     125557.2251     -277090.214 -1147331.032  -57517.2250     964.54490 #> 540    -268614.6562     -738318.237  1980049.502  291257.4548  127764.19172 #> 541    -112331.7552     -127341.288 -3633403.916  -39773.7927   20694.95570 #> 542     190153.4464      109200.611  -432749.632  -66667.8121  -24117.67259 #> 543      18665.9139     -275397.845  3104944.479  204787.9735   26657.18808 #> 544     -67644.9193      721395.149  -145904.915 -132200.7621   48013.18563 #> 545    -167686.8832     -161082.733  2671238.338 -256614.8723  -88979.62420 #> 546      15855.7288      130630.499 -1021975.107   25318.8538  100798.47448 #> 547      28632.7278     -192773.075  2688962.290  165996.1990   59088.34811 #> 548     256303.5767     -275978.713  1070569.128  176077.4274   60402.70910 #> 549      17264.8945     -318974.757   240977.282 -100029.7843   24383.91049 #> 550      75911.5026     -163079.842  -974439.781  586471.3790   18351.42175 #> 551     -42599.2123      219556.641  -735763.695   67636.9133  -23613.01242 #> 552      86364.1330     -692887.607 -2596153.083 -256436.3754   20462.82290 #> 553      78008.6280      609178.652  3775814.472   40323.2831   -5756.65712 #> 554      26365.6472     -626186.998 -1538920.765  370282.7413   75175.64923 #> 555     -58466.2213      -11552.575  -652773.880 -132845.6884  -23983.70094 #> 556    -483435.8105     -476572.055  1267233.987    2118.9784   22964.84874 #> 557    -194540.9145     -626932.343  3120487.280  144919.6437  -23697.38967 #> 558     -56313.9939      125848.292 -1297849.278 -283080.2127  -19199.48554 #> 559    -110662.4375     -295955.011 -1225261.313   70790.6638  -60342.52164 #> 560    -288805.6208      624391.827 -3308773.995  351182.5624  -13940.37081 #> 561      90550.2480     -115935.891  1663981.601  -82261.5951    6743.82057 #> 562     255905.2746      946044.192   804851.026  341549.4129   14654.65438 #> 563     118959.8703     -314153.815  4134101.994  175673.8094   13991.32253 #> 564    -242866.9855       24050.121  1545634.018 -327938.2400  -13527.58341 #> 565    -116231.1057     -495941.287  2360327.826 -105134.4699   35891.07777 #> 566      19607.4244     -725423.785  1599550.306  121387.7280   -9293.49938 #> 567     -51151.8389      567022.930  1536865.072   29886.7025  -13830.52975 #> 568     -26704.4969      -97574.933  2875174.112  -33200.5892  -59058.22331 #> 569      83046.1461      619720.507  -764604.826 -125714.0011  -12739.97559 #> 570     254324.0510      462920.667  3046846.859 -169293.2855   23243.49245 #> 571     145657.8241      483925.342 -1494587.246  541041.5974   40876.92836 #> 572     233079.6910      490082.540  4594361.540  130926.6930  -11719.10840 #> 573     -62114.8944      304509.719 -2810720.814  -65621.2865  -11868.63207 #> 574      61650.8690      300360.069  -180081.845  -30442.0349   51465.42570 #> 575    -233526.0619      231134.083 -1222728.863  228529.4694   22291.93089 #> 576      46785.1447    -1003953.672  1280012.993   80830.2580   20648.85485 #> 577      50810.7180     -184702.778  1808596.193  -87658.6580   56969.81033 #> 578     226696.8743      136647.416  2950521.182  -91414.9359    7605.40097 #> 579    -211440.3973      239014.153 -1677878.228   86733.7108   36754.01800 #> 580    -124637.1773      194712.743 -1341597.725 -111962.1988   58479.30851 #> 581    -343542.2461      132235.489  2472404.404 -107077.1987   45410.32224 #> 582      31373.5630     -227726.622  1743587.701  217726.5747   37622.30911 #> 583      37673.2570     1019167.500  -108176.354  200427.9696   40479.87596 #> 584     -65802.9783      394037.304   543208.305 -212145.3512  -17523.80905 #> 585     374824.2931      268056.691  1448050.858    1520.1822   -7633.91097 #> 586      84928.0621      265268.194  2108284.091   22482.1467   32666.24107 #> 587      -1652.6400      217372.656  3005844.726   75172.4670  -18094.25582 #> 588     231970.6062       70145.666  1251821.989  250888.6280  -53711.68830 #> 589     110675.3003       97782.740 -1935513.965 -332012.6200    3997.19359 #> 590    -178339.1683      344835.511   476397.450  212255.4771  -12080.35622 #> 591     127959.4729      846406.037  2069393.436  -63381.5914  -35063.58966 #> 592      98363.1588     -456531.585   340869.856 -201208.4779  -19058.18872 #> 593       8675.3880      234021.796   101656.210  -63424.6338  -40590.44506 #> 594      40874.0485      464722.404   926831.992   27521.5921   28339.60414 #> 595      66053.7668      357235.004  1095461.690 -205797.0709  -11521.48737 #> 596     -73701.5898     -530862.414  1705204.173  219825.1831   27501.06081 #> 597      66287.7053     -480374.377  2747634.544  -25953.7736   13947.39495 #> 598     257382.1848      314355.223  2784305.060  331913.6835    7032.95869 #> 599      25239.1782      688081.779  3025573.739  172831.9446   56569.53636 #> 600     233462.3794      350450.138  3287709.513 -171616.8647    -420.57295 #> 601      21567.7816     -435208.955    34175.514   35316.3559   41769.25124 #> 602     -96428.0547      572079.163   632928.632  100957.7949   85369.40935 #> 603     140574.4365     -183276.591  1041499.814 -389242.7944  -34183.49011 #> 604      48456.8453      974949.800  3262701.967   92134.1124  -11589.78704 #> 605    -183280.2550     1264476.787   933628.592   89152.6430   48086.29296 #> 606     160545.1407      -17388.739  -455057.030  136791.8090   15721.07593 #> 607      39237.8909     -472257.166   841566.291  245130.4011   24998.94432 #> 608      14380.6520      759105.973 -1474032.908   84961.4049  -17182.74290 #> 609     -91720.4628     -228106.531   463177.300  -70593.0567   33983.90530 #> 610      16345.5069    -1066490.795   181771.730   91159.3111  -30084.90705 #> 611    -187465.4836       62843.047   857961.057  263066.5822   -2713.51904 #> 612     -21274.9297      856668.310 -1255032.346  -94465.6924  -21591.08448 #> 613     230856.3600      702660.778 -1512253.538  -10193.9814   -7620.80729 #> 614     145131.8854      133119.833  2106452.763  -14054.8678   43799.89111 #> 615       2393.9360       87031.774  1732589.098  -32203.6498   17474.27138 #> 616      44521.3289      495089.462  1143079.300  -81334.7507   31912.37322 #> 617    -299391.1351      138889.050  4275951.248  511067.6004  -20264.80877 #> 618     -10731.5381     -474491.286   476396.870  326070.9254   -9014.53971 #> 619    -156669.1182      291376.236  1733054.930  252154.9040  112033.87552 #> 620     -39647.8001      455988.679 -1133897.683  206486.9153   36076.54967 #> 621    -276552.5004      393047.953   969905.475  393016.3137   80915.49354 #> 622     225522.5346      611575.044   204465.464  137243.8255    9186.64918 #> 623    -143247.3810     -922112.008  2522010.091   37255.7502  -45664.07315 #> 624     -42609.6380      393713.203  3199383.776  424604.0029  -55180.57459 #> 625     -34610.2530      -36280.312  1073655.001 -293067.6630  -19207.30366 #> 626    -104699.1576      584387.480   185434.609  119294.2850   26825.48675 #> 627      50772.1872     -366536.007 -1634605.238  267324.3658  135598.29859 #> 628    -160096.3067      519967.832 -3739935.626  -18377.1196   54001.91912 #> 629    -193683.2185      380980.206  2357141.485 -202159.1172    1772.54400 #> 630     119702.7990      422953.311   396048.699  447341.0569    1288.32202 #> 631    -164453.7715     -426152.996  1053436.331 -152075.8752  -76118.00138 #> 632     123996.9373      -40780.632  4975018.467 -259970.0217   -1689.53332 #> 633      83956.4251      180864.438  -318216.940 -354446.9788  -66927.77711 #> 634     -68591.4021      160966.410   907899.235   54970.1441  -46066.49695 #> 635     -28244.2661    -1020078.294   379923.940  -47768.0415  100293.30203 #> 636      93684.4443     -766510.567  2555505.358  163513.1424  -16241.97080 #> 637     159009.4769      428699.495  -764535.222 -425860.2177   19204.36332 #> 638      -9172.2282     1175249.565  -860105.170   29170.1341   44793.79571 #> 639     144427.2614      773734.783  1914867.212   76777.1727   12124.21720 #> 640     239255.9786       26027.264  -577953.864   68253.7972   12444.35542 #> 641      23092.4007      148628.211  1312149.363 -130462.1046  -43596.55080 #> 642      66027.3733      258493.224  5679918.697     443.9892   55302.88793 #> 643     -10846.6640      756996.600 -1880666.045  120493.9375  -35586.12248 #> 644      16299.4059     -401929.923 -1238739.709 -160643.4464   -6015.48913 #> 645      65253.0623     -143171.518 -3435433.865   47194.2358  -16723.95990 #> 646    -275732.5957      654124.680  -237457.735 -402600.9284   11436.40412 #> 647     121498.6469     -222561.416  -945698.230    4545.5517  -26966.43406 #> 648     295431.5670     -377064.491  1390716.511  377260.2813   10626.19288 #> 649     285558.2213     -536223.769 -3083742.018  534248.2013  -36007.12080 #> 650     -52384.4801      331184.749 -1667879.997   55165.0293   99480.55492 #> 651     145985.4687      538504.590  2219575.494  -69653.9686  -36600.91195 #> 652      25211.1686     -192339.309  1014992.845  445984.7403   21653.18800 #> 653     -30811.4829      304286.372 -1044219.477  -24697.4612  -11054.84485 #> 654    -318907.0461      681716.778  2595060.601   53626.1106   54501.53268 #> 655      95451.1131      311859.564  -497822.332   89590.5239  -48856.09513 #> 656     335499.7515       62871.684   946409.535  -34116.3315  -27031.47167 #> 657      54536.9749     -270751.368  2910046.844  333496.8563   45880.25742 #> 658     -57371.9114      974186.163 -2113424.071   -9634.8839   72400.82935 #> 659      43242.8263     -609705.192   494145.958  456855.0683   52434.78566 #> 660      49417.7065     -185485.602 -1214783.776 -122555.4100   15770.46331 #> 661      89385.7113      495407.962  -102227.053  120498.2109   -7420.79624 #> 662      14223.7306      101591.113   603528.412  191608.3229     233.45254 #> 663     -39364.9079      162019.765  3490851.644   56786.2192   -2202.41481 #> 664     217029.8020      326700.256  -232117.194 -199232.4477   37560.03192 #> 665     -35249.6922        7847.513  3292392.205  154812.4375   -8631.61288 #> 666     -31676.6773      544783.025 -1344885.124  318194.3247   10227.89858 #> 667      49815.6896       51718.508  1781779.811  426796.0008  -10340.34480 #> 668     258361.5682       44365.036 -5008928.159  251177.1166   -6158.59379 #> 669      71684.8247      801119.143   848799.193  254949.3253   45504.04640 #> 670      56437.2432       13562.002  -865742.521  115745.3353    5602.97027 #> 671    -262029.3458     -255511.307  1258097.812 -177681.1804     906.70690 #> 672     270269.4213      -40901.580 -1798842.076  -69529.2098   19885.98498 #> 673     -65037.7631      -37597.541   183213.898  132224.2303    1029.66069 #> 674    -146667.1911     -423896.380  1243352.732   98747.4322   52305.14334 #> 675     264987.0088      703755.735 -1461413.460  -55155.7533  -31287.79794 #> 676      36881.4799     1869904.539  1664821.667 -206562.5668  -30773.67802 #> 677     365486.5598     -367227.059  2337888.095  264022.5071  -93628.31549 #> 678     259893.0571      988024.003  3058773.378  700764.5302   92569.75008 #> 679    -169396.3210     -357204.210 -3934687.924  -13772.0806  -29680.20782 #> 680    -124908.2342      202512.409 -1001082.938   86867.1977   17721.10970 #> 681     127350.0872      635911.695  -530127.701   29473.8194   42596.98026 #> 682     344203.1680     -336567.333   596886.603  262730.8206   31018.17928 #> 683     104088.2380      706897.939  -629783.418   49731.3294   36134.85442 #> 684     235433.9333      597001.034 -1673122.335  -90912.7406   36034.04690 #> 685      65214.3154       22804.209  -891217.536  -96709.0774   22067.20055 #> 686      48554.8135      583494.609  1892422.566  259800.0675   55728.44159 #> 687      -7343.1638      606206.590  1933649.169  184452.1966  -11146.00795 #> 688     198448.6465     -772845.019  -862643.342 -367703.1829  -60138.82922 #> 689     132591.1815      861613.984   -54317.137   92695.1149   55830.55010 #> 690      38102.2514      112969.141 -1120183.301   19365.3641  -34567.25526 #> 691     201106.4562      761878.732  2319995.116  265445.7382  -20758.29582 #> 692    -299302.7422     -231739.034 -1140503.708 -178807.8232   90565.09772 #> 693      19413.9613      327617.809  -113943.198   65911.0593  -13063.85965 #> 694     -85635.4796      702367.726  5168997.164  215543.3091   85892.07063 #> 695    -102669.5080      -11920.586  2612597.608  -83845.3487  -12218.39396 #> 696     208725.7192      532487.275  6120625.365  100442.9590  -49875.69559 #> 697     185136.8096     -970460.719   433841.890  112163.2414   70395.45474 #> 698      28696.7804       81957.056 -1549681.342  -71692.5272  128209.27919 #> 699     -79081.5874     -873326.439  1940314.996  239308.5117  -41423.94566 #> 700     -22697.6528      295808.349 -2755194.717  212772.2037  -14246.34331 #> 701    -124045.6067      351099.012  1738491.798  279126.2933   13196.58312 #> 702      57685.7962      206644.870  -190817.917  -48138.5517  -47431.02889 #> 703      80802.3525      608784.356 -1941758.018  596659.9075  -42364.91641 #> 704     190889.8273     -367223.363  1788402.117   67758.1765   64806.64570 #> 705      53977.1940     -188393.421  1409027.894  159074.3388   48302.51934 #> 706      86784.6812    -1800576.261  2439602.623   -9656.4633   71723.93342 #> 707     101845.3936        5716.545  2942246.067 -208934.9076   29595.55591 #> 708     143459.3079      862866.722  -768736.627  370737.7232   30573.33785 #> 709      40030.3115      176632.975  2486241.165   99733.4378   24385.55387 #> 710    -123427.2123      234035.816  1480362.058  277354.7807   35251.77840 #> 711     -97844.4706      292189.332  1777555.938  -96924.3591   11133.47315 #> 712      82941.4572    -1158516.370  2000955.872  183726.1628  182490.66424 #> 713      25404.8109      202271.043  -514608.786  175814.2118   -4561.34481 #> 714    -103341.5342      546712.322  1803828.293 -354680.2464    -106.99872 #> 715     561619.2802     -198693.678  2718344.466   66147.0962   32318.86223 #> 716     -83085.9027     -273867.533  2080137.385 -137320.1124  -69394.18253 #> 717     204655.6265      100159.247  1144058.329  274779.2161    2965.93600 #> 718     100478.0708     2957733.612 14286512.233  706371.2869   88214.28599 #> 719    -107799.5497     -126023.075   977108.504  224272.2810  110426.74299 #> 720     220463.1975      563910.053 -1111970.816 -239650.5276  110370.87804 #> 721    -221123.4362      668730.211  3078102.697 -134604.1882   15706.58878 #> 722      28241.4893     1134430.639  -290362.978 -149481.4574    4855.92175 #> 723     370716.4351     1198181.731  1930901.424   76219.6511     535.45112 #> 724     156032.0023      152733.333   712460.687  342313.9136   40964.94889 #> 725     248333.5862      826891.459  2428616.083  496469.9426   10053.66406 #> 726     127901.4438     1076155.641  3100376.227  212871.7718   -1458.42667 #> 727     112348.5932      -43314.008   293930.922  259127.3837   50731.81227 #> 728     140607.7433      682696.014   927923.358  310984.0860   20730.18499 #> 729     230807.9857      324027.369  1396597.139  177981.2877   -9511.79570 #> 730     519677.1595      147879.650  3886787.103 -104447.6769   27085.17328 #> 731     -37608.0644     1149664.072  5756690.674  115587.8426   55421.64678 #> 732     -34664.1978      112522.223  2178668.512  114698.9095   93016.47131 #> 733     -85707.8710     1259349.495  1566076.966  345836.7274   48114.57505 #> 734     144686.1665     1131744.893  2503210.766  233129.5548   84594.06930 #> 735      60763.7580     -501315.681   206167.670   26913.9454   57796.74117 #> 736    -263630.6992      277576.050  -966628.942  291397.9700  -56616.18636 #> 737    -117084.4631     -249377.371  3342556.817  188094.9072   81143.51788 #> 738     -38985.8129     1228030.960  1138790.648  -32089.5337    3547.38161 #> 739     234037.9728       12122.359  3427088.692   47165.8176  -55158.49517 #> 740     216461.8655      490667.507   810598.962  219171.6962   84700.97157 #> 741     -39429.0411     -310749.954   163393.660  -81779.9075   17542.80508 #> 742    -219679.9174     1619231.372  2682578.363   39777.9538   16092.66452 #> 743     252375.7168      -92496.782  -555072.716 -193058.6429   14169.02592 #> 744     -44577.2906      752403.749  1647088.321  462677.0428   -8365.09192 #> 745     -35433.1841      202915.102    49237.773  191046.8442   20990.17979 #> 746     349830.9278      474389.339  3721414.658    7864.3585   96681.37605 #> 747     297786.2690      253056.893  -443925.373  175857.8266   70103.82730 #> 748    -141559.2458      287541.730   -61951.448  305406.6971   23521.35291 #> 749     352104.6281      979490.073  2345642.277 -269756.7579    -415.46305 #> 750     172255.7375       97976.046  3484317.088  238740.9702   21446.39433 #> 751       6723.2400      623779.506  1818956.517  -22360.4230   22559.69143 #> 752     260915.0624     3054719.310  1913817.732  710883.9913   52958.41422 #> 753    -146530.8058     -621055.150   951286.662  -34184.6026   45181.47107 #> 754      57296.1275      219678.325   309874.027  276148.5721   55175.13587 #> 755    -153793.7299       23656.498  -448933.423  214215.1647   30808.17040 #> 756     -37917.9348     1898347.462  7873429.294  312330.3642  -25481.34847 #> 757      95598.8384      -35503.466   826529.927  138484.9025   -2046.76350 #> 758     506464.7850      107171.559  3057574.715  940567.0691   29946.25267 #> 759       2385.9742     1753019.838  2222587.506   43164.3836   28286.99804 #> 760     164995.7248      710836.133  3342101.987 -223775.5418  -73999.48112 #> 761      47473.7470      860895.232   -48004.318  -12334.3145   86369.69354 #> 762     -19315.2569      171355.932  2370820.221  271722.0509   50776.72340 #> 763      28571.6698      415033.438  1208248.379   -2955.0793   48012.28671 #> 764     279964.5863      693331.519  4638971.956  304119.6092   29876.70322 #> 765     180780.4998     -628725.172  3507585.993 -169575.1257  -45426.23004 #> 766      -2578.1612      -12973.372 -1350815.832  -14275.1601   81232.83788 #> 767      32231.1927      655076.480  -339561.674  243027.2408  -60246.63670 #> 768     200571.7882      390668.709  3386716.819  707042.7360   59430.27210 #> 769     -50478.1985     -148020.261   495068.061  -94941.2394     481.00081 #> 770     -72674.0774      694104.984   684398.301   31768.9087   34376.03493 #> 771    -217741.5284     -179955.945  2105462.596   23458.2939   20893.80935 #> 772      29735.5499     1050638.137 -2722037.612  517840.3417  206432.33708 #> 773     198348.3201     -221615.210 -2490399.033  192610.9162   92546.26436 #> 774     363194.5674     1168790.729  1131177.216  -46418.2072    8925.77571 #> 775      95720.2336      101795.057 -1364922.740  399858.6613   34424.74481 #> 776     384654.9855      146957.995  4549740.466  217493.7951   53466.61013 #> 777     164247.6564     1298314.876  3133401.792  113110.2935   49903.75076 #> 778      21756.5507      698293.880 -1241158.868 -149397.9688   71551.43698 #> 779    -221876.3375       88758.879 -1535957.458 -255747.9884   46441.64115 #> 780    -114748.4378      585816.602  2507251.606   -7385.6207  102105.36903 #> 781     126873.9764      596399.045  3461181.194  184956.7715    1523.59127 #> 782    -107534.1129     1632948.649  6351449.334  652325.6861   36392.06029 #> 783     115836.8033      427043.300  2252604.842   39156.7072   71689.37026 #> 784     129441.5970      647234.467  1115133.832  276767.3191  106277.03831 #> 785    -146948.2116      976323.780  1081121.791  -65279.2923  -44266.55897 #> 786     154197.6206      -93174.354  2477369.672  440218.4092   36837.75747 #> 787     264838.6554     -169445.396  -994837.108  285241.6107   58730.98064 #> 788     179476.6601      527223.576 -1554834.817  175294.9494   39602.11839 #> 789     -77430.2608      988242.550  4176172.080  224868.2214   95301.12752 #> 790     -87230.4057      284458.196  1900217.167  -46874.0011   15277.75552 #> 791     124229.6094      947531.151  1632806.168   36069.9704    6765.11803 #> 792     350078.9838      455366.027  2160761.659   16580.3010    2282.67241 #> 793     274311.4451     1438244.896  7061560.199  274043.1277   22089.91583 #> 794    -292429.7216     1265294.192 -2236653.953  -13243.2089   72707.44429 #> 795     835869.5626      151788.330  4708012.259  663365.0534   25606.93035 #> 796     514470.2606      -35724.975 -2125633.411  557878.8208  -20579.32882 #> 797     -72201.6882      139297.561  4740985.890   75372.4354  133453.91488 #> 798     253385.3330     2868910.435  6955937.851 1124804.1941  -35658.09741 #> 799     239511.2480      235595.703 -1886314.976 -165865.9460   24839.16056 #> 800     501029.9177      637671.435  3803152.592  641032.8553  107922.45286 #> 801     454549.0026      253140.147   747919.189  400910.4131   -2526.32621 #> 802     -35474.6548     1889153.185  1657818.867   -6778.0743   21236.68675 #> 803     118146.2124     -434079.393  -762507.183  315128.9674    5055.78111 #> 804     117017.9413     -596043.720  4340188.270  150284.6483  121839.02051 #> 805     182995.5989      206600.317   851341.154 1133713.3754  171778.21582 #> 806     254192.0482      570693.422  5585163.593  353807.1126   37628.57153 #> 807     281902.8697       98110.439   848629.990   66767.2877   58342.01929 #> 808     349389.1423      518812.801  1138749.364  576975.1179   83542.66012 #> 809      76715.0320       39358.424  1453679.916 -324268.2370   19464.13524 #> 810    -114788.4115      701303.724  1093778.716  -17968.1619  145309.94941 #> 811     245443.1243     1254160.566  3128998.153  910770.6070   -9069.29172 #> 812     180461.9041     1363607.117  2085188.220  255550.4306   17939.33420 #> 813     465171.4195     1663275.903  5936071.192  354125.8762   74453.85635 #> 814      50834.3854     1166450.151  1238533.388  -90392.1109   44036.41216 #> 815     568077.9259      -28938.852  1942074.004 1324052.2459   29898.22332 #> 816      58366.0901      725644.786  1617555.825   60161.2590   35300.56454 #> 817     144745.3762      247821.988  1222037.166   74990.9798   78102.35415 #> 818     253665.0604    -1049003.144 -1147040.114  180714.1683   38636.31638 #> 819     350142.4023      371987.062  2672594.427  148341.2796   10450.33453 #> 820     203180.9975      547217.744  -632522.918   63034.2841   57566.42560 #> 821     581359.1338     -388851.599  2155284.931  702191.6397   75708.53448 #> 822     266047.8003     2420169.559  9810949.852  767347.3016   37748.20218 #> 823     690685.7279      744362.635  8515291.836  523414.9734  188431.77209 #> 824     872263.5890      766742.745  3009062.650  227737.7492   79050.57923 #> 825     448008.0562     1286135.397  4352724.732  247027.5565  271101.00737 #> 826     212629.8309      744866.948  1511343.411  145858.1451  103083.00404 #> 827     -91365.1283      197772.897  2223222.833  466234.5866  141814.35878 #> 828     -52903.4923      246566.263  4764403.224  711683.3689   75400.44901 #> 829     497762.2705     2277904.311  2753029.827  395134.7108  103387.93526 #> 830     236115.4151     3063911.856  5668494.913  594113.1584  180132.27659 #> 831      50556.3595      976334.456  1693122.628  719651.2579  150467.85797 #> 832     797993.2906     1943256.619 13597532.792 1412655.6228  316849.17782 #> 833     276868.6458     3082006.649  5232850.977 1140966.1097  242541.17583 #> 834    1272750.1791     1125249.113 10417663.134  575448.0812  381831.11772 #>     OPERATING.PROFIT FINANCIAL.OUTCOME GROSS.PROFIT   NET.PROFIT #> 1        199943.5518       -78481.5342   -68067.532   95035.6080 #> 2        105788.2113       -32192.6424  -123743.694  -58972.9836 #> 3        -62532.3465        -4227.2186    13538.532  -75664.7259 #> 4         39398.4834       -88406.8450    22551.550   39526.7840 #> 5        153312.9971         5477.9934  -139134.330   -6251.3920 #> 6         31375.4152       113917.4683   -46284.645   54786.4721 #> 7       -176231.7161       -23633.6422    79195.374  -88027.0967 #> 8        -29406.3125       -69385.7522   206699.605 -102484.5210 #> 9         62025.8216         8049.5163  -122124.574   25731.6840 #> 10       167988.2929        78926.6655   -36092.109  254490.9588 #> 11        -3055.5652         4109.0778    -2115.610    8519.0277 #> 12         7904.8678       -26121.8560   -71385.639 -171686.6880 #> 13       254484.3580        16897.8024   -32473.786   27155.8190 #> 14        59850.4725         1288.7020  -120559.737  -95289.3930 #> 15      -185854.8595        -5959.7288   134591.391  -38020.7261 #> 16       -64490.8122        35568.1651    32050.690 -117316.0038 #> 17        79706.0840       -23631.8745  -264823.567   86492.5841 #> 18       -85975.7621        77803.4392    48196.851   93203.5117 #> 19       220273.7598        76075.4452   -61456.369  -94716.6654 #> 20        95900.9119       -64687.6452   -44701.317   19834.9366 #> 21        43507.6194        30000.8557   -51249.037 -239295.0572 #> 22      -266591.7704       -47530.9463   -33758.728  143521.7035 #> 23         6765.0867        57308.5714    98396.027  -76508.5851 #> 24        16975.0746        12455.5567   105605.365    7616.7658 #> 25      -136281.4399        21630.6484  -103164.746  -31731.1243 #> 26         5013.6778        28322.8011   -26550.582   35970.2300 #> 27        63631.5344        11190.2859   112489.145  159909.6846 #> 28      -318320.9191       -52229.8464   -44133.008  188993.2703 #> 29      -305586.7960       -24886.5207  -147848.347   24720.8488 #> 30        11064.8619       -38472.8335    -1999.969   53908.0803 #> 31        -5717.2509        31366.3999   251841.651   67600.4837 #> 32       140196.6074       -22536.2836   -18443.611   28630.1463 #> 33       102039.1978       -77965.6096   138721.372   12320.4171 #> 34       -44650.8726       -41944.1245    50495.882   26629.8855 #> 35      -101970.0749        43376.5105   179584.147    5560.2563 #> 36       -29924.5393        22685.3738  -114868.826 -120362.0189 #> 37       118568.2410        35285.1513    -2984.684    4287.5850 #> 38       257959.6041       -52997.7829   -20859.138    8131.4269 #> 39       239988.0321        -5684.2184   157985.925   22499.8807 #> 40       249570.0302       -13395.0874   266955.772  -59805.3010 #> 41       100975.0962       -12920.4942    86452.192  -30759.2469 #> 42        -7972.0369       -48847.8852    34291.129   -9814.5518 #> 43       -54966.5083       -56523.2523    36706.865   35277.2948 #> 44       131066.9681       -61232.8693    69809.054   56441.2133 #> 45       -46015.5177        -9832.5488    45696.963  -53734.0182 #> 46       -92913.2064      -102087.5465   -63024.257   70285.3826 #> 47       120509.6165        -1177.1734   104675.731 -116165.8372 #> 48       143769.0746        18742.9149    -1210.106  -73965.5492 #> 49       -55302.6476         1364.6685   123389.653   90383.8216 #> 50       -28689.5802        23891.9966   116423.907  -11380.0668 #> 51       -97950.0624       -63585.8101   308345.819  -27317.7023 #> 52       -16331.7972       -14404.5497   -80529.879  -66425.2586 #> 53        53418.6746       -32574.6461    59984.697 -187634.3635 #> 54       -71778.7611         5448.8455   -92829.781     363.3890 #> 55        87326.5639       -42037.7057    13426.212  -39087.3862 #> 56       -28675.5432        -4034.8874   -84370.674  -20352.6736 #> 57       160797.6447       -25086.4698   -36794.711  162803.1309 #> 58       185017.3344        31134.2225   132358.363  -38383.1850 #> 59      -190320.3434        36838.5079   108186.653  -44593.9710 #> 60       115370.7663        20973.7422    40480.515   -1494.4273 #> 61       175297.5852        33243.3582   -39628.455  128400.4795 #> 62       153706.6072        45212.1167   127780.141   77445.9229 #> 63       299576.2067         5680.7868   121717.117  -67082.8050 #> 64       -29471.2128        60569.0671    30731.662 -126257.6991 #> 65      -109638.7259         8074.4388   -75729.028   66997.5163 #> 66        54013.8556          371.7697   109758.554   83770.0896 #> 67      -208927.7070         1568.4204    56451.705   73476.7687 #> 68       212357.9119       -46293.9296   143525.568   80436.9381 #> 69       -32872.8624        13594.9821   179677.663  174085.0938 #> 70        19691.4007       -48519.5109    42341.781    -660.3969 #> 71       -24024.8062       -52271.2012    36693.301   24735.8282 #> 72       242074.4131        19455.2989  -147030.639  -59341.6483 #> 73       -56830.9067       -78855.2099    89154.558  -42459.1945 #> 74        18217.9073        -5230.9557    72985.966    7071.9213 #> 75        51191.7039        28236.4236   -24415.798    1989.7812 #> 76      -192283.4863       -22450.6109   124908.294 -117218.9486 #> 77        94367.8255        28586.7837    24397.478  -80010.8958 #> 78        41342.6160       -15087.0844   -64089.783   -6244.5086 #> 79       -18128.0869        19357.8454   116821.018  -69690.4456 #> 80       112454.7338        -7371.2473    79304.257  -79176.9184 #> 81      -126854.4195       -39352.4276   -30278.999   34513.7369 #> 82       102196.8800        29449.3595    60601.780  -35016.0931 #> 83       -11599.7350          516.4053  -128850.603  -47742.3350 #> 84      -112574.5541        28202.7924   109808.943   34707.6111 #> 85      -106955.2847        65731.3337    30855.996   65772.4527 #> 86        34637.5109       -26110.7108    55576.508   86814.3954 #> 87       102397.1120        15080.9598   185511.706  -97097.7241 #> 88       -23474.3026        32183.5375   105942.201  -98789.2051 #> 89        91851.7074       -21129.8419    63271.886  -28793.1267 #> 90      -207313.6854       -26919.7575     8897.530  162554.0999 #> 91        28050.3808        15115.5236  -131376.360  108070.2626 #> 92       -86907.2655       -37432.4001   -79794.483   29286.6344 #> 93       116219.7299         5322.2744    61974.541   17157.9665 #> 94       -21987.7782         6879.8696   -53643.660   43930.0619 #> 95       158427.3705       -74148.6663   -49811.798  -63057.2185 #> 96        57009.0669       -43138.8540  -130499.899  -16145.9950 #> 97      -125761.6369       -12219.3680  -112841.043  -35054.5020 #> 98       221893.9064       -18729.4745   107061.525    2291.5783 #> 99      -199857.7066        62102.2000  -195843.269  -15811.7260 #> 100       51561.1016       -43327.6168   140681.357   61750.5506 #> 101      -59582.9147       -18503.3060   141589.237  143851.8166 #> 102     -126471.5358       -60013.6368   -31619.913   22714.0043 #> 103       13009.9567       -38026.8737    53754.357  -19971.9596 #> 104        4163.0486       -19790.1925    72654.654  -49318.4602 #> 105      136202.7619        52509.1155   116852.652   15981.9737 #> 106      117674.4967        74672.9605   183486.813   15608.7479 #> 107       45912.5206        -9047.0085  -210771.748  -82917.1010 #> 108       -1669.7369         2427.3975  -143850.532  -57192.4420 #> 109       20644.4330        13981.0164   158843.894  -10564.8479 #> 110     -130090.3212        33642.6703     9547.944  -54463.9060 #> 111       49651.0096       -12375.7271    -7631.023 -119579.3325 #> 112      143655.9524         9360.1318    54876.757  -25659.5325 #> 113       28096.9106        26329.4352   116965.909  -15695.0012 #> 114       -7365.0011       -19928.1612   -37185.411    1618.7610 #> 115      -51133.6213       -47104.8030    75955.098   18755.3520 #> 116     -111725.8147        -7501.4300    63849.482  -89301.6658 #> 117     -187689.7217       -26572.1079  -149677.794 -100179.5272 #> 118      -27475.5714         7213.1588  -177835.860   48471.9496 #> 119       66788.7553        38720.4274   224882.691   90560.8157 #> 120      111363.3434        99982.7037   -50471.676  -24597.5006 #> 121        -527.8242       -39473.0096   105228.883  -37405.1135 #> 122      107794.0159       -36321.0888  -184773.657   48471.4371 #> 123      -62782.1003        33774.7503    59057.990   78143.7031 #> 124      194136.9510       -46724.6115    99693.051 -170083.4372 #> 125     -103497.3550       -59129.2525   189103.859  -15514.2784 #> 126      -36005.5035       -12960.8583   -22274.255  225398.2352 #> 127       72766.8558         8845.5764   -59712.308  122902.5086 #> 128     -105232.4140        47887.8546   104954.983   31894.6229 #> 129      -42754.4046         9185.7671    39525.076   15318.4194 #> 130      226585.0178        30511.7396  -177004.395   21082.7513 #> 131      293580.8519       -43006.2020    48143.062  -32841.0563 #> 132      -84286.0683       -17564.6203  -103307.815    9669.3055 #> 133      -34217.8796        -5481.8876    19416.089  -15144.6834 #> 134      -41601.9628       -31382.0201   146549.073  -42785.5824 #> 135     -159221.8506       -10787.8012     9450.087    9903.9841 #> 136       73549.2454       -51364.9520   -21470.407   23834.8115 #> 137      140014.7758       -23642.2636   -55506.607   64407.1124 #> 138       14732.8528       -53567.5923  -130618.447  -20057.1503 #> 139      -33561.2340       -23215.3543    13237.494  -21205.9501 #> 140       14475.5659        -9442.9831   -75885.918   90100.7286 #> 141     -131446.1992         8525.4558   124418.333  -71905.3073 #> 142      220980.9065        27508.0964   215642.410   98437.5139 #> 143      -65140.5721       -10691.8879   175996.343   72800.9882 #> 144       90335.5427       -76339.6589    14017.542   -7613.7546 #> 145      121958.7633       -65279.8926   -14686.436  -39597.0106 #> 146      -41829.6269        10406.7573    16550.713   -6400.9095 #> 147      119199.8070        53267.7701   108681.078  -81288.0563 #> 148      -30631.2342         1144.4814  -173929.594  106890.4106 #> 149       21778.8604       -30276.2064   134345.373  188183.4642 #> 150      257563.8046       -32046.6739   -43241.475  108828.1541 #> 151      204871.0502       -39460.3027   -43132.541   25179.0259 #> 152     -229564.4093       -48960.0842   -29909.322 -173494.0625 #> 153       47870.8542       -57713.9377    -6543.394  -77860.0844 #> 154       77003.5577        -9258.3246   129587.385   51929.6949 #> 155       16262.5624       -49143.4268   315750.243    3614.1645 #> 156      182490.0221      -110647.7471   123291.051  143356.7341 #> 157       30534.4006        14278.1284   167073.229   23821.3998 #> 158      -50670.1015       -16192.3841   -76050.337   -5512.3179 #> 159      -60380.0349        -3498.5232   -52576.187  105667.2135 #> 160      215195.0634         1167.7277  -124274.137   80748.5731 #> 161       14911.2634        -1402.7512   124237.748  109765.7118 #> 162       81887.3248         -169.0407   -62230.566 -136260.2076 #> 163       29752.9385       -25675.6186   -48384.725  -49760.2576 #> 164      151876.4590       -39634.6774   232900.059   97365.9556 #> 165     -322630.0095        22914.5916   -34425.929     219.4170 #> 166       75552.1022        68216.7116    69976.765   31956.9910 #> 167     -122306.7853        -8951.5492    16254.815  -84678.8202 #> 168       25957.8854        38018.9081    43908.855  -17528.8910 #> 169      -84901.3679         6219.9121   188755.535  142308.9443 #> 170      208292.3080          566.2572  -127364.067    3307.6843 #> 171       66548.8748       -33012.8512    98374.254  201530.4429 #> 172      217538.2398         3307.3424    71571.933   41027.7716 #> 173       11592.1029       -38184.8207    36920.069  107262.8120 #> 174      116401.3904       -36900.9729   -15503.992  -31998.3224 #> 175       40758.3485        12733.3043    71710.270   16258.2462 #> 176       77683.6832        -9100.1842   117348.034  111496.4500 #> 177        3269.1300       -48765.1645    35757.825  116941.7257 #> 178       71636.1923         8735.9933   -62096.692 -133921.5461 #> 179       50961.3435       -28788.8635   145216.854   31781.9459 #> 180     -217892.8529       -29789.3129    24333.478 -138442.4675 #> 181       47747.7350       -22323.9624    60911.073  -55105.3112 #> 182      -54730.7536         3405.5439   -48196.403   64042.6084 #> 183     -197964.2937       -40681.5951   -93375.228  -27898.4696 #> 184      -40751.2593        41799.5919    79345.222   25465.1370 #> 185       15003.2423        14203.1507   -54819.516  144806.2739 #> 186       55479.6266       -49297.0314   -59450.804  -30285.1337 #> 187     -235748.9241        40211.4110    22718.242 -115909.7162 #> 188      -19187.3504       -24428.3767   201822.089 -137913.1865 #> 189         898.5205        -5348.6176   -56333.778   29902.3102 #> 190      -78413.7843       -37211.4580   -18353.399   82611.6954 #> 191      -29544.1103       -26623.1098    26267.254  122857.4413 #> 192       76376.1561       -10230.5360   -25726.111   69824.8825 #> 193         550.7924       -54343.7770   155374.833  131086.2850 #> 194     -189421.2906        -9890.9441   -96497.224   10577.0795 #> 195      -58871.6201       -49024.1827   -60524.156   -8248.4615 #> 196       75627.9283        -5651.9026    11010.532    7149.8035 #> 197      266872.1459        -7813.5727  -124794.417   96629.6093 #> 198      -12636.8274       -64275.7100   289677.645 -105960.8814 #> 199     -131246.8073      -134374.1219   -63033.325  -89457.7456 #> 200     -215066.2791        -1255.6535     7301.210  122198.1586 #> 201       -8610.7661        19383.9423   -20862.060   90719.2661 #> 202     -107285.6592        15090.6582  -178960.248 -113694.0862 #> 203       12352.0849        13512.4505    48316.076   70473.2465 #> 204       73778.6614        -5035.4447     6377.940   -1494.1514 #> 205      128780.5994       -25611.7461   -24521.366   94528.3109 #> 206      106040.2268         4649.9379  -113444.446  -32966.0888 #> 207      -16075.8611        43978.6748   -41272.594  -70754.4003 #> 208      161636.7195        -3240.4755   -87347.603   -4233.4424 #> 209       53928.7201       -44555.2363  -181652.180  -26211.4739 #> 210       35020.0466        25788.1092    58995.062    5729.3173 #> 211       99857.0686       -10562.4308   -85977.435 -149538.4828 #> 212     -171615.0288        56992.7336    59257.120  -35568.5589 #> 213      -85921.1606       -77919.9252    44847.458   97757.0808 #> 214      -49213.6856        34093.6442   -56456.071   -2315.1433 #> 215       -4319.6252        24553.2506   150437.206   74027.0629 #> 216      -77571.7255        -1065.6972    31210.185   46296.9648 #> 217      275139.4379       -19732.5779   -91591.651  -25490.7791 #> 218      -82011.6169       -13685.0179  -149058.346  -97801.7166 #> 219     -150197.8433        -8331.4201   -34185.052  -87344.6891 #> 220        4445.0410        94143.3755   -32531.781 -206247.4827 #> 221      149189.6437          624.2725   -66522.676   66399.1441 #> 222      -57005.9797       -22187.3561   -64366.452  112486.1048 #> 223       18441.2878         1277.6061  -133246.654  -39490.5086 #> 224      265490.2527        21438.1632   -56176.656   -1694.8034 #> 225       46511.0095      -111432.2949   -78026.973  139746.7783 #> 226      163422.5913        55471.8341    44258.006   -8558.5036 #> 227      -12280.6734       -28600.1051    39673.808   49896.0641 #> 228        4063.7974       -43558.0860   121301.257  -67950.8094 #> 229     -111965.1575       -23347.8258   -94518.802   -3804.2331 #> 230      -24867.2545       -26841.1159   -75021.723  -21056.8833 #> 231     -117358.9067        53286.5859  -139504.691   49083.6374 #> 232      -37231.5102        53673.9011   163528.450 -128045.1887 #> 233        4588.3615        33072.4995  -188167.616    7472.0158 #> 234     -276661.0570        -5256.1836  -306959.387   93277.7424 #> 235      112384.2562         6495.9613   -46396.032    5849.1948 #> 236     -219241.4187        -5086.4177    65955.169  101532.8278 #> 237      -64855.9101        15681.3861  -156493.677  -19912.9417 #> 238       29483.7535          900.6107  -216249.392   10555.3342 #> 239      -24746.0002       -33184.9079    22366.556   12949.0652 #> 240       13291.0188       -24469.1907   -56369.240   85134.4269 #> 241     -195843.0112       -19915.5309  -216783.332  -72969.6509 #> 242       -4424.4592        18627.2034    88988.244 -192016.9562 #> 243      -58595.4767        85990.2945    83290.148  -34495.1000 #> 244        8336.9684        27160.8531     9496.958   95032.3115 #> 245      143213.6367        70076.0564  -115999.365  -51411.6042 #> 246      101154.1824       -15981.8365    43491.393    -949.5220 #> 247     -308661.7354       -92781.5534  -219321.265 -157149.1326 #> 248     -225196.1958       -92462.3569    15703.649 -107272.6863 #> 249     -133274.3539        69864.3963   189763.308   96942.5748 #> 250       35170.8511        11403.6325  -220656.954  106622.2962 #> 251     -215913.1170       -29064.4285   -57451.683  -40855.4162 #> 252      -91776.4708       -74728.9830    43950.504    3728.5337 #> 253      162621.5518        46967.4866   100694.515  -80062.6772 #> 254       46962.9038       -41492.1560   111137.103 -198988.0034 #> 255       71196.9519       -37668.9755   276895.990 -132898.2229 #> 256     -125165.7605       -53198.6972   -98207.301  195886.1388 #> 257      210091.7586        -8709.0251    40111.694  -65206.6707 #> 258      -15605.2004        43856.9602    29311.578  -24507.1911 #> 259       18794.9279        24161.6108    33412.587  -23812.9971 #> 260      -35822.4585       -46501.7174  -209994.020  -45630.5048 #> 261      -50494.3049       -10800.2163  -127537.360  -20210.4975 #> 262      -77781.6722        62568.9522   233035.522   23929.6135 #> 263      -70154.9106        22611.2454  -276469.999 -125160.6388 #> 264      250109.2424       -13449.5269   -60070.881  -21981.7974 #> 265       17716.7068       -18233.6347     4252.604  173254.0399 #> 266      240617.5500       -33464.4719   -42301.163   54887.6153 #> 267      149856.9943        30113.6612   104687.143   57488.9276 #> 268       40501.9694        18129.3522   -60346.268   12795.3567 #> 269      268682.0436       -25932.1876    41557.387  -83322.8815 #> 270     -138940.7832       -43441.2253   -30603.734   -3057.6895 #> 271     -100151.2028        63939.8114    -5460.732 -193967.2128 #> 272     -197565.0776        39904.2640   205513.487  -77558.0483 #> 273      222750.7898       -10666.1730  -145468.559  -86838.7038 #> 274      143054.2200       -16689.9929    75383.266   16075.7215 #> 275     -193797.9983         2611.6872   -32023.344  -47382.8374 #> 276      120872.7661       -24527.8713    83692.662  -38301.3276 #> 277      -53999.5115        15443.5744   173346.007  -63337.4424 #> 278       66678.0951       -79287.8702    75066.358  -46910.3117 #> 279      -63106.9106       -59761.3170   122365.246  -46465.6909 #> 280        4120.1521        10306.9607   -77257.576 -103119.7698 #> 281      -77125.5289        -1676.0361   -43983.606  -21273.9295 #> 282      106780.9298        48041.2449   -16069.480   41295.7770 #> 283       29632.0599      -101536.0074   -42978.659  121684.4770 #> 284      -15485.4888       -97280.3769   -91335.619   -9016.8401 #> 285     -279021.8458        14755.1240  -135070.591  -23684.6264 #> 286       74136.1875        23640.1839    37941.374 -135640.1884 #> 287     -130297.7327       -49152.2906  -241275.186    9412.4311 #> 288       20922.9619        30550.1600   164103.259  -17829.8314 #> 289       38314.4043        27031.9104   153235.224  -37990.4001 #> 290      113475.1885       -14061.1888    92560.690  -90247.8497 #> 291     -163485.9878       -16954.5714   -65507.438  -20000.4813 #> 292     -119343.8435       -43805.7606   -58917.954 -168915.7488 #> 293       16008.3249        25530.3706    21056.675   18049.5764 #> 294       -2813.7123        18984.2292   -20405.779 -168508.6572 #> 295       62112.6816       -56260.7424   130316.504  -35030.4306 #> 296      -42281.2109        -7318.8307   -33575.701  -44653.6207 #> 297      -26866.1704        55246.7200   284896.687  -31991.5807 #> 298      261975.4462        25653.6501   -12576.974   76411.1839 #> 299       12717.7477        15545.5924    31974.471   99121.7508 #> 300     -263443.2677       -34356.1994   188410.209  -25457.5609 #> 301      -31996.9795       -42116.8421   213192.665   84595.6587 #> 302       72384.7750       -17900.9939  -198544.857  136527.0691 #> 303        3655.5242        19347.5306   100670.293  -51973.3409 #> 304       65595.7243        28727.1996   107724.599   50464.9550 #> 305     -216984.5980       -13458.6806    59922.365  -54498.8162 #> 306      -61165.9586       -71444.4261   155295.833   65201.6733 #> 307      -53356.7216        88364.1490  -133715.655 -170012.9413 #> 308       50802.2359       -44839.4183    21130.469 -149707.9315 #> 309       88989.7627       -72889.0116   -41215.825   24670.4515 #> 310      140122.8580       -42209.2873   197297.618   11590.6062 #> 311      -15018.8135        29083.8575    67579.105  -21097.0040 #> 312     -231238.6458       -21296.0280   -69306.208  -11201.4149 #> 313      -29540.0496        34305.5126   -79118.083   55244.3191 #> 314      -39975.6330        51961.4225    38191.025  -78295.7525 #> 315       12533.4602       -26551.6637   -84530.619   76376.3617 #> 316        -838.5097       -19478.6814    43004.336   18763.2326 #> 317       12930.3181       -87712.3222  -150410.058  -67427.9257 #> 318      229987.4170        37858.7742   -91593.410  -23017.7110 #> 319     -137238.9895        17732.3801   -99452.357   40182.3974 #> 320      112120.0789       -10963.8400  -280480.101   74162.5720 #> 321      164715.8188        23859.7910  -100707.629  155875.2199 #> 322     -131350.4178       -38482.4229  -182555.141  -49784.7864 #> 323      103647.2983       -31169.5083   290262.689   26522.7541 #> 324      126287.1703        24193.2488    15496.108    6644.6982 #> 325      350024.6188       -20468.8780  -147142.643  149455.7913 #> 326       23880.0038        75736.6222   136990.929  -33426.7951 #> 327      -11494.0892       -34035.4385   137940.769   42933.0374 #> 328       61831.4493         6047.6656  -166325.547  -74051.4226 #> 329      186349.2271       -28640.7678   134069.930  -20446.0064 #> 330      -17817.0568         9509.5420    21940.440   51091.8704 #> 331     -118512.8650       -10725.1100    46372.892 -124045.4815 #> 332      -50592.4160        44068.0539    66059.285   98141.3468 #> 333       97841.1568        24028.5416  -172399.158   44005.7529 #> 334       86126.2378        15140.3741     6183.864  -93407.4137 #> 335     -122593.5857       -27184.9576    28980.915   47795.2601 #> 336     -111512.4199       -16794.5117   -51256.780  -45867.0631 #> 337      215244.0957        12386.5115   245277.714   44628.5937 #> 338      -64529.0454       -36077.1264  -192276.939   92261.0083 #> 339     -141099.3428        -4429.4426    20318.255   77225.7780 #> 340        6455.7629       -80558.1833   162964.601   57665.6581 #> 341     -110711.9611       -37955.9632   159130.918 -125283.4651 #> 342      -28574.9368       -89561.2086  -167268.313  -38076.7710 #> 343       12591.7165         3165.6739  -106885.956   59549.8740 #> 344        5816.3473       -13266.8295   201689.512  -84592.8230 #> 345      143830.0326         3339.3843   -27263.341  -50209.9405 #> 346      132556.8741        91533.1089  -111982.671  -13712.5088 #> 347       -9464.5417        17957.6576   -62806.344  -32520.2338 #> 348     -172214.1712       -21992.0882  -215752.394  109947.3111 #> 349       61257.4795       -38056.3379    37582.496   65799.9011 #> 350       27330.2333        16423.8090  -224796.752 -226066.8308 #> 351      124873.6948       -24264.8378    91674.740  -11725.7430 #> 352      -43913.6161        49835.1080  -157309.531  102017.0582 #> 353       90767.9970       -83129.4920  -150757.024  162783.4243 #> 354     -103404.2146       -73958.1343  -178901.223  -24678.8148 #> 355      -89112.4345       -23439.0812   -72997.639    7544.2175 #> 356      -50248.6787        37308.4460    99132.921   51191.7688 #> 357      -13532.8422        17407.4168  -113138.948   30940.2311 #> 358       78137.8451       -23833.4887    -7765.095 -123034.6817 #> 359        4652.6545        22431.0048   -23393.822  -11729.3710 #> 360      133425.3781          628.8481    93010.416  150864.2464 #> 361       67932.0502       -39979.3408  -101772.024  -45868.4818 #> 362       39998.0375       -15761.6455     6183.800   80823.2645 #> 363     -117755.4234        18563.0463    22495.244    5245.3601 #> 364      102298.3819        -1882.1757    -6849.098   35931.1812 #> 365       59753.4811        45581.3415    -6151.977  148543.0398 #> 366     -122539.8743        91476.4626  -135122.357 -151173.2451 #> 367     -224811.4014       -31210.7101   173788.690   25599.4651 #> 368      -39472.8086        -1526.0244   198083.864   63015.8125 #> 369       -6034.2078         2538.5190   100571.170  -75438.7698 #> 370        5129.8011         7598.6015   189512.662  -77757.5815 #> 371     -162412.5456        39504.1216    64168.539 -120474.3523 #> 372     -145381.8551         5252.3234    34759.901   71240.6987 #> 373       59141.0323       -14911.3368   232394.602  -32714.1590 #> 374      295502.1443       -28654.3691   172507.751    5943.7303 #> 375     -142266.8005         2903.1667   -36299.258  132914.8010 #> 376      116650.4487       -38569.6062    47542.034  -13852.2142 #> 377      271376.8233      -104952.1273    31176.725   28895.2585 #> 378      -45925.1591       -75645.1358   -70538.082   -1360.5475 #> 379       57864.7164        50411.7203    77906.869 -189751.9839 #> 380       37848.3899        42817.8475  -113741.704  -51093.6235 #> 381       16740.0077       -29052.0164   176073.965  -87510.6983 #> 382      161496.4276       -48378.5072  -131090.661    2954.8247 #> 383      104222.0069       -24719.5321     5969.743  -41591.1765 #> 384      113620.9082        -6488.9770  -149228.773   71835.2642 #> 385      341230.7903        67736.3158   176587.892  -83626.2835 #> 386     -167965.3617        -9472.5545  -165630.098  -17577.7159 #> 387      141856.6844       -25590.6046   -41310.048  -53454.7283 #> 388     -164349.3203       -52957.7699    22320.421  -78342.7042 #> 389      138969.8163       -25049.6547    72351.283   68181.5578 #> 390      154188.8458        34175.1686   112841.918  -63676.6550 #> 391     -115126.4465       -17183.7133   121941.953   70372.0480 #> 392     -239462.8076       -14961.1450   143265.882    3125.2146 #> 393      -16782.5473        -5680.8913   -78698.372   72378.7704 #> 394     -340383.5159       -28488.3320    94102.553   86171.1864 #> 395       35701.4628       -59612.4987    94571.305     131.5946 #> 396     -122477.7655        41371.6713    -6786.516  -71865.3863 #> 397      -73745.4013        36430.9850  -104653.329  -61832.5321 #> 398     -343131.2767        21899.4220    35287.276  -63866.7999 #> 399      -33461.5711         2661.4414    80723.005  -30575.0801 #> 400      240220.6232       -49888.4827    79841.502   66982.9644 #> 401       76563.5981        13137.3136   -13632.221  -75848.7242 #> 402      116601.2732       -59252.0798   132386.656   99037.4360 #> 403      387862.7875        72776.5529   -78161.707 -105724.7063 #> 404       69400.2037       -44006.2058  -153499.875   -7410.2374 #> 405       94277.4059        27215.9164   149449.541  201663.8991 #> 406      -35846.4902       -32511.4920  -203057.757   71862.8503 #> 407     -134217.0677        61616.1439  -124346.909   13274.4975 #> 408       49936.3260       -22224.6101  -166659.612   17698.7179 #> 409     -159295.5380       -25096.6441   -71443.167   57427.8051 #> 410      -73171.8670       -28363.6773  -128123.305   76491.3255 #> 411      249685.1650        53908.7995  -114124.309   50300.9516 #> 412      -11783.7220       -26889.3670    94327.890   22266.5988 #> 413     -112488.1757        42710.8396    69034.970  -96394.8703 #> 414      -31851.7816        -7441.9194   -13182.281   34293.1061 #> 415      148461.0722        46826.0895   116748.644  -76492.0485 #> 416      -73233.7384       -22664.4688    75898.696   16446.7177 #> 417      -43017.6898       -11010.4505   359924.523 -128366.3533 #> 418       28795.1063       -36759.5477   121750.783   22341.0519 #> 419      -26709.8505        48338.5549    95620.882  -18860.7701 #> 420       45977.4018        40950.3921   -95452.732  -77320.4050 #> 421     -206392.8287       -33801.3814   300706.170 -106575.8420 #> 422      -94807.0615       -37533.3311   -97493.644   24662.9278 #> 423       94851.9386       -28612.9211   -26526.768  126717.4734 #> 424      -41243.4190       -54867.5437   -13957.996   14260.2170 #> 425      107141.5449       -16221.9604   -71429.817  -35760.6649 #> 426       72130.6584         9698.0270   150559.852  152192.7633 #> 427       64438.0020       -25892.6126    50762.210   10441.6575 #> 428       69763.0843       -49262.6440   -31619.408    1996.0429 #> 429     -166627.4517        24385.3543   166362.001   -2894.0641 #> 430     -239737.8712        30740.8756   208390.849  -73821.8595 #> 431      -57117.4585        10214.5650  -169296.594   28742.4171 #> 432       94984.2915        13898.7891   131343.800 -173751.7162 #> 433      -91641.2079        16431.3601     5847.646   36514.4185 #> 434       77214.0692       -47599.4226   -31678.770  107079.7589 #> 435       52633.2917       -19615.3792   -20883.205  -41847.1548 #> 436      163666.0114       -86042.0918   -95417.540    3294.6817 #> 437     -182254.8009       -13699.5012  -104421.853   56900.3952 #> 438       29881.5910       -37067.9870   122210.504   46419.2434 #> 439       59523.6378        65448.3216    48970.515  -32436.0002 #> 440      145484.2847        -8035.2430   -13235.207  -45842.8660 #> 441     -233403.8282        20504.6646    64967.947 -108766.5217 #> 442      329050.4991       -13900.4378   302736.808   92906.1884 #> 443      -77314.3050       -10648.1215   259685.532  -27802.3835 #> 444     -133162.0023       -34037.7495   -39501.784 -129883.8513 #> 445       55301.0058       -35772.2101    23423.298   -5497.1208 #> 446       95960.2947       -67429.3058  -121750.795 -100798.8804 #> 447      -33776.5027       -29436.8167     7354.769  -30645.8744 #> 448      247075.3573         9282.1667  -317956.771 -117857.1177 #> 449     -204100.8816        -8244.1855  -124307.346   15761.6521 #> 450      180330.7340       -21134.0478  -122525.218  -28164.6452 #> 451       -2128.6465        -3755.4444   -80373.516   57457.7499 #> 452     -178645.6901       -24518.2156   -31056.847   23203.4778 #> 453      -61915.9917       -39885.8272   136978.681   44786.1384 #> 454      -45894.1840       -10536.6300   -33021.768 -142126.3371 #> 455      256549.4045       -10856.2205   142938.831   34363.7942 #> 456      -13277.6784        39054.3288    42567.254 -124804.5378 #> 457      -92651.7453        -3341.3591   214813.862  -63612.7360 #> 458      -23611.7777        33102.9598   175398.710   67691.9554 #> 459     -117882.0779       -30940.3875   -63129.275 -122600.5247 #> 460      149794.2721        42732.2520    49999.442  -93647.3496 #> 461      134519.9747        37889.9412    12262.789   33007.2020 #> 462      -47366.5375        12978.6272   100373.629  117961.3355 #> 463       35745.6061        22531.1328    14175.460  -85951.7016 #> 464       -6796.5122       -37880.2836   -92779.540   28549.7371 #> 465     -307673.9226       -53562.2912   -49452.733   20591.6576 #> 466       63863.5880       -12915.3044    70260.470  178244.1312 #> 467        4453.9823        -8308.9158   -47369.739 -111879.0626 #> 468     -156663.3596       -41573.5786  -157163.162   97906.7667 #> 469       98724.0784       -15307.7811   -88540.730  157135.2294 #> 470     -139458.9530       -98159.9862    -7351.937  -42626.8048 #> 471       43239.4261        -7260.8122   -72593.077   61037.9014 #> 472       90290.3456        24410.7157     8578.291  -48335.7622 #> 473       29092.1206        89308.7565   259142.659  -95067.1001 #> 474      210736.7269       -19045.8907    57475.692  -63301.4790 #> 475      -89942.9302      -117866.6215   172407.633  112247.9064 #> 476     -257859.3097        13886.6331    31637.907 -151489.5911 #> 477      257940.5593       -40952.9525    51708.560  127444.1641 #> 478        6542.7386       -41809.0094   -24343.792   76737.1159 #> 479       89715.0158       -43995.0202   -44952.827  126184.7888 #> 480      258360.0996        58531.9115    90715.726  125714.4358 #> 481       46179.0459       -43358.8893    69385.305  -90532.5579 #> 482       58884.4640       -30626.9172   -87054.035   -3804.7894 #> 483       53169.3753        47976.8806   108766.598   31533.0592 #> 484      156903.4627         2392.7371    15197.163   99833.1588 #> 485       98283.1141       -90839.9274    40486.715  -47251.9014 #> 486      132613.8822       -11732.7368    47197.951  -33396.1390 #> 487       82620.6622         5818.0098     6856.450   56769.2819 #> 488     -132410.4365       -10974.0046   -34408.445  111280.4605 #> 489       45185.6686       -49383.0821   109599.694 -129166.3407 #> 490       45793.5089        60959.5815  -155948.182  -32396.6607 #> 491      316661.2919         2388.9607  -155488.016  122491.3322 #> 492      172906.9908       -55568.7185   -74795.227  -67912.7109 #> 493      219449.1256       -29299.2122   -63205.348  -36013.6124 #> 494      244383.5589        -1183.8692    40989.668  -38256.3324 #> 495      -98684.3329       -73120.4675    41516.462   62723.3755 #> 496       -4260.1346       -31255.4398   161521.301 -167846.0561 #> 497      -10499.7666        -4906.7223  -168547.587   -7232.8489 #> 498      131375.2842       -15593.4668     7068.994  -67025.2933 #> 499      -18425.0966        -3090.7525    23758.511 -178447.0490 #> 500       85131.2437        -8376.8455    78303.680   -3887.1415 #> 501       54626.9860        22905.4826   -71131.385  -59925.3537 #> 502       28538.7528        50542.4605   168402.401   20897.1957 #> 503      -21810.5354        37767.2918    41764.489  204023.2672 #> 504      -91656.2116       -37072.5980    -7201.484   94319.4197 #> 505      -93012.7211       -75231.3295    28137.778 -249816.6502 #> 506       85523.0173        -1316.6494  -108463.238    -990.7368 #> 507      106983.3503       -51021.3579   -18518.188  -49253.1995 #> 508        4028.0950       -17547.1801    85362.275   66854.9178 #> 509        2493.8247       -38679.7704  -154958.544  168545.3582 #> 510       52401.9936       -38618.3020    -2339.375   80207.4935 #> 511      -23954.2288        21910.6123   288481.781   83442.9636 #> 512     -136738.2452       -51612.3460    99883.622  -30021.9601 #> 513       -4443.8551        20459.5975     8398.724  -46457.5615 #> 514      106976.8050      -149590.8727    56869.569   -5120.7854 #> 515      -68341.4947        17299.9193  -165087.451  -71979.2322 #> 516      -64166.0409       -16967.0516  -205542.420  -30318.6900 #> 517      145587.8669       -58550.2902    41942.090  108137.7104 #> 518       44092.2001       -59418.1701    93555.498   52986.5511 #> 519      -88505.0269       -15223.1670   126114.637  -91397.2124 #> 520      123232.6681        -2673.4142  -224656.669 -172057.5083 #> 521      -12025.4342       -39883.7662  -114770.724   74663.4721 #> 522        -320.9088       -72447.5453   -49294.944   37238.8580 #> 523      251463.8707         2557.4186   -20671.182  -73345.4273 #> 524      147619.2853       -17057.3521   236166.978   19208.0791 #> 525      -51902.6740        -8083.3478   113275.977   29257.0770 #> 526     -107043.6423       -69876.2683   -27293.701  -30696.7163 #> 527      120154.9991        -3016.0036    83767.578  -32208.6276 #> 528        3804.8622       -34538.3481   -27235.968   54135.3982 #> 529       61318.2709       -42305.5443   100661.034  -30595.1794 #> 530       20968.7916       -32456.4555   123695.287   16605.7591 #> 531      136524.7332       -55004.7062  -124137.324  -65942.1863 #> 532       69351.3480       -22615.3645    13628.487   49564.0911 #> 533      172510.9004        33901.2400  -159542.948  -39356.8147 #> 534      -84211.9083       -46309.3137   -61110.097    6930.1768 #> 535       80328.7523        10575.4798  -104094.857   34180.4845 #> 536      219114.3581       -43345.2171     3406.038 -164421.9423 #> 537     -205255.6641        25970.8318    85030.136    2721.2404 #> 538      216839.8516        18067.5965   108566.991   96875.3500 #> 539      210273.6018        18009.8794    25099.703  -75547.2758 #> 540      -78852.4973        22744.0893    25597.084   85509.2232 #> 541      -57162.2468       -26444.4683    94590.309  -28050.2254 #> 542       78126.7294        62977.8320   -47776.917   21250.1952 #> 543      211814.2227       -42514.5183  -176550.195    2064.6392 #> 544      312205.5761       -52592.9097    -9200.951   51365.9615 #> 545      -44306.9528        18595.1812    44506.022  145348.1688 #> 546      -10260.3201        27019.5899   138740.970 -170790.5777 #> 547       89743.1227       -82294.8487   118121.818  130739.2901 #> 548     -184421.9702       -38913.0881   -52101.109   13159.6060 #> 549       88025.3390       -12025.4130   105346.351  120244.5826 #> 550     -205995.5107        27445.2486    99011.957  128212.0889 #> 551     -161067.9722         9107.8022   -97275.944  135039.2019 #> 552      -65245.1617        67826.7344    57782.818  -75942.2592 #> 553      -57814.8908        57008.7189   -90122.189   53627.3712 #> 554       74894.7384        24099.9495    29817.676   94880.0631 #> 555      -53453.3535        22238.7292   -40778.693   -6825.1604 #> 556     -249073.4466        45856.6300   -37507.402   35743.4012 #> 557       28714.8326         1178.2253  -127972.527    7758.1174 #> 558       90186.9806        26016.3876   -97487.783   98363.3495 #> 559     -213181.5480       -32491.8118    86423.123   67347.9165 #> 560       -6766.0733        15149.9989   -84132.388   77498.5651 #> 561      100696.8208        93103.6125   169332.028  108588.5183 #> 562     -251682.4248       -41129.9625   126180.066   22970.2826 #> 563       94851.3536       -32708.5112   -27336.031   31904.6112 #> 564     -111896.5843        75408.6779    61639.944   22209.5831 #> 565        5131.6321        24509.2445   224605.941   30779.4059 #> 566      -88901.8825       -13769.4745    53091.883 -101448.1418 #> 567     -260269.2674         2870.1680   -65107.553   84045.9345 #> 568       45190.9969       -10392.2058    19240.099   -4892.3849 #> 569      155249.6172       -75886.6357  -217850.641  101377.9514 #> 570       -6435.7448       -40983.6132  -162377.286  128544.5490 #> 571      149009.8554       -17004.7350  -129651.763  -14578.2212 #> 572         922.5541       -22261.4600    89635.355   53509.0458 #> 573      156272.6513       -30142.5582    58203.010  -10429.7698 #> 574         779.6795       -74035.0935   -24002.537  -53269.1137 #> 575       90803.0871        30105.7391  -126731.112   96724.5666 #> 576       43641.4801       -38560.5021   -34137.492   36518.7132 #> 577      132888.9157       -64502.8064    98222.321    5702.6133 #> 578      291467.6298       -44494.5589    29957.637   83918.3501 #> 579      -74850.4041       -41962.6001    32245.721   24047.9317 #> 580     -217595.6820        16329.9351   -94609.301   48334.7743 #> 581      203817.3199        -1957.6399   -27563.825   45998.7040 #> 582      200081.9682        44924.8124  -140422.486  -43570.5247 #> 583      105304.5441        17932.9864   343823.083   79682.7089 #> 584      122328.3238       -68147.6248   -13860.764   41359.3208 #> 585      -62440.8345        12175.3418  -106700.844  -19787.2794 #> 586      151903.2986       -14910.9534     2969.317   84149.8652 #> 587     -188877.3614         2072.4812   -15493.362  -10069.4464 #> 588     -123039.0891        59556.0458    87306.069   29466.0000 #> 589       81722.6297       -41864.9642   -16551.223   85083.5449 #> 590      146507.9919       -36079.9782    23344.315   23231.1937 #> 591      172992.9969       -14933.2628     -846.036  -45978.2290 #> 592      124927.1516        31915.6728  -199870.749   67949.5724 #> 593      114127.9948         5911.8199   209190.968   -2478.3462 #> 594        7371.3633         7907.4454  -101056.514  -98324.5438 #> 595        2909.3554       -30758.6350     7627.700  -26085.0999 #> 596        -850.4466        -1687.1058   -98484.564   58204.5581 #> 597      -32853.0394       -26575.4646  -224780.318  -84462.6646 #> 598      102732.4165        38514.3340    42726.172   15150.4696 #> 599      121384.2077      -122482.0972    -4597.177   45634.0473 #> 600      102085.7965       -35796.6470  -127314.701  -59891.2191 #> 601      -30927.3375        -7513.8594    94566.997   93468.1859 #> 602      -66892.0298         6381.5450  -172231.246   -7524.0996 #> 603       34186.9962       -61320.9497  -219898.467   52849.1680 #> 604       46268.7598        -2877.5589   -71711.064  -63674.8840 #> 605     -174385.5410        15401.4727   -86091.667 -157490.9256 #> 606      184059.9550        46275.6672   -37977.460  -60108.2343 #> 607     -167542.3125        -3923.3221   -79687.992    2881.3287 #> 608      134347.1995        20459.6145    56263.999   59606.5522 #> 609      -92998.6133         4835.9702   118423.206   53873.7729 #> 610      -70599.3426       -95710.3582    44272.864   19335.6776 #> 611      -14663.8505        11241.0524    68211.655  123350.7525 #> 612     -116694.8110       -44370.6150   101091.162  162458.3309 #> 613      134433.4740        10078.9421   -91533.685  -20419.8162 #> 614       87045.2045        58623.0333   -69940.777   -6560.4546 #> 615     -237495.2733        11743.9250  -198038.087  138063.6807 #> 616      182866.0389       -14620.2940  -272323.497     309.4289 #> 617       56612.7306       -65093.6270   234679.419    -609.1029 #> 618       22357.4040       -92928.9894   -44409.649   45699.1911 #> 619      185891.0431       -20200.6000   134961.787   50785.3377 #> 620      -74674.8797        24884.5302    78588.527  109190.3983 #> 621       46426.3399       -18406.3142   -17707.255 -148166.7416 #> 622        2815.6812        47740.4781   326234.711  158238.1449 #> 623      140392.4610        -6105.0683   -19343.463   57753.0755 #> 624       57236.5044        23048.3859  -278113.718 -121111.4661 #> 625      -28441.4280        46539.3757    59788.416   28682.2687 #> 626     -111141.1286       -22054.3715  -162791.701   46157.6743 #> 627       34631.0431          347.1622  -108061.803   57839.7575 #> 628       26332.9996         5504.0577    87571.438  -65374.3407 #> 629     -196530.1864       -68834.6829  -181063.233 -167107.9659 #> 630      184660.9402       -59141.2782   -34749.319  -26789.0258 #> 631      -71935.8084       -35833.1597   142840.561  178074.1824 #> 632      -18585.0256        44252.7556    37411.125   66547.5063 #> 633       23136.5222       -51324.4035   -49178.864   53220.1010 #> 634      146233.1694        20076.5869    63727.187  168000.4508 #> 635      101037.0121       -66839.0884    54399.753   36556.1385 #> 636      -85272.5653        -2018.4985   172959.137  -47007.1756 #> 637     -211436.5639       -39908.3112  -163676.021  117112.9039 #> 638      -51332.7907       -37248.5852    26454.174  -23310.5870 #> 639      -37026.0202       -72047.5958   154639.403  204887.2605 #> 640       31219.9371       -23812.0694     2506.614  -63472.5727 #> 641      102472.2064        20845.5969   385934.400   71568.5132 #> 642      -38133.9664       -29599.4138  -182092.928   62310.2949 #> 643      -41939.7744        84189.7457    46676.240  108910.1047 #> 644      156693.4945        -5523.9843   147038.729  -66150.3568 #> 645      -39677.6748       -36712.2667   240860.238  -95555.0158 #> 646       84326.8588       -23680.1393     4314.717   26799.3179 #> 647     -112585.1097       -72033.1897   -86004.156  -31574.0229 #> 648      158968.9529        25804.4581    40563.399  -24506.1029 #> 649      151204.7593       -28292.7800    76489.492  181625.1680 #> 650      134147.4681       -35752.4083   -30014.771   55286.0752 #> 651      -96017.2331       -26301.2560   -33090.354   34781.6147 #> 652       59919.7772        24233.6406  -235902.526  -29133.9173 #> 653       13788.7771       -21485.5757   -41683.775   44360.5604 #> 654      115002.9746         2356.1711    54156.018  -82225.3898 #> 655       78477.0778       -32040.1407   254999.880  -54155.9932 #> 656       24251.1516       -80136.9736   130848.205   38415.4651 #> 657      195994.8845         6889.5408  -105639.062    7882.4026 #> 658     -186817.6615        19016.2572   -81018.146   95310.0862 #> 659      193163.2559        18942.1324    51498.072   34606.0817 #> 660        2142.6197       -31020.1219    56053.993   21481.0282 #> 661      110539.1329       -22411.4981     3618.495   10507.5554 #> 662       75645.1311         8737.4660   -21425.337    1914.1311 #> 663       23518.9861       -22804.1601    83879.047 -128036.6136 #> 664      107588.3354         6386.1276   127588.101   85427.6956 #> 665      -30013.8857       -38254.2327   -33040.056   27503.1337 #> 666       82525.2017       -19505.7981   115149.545   22320.8371 #> 667     -248284.4817       -35770.3585    53188.217  107410.8966 #> 668       93371.7476       -80194.9650  -196903.531  -55944.2425 #> 669       -8367.8552        24422.6715    54819.305 -118181.3912 #> 670      104665.9788       -14800.3710    62099.694   82056.7210 #> 671      114203.2241       -35933.5850   -70835.825  -63800.4470 #> 672      -19342.2650         4727.4205   -78393.930   30298.4251 #> 673     -156083.5500         2491.2950   206223.446  -53044.2116 #> 674      -91751.9898       -27624.1182  -165133.627    9292.5277 #> 675      -10252.8414       -26518.1871    -2399.916  -98059.2390 #> 676       10873.5039       -30958.2435  -127783.173  151719.2276 #> 677       94684.4169       -69822.8809   -26369.874  126564.7622 #> 678      182407.4711        37329.7237   126675.002   28389.1680 #> 679       22483.7465        12429.7027  -106330.599   24502.8790 #> 680       -9180.5976       -98720.6344   131511.534   23459.2546 #> 681     -160107.6933       -23673.0737  -155159.295  -34549.4183 #> 682     -121718.2506       -80335.8117  -223621.934   79637.7611 #> 683      209992.3600        31830.0133    98513.069  -35375.4863 #> 684      105652.8612        -3431.9545     7484.362  -77726.6028 #> 685      -22598.3494       -12527.7463   161612.259  -50104.9567 #> 686     -155525.1608        20712.4359   -44468.071   88007.4806 #> 687      232764.6117       -90174.5747   201722.593  -26779.4902 #> 688       59733.4708        26238.9465   137257.532   58807.8090 #> 689      104512.1442      -105810.8245   187990.437  -24333.4724 #> 690      -76953.6904        89763.1849   -46529.000  172914.9260 #> 691      160800.8189       -22073.8035    31267.627  145312.6432 #> 692      -12320.2407        60376.9524   169082.916    2509.5762 #> 693       63792.2998       -53206.4703   -99724.677  156695.6534 #> 694       80909.6042       -27761.2666   -40755.528   40219.6876 #> 695      -55793.0182         1397.0433   181499.463   45943.7015 #> 696      -74774.4089        14222.0147   -13806.753   26027.2105 #> 697      -53247.3046        28916.2620  -282574.208  -51011.2846 #> 698     -139347.5245        45863.7449   120733.474  -45920.6320 #> 699        5441.8946         3443.2776   -18412.125   -6231.3113 #> 700      169800.0177        -6349.9277   130948.965   23556.8518 #> 701      -78098.4858        20146.1111   101732.299    6303.6961 #> 702       -5392.7315        23188.8881   -26597.275  -59128.1248 #> 703       62021.9459       -63470.1086  -130632.731   61633.5227 #> 704       47635.8758        19192.6404  -105381.325  140594.4186 #> 705      -82808.3864        -4263.9364    -8515.292  -64835.7443 #> 706        -938.5086       105364.7537   121897.266   85817.4305 #> 707      327291.3865       100461.7975   166643.714  193864.3649 #> 708      212334.9393        18080.7615   150110.080   30035.4148 #> 709      -33386.0069       -33044.7913    85320.466 -110609.1031 #> 710       47457.1540       -19293.9497  -105458.712   97396.8106 #> 711     -112660.3715       -20623.5520   -53826.663   28515.4406 #> 712      144742.4115         -513.5286    79247.441  -61487.0782 #> 713      -91905.3694       -28578.5649  -133986.859   74659.9702 #> 714      104339.0296       -20499.6873  -181122.629   24382.2834 #> 715      347076.9746        -3509.6693   170823.531  164770.9146 #> 716      346859.6493        35284.3678    17420.119  115057.5142 #> 717     -104881.0622       -37853.3190   176935.143   -9471.5628 #> 718      406815.5294         8573.6347   584115.289  325153.8939 #> 719       14686.8329       -42925.7514   209096.205  100566.5184 #> 720      229072.3306       -67833.1441    53696.378   12733.9903 #> 721      -85247.8367        12322.3487   169838.475   92248.5987 #> 722     -234078.6347        42611.7213     9967.617   93669.5033 #> 723      183246.7143       -29830.9914   220116.863  -33397.6398 #> 724      192628.7123        -9265.6305    60440.166   18204.6068 #> 725      260368.3837      -117315.0131   -25628.285  -30219.8721 #> 726     -258137.1453       -23109.8937    86970.922  163176.5155 #> 727      151959.7523        48654.2141     8026.345   91303.9892 #> 728      -81972.3053         5040.7778   128457.985  -11961.6885 #> 729      -73118.9388       -32919.7696    -2152.443   21789.1369 #> 730     -206257.0236       -58318.7085  -141080.521  117502.4220 #> 731      -53771.8300        28681.3771    34437.549   27255.6810 #> 732      -58854.7072       -10028.8553    43706.348   85895.3036 #> 733      184306.9736       -13853.1067   213754.658  129958.6560 #> 734      232681.5161        39714.7872   -19228.843   71166.3536 #> 735      165992.9881         8559.5260  -176801.715   66650.9324 #> 736      226565.6024        16983.1168     1094.087  -42477.7990 #> 737      -70882.4672       -62489.8075  -181724.601   60446.0582 #> 738       73220.8292        14473.5493   186380.113   47636.0806 #> 739      105308.3681        -7437.6472   -11783.180  -34330.8280 #> 740       27369.7527       -59134.2492   135383.631   79760.6501 #> 741        3179.8967        13555.5205    14709.419   76561.8739 #> 742      281405.2582        -1155.7230    56005.708   40207.1684 #> 743       70263.9424        20203.8731   -40375.711  -73115.5848 #> 744       94921.8464       -10532.4797  -174184.826  -88633.9680 #> 745     -148852.8860       -13735.2205   -75013.106   98099.3204 #> 746      149589.9613      -115336.7184   132507.289   22881.3253 #> 747      188984.2467       -28961.4123   117385.518   69121.5624 #> 748       78186.6028       -29246.3379   -14300.149    -841.3009 #> 749      -90405.0808        14982.5920   -27152.460   -6389.9196 #> 750     -249131.6349        -1064.3480   143969.561  -96633.2143 #> 751       92597.1880        -4135.7713    61201.913   -2111.7976 #> 752      133924.6072         8718.6366    72996.516   64414.0583 #> 753     -156795.4751       -10456.4506   154251.045   68317.2370 #> 754      126069.9512       -66837.7012    55005.392  -70838.0537 #> 755     -177320.9514       -68552.5118    77075.127   -5779.5631 #> 756      -26871.7576      -161288.7033    41681.390  -33437.5215 #> 757      -92283.4281       -61574.2148  -108352.675  -21006.1280 #> 758       82763.5952        19154.5968   404274.003  -72244.8621 #> 759      -74330.5372        39540.4483    49381.994   94574.8863 #> 760      165473.3121      -111219.0917    55996.487   93826.7290 #> 761      265592.2517       -96405.7202   208385.332   16259.2397 #> 762       77147.0371       -84126.8306   311053.470  112519.1487 #> 763      -24526.6648       -10427.8872  -196958.215   43650.9745 #> 764      261784.8874       -55713.2119    44725.054 -142336.4301 #> 765      -18675.5852        17467.1672  -167129.736 -130703.3622 #> 766      -80863.6058       -45818.6810    81010.910  -60838.3873 #> 767       65303.8614        22546.6793   120377.475    9497.3906 #> 768      272295.6050       -88379.1678   -81801.018  118901.2391 #> 769       -5028.6355       -62843.9778   -25794.141  -71195.3166 #> 770     -187162.8058         8870.7616   115694.244  101326.5074 #> 771     -130795.8501       -49376.9629  -136934.677  -53880.8403 #> 772       32426.6549        23998.8114   159755.066  -10486.9817 #> 773       46471.4896        13651.6878   128587.691   45657.2592 #> 774      124694.9696        -6003.8410   -70306.899  121102.0714 #> 775      151845.0458       -19194.4869   119871.591  -20543.6167 #> 776      368201.9532        10648.0122   247877.084   62042.3466 #> 777      271265.7579      -160987.8552    96765.879  153034.9621 #> 778     -190577.1684        -6111.8645   161655.600  -16052.4503 #> 779     -197159.0970         -932.1185   316811.335  -37075.1591 #> 780      -42812.2715        -2825.0062   -52313.412 -128866.5035 #> 781       -3959.9322         -178.8723   233373.548  110749.3123 #> 782      401465.9104      -138697.4416   302760.380  245597.4048 #> 783       78426.2065       -74777.0064  -277514.939  -17525.3619 #> 784      -28551.1639        43125.3012   -81229.645  215887.2322 #> 785       87817.1302       -28743.1478  -100724.049 -112818.4763 #> 786       18761.5994       -21264.7443   149202.650   27801.7340 #> 787      293110.8907         7676.0209   144014.819   22356.5322 #> 788       16243.0640       -44288.0975    97367.936  -22660.4793 #> 789      342335.1639       -24670.9246   -11354.174   54046.1389 #> 790       35154.1405       -40170.5006   -43064.863   26088.6945 #> 791      -87016.3575       -39965.7773   -16593.970  -30782.0652 #> 792      100531.8681        39851.6197   107058.092  102071.2284 #> 793      539949.4445       -49242.9794   283164.688  150234.4750 #> 794       82103.1156       -96916.1805    77422.733   43797.6652 #> 795     -213079.3857        45305.1959   -31696.218 -268021.0179 #> 796      193849.9754         7005.2232   220220.133  182907.0033 #> 797       -4701.1457        71095.8574   101099.198   93077.5425 #> 798      229254.5122      -191221.1074   168062.293   40441.2268 #> 799      -11419.6750       -29350.3946    37219.797  -10598.9296 #> 800      362044.3782        95928.8413    12074.219  211977.9631 #> 801      123066.6661       -21994.5925   -19319.938   64891.5458 #> 802      212752.0163       -45882.6076   109336.556  -97206.8304 #> 803      -45198.2122        29084.8640   200459.666  -58665.6422 #> 804     -161951.0113       -63622.5024   346707.069  421966.1009 #> 805       87512.8363       -78399.7927    53109.315   -2853.4886 #> 806       19039.2818       -35274.0330  -113066.124  220900.2081 #> 807       75975.1738        34099.8599  -201919.262   73067.4842 #> 808     -280948.6886       -30248.7909   121000.719   70447.9113 #> 809     -102825.6244          870.1227   127319.835  -15579.5373 #> 810      151396.7314        -2444.3183   -47486.073    -994.9615 #> 811      861474.5632       106829.3829   958801.798  437735.1858 #> 812     -109997.7923       -56223.2800    66537.733   12969.4499 #> 813      309071.5167       -25496.9535    -6469.724  111176.5202 #> 814       58239.4172       -27688.0258   315803.070   -5178.2683 #> 815       58648.7517        62950.8365   286929.923  300208.7464 #> 816      248119.6487         1070.3719   200110.481    4130.5310 #> 817      226836.6052       -32842.9176   164665.309  121130.8447 #> 818     -145102.2141        29315.7313   199977.992   29529.5575 #> 819      198078.9033      -105274.1685  -119211.688  109274.2978 #> 820      -14267.5870       -65732.5923    37431.499  -45960.0515 #> 821      496518.7357      -144753.5155   242300.201  249837.4447 #> 822     1172018.2336       -38923.2355   543068.538  466227.3961 #> 823      365574.8971        62118.5624   352671.378  287206.4919 #> 824      -83774.4799       -64671.6099  -297940.701 -502765.5930 #> 825      576208.3688        16457.1954   286776.560   32329.2545 #> 826       67523.9596      -116737.0353   218935.314   25856.3857 #> 827      205360.6205      -123573.0007    38896.294    7818.5817 #> 828      150915.5786         9054.6411   176524.473  127126.8907 #> 829      248392.2243         9917.6913   177441.634  159020.4714 #> 830      735854.0649      -305429.6571   716502.140  417227.5844 #> 831      276956.0716       -33371.3702   280994.685    6184.4793 #> 832      673418.2622      -241116.7695   222657.115  218927.5699 #> 833      615388.2931      -228234.6146   589551.780  230580.4695 #> 834     1318167.9895          552.2057  1098851.212  953886.5334 #>  #> $method #> [1] \"addNoise: additive\" #>  #> $noise #> [1] 150 #>  #> $p #> [1] NA #>  #> $delta #> [1] NA #>  #> attr(,\"class\") #> [1] \"addNoise\"  data(testdata) testdata[, c('expend','income','savings')] <- addNoise(testdata[,c('expend','income','savings')])$xm  ## for objects of class sdcMicroObj: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- addNoise(sdc)"},{"path":"/reference/argus_microaggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"argus_microaggregation — argus_microaggregation","title":"argus_microaggregation — argus_microaggregation","text":"calls microaggregation code mu-argus. case one variable microaggregated useOptimal TRUE, Hansen-Mukherjee polynomial exact method applied. case, Mateo-Domingo method used.","code":""},{"path":"/reference/argus_microaggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"argus_microaggregation — argus_microaggregation","text":"","code":"argus_microaggregation(df, k, useOptimal = FALSE)"},{"path":"/reference/argus_microaggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"argus_microaggregation — argus_microaggregation","text":"df data.frame numerical columns k required group size useOptimal (logical) optimal microaggregation applied (ony possible case one variable)","code":""},{"path":"/reference/argus_microaggregation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"argus_microaggregation — argus_microaggregation","text":"list two elements original:  originally provided input data microaggregated:  microaggregated data.frame","code":""},{"path":[]},{"path":"/reference/argus_microaggregation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"argus_microaggregation — argus_microaggregation","text":"","code":"mat <- matrix(sample(1:100, 50, replace=TRUE), nrow=10, ncol=5) df <- as.data.frame(mat) res <- argus_microaggregation(df, k=5, useOptimal=FALSE)"},{"path":"/reference/argus_rankswap.html","id":null,"dir":"Reference","previous_headings":"","what":"argus_rankswap — argus_rankswap","title":"argus_rankswap — argus_rankswap","text":"argus_rankswap","code":""},{"path":"/reference/argus_rankswap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"argus_rankswap — argus_rankswap","text":"","code":"argus_rankswap(df, perc)"},{"path":"/reference/argus_rankswap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"argus_rankswap — argus_rankswap","text":"df data.frame numerical columns perc number defining swapping percantage","code":""},{"path":"/reference/argus_rankswap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"argus_rankswap — argus_rankswap","text":"list two elements original:  originally provided input data swapped:  data.frame containing swapped values","code":""},{"path":[]},{"path":"/reference/argus_rankswap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"argus_rankswap — argus_rankswap","text":"","code":"mat <- matrix(sample(1:100, 50, replace=TRUE), nrow=10, ncol=5) df <- as.data.frame(mat) res <- argus_rankswap(df, perc=10)"},{"path":"/reference/calcRisks.html","id":null,"dir":"Reference","previous_headings":"","what":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","title":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","text":"Recomputation Risk done manual changing content object class sdcMicroObj-class","code":""},{"path":"/reference/calcRisks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","text":"","code":"calcRisks(obj, ...)"},{"path":"/reference/calcRisks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","text":"obj object class sdcMicroObj-class ... arguments moment","code":""},{"path":"/reference/calcRisks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","text":"applying function, dislosure risk re-estimated corresponding slots object class sdcMicroObj-class updated. function mostly used internally automatically update risk sdc method applied.","code":""},{"path":[]},{"path":"/reference/calcRisks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recompute Risk and Frequencies for a sdcMicroObj — calcRisks","text":"","code":"data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- calcRisks(sdc)"},{"path":"/reference/casc1.html","id":null,"dir":"Reference","previous_headings":"","what":"Small Artificial Data set — casc1","title":"Small Artificial Data set — casc1","text":"Small Toy Example Data set used Sanz-Mateo et.al.","code":""},{"path":"/reference/casc1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Small Artificial Data set — casc1","text":"format : int [1:13, 1:7] 10 12 17 21 9 12 12 14 13 15 ...  - attr(*, \"dimnames\")=List 2 ..$ : chr [1:13] \"1\" \"2\" \"3\" \"4\" ...  ..$ : chr [1:7] \"1\" \"2\" \"3\" \"4\" ...","code":""},{"path":"/reference/casc1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Small Artificial Data set — casc1","text":"","code":"data(casc1) casc1 #>     1 2 3 4 5 6  7 #> 1  10 4 6 2 1 0  4 #> 2  12 3 7 1 2 1 -1 #> 3  17 2 5 1 3 1 -2 #> 4  21 2 8 2 4 1 -1 #> 5   9 3 3 3 5 1 -4 #> 6  12 4 7 3 6 0 -3 #> 7  12 4 6 3 7 0  4 #> 8  14 3 7 3 6 0 -5 #> 9  13 3 6 3 5 4 -1 #> 10 15 3 7 5 4 3  3 #> 11 17 2 6 7 3 2 -2 #> 12 17 3 8 7 2 1 -2 #> 13 18 4 6 7 1 1 -1"},{"path":"/reference/createNewID.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates new randomized IDs — createNewID","title":"Creates new randomized IDs — createNewID","text":"useful record IDs consist, example, geo identifier household line number. method can used create new, random IDs reconstructed.","code":""},{"path":"/reference/createNewID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates new randomized IDs — createNewID","text":"","code":"createNewID(obj, newID, withinVar)"},{"path":"/reference/createNewID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates new randomized IDs — createNewID","text":"obj sdcMicroObj-class-object newID character specifiying desired variable name new ID withinVar NULL character vector specifying variable (e.g existing household ID) used calculating new IDs. specified, IDs assigned values given variable.","code":""},{"path":"/reference/createNewID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates new randomized IDs — createNewID","text":"sdcMicroObj-class-object updated slot origData","code":""},{"path":"/reference/dRisk.html","id":null,"dir":"Reference","previous_headings":"","what":"overal disclosure risk — dRisk","title":"overal disclosure risk — dRisk","text":"Distance-based disclosure risk estimation via standard deviation-based intervals around observations.","code":""},{"path":"/reference/dRisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"overal disclosure risk — dRisk","text":"","code":"dRisk(obj, ...)"},{"path":"/reference/dRisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"overal disclosure risk — dRisk","text":"obj data.frame object class sdcMicroObj-class ... possible arguments : xm: perturbed data k: percentage standard deviation","code":""},{"path":"/reference/dRisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"overal disclosure risk — dRisk","text":"disclosure risk /modified sdcMicroObj-class","code":""},{"path":"/reference/dRisk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"overal disclosure risk — dRisk","text":"interval (based standard deviation) built around value perturbed value.  look original values lay intervals . parameter k one can enlarge scale interval.","code":""},{"path":"/reference/dRisk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"overal disclosure risk — dRisk","text":"see method SDID Mateo-Sanz, Sebe, Domingo-Ferrer.  Outlier Protection Continuous Microdata Masking. International Workshop Privacy Statistical Databases. PSD 2004: Privacy Statistical Databases pp 201-215. Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4","code":""},{"path":[]},{"path":"/reference/dRisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"overal disclosure risk — dRisk","text":"Matthias Templ","code":""},{"path":"/reference/dRisk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"overal disclosure risk — dRisk","text":"","code":"data(free1) free1 <- as.data.frame(free1) m1 <- microaggregation(free1[, 31:34], method=\"onedims\", aggr=3) m2 <- microaggregation(free1[, 31:34], method=\"pca\", aggr=3) dRisk(obj=free1[, 31:34], xm=m1$mx) #> [1] 0.9955 dRisk(obj=free1[, 31:34], xm=m2$mx) #> [1] 0 dUtility(obj=free1[, 31:34], xm=m1$mx) #> [1] 7.971673 dUtility(obj=free1[, 31:34], xm=m2$mx) #> [1] 6335.63  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ## this is already made internally: sdc <- dRisk(sdc) ## and already stored in sdc"},{"path":"/reference/dRiskRMD.html","id":null,"dir":"Reference","previous_headings":"","what":"RMD based disclosure risk — dRiskRMD","title":"RMD based disclosure risk — dRiskRMD","text":"Distance-based disclosure risk estimation via robust Mahalanobis Distances.","code":""},{"path":"/reference/dRiskRMD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RMD based disclosure risk — dRiskRMD","text":"","code":"dRiskRMD(obj, ...)"},{"path":"/reference/dRiskRMD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RMD based disclosure risk — dRiskRMD","text":"obj sdcMicroObj-class-object data.frame ... see possible arguments xm masked data kweight adjusting influence robust Mahalanobis distances, .e. increase decrease disclosure risk intervals. k2parameter method RMDID2 choose small interval around masked observation.","code":""},{"path":"/reference/dRiskRMD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RMD based disclosure risk — dRiskRMD","text":"disclosure risk modified sdcMicroObj-class risk1 percentage sensitive observations according method RMDID1. risk2 standardized version risk1 wrisk1 amount sensitive observations according RMDID1 weighted corresponding robust Mahalanobis distances. wrisk2 RMDID2 measure indexRisk1 index observations high risk according risk1 measure indexRisk2 index observations high risk according wrisk2 measure","code":""},{"path":"/reference/dRiskRMD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RMD based disclosure risk — dRiskRMD","text":"method extension method SDID accounts “outlyingness” observations. quite natural approach since outliers higher risk re-identification therefore outliers larger disclosure risk intervals observations center data cloud. algorithm works follows: 1. Robust Mahalanobis distances estimated order get robust multivariate distance observation. 2. Intervals estimated observation around every data point original data points length interval defined/weighted squared robust Mahalanobis distance parameter $k$.  higher RMD observation larger interval. 3. Check corresponding masked values fall intervals around original values .  value corresponding observation within interval whole observation considered unsafe.  , get whole vector indicating observation save , finished already using method RMDID1). 4. method RMDID1w: return weighted (via RMD) vector disclosure risk. 5. method RMDID2: whenever observation considered unsafe checked $m$ observations masked data close (defined parameter $k2$ length intervals SDID RSDID) unsafe observation masked data, using Euclidean distances.  $m$ points small interval, conclude observation ``save''.","code":""},{"path":"/reference/dRiskRMD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"RMD based disclosure risk — dRiskRMD","text":"Templ, M. Meindl, B., Robust Statistics Meets SDC: New Disclosure Risk Measures Continuous Microdata Masking, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 5262, pp. 113-126, 2008. Templ, M. New Developments Statistical Disclosure Control Imputation: Robust Statistics Applied Official Statistics, Suedwestdeutscher Verlag fuer Hochschulschriften, 2009, ISBN: 3838108280, 264 pages.","code":""},{"path":[]},{"path":"/reference/dRiskRMD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"RMD based disclosure risk — dRiskRMD","text":"Matthias Templ","code":""},{"path":"/reference/dRiskRMD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RMD based disclosure risk — dRiskRMD","text":"","code":"data(Tarragona) x <- Tarragona[, 5:7] y <- addNoise(x)$xm dRiskRMD(x, xm=y) #> $risk1 #> [1] 0.004796163 #>  #> $risk2 #> [1] 0.003597122 #>  #> $wrisk1 #> [1] 0.02016364 #>  #> $wrisk2 #> [1] 0.0145426 #>  #> $indexRisk1 #> 391 766 795 819  #> 391 766 795 819  #>  #> $indexRisk2 #> [1] 766 795 819 #>  #> $riskvec1 #>   [1] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>   [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [15] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [64] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [71] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [78] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [85] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [92] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [99] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [106] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [113] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [120] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [127] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [134] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [141] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [148] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [155] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [162] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [169] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [176] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [183] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [190] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [197] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [204] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [211] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [218] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [225] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [232] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [239] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [246] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [253] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [260] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [267] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [274] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [281] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [288] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [295] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [302] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [309] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [316] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [323] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [330] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [337] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [344] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [351] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [358] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [365] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [372] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [379] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [386] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.1612764 0.0000000 #> [393] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [400] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [407] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [414] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [421] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [428] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [435] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [442] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [449] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [456] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [463] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [470] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [477] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [484] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [491] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [498] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [505] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [512] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [519] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [526] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [533] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [540] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [547] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [554] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [561] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [568] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [575] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [582] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [589] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [596] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [603] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [610] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [617] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [624] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [631] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [638] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [645] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [652] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [659] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [666] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [673] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [680] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [687] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [694] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [701] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [708] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [715] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [722] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [729] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [736] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [743] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [750] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [757] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [764] 0.0000000 0.0000000 0.1516675 0.0000000 0.0000000 0.0000000 0.0000000 #> [771] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [778] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [785] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [792] 0.0000000 0.0000000 0.0000000 2.8325759 0.0000000 0.0000000 0.0000000 #> [799] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [806] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [813] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 1.0585983 #> [820] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [827] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [834] 0.0000000 #>  #> $riskvec2 #>   [1] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>   [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [15] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [64] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [71] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [78] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [85] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [92] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [99] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [106] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [113] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [120] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [127] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [134] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [141] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [148] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [155] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [162] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [169] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [176] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [183] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [190] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [197] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [204] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [211] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [218] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [225] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [232] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [239] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [246] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [253] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [260] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [267] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [274] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [281] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [288] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [295] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [302] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [309] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [316] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [323] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [330] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [337] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [344] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [351] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [358] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [365] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [372] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [379] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [386] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [393] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [400] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [407] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [414] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [421] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [428] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [435] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [442] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [449] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [456] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [463] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [470] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [477] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [484] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [491] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [498] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [505] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [512] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [519] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [526] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [533] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [540] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [547] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [554] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [561] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [568] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [575] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [582] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [589] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [596] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [603] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [610] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [617] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [624] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [631] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [638] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [645] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [652] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [659] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [666] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [673] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [680] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [687] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [694] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [701] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [708] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [715] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [722] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [729] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [736] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [743] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [750] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [757] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [764] 0.0000000 0.0000000 0.1516675 0.0000000 0.0000000 0.0000000 0.0000000 #> [771] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [778] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [785] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [792] 0.0000000 0.0000000 0.0000000 2.8325759 0.0000000 0.0000000 0.0000000 #> [799] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [806] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [813] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 1.0585983 #> [820] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [827] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [834] 0.0000000 #>  dRisk(x, xm=y) #> [1] 0.001199041  data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ## this is already made internally: ## sdc <- dRiskRMD(sdc) ## and already stored in sdc"},{"path":"/reference/dUtility.html","id":null,"dir":"Reference","previous_headings":"","what":"Data-Utility measures — dUtility","title":"Data-Utility measures — dUtility","text":"dUtility() allows compute different measures data-utility based various distances using original perturbed variables.","code":""},{"path":"/reference/dUtility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data-Utility measures — dUtility","text":"","code":"dUtility(obj, ...)"},{"path":"/reference/dUtility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data-Utility measures — dUtility","text":"obj original data object class sdcMicroObj ... see arguments xm: perturbed data method: method IL1, IL1s eigen. methods implemented summary.micro()","code":""},{"path":"/reference/dUtility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data-Utility measures — dUtility","text":"data utility modified entry data utility sdcMicroObj.","code":""},{"path":"/reference/dUtility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data-Utility measures — dUtility","text":"standardised distances perturbed data values original ones measured. following measures available: \"IL1: sum absolute distances original perturbed variables scaled absolute values original variables \"IL1s: measures absolute distances original perturbed ones, scaled standard deviation original variables times square root 2. \"eigen; compares eigenvalues original perturbed data \"robeigen; compares robust eigenvalues original perturbed data","code":""},{"path":"/reference/dUtility.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data-Utility measures — dUtility","text":"IL1 IL1s: see Mateo-Sanz, Sebe, Domingo-Ferrer. Outlier Protection Continuous Microdata Masking. International Workshop Privacy Statistical Databases. PSD 2004: Privacy Statistical Databases pp 201-215. Templ, M. Meindl, B., Robust Statistics Meets SDC: New Disclosure Risk Measures Continuous Microdata Masking, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 5262, pp. 113-126, 2008.","code":""},{"path":[]},{"path":"/reference/dUtility.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Data-Utility measures — dUtility","text":"Matthias Templ","code":""},{"path":"/reference/dUtility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data-Utility measures — dUtility","text":"","code":"data(free1) free1 <- as.data.frame(free1) m1 <- microaggregation(free1[, 31:34], method=\"onedims\", aggr=3) m2 <- microaggregation(free1[, 31:34], method=\"pca\", aggr=3) dRisk(obj=free1[, 31:34], xm=m1$mx) #> [1] 0.9955 dRisk(obj=free1[, 31:34], xm=m2$mx) #> [1] 0 dUtility(obj=free1[, 31:34], xm=m1$mx) #> [1] 7.971673 dUtility(obj=free1[, 31:34], xm=m2$mx) #> [1] 6335.63 data(Tarragona) x <- Tarragona[, 5:7] y <- addNoise(x)$xm dRiskRMD(x, xm=y) #> $risk1 #> [1] 0.004796163 #>  #> $risk2 #> [1] 0.004796163 #>  #> $wrisk1 #> [1] 0.01695449 #>  #> $wrisk2 #> [1] 0.01695449 #>  #> $indexRisk1 #> 129 359 633 752  #> 129 359 633 752  #>  #> $indexRisk2 #> [1] 129 359 633 752 #>  #> $riskvec1 #>   [1] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>   [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [15] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [64] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [71] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [78] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [85] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [92] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [99] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [106] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [113] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [120] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [127] 0.0000000 0.0000000 0.1618498 0.0000000 0.0000000 0.0000000 0.0000000 #> [134] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [141] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [148] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [155] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [162] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [169] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [176] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [183] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [190] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [197] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [204] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [211] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [218] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [225] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [232] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [239] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [246] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [253] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [260] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [267] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [274] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [281] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [288] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [295] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [302] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [309] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [316] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [323] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [330] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [337] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [344] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [351] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [358] 0.0000000 0.2052165 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [365] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [372] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [379] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [386] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [393] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [400] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [407] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [414] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [421] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [428] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [435] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [442] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [449] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [456] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [463] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [470] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [477] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [484] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [491] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [498] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [505] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [512] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [519] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [526] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [533] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [540] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [547] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [554] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [561] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [568] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [575] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [582] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [589] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [596] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [603] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [610] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [617] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [624] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [631] 0.0000000 0.0000000 0.1793427 0.0000000 0.0000000 0.0000000 0.0000000 #> [638] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [645] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [652] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [659] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [666] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [673] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [680] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [687] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [694] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [701] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [708] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [715] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [722] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [729] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [736] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [743] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [750] 0.0000000 0.0000000 2.9886016 0.0000000 0.0000000 0.0000000 0.0000000 #> [757] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [764] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [771] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [778] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [785] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [792] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [799] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [806] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [813] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [820] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [827] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [834] 0.0000000 #>  #> $riskvec2 #>   [1] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>   [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [15] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [64] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [71] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [78] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [85] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [92] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [99] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [106] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [113] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [120] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [127] 0.0000000 0.0000000 0.1618498 0.0000000 0.0000000 0.0000000 0.0000000 #> [134] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [141] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [148] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [155] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [162] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [169] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [176] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [183] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [190] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [197] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [204] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [211] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [218] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [225] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [232] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [239] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [246] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [253] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [260] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [267] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [274] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [281] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [288] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [295] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [302] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [309] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [316] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [323] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [330] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [337] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [344] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [351] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [358] 0.0000000 0.2052165 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [365] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [372] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [379] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [386] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [393] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [400] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [407] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [414] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [421] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [428] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [435] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [442] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [449] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [456] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [463] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [470] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [477] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [484] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [491] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [498] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [505] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [512] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [519] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [526] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [533] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [540] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [547] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [554] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [561] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [568] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [575] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [582] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [589] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [596] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [603] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [610] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [617] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [624] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [631] 0.0000000 0.0000000 0.1793427 0.0000000 0.0000000 0.0000000 0.0000000 #> [638] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [645] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [652] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [659] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [666] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [673] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [680] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [687] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [694] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [701] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [708] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [715] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [722] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [729] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [736] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [743] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [750] 0.0000000 0.0000000 2.9886016 0.0000000 0.0000000 0.0000000 0.0000000 #> [757] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [764] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [771] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [778] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [785] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [792] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [799] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [806] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [813] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [820] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [827] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [834] 0.0000000 #>  dRisk(x, xm=y) #> [1] 0 dUtility(x, xm = y, method = \"IL1\") #> [1] 4434889 dUtility(x, xm = y, method = \"IL1s\") #> [1] 1950.404 dUtility(x, xm = y, method = \"eigen\") #> [1] 3.393048 dUtility(x, xm = y, method = \"robeigen\") #> [1] 165.2962  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ## this is already made internally: ## sdc <- dUtility(sdc) ## and already stored in sdc"},{"path":"/reference/dataGen.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast generation of synthetic data — dataGen","title":"Fast generation of synthetic data — dataGen","text":"Fast generation (primitive) synthetic multivariate normal data.","code":""},{"path":"/reference/dataGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast generation of synthetic data — dataGen","text":"","code":"dataGen(obj, ...)"},{"path":"/reference/dataGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast generation of synthetic data — dataGen","text":"obj sdcMicroObj-class-object data.frame ... see possible arguments n: amount observations generated data, defaults 200 use: howto compute covariances case missing values, see also argument use cov. default choice 'everything', possible choices '.obs', 'complete.obs', 'na..complete' 'pairwise.complete.obs'.","code":""},{"path":"/reference/dataGen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast generation of synthetic data — dataGen","text":"generated synthetic data.","code":""},{"path":"/reference/dataGen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast generation of synthetic data — dataGen","text":"Uses cholesky decomposition generate synthetic data approx. means covariances. details see reference.","code":""},{"path":"/reference/dataGen.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fast generation of synthetic data — dataGen","text":"method multivariate normal distributed data approxiomately covariance original data can generated without reflecting distribution real complex data, , general, follows multivariate normal distribution.","code":""},{"path":"/reference/dataGen.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fast generation of synthetic data — dataGen","text":"Mateo-Sanz, Martinez-Balleste, Domingo-Ferrer. Fast Generation Accurate Synthetic Microdata.  International Workshop Privacy Statistical Databases PSD 2004: Privacy Statistical Databases, pp 298-306.","code":""},{"path":[]},{"path":"/reference/dataGen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast generation of synthetic data — dataGen","text":"Matthias Templ","code":""},{"path":"/reference/dataGen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast generation of synthetic data — dataGen","text":"","code":"data(mtcars) cov(mtcars[,4:6]) #>              hp        drat         wt #> hp   4700.86694 -16.4511089 44.1926613 #> drat  -16.45111   0.2858814 -0.3727207 #> wt     44.19266  -0.3727207  0.9573790 cov(dataGen(mtcars[,4:6])) #>              hp        drat         wt #> hp   4669.41689 -13.8648994 39.9078907 #> drat  -13.86490   0.2400441 -0.3140173 #> wt     39.90789  -0.3140173  0.9041203 pairs(mtcars[,4:6])  pairs(dataGen(mtcars[,4:6]))   ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- dataGen(sdc)"},{"path":"/reference/distributeDraws_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribute number of swaps — distributeDraws_cpp","title":"Distribute number of swaps — distributeDraws_cpp","text":"Distribute number swaps across lowest hierarchy level according predefined swaprate. swaprate applied single swap counts swapping 2 households. Number swaps randomly rounded , needed, total number swaps coherence swaprate. NOTE: internal function used testing C++-function distributeDraws used inside C++-function recordSwap().","code":""},{"path":"/reference/distributeDraws_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribute number of swaps — distributeDraws_cpp","text":"","code":"distributeDraws_cpp(data, hierarchy, hid, swaprate, seed = 123456L)"},{"path":"/reference/distributeDraws_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribute number of swaps — distributeDraws_cpp","text":"data micro data containing hierarchy levels household ID hierarchy column indices variables data refers geographic hierarchy micro data set. instance county > municipality > district. hid column index data refers household identifier. swaprate double 0 1 defining proportion households swapped, see details explanations seed integer setting sampling seed","code":""},{"path":"/reference/distributeRandom_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribute — distributeRandom_cpp","title":"Distribute — distributeRandom_cpp","text":"Distribute `totalDraws` using ratio/probability vector `inputRatio` randomly round entry distribution results integer vector. Returns integer vector containing number units `totalDraws` distributetd according proportions `inputRatio`. NOTE: internal function used testing C++-function distributeRandom used inside C++-function recordSwap().","code":""},{"path":"/reference/distributeRandom_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribute — distributeRandom_cpp","text":"","code":"distributeRandom_cpp(inputRatio, totalDraws, seed)"},{"path":"/reference/distributeRandom_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribute — distributeRandom_cpp","text":"inputRatio vector containing ratios used distribute number units `totalDraws`. totalDraws number units distribute seed integer setting sampling seed","code":""},{"path":"/reference/extractManipData.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove certain variables from the data set inside a sdc object. — extractManipData","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"Extract manipulated data object class sdcMicroObj-class","code":""},{"path":"/reference/extractManipData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"","code":"extractManipData(   obj,   ignoreKeyVars = FALSE,   ignorePramVars = FALSE,   ignoreNumVars = FALSE,   ignoreGhostVars = FALSE,   ignoreStrataVar = FALSE,   randomizeRecords = \"no\" )"},{"path":"/reference/extractManipData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"obj object class sdcMicroObj-class ignoreKeyVars manipulated KeyVariables returned unchanged original variables ignorePramVars manipulated PramVariables returned unchanged original variables ignoreNumVars manipulated NumericVariables returned unchanged original variables ignoreGhostVars manipulated Ghost (linked) Variables returned unchanged original variables ignoreStrataVar manipulated StrataVariables returned unchanged original variables randomizeRecords (logical) specifies, output records randomized. following options possible: ''default, randomization takes place 'simple'records just randomly swapped. 'byHH'slot 'hhId' NULL, clusters defined variable randomized across dataset. slot 'hhId' NULL, records dataset randomly changed. 'withinHH'slot 'hhId' NULL, clusters defined variable randomized across dataset additionally, order records within clusters also randomly changed. slot 'hhId' NULL, records dataset randomly changed.","code":""},{"path":"/reference/extractManipData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"data.frame containing anonymized data set","code":""},{"path":"/reference/extractManipData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"Alexander Kowarik, Bernhard Meindl","code":""},{"path":"/reference/extractManipData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove certain variables from the data set inside a sdc object. — extractManipData","text":"","code":"## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- removeDirectID(sdc, var=\"age\") dataM <- extractManipData(sdc)"},{"path":"/reference/francdat.html","id":null,"dir":"Reference","previous_headings":"","what":"data from the casc project — francdat","title":"data from the casc project — francdat","text":"Small synthetic data Capobianchi, Polettini, Lucarelli","code":""},{"path":"/reference/francdat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data from the casc project — francdat","text":"data frame 8 observations following 8 variables. Num1 numeric vector Key1 Key variable 1. numeric vector Num2 numeric vector Key2 Key variable 2. numeric vector Key3 Key variable 3. numeric vector Key4 Key variable 4. numeric vector Num3 numeric vector w weight vector. numeric vector","code":""},{"path":"/reference/francdat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"data from the casc project — francdat","text":"https://research.cbs.nl/casc/deliv/12d1.pdf","code":""},{"path":"/reference/francdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"data from the casc project — francdat","text":"data set similar one used authors paper given . need data set demonstration effect, .e. package provides results software.","code":""},{"path":"/reference/francdat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"data from the casc project — francdat","text":"","code":"data(francdat) francdat #>   Num1 Key1 Num2 Key2 Key3 Key4 Num3     w #> 1 0.30    1 0.40    2    5    1    4  18.0 #> 2 0.12    1 0.22    2    1    1   22  45.5 #> 3 0.18    1 0.80    2    1    1    8  39.0 #> 4 1.90    3 9.00    3    1    5   91  17.0 #> 5 1.00    4 1.30    3    1    4   13 541.0 #> 6 1.00    4 1.40    3    1    1   14   8.0 #> 7 0.10    6 0.01    2    1    5    1   5.0 #> 8 0.15    1 0.50    2    5    1    5  92.0"},{"path":"/reference/free1.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo data set from mu-Argus — free1","title":"Demo data set from mu-Argus — free1","text":"public use toy demo data set mu-Argus software SDC.","code":""},{"path":"/reference/free1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo data set from mu-Argus — free1","text":"format : num [1:4000, 1:34] 36 36 36 36 36 36 36 36 36 36 ... - attr(*, \"dimnames\")=List 2 ..$ : NULL ..$ : chr [1:34] \"REGION\" \"SEX\" \"AGE\" \"MARSTAT\" ...","code":""},{"path":"/reference/free1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Demo data set from mu-Argus — free1","text":"Public use file CASC project.","code":""},{"path":"/reference/free1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Demo data set from mu-Argus — free1","text":"Please, see link given . Please note, correlation structure data realistic, especially concerning continuous scaled variables drawn independently multivariate uniform distribution.","code":""},{"path":"/reference/free1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demo data set from mu-Argus — free1","text":"","code":"data(free1) head(free1) #>      REGION SEX AGE MARSTAT KINDPERS NUMYOUNG NUMOLD AGEYOUNG EDUC1 EDUC2 ETNI #> [1,]     36   1  43       4        3        0      0       97     4     0    1 #> [2,]     36   1  27       4        3        0      0       97     4     0    9 #> [3,]     36   1  46       4        1        0      0       97     7     7    1 #> [4,]     36   1  27       4        1        0      0       97     5     0    1 #> [5,]     36   2  24       4        1        0      0       97     4     0    1 #> [6,]     36   2  24       4        1        0      0       97     4     0    1 #>      PRIOCCU POSLABM REGJOBC RECBEN RECUNBEN RECODBEN RECBILL RECSOSEC RECPENS #> [1,]       1       1       2      2        2        2       2        2       2 #> [2,]       1       1       2      2        2        2       2        2       2 #> [3,]       1       1       2      2        2        2       2        2       2 #> [4,]       5       1       2      2        2        2       2        2       2 #> [5,]       5       4       2      2        2        2       2        2       2 #> [6,]       5       4       2      2        2        2       2        2       2 #>      POSLABLY POSFACT COMPCODE OCCUCODE KINDFACT TENURE FTPTIME ADDJOB JOBFIND #> [1,]        7       1       95      300        8      1       1      2       2 #> [2,]        7       1       67      552        8      1       2      2       2 #> [3,]        7       1       90      219        8      1       1      2       2 #> [4,]        7       1       65      481        8      1       2      2       2 #> [5,]        2       7        0        0       97      7       7      7       7 #> [6,]        2       7        0        0       97      7       7      7       7 #>      WEIGHT INCOME MONEY ASSETS DEBTS #> [1,]  118.3 970000 74231  61340  1950 #> [2,]  118.3 393700 74231  90480  6750 #> [3,]  118.3 152200 74231  96600  6970 #> [4,]  118.3 216100 74231  40870  5950 #> [5,]  118.3 566900 74231  66460  4610 #> [6,]  118.3 776700 74231  46870  3900"},{"path":"/reference/freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Freq — freq","title":"Freq — freq","text":"Extract sample frequency counts (fk) estimated population frequency counts (Fk)","code":""},{"path":"/reference/freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Freq — freq","text":"","code":"freq(obj, type = \"fk\")"},{"path":"/reference/freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Freq — freq","text":"obj sdcMicroObj-class-object type either 'fk' 'FK'","code":""},{"path":"/reference/freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Freq — freq","text":"vector containing sample frequencies weighted frequencies","code":""},{"path":"/reference/freq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Freq — freq","text":"Bernhard Meindl","code":""},{"path":"/reference/freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Freq — freq","text":"","code":"data(testdata) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','relat','sex'),   pramVars=c('water','electcon'),   numVars=c('expend','income','savings'), w='sampling_weight') head(freq(sdc, type=\"fk\")) #> [1] 412 394 681 681 152 146 head(freq(sdc, type=\"Fk\")) #> [1] 41200 39400 68100 68100 15200 14600"},{"path":"/reference/freqCalc.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequencies calculation for risk estimation — freqCalc","title":"Frequencies calculation for risk estimation — freqCalc","text":"Computation estimation sample population frequency counts.","code":""},{"path":"/reference/freqCalc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequencies calculation for risk estimation — freqCalc","text":"","code":"freqCalc(x, keyVars, w = NULL, alpha = 1)"},{"path":"/reference/freqCalc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequencies calculation for risk estimation — freqCalc","text":"x data frame matrix keyVars key variables w column index weight variable. set NULL one deal population. alpha numeric value 0 1 specifying much keys contain missing values (NAs) contribute calculation fk Fk. default value 1, nothing changes respect implementation prior versions. wildcard-match counted alpha=0 keys missing values basically ignored.","code":""},{"path":"/reference/freqCalc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequencies calculation for risk estimation — freqCalc","text":"Object class freqCalc. freqCalc data set keyVars variables used frequency calculation w index weight vector. NULL sample. alpha value parameter alpha fk frequency equal observations key variables subset sample given observation. Fk estimated frequency population n1 number observations fk=1 n2 number observations fk=2","code":""},{"path":"/reference/freqCalc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Frequencies calculation for risk estimation — freqCalc","text":"function considers case missing values data.  missing value stands possible categories variable considered. possible apply function large data sets many (catergorical) key variables, since computation done C. freqCalc() support sdcMicro S4 class objects.","code":""},{"path":"/reference/freqCalc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Frequencies calculation for risk estimation — freqCalc","text":"look e.g. https://research.cbs.nl/casc/deliv/12d1.pdf Templ, M.  Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008.  https://www.tdp.cat/issues/abs.a004a08.php Templ, M.  New Developments Statistical Disclosure Control Imputation: Robust Statistics Applied Official Statistics, Suedwestdeutscher Verlag fuer Hochschulschriften, 2009, ISBN: 3838108280, 264 pages. Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4 Templ, M. Meindl, B.: Practical Applications Statistical Disclosure Control Using R, Privacy Anonymity Information Management Systems New Techniques New Practical Problems, Springer, 31-62, 2010, ISBN: 978-1-84996-237-7.","code":""},{"path":[]},{"path":"/reference/freqCalc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Frequencies calculation for risk estimation — freqCalc","text":"Bernhard Meindl","code":""},{"path":"/reference/freqCalc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequencies calculation for risk estimation — freqCalc","text":"","code":"data(francdat) f <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) f #>  #>  -------------------------- #> 4 obs. violate 2-anonymity  #> 8 obs. violate 3-anonymity  #>  -------------------------- f$freqCalc #>   Num1 Key1 Num2 Key2 Key3 Key4 Num3     w #> 1 0.30    1 0.40    2    5    1    4  18.0 #> 2 0.12    1 0.22    2    1    1   22  45.5 #> 3 0.18    1 0.80    2    1    1    8  39.0 #> 4 1.90    3 9.00    3    1    5   91  17.0 #> 5 1.00    4 1.30    3    1    4   13 541.0 #> 6 1.00    4 1.40    3    1    1   14   8.0 #> 7 0.10    6 0.01    2    1    5    1   5.0 #> 8 0.15    1 0.50    2    5    1    5  92.0 f$fk #> [1] 2 2 2 1 1 1 1 2 f$Fk #> [1] 110.0  84.5  84.5  17.0 541.0   8.0   5.0 110.0 ## with missings: x <- francdat x[3,5] <- NA x[4,2] <- x[4,4] <- NA x[5,6]  <- NA x[6,2]  <- NA f2 <- freqCalc(x, keyVars=c(2,4,5,6),w=8) cbind(f2$fk, f2$Fk) #>      [,1]  [,2] #> [1,]    3 149.0 #> [2,]    2  84.5 #> [3,]    4 194.5 #> [4,]    3 563.0 #> [5,]    3 566.0 #> [6,]    2 549.0 #> [7,]    2  22.0 #> [8,]    3 149.0  ## test parameter 'alpha' f3a <- freqCalc(x, keyVars=c(2,4,5,6), w=8, alpha=1) f3b <- freqCalc(x, keyVars=c(2,4,5,6), w=8, alpha=0.5) f3c <- freqCalc(x, keyVars=c(2,4,5,6), w=8, alpha=0.1) data.frame(fka=f3a$fk, fkb=f3b$fk, fkc=f3c$fk) #>   fka fkb fkc #> 1   3 2.5 2.1 #> 2   2 1.5 1.1 #> 3   4 4.0 4.0 #> 4   3 2.5 2.1 #> 5   3 2.0 1.2 #> 6   2 1.5 1.1 #> 7   2 1.5 1.1 #> 8   3 2.5 2.1 data.frame(Fka=f3a$Fk, Fkb=f3b$Fk, Fkc=f3c$Fk) #>     Fka   Fkb   Fkc #> 1 149.0 129.5 113.9 #> 2  84.5  65.0  49.4 #> 3 194.5 194.5 194.5 #> 4 563.0 292.5  76.1 #> 5 566.0 553.5 543.5 #> 6 549.0 278.5  62.1 #> 7  22.0  13.5   6.7 #> 8 149.0 129.5 113.9"},{"path":"/reference/generateStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate one strata variable from multiple factors — generateStrata","title":"Generate one strata variable from multiple factors — generateStrata","text":"strata defined multiple variables (e.g. sex,age,country) one combined variable generated.","code":""},{"path":"/reference/generateStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate one strata variable from multiple factors — generateStrata","text":"","code":"generateStrata(df, stratavars, name)"},{"path":"/reference/generateStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate one strata variable from multiple factors — generateStrata","text":"df data.frame stratavars character vector variable name name name newly generated variable","code":""},{"path":"/reference/generateStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate one strata variable from multiple factors — generateStrata","text":"original data set one new column.","code":""},{"path":"/reference/generateStrata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate one strata variable from multiple factors — generateStrata","text":"Alexander Kowarik","code":""},{"path":"/reference/generateStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate one strata variable from multiple factors — generateStrata","text":"","code":"x <- testdata x <- generateStrata(x,c(\"sex\",\"urbrur\"),\"strataIDvar\") head(x) #>   urbrur roof walls water electcon relat sex age hhcivil   expend   income #> 1      2    4     3     3        1     1   1  46       2 90929693 57800000 #> 2      2    4     3     3        1     2   2  41       2 27338058 25300000 #> 3      2    4     3     3        1     3   1   9       1 26524717 69200000 #> 4      2    4     3     3        1     3   1   6       1 18073948 79600000 #> 5      2    4     2     3        1     1   1  52       2  6713247 90300000 #> 6      2    4     2     3        1     2   2  47       2 49057636 32900000 #>     savings ori_hid sampling_weight household_weights strataIDvar #> 1  116258.5       1             100          25.00000         1-2 #> 2  279345.0       1             100          25.00000         2-2 #> 3 5495381.0       1             100          25.00000         1-2 #> 4 8695862.0       1             100          25.00000         1-2 #> 5  203620.2       2             100          16.66667         1-2 #> 6 1021268.0       2             100          16.66667         2-2"},{"path":"/reference/get.sdcMicroObj.html","id":null,"dir":"Reference","previous_headings":"","what":"get.sdcMicroObj — get.sdcMicroObj","title":"get.sdcMicroObj — get.sdcMicroObj","text":"extract information sdcMicroObj-class-objects depending argument type","code":""},{"path":"/reference/get.sdcMicroObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.sdcMicroObj — get.sdcMicroObj","text":"","code":"get.sdcMicroObj(object, type)"},{"path":"/reference/get.sdcMicroObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.sdcMicroObj — get.sdcMicroObj","text":"object sdcMicroObj-class-object type character vector length 1 defining calculate|return|modify. Allowed types slotNames obj.","code":""},{"path":"/reference/get.sdcMicroObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.sdcMicroObj — get.sdcMicroObj","text":"slot sdcMicroObj-class-object depending argument type","code":""},{"path":"/reference/get.sdcMicroObj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get.sdcMicroObj — get.sdcMicroObj","text":"","code":"sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sl <- slotNames(sdc) res <- sapply(sl, function(x) get.sdcMicroObj(sdc, type=x)) str(res) #> List of 24 #>  $ origData         :'data.frame':\t93 obs. of  19 variables: #>   ..$ urbrur         : int [1:93] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ roof           : int [1:93] 2 2 2 2 2 4 4 4 4 4 ... #>   ..$ walls          : int [1:93] 3 3 3 3 3 2 2 2 2 2 ... #>   ..$ water          : int [1:93] 1 3 3 4 4 1 1 3 3 4 ... #>   ..$ electcon       : int [1:93] 4 4 4 1 4 1 1 1 1 1 ... #>   ..$ relat          : int [1:93] 1 3 1 3 2 3 2 3 2 3 ... #>   ..$ sex            : int [1:93] 1 1 2 1 2 1 2 1 2 1 ... #>   ..$ age            : int [1:93] 69 35 80 14 28 25 49 2 36 15 ... #>   ..$ hhcivil        : int [1:93] 1 1 4 1 2 1 2 1 2 1 ... #>   ..$ expend         : int [1:93] 30772412 77536815 15103477 99118978 55576313 46468920 20098853 4778454 58244413 89946151 ... #>   ..$ income         : num [1:93] 72500000 10100000 56700000 12300000 26300000 88600000 60600000 26300000 46900000 94400000 ... #>   ..$ savings        : num [1:93] 1230366 1856943 4807111 7195081 4934387 ... #>   ..$ ori_hid        : int [1:93] 893 621 621 667 658 625 632 222 201 676 ... #>   ..$ sampling_weight: int [1:93] 100 100 100 100 100 100 100 100 100 100 ... #>   ..$ represent      : int [1:93] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ category_count : int [1:93] 1 1 1 11 20 58 62 59 66 31 ... #>   ..$ relat2         : int [1:93] 10 30 10 30 10 30 10 30 10 30 ... #>   ..$ water2         : int [1:93] 10 10 10 20 20 10 10 10 10 20 ... #>   ..$ water3         : int [1:93] 100 100 100 200 200 100 100 100 100 200 ... #>  $ keyVars          : int [1:7] 1 2 3 4 5 6 7 #>  $ pramVars         : NULL #>  $ numVars          : int [1:3] 10 11 12 #>  $ ghostVars        : NULL #>  $ weightVar        : int 14 #>  $ hhId             : NULL #>  $ strataVar        : NULL #>  $ sensibleVar      : NULL #>  $ manipKeyVars     :'data.frame':\t93 obs. of  7 variables: #>   ..$ urbrur  : int [1:93] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ roof    : int [1:93] 2 2 2 2 2 4 4 4 4 4 ... #>   ..$ walls   : int [1:93] 3 3 3 3 3 2 2 2 2 2 ... #>   ..$ water   : int [1:93] 1 3 3 4 4 1 1 3 3 4 ... #>   ..$ electcon: int [1:93] 4 4 4 1 4 1 1 1 1 1 ... #>   ..$ relat   : int [1:93] 1 3 1 3 2 3 2 3 2 3 ... #>   ..$ sex     : int [1:93] 1 1 2 1 2 1 2 1 2 1 ... #>  $ manipPramVars    : NULL #>  $ manipNumVars     :'data.frame':\t93 obs. of  3 variables: #>   ..$ expend : int [1:93] 30772412 77536815 15103477 99118978 55576313 46468920 20098853 4778454 58244413 89946151 ... #>   ..$ income : num [1:93] 72500000 10100000 56700000 12300000 26300000 88600000 60600000 26300000 46900000 94400000 ... #>   ..$ savings: num [1:93] 1230366 1856943 4807111 7195081 4934387 ... #>  $ manipGhostVars   : NULL #>  $ manipStrataVar   : NULL #>  $ originalRisk     :List of 2 #>   ..$ global    :List of 5 #>   .. ..$ risk     : num 0.0465 #>   .. ..$ risk_ER  : num 4.33 #>   .. ..$ risk_pct : num 4.65 #>   .. ..$ threshold: num 0 #>   .. ..$ max_risk : num 0.01 #>   ..$ individual: num [1:93, 1:3] 0.0465 0.0465 0.0465 0.0465 0.0465 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:3] \"risk\" \"fk\" \"Fk\" #>  $ risk             :List of 3 #>   ..$ global    :List of 5 #>   .. ..$ risk     : num 0.0465 #>   .. ..$ risk_ER  : num 4.33 #>   .. ..$ risk_pct : num 4.65 #>   .. ..$ threshold: num 0 #>   .. ..$ max_risk : num 0.01 #>   ..$ individual: num [1:93, 1:3] 0.0465 0.0465 0.0465 0.0465 0.0465 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:3] \"risk\" \"fk\" \"Fk\" #>   ..$ numeric   : num 1 #>  $ utility          :List of 3 #>   ..$ il1  : num 0 #>   ..$ il1s : num 0 #>   ..$ eigen: num 0 #>  $ pram             : NULL #>  $ localSuppression : NULL #>  $ options          :List of 4 #>   ..$ seed            : logi NA #>   ..$ max_size        : num 1e+05 #>   ..$ randomizeRecords: logi FALSE #>   ..$ alpha           : num 1 #>  $ additionalResults: NULL #>  $ set              :List of 9 #>   ..$ : chr \"origData\" #>   ..$ : chr \"keyVars\" #>   ..$ : chr \"manipKeyVars\" #>   ..$ : chr \"numVars\" #>   ..$ : chr \"manipNumVars\" #>   ..$ : chr \"weightVar\" #>   ..$ : chr \"options\" #>   ..$ : chr \"risk\" #>   ..$ : chr \"utility\" #>  $ prev             : NULL #>  $ deletedVars      : NULL"},{"path":"/reference/globalRecode.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Recoding — globalRecode","title":"Global Recoding — globalRecode","text":"Global recoding variables","code":""},{"path":"/reference/globalRecode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Recoding — globalRecode","text":"","code":"globalRecode(obj, ...)"},{"path":"/reference/globalRecode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Recoding — globalRecode","text":"obj numeric vector, data.frame object class sdcMicroObj-class ... see possible arguments column: keyVar changed. Character vector length 1 specifying variable name recoded (required obj data.frame object class sdcMicroObj-class. breaks: either numeric vector cut points number giving number intervals x cut . labels: labels levels resulting category. default, labels constructed using \"(,b]\" interval notation.  labels = FALSE, simple integer codes returned instead factor. method: following arguments supported: “equidistant:” equal sized intervalls “logEqui:” equal sized intervalls log-transformed data “equalAmount:” intervalls approxiomately amount observations","code":""},{"path":"/reference/globalRecode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Recoding — globalRecode","text":"modified sdcMicroObj-class factor, unless labels = FALSE results mere integer level codes.","code":""},{"path":"/reference/globalRecode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global Recoding — globalRecode","text":"labels parameter specified, values used name factor levels.  none specified, factor level labels constructed.","code":""},{"path":"/reference/globalRecode.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Global Recoding — globalRecode","text":"globalRecode can applied vectors stored factors sdcMicro >= 4.7.0!","code":""},{"path":"/reference/globalRecode.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Global Recoding — globalRecode","text":"Templ, M. Kowarik, . Meindl, B. Statistical Disclosure Control Micro-Data Using R Package sdcMicro. Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4","code":""},{"path":[]},{"path":"/reference/globalRecode.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Global Recoding — globalRecode","text":"Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/globalRecode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Recoding — globalRecode","text":"","code":"data(free1) free1 <- as.data.frame(free1)  ## application to a vector head(globalRecode(free1$AGE, breaks=c(1,9,19,29,39,49,59,69,100), labels=1:8)) #> [1] 5 3 5 3 3 3 #> Levels: 1 2 3 4 5 6 7 8 table(globalRecode(free1$AGE, breaks=c(1,9,19,29,39,49,59,69,100), labels=1:8)) #>  #>   1   2   3   4   5   6   7   8  #>   0 312 815 968 717 455 511 222   ## application to a data.frame # automatic labels table(globalRecode(free1, column=\"AGE\", breaks=c(1,9,19,29,39,49,59,69,100))$AGE) #>  #>    (1,9]   (9,19]  (19,29]  (29,39]  (39,49]  (49,59]  (59,69] (69,100]  #>        0      312      815      968      717      455      511      222   ## calculation of brea-points using different algorithms table(globalRecode(free1$AGE, breaks=6)) #>  #> [14,24] (24,34] (34,44] (44,55] (55,65] (65,75]  #>     689     910     925     551     496     429  table(globalRecode(free1$AGE, breaks=6, method=\"logEqui\")) #>  #>    [6,10]   (10,18]   (18,33]   (33,61]  (61,110] (110,201]  #>         0       251      1248      1870       631         0  table(globalRecode(free1$AGE, breaks=6, method=\"equalAmount\")) #>  #> [15,24] (24,32] (32,38] (38,47] (47,61] (61,74]  #>     689     725     590     697     668     631   ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- globalRecode(sdc, column=\"water\", breaks=3) table(get.sdcMicroObj(sdc, type=\"manipKeyVars\")$water) #>  #>  [0,3]  (3,7] (7,10]  #>     47     40      6"},{"path":"/reference/groupAndRename.html","id":null,"dir":"Reference","previous_headings":"","what":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"input object class sdcMicroObj-class, specified factor-variable recoded factor less levels risk-measures automatically recomputed.","code":""},{"path":"/reference/groupAndRename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"","code":"groupAndRename(obj, var, before, after, addNA = FALSE)"},{"path":"/reference/groupAndRename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"obj object class sdcMicroObj-class var name keyVariable change vector levels recoding name new level recoding addNA logical, TRUE missing values input variables added level specified argument .","code":""},{"path":"/reference/groupAndRename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"modified sdcMicroObj-class","code":""},{"path":"/reference/groupAndRename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"input class data.frame, result data.frame modified column specified var. input class factor, result factor different levels.","code":""},{"path":"/reference/groupAndRename.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"Templ, M. Kowarik, . Meindl, B.  Statistical Disclosure Control Micro-Data Using R Package sdcMicro.  Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4","code":""},{"path":"/reference/groupAndRename.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"Bernhard Meindl","code":""},{"path":"/reference/groupAndRename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join levels of a variables in an object of class\nsdcMicroObj-class or factor or data.frame — groupAndRename","text":"","code":"## for objects of class sdcMicro: data(testdata2) testdata2$urbrur <- as.factor(testdata2$urbrur) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- groupAndRename(sdc, var=\"urbrur\", before=c(\"1\",\"2\"), after=c(\"1\"))"},{"path":"/reference/il_additional.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Information-Loss measures — IL_correl","title":"Additional Information-Loss measures — IL_correl","text":"Measures IL_correl() IL_variables() proposed Andrzej Mlodak (theoretically) bounded 0 1.","code":""},{"path":"/reference/il_additional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional Information-Loss measures — IL_correl","text":"","code":"IL_correl(x, xm)  # S3 method for il_correl print(x, digits = 3, ...)  IL_variables(x, xm)  # S3 method for il_variables print(x, digits = 3, ...)"},{"path":"/reference/il_additional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional Information-Loss measures — IL_correl","text":"x object coercible data.frame representing original dataset xm object coercible data.frame representing perturbed, modified dataset digits number digits used rounding displaying results ... additional parameter print-methods; currently ignored","code":""},{"path":"/reference/il_additional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional Information-Loss measures — IL_correl","text":"corresponding information-loss measure","code":""},{"path":"/reference/il_additional.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Additional Information-Loss measures — IL_correl","text":"IL_correl(): information-loss measure can applied common numerically scaled variables x xm. based diagonal entries inverse correlation matrices original perturbed data. IL_variables(): common-variables x xm individual distance-functions depend class variable; specifically functions different numeric variables, ordered-factors character/factor variables. individual distances summed scaled n * m n number records m number (common) variables. Details can found references implementation IL_correl() differs slightly original proposition Mlodak, . (2020) constant multiplier changed 1 / sqrt(2) instead 1/2 better efficiency interpretability measure.","code":""},{"path":"/reference/il_additional.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Additional Information-Loss measures — IL_correl","text":"Mlodak, . (2020). Information loss resulting statistical disclosure control output data, Wiadomosci Statystyczne. Polish Statistician, 2020, 65(9), 7-27, DOI: 10.5604/01.3001.0014.4121 Mlodak, . (2019). Using Complex Measure Assessment Information Loss Due Microdata Disclosure Control, Przegląd Statystyczny, 2019, 66(1), 7-26, DOI: 10.5604/01.3001.0013.8285","code":""},{"path":"/reference/il_additional.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Additional Information-Loss measures — IL_correl","text":"Bernhard Meindl bernhard.meindl@statistik.gv.","code":""},{"path":"/reference/il_additional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional Information-Loss measures — IL_correl","text":"","code":"data(\"Tarragona\", package = \"sdcMicro\") res1 <- addNoise(obj = Tarragona, variables = colnames(Tarragona), noise = 100) IL_correl(x = as.data.frame(res1$x), xm = as.data.frame(res1$xm)) #> Number of records (x):  834  | Number of records (xm):  834  #> Number of common numeric variables:  13  #> Overall information loss:  0.451   res2 <- addNoise(obj = Tarragona, variables = colnames(Tarragona), noise = 25)  IL_correl(x = as.data.frame(res2$x), xm = as.data.frame(res2$xm)) #> Number of records (x):  834  | Number of records (xm):  834  #> Number of common numeric variables:  13  #> Overall information loss:  0.221   # creating test-inputs n <- 150 x <- xm <- data.frame(   v1 = factor(sample(letters[1:5], n, replace = TRUE), levels = letters[1:5]),   v2 = rnorm(n),   v3 = runif(3),   v4 = ordered(sample(LETTERS[1:3], n, replace = TRUE), levels = c(\"A\", \"B\", \"C\")) ) xm$v1[1:5] <- \"a\" xm$v2 <- rnorm(n, mean = 5) xm$v4[1:5] <- \"A\" IL_variables(x, xm) #> Number of records:  150  #> Number of variables:  4  #> Overall information loss:  0.228  #> Individual information losses for variables: #>  variable  loss #>        v1 0.033 #>        v2 0.867 #>        v3 0.000 #>        v4 0.010"},{"path":"/reference/importProblem.html","id":null,"dir":"Reference","previous_headings":"","what":"importProblem — importProblem","title":"importProblem — importProblem","text":"reads sdcProblem code exported within sdcApp.","code":""},{"path":"/reference/importProblem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"importProblem — importProblem","text":"","code":"importProblem(path)"},{"path":"/reference/importProblem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"importProblem — importProblem","text":"path file path","code":""},{"path":"/reference/importProblem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"importProblem — importProblem","text":"object class sdcMicro_GUI_export object class 'simple.error'","code":""},{"path":"/reference/importProblem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"importProblem — importProblem","text":"Bernhard Meindl","code":""},{"path":"/reference/indivRisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual Risk computation — indivRisk","title":"Individual Risk computation — indivRisk","text":"Estimation risk observation. risk computed one can use e.g. function localSuppr() protection values high risk.  details can found link given .","code":""},{"path":"/reference/indivRisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual Risk computation — indivRisk","text":"","code":"indivRisk(x, method = \"approx\", qual = 1, survey = TRUE)"},{"path":"/reference/indivRisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual Risk computation — indivRisk","text":"x object class freqCalc method approx (default) exact qual final correction factor survey TRUE, survey data FALSE deal population.","code":""},{"path":"/reference/indivRisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual Risk computation — indivRisk","text":"rk:  base individual risk method: method qual: final correction factor fk: frequency count knames: colnames key variables","code":""},{"path":"/reference/indivRisk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Individual Risk computation — indivRisk","text":"S4 class sdcMicro objects supported function measure_risk also estimates individual risk method.","code":""},{"path":"/reference/indivRisk.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Individual Risk computation — indivRisk","text":"base individual risk method developed Benedetti, Capobianchi Franconi","code":""},{"path":"/reference/indivRisk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Individual Risk computation — indivRisk","text":"Templ, M. Kowarik, . Meindl, B.  Statistical Disclosure Control Micro-Data Using R Package sdcMicro.  Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Franconi, L. Polettini, S. (2004) Individual risk estimation mu-Argus: review. Privacy Statistical Databases, Lecture Notes Computer Science, 262--272. Springer Machanavajjhala, . Kifer, D. Gehrke, J. Venkitasubramaniam, M. (2007) l-Diversity: Privacy Beyond k-Anonymity.  ACM Trans. Knowl. Discov. Data, 1(1) additionally, look vignettes sdcMicro reading.","code":""},{"path":[]},{"path":"/reference/indivRisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Individual Risk computation — indivRisk","text":"Matthias Templ. Bug method “exact” fixed since version 2.6.5. Youri Baeyens.","code":""},{"path":"/reference/indivRisk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual Risk computation — indivRisk","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) f <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) f #>  #>  -------------------------- #> 4 obs. violate 2-anonymity  #> 8 obs. violate 3-anonymity  #>  -------------------------- f$fk #> [1] 2 2 2 1 1 1 1 2 f$Fk #> [1] 110.0  84.5  84.5  17.0 541.0   8.0   5.0 110.0 ## individual risk calculation: indivf <- indivRisk(f) indivf$rk #> [1] 0.01714426 0.02204233 0.02204233 0.17707583 0.01165448 0.29706308 0.40235948 #> [8] 0.01714426"},{"path":"/reference/infoLoss.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate information loss after targeted record swapping — infoLoss","title":"Calculate information loss after targeted record swapping — infoLoss","text":"Calculate information loss targeted record swapping using original swapped micro data. Information loss calculated table counts defined parameter `table_vars` using either implemented information loss measures like absolute deviaton, relative absolute deviation absolute deviation square roots custom metric, See details .","code":""},{"path":"/reference/infoLoss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate information loss after targeted record swapping — infoLoss","text":"","code":"infoLoss(   data,   data_swapped,   table_vars,   metric = c(\"absD\", \"relabsD\", \"abssqrtD\"),   custom_metric = NULL,   hid = NULL,   probs = sort(c(seq(0, 1, by = 0.1), 0.95, 0.99)),   quantvals = c(0, 0.02, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, Inf),   apply_quantvals = c(\"relabsD\", \"abssqrtD\"),   exclude_zeros = FALSE,   only_inner_cells = FALSE )"},{"path":"/reference/infoLoss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate information loss after targeted record swapping — infoLoss","text":"data original micro data set, must either `data.table` `data.frame`. data_swapped micro data set targeted record swapping applied. Must either `data.table` `data.frame`. table_vars column names `data` `data_swapped`. Defines variables (multidimensional) frequency table constructed. Information loss calculated applying metric `metric` `custom_merics` cell-counts margin counts table `data` `data_swapped`. metric character vector containing one already implemented metrices: \"absD\",\"relabsD\" /\"abssqrtD\". custom_metric function (named) list functions. Functions defined must form `fun(x,y,...)` `x` `y` expect numeric values length. output functions must numeric vector length `x` `y`. hid `NULL` character containing household id `data` `data_swapped`. `NULL` frequencies reflect number households, otherwise frequencies reflect number persons. probs numeric vector containing values inervall [0,1]. quantvals optional numeric vector defines groups used cumulative outputs. applied results `m` information loss metric `cut(m,breaks=quantvals,include.lowest=TRUE)`, see also return values. apply_quantvals character vector defining output metrices `quantvals` applied . exclude_zeros `TRUE` `FALSE`, `TRUE` 0 cells frequency table using `data_swapped` ignored. only_inner_cells `TRUE` `FALSE`, `TRUE` inner cells frequency table defined `table_vars` compared. Otherwise also tables margins bei calculated.","code":""},{"path":"/reference/infoLoss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate information loss after targeted record swapping — infoLoss","text":"Returns list containing: * `cellvalues`: `data.table` showing long format table cell frequency counts `data` ~ `count_o` `data_swapped` ~ `count_s`.  * `overview`: `data.table` containing disribution `noise` number cells percentage. `noise` ist calculated difference cell values frequency table generated original swapped data * `measures`: `data.table` containing quantiles mean (column `waht`) distribution information loss metrices applied table cell. quantiles defined parameter `probs`. * `cumdistr\\*`: `data.table` containing cumulative distribution information loss metrices. Distribution shown number cells (`cnt`) percentage (`pct`). Column `cat` shows unique values information loss metric grouping defined `quantvals`.     * `false_zero`: number table cells non-zero using `data` zero using `data_swapped`. * `false_nonzero`: number table cells zero using `data` non-zero using `data_swapped`. * `exclude_zeros`: value passed `exclude_zero` calling function.","code":""},{"path":"/reference/infoLoss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate information loss after targeted record swapping — infoLoss","text":"First frequency tables build `data` `data_swapped` using variables defined `table_vars`. default also table margins calculated, see parameter `only_inner_cells = FALSE`. information loss metrices defined either `metric` `custom_metric` applied table cells frequency tables. done sense `metric(x,y)` `metric` information loss, `x` cell table created `data` `y` cell table created `data_swapped`.  One custom metrices can applied using parameter `custom_metric`, see also examples.","code":""},{"path":"/reference/infoLoss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate information loss after targeted record swapping — infoLoss","text":"","code":"# generate dummy data  seed <- 2021 set.seed(seed) nhid <- 10000 dat <- createDat( nhid ) #> Warning: Item 7 has 10000 rows but longest item has 34827; recycled with remainder. #> Warning: Item 8 has 10000 rows but longest item has 34827; recycled with remainder. #> Warning: Item 9 has 10000 rows but longest item has 34827; recycled with remainder.  # define paramters for swapping k_anonymity <- 1 swaprate <- .05 similar <- list(c(\"hsize\")) hier <- c(\"nuts1\",\"nuts2\") carry_along <- c(\"nuts3\",\"lau2\") risk_variables <- c(\"ageGroup\",\"national\") hid <- \"hid\"  # apply record swapping dat_s <- recordSwap(data = dat, hid = hid, hierarchy = hier,                     similar = similar, swaprate = swaprate,                     k_anonymity = k_anonymity,                     risk_variables = risk_variables,                     carry_along = carry_along,                     return_swapped_id = TRUE,                     seed=seed) #> Recordswapping was successful!   # calculate informationn loss # for the table nuts2 x national iloss <- infoLoss(data=dat, data_swapped = dat_s,                   table_vars = c(\"nuts2\",\"national\")) iloss$measures # distribution of information loss measures #>       what      absD   abssqrtD     relabsD #>  1:    Min  0.000000 0.00000000 0.000000000 #>  2:    10%  0.000000 0.00000000 0.000000000 #>  3:    20%  0.000000 0.00000000 0.000000000 #>  4:    30%  1.000000 0.02266939 0.002054402 #>  5:    40%  2.000000 0.04606798 0.004246399 #>  6:   Mean  3.642105 0.08434515 0.007822526 #>  7: Median  2.000000 0.04950741 0.004914005 #>  8:    60%  4.000000 0.09067496 0.008216906 #>  9:    70%  4.000000 0.09539014 0.009058038 #> 10:    80%  6.000000 0.13459612 0.012048388 #> 11:    90% 10.000000 0.23095825 0.021393566 #> 12:    95% 13.000000 0.29168934 0.026492789 #> 13:    99% 14.300000 0.32595429 0.031417566 #> 14:    Max 19.000000 0.44860772 0.043280182 iloss$false_zero # no false zeros #> [1] 0 iloss$false_nonzero # no false non-zeros #> [1] 0  # frequency tables of households accross # nuts2 x hincome  iloss <- infoLoss(data=dat, data_swapped = dat_s,                   table_vars = c(\"nuts2\",\"hincome\"),                   hid = \"hid\") iloss$measures   #>       what     absD   abssqrtD    relabsD #>  1:    Min 0.000000 0.00000000 0.00000000 #>  2:    10% 0.000000 0.00000000 0.00000000 #>  3:    20% 0.000000 0.00000000 0.00000000 #>  4:    30% 1.000000 0.05478394 0.01204819 #>  5:    40% 1.000000 0.05913160 0.01400626 #>  6:   Mean 1.508571 0.09285244 0.02290000 #>  7: Median 1.000000 0.06225775 0.01562500 #>  8:    60% 2.000000 0.11279864 0.02544628 #>  9:    70% 2.000000 0.12560138 0.03125000 #> 10:    80% 3.000000 0.17521323 0.04132742 #> 11:    90% 3.600000 0.22232623 0.05495495 #> 12:    95% 5.000000 0.28316703 0.06809524 #> 13:    99% 6.260000 0.36480767 0.08950688 #> 14:    Max 7.000000 0.46585680 0.11666667  # define custom metric squareD <- function(x,y){   (x-y)^2 }  iloss <- infoLoss(data=dat, data_swapped = dat_s,                  table_vars = c(\"nuts2\",\"national\"),                  custom_metric = list(squareD=squareD)) iloss$measures # includes custom loss as well #>       what      absD   abssqrtD     relabsD   squareD #>  1:    Min  0.000000 0.00000000 0.000000000   0.00000 #>  2:    10%  0.000000 0.00000000 0.000000000   0.00000 #>  3:    20%  0.000000 0.00000000 0.000000000   0.00000 #>  4:    30%  1.000000 0.02266939 0.002054402   1.00000 #>  5:    40%  2.000000 0.04606798 0.004246399   4.00000 #>  6:   Mean  3.642105 0.08434515 0.007822526  29.11579 #>  7: Median  2.000000 0.04950741 0.004914005   4.00000 #>  8:    60%  4.000000 0.09067496 0.008216906  16.00000 #>  9:    70%  4.000000 0.09539014 0.009058038  16.00000 #> 10:    80%  6.000000 0.13459612 0.012048388  36.00000 #> 11:    90% 10.000000 0.23095825 0.021393566 100.00000 #> 12:    95% 13.000000 0.29168934 0.026492789 169.00000 #> 13:    99% 14.300000 0.32595429 0.031417566 205.90000 #> 14:    Max 19.000000 0.44860772 0.043280182 361.00000"},{"path":"/reference/kAnon_violations.html","id":null,"dir":"Reference","previous_headings":"","what":"kAnon_violations — kAnon_violations","title":"kAnon_violations — kAnon_violations","text":"returns number observations violating k-anonymity.","code":""},{"path":"/reference/kAnon_violations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kAnon_violations — kAnon_violations","text":"","code":"kAnon_violations(object, weighted, k)  # S4 method for sdcMicroObj,logical,numeric kAnon_violations(object, weighted, k)"},{"path":"/reference/kAnon_violations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kAnon_violations — kAnon_violations","text":"object sdcMicroObj-class object weighted TRUE FALSE defining sampling weights taken account k positive number defining parameter k","code":""},{"path":"/reference/kAnon_violations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kAnon_violations — kAnon_violations","text":"number records violating k-anonymity based  unweighted sample data (case parameter weighted FALSE) computing number observations estimated violate k-anonymity population case  parameter weighted equals TRUE.","code":""},{"path":"/reference/localSupp.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Suppression — localSupp","title":"Local Suppression — localSupp","text":"simple method perfom local suppression.","code":""},{"path":"/reference/localSupp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Suppression — localSupp","text":"","code":"localSupp(obj, threshold = 0.15, keyVar)"},{"path":"/reference/localSupp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Suppression — localSupp","text":"obj object class freqCalc sdcMicroObj-class. threshold threshold individual risk keyVar Variable values might suppressed","code":""},{"path":"/reference/localSupp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Suppression — localSupp","text":"updated object class freqCalc sdcMicroObj-class object manipulated data.","code":""},{"path":"/reference/localSupp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local Suppression — localSupp","text":"Values high risk (threshold) certain variable (parameter keyVar) suppressed.","code":""},{"path":"/reference/localSupp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local Suppression — localSupp","text":"Templ, M. Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008. http://www.tdp.cat/issues/abs.a004a08.php Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4","code":""},{"path":[]},{"path":"/reference/localSupp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Suppression — localSupp","text":"Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/localSupp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Suppression — localSupp","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) keyVars <- paste0(\"Key\",1:4) if (FALSE) { # dontrun because Examples with CPU time > 2.5 times elapsed time f <- freqCalc(francdat, keyVars=keyVars,w=8) f f$fk f$Fk ## individual risk calculation: indivf <- indivRisk(f) indivf$rk ## Local Suppression localS <- localSupp(f, keyVar=\"Key4\", threshold=0.15) f2 <- freqCalc(localS$freqCalc, keyVars=keyVars, w=8) indivf2 <- indivRisk(f2) indivf2$rk identical(indivf$rk, indivf2$rk)  ## select another keyVar and run localSupp once again, # if you think the table is not fully protected  ## for objects of class sdcMicro: data(testdata) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- localSupp(sdc, keyVar='urbrur', threshold=0.045) print(sdc, type=\"ls\") }"},{"path":"/reference/localSuppression.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Suppression to obtain k-anonymity — localSuppression","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"Algorithm achieve k-anonymity performing local suppression.","code":""},{"path":"/reference/localSuppression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"","code":"localSuppression(obj, k = 2, importance = NULL, combs = NULL, ...)  kAnon(obj, k = 2, importance = NULL, combs = NULL, ...)"},{"path":"/reference/localSuppression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"obj sdcMicroObj-class-object data.frame k threshold k-anonymity importance numeric vector numbers 1 n (n=length vector keyVars).  vector represents \"importance\" variables used local suppression order obtain k-anonymity. key-variables importance=1 - possible - suppressed, key-variables importance=n used whenever possible. combs numeric vector. specified, algorithm provide k-anonymity combination n key variables (n value ith element parameter. example, combs=c(4,3), algorithm provide k-anonymity combinations 4 key variables k-anonymity combinations 3 key variables. possible apply different k subsets specifying k vector. k one element, value k used subgroups. ... see arguments keyVars: names (indices) categorical key variables (data-frame method) strataVars: name (index) variable used stratification purposes, used data.frame method. means k-anonymity provided within category specified variable. alpha: numeric value 0 1 specifying much keys contain missing values (NAs) contribute calculation fk Fk. default value 1, nothing changes respect implementation prior versions. wildcard-match counted alpha=0 keys missing values basically ignored. Used data-frame method method sdcMicroObj-class-objects, value extracted slot options.","code":""},{"path":"/reference/localSuppression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"Manipulated data set suppressions k-anonymity respect specified key-variables manipulated data stored sdcMicroObj-class.","code":""},{"path":"/reference/localSuppression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"algorithm provides k-anonymized data set suppressing values key variables. algorithm tries find optimal solution suppress values possible considers specified importance vector. specified, importance vector constructed way key variables high number characteristics considered less important key variables low number characteristics. implementation provides k-anonymity per strata, slot 'strataVar' set sdcMicroObj-class parameter 'strataVar' used appying data.frame method. details, look examples provided.","code":""},{"path":"/reference/localSuppression.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"Deprecated methods 'localSupp2' 'localSupp2Wrapper' longer available sdcMicro > 4.5.0. kAnon intutitive term localSuppression aim always obtain k-anonymity parts data.","code":""},{"path":"/reference/localSuppression.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4 Templ, M. Kowarik, . Meindl, B. Statistical Disclosure Control Micro-Data Using R Package sdcMicro. Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04","code":""},{"path":"/reference/localSuppression.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"Bernhard Meindl, Matthias Templ","code":""},{"path":"/reference/localSuppression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Suppression to obtain k-anonymity — localSuppression","text":"","code":"data(francdat) ## Local Suppression localS <- localSuppression(francdat, keyVar=c(4,5,6)) localS #>  #> ----------------------- #> Total number of suppressions in the key variables: 4 (new: 4) #>  #> Number of suppressions by key variables: #> (in parenthesis, the total number suppressions is shown) #>  #>    Key2  Key3  Key4 #> 1 1 (1) 0 (0) 3 (3) #>  #> 2-anonymity == TRUE #> ----------------------- plot(localS)  if (FALSE) { ## for objects of class sdcMicro, no stratification data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- localSuppression(sdc)  ## for objects of class sdcMicro, with stratification testdata2$ageG <- cut(testdata2$age, 5, labels=paste0(\"AG\",1:5)) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight',   strataVar='ageG') sdc <- localSuppression(sdc)  ## it is also possible to provide k-anonymity for subsets of key-variables ## with different parameter k! ## in this case we want to provide 10-anonymity for all combinations ## of 5 key variables, 20-anonymity for all combinations with 4 key variables ## and 30-anonymity for all combinations of 3 key variables. sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') combs <- 5:3 k <- c(10,20,30) sdc <- localSuppression(sdc, k=k, combs=combs)  ## data.frame method (no stratification) keyVars <- c(\"urbrur\",\"roof\",\"walls\",\"water\",\"electcon\",\"relat\",\"sex\") strataVars <- c(\"ageG\") inp <- testdata2[,c(keyVars, strataVars)] ls <- localSuppression(inp, keyVars=1:7) print(ls) plot(ls)  ## data.frame method (with stratification) ls <- kAnon(inp, keyVars=1:7, strataVars=8) print(ls) plot(ls, showTotalSupps=TRUE) }"},{"path":"/reference/mafast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast and Simple Microaggregation — mafast","title":"Fast and Simple Microaggregation — mafast","text":"Function perform fast simple (primitive) method microaggregation. (large datasets)","code":""},{"path":"/reference/mafast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast and Simple Microaggregation — mafast","text":"","code":"mafast(obj, variables = NULL, by = NULL, aggr = 3, measure = mean)"},{"path":"/reference/mafast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast and Simple Microaggregation — mafast","text":"obj either sdcMicroObj-class-object data.frame variables variables microaggregate. obj class sdcMicroObj numerical key variables chosen per default. grouping variable microaggregation. obj class sdcMicroObj strata variables chosen per default. aggr aggregation level (default=3) measure aggregation statistic, mean, median, trim, onestep (default = mean)","code":""},{"path":"/reference/mafast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast and Simple Microaggregation — mafast","text":"‘obj’ class sdcMicroObj-class corresponding slots filled, like manipNumVars, risk utility.  ‘obj’ class “data.frame” “matrix” object class returned.","code":""},{"path":[]},{"path":"/reference/mafast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast and Simple Microaggregation — mafast","text":"Alexander Kowarik","code":""},{"path":"/reference/mafast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast and Simple Microaggregation — mafast","text":"","code":"data(Tarragona) m1 <- mafast(Tarragona, variables=c(\"GROSS.PROFIT\",\"OPERATING.PROFIT\",\"SALES\"),aggr=3) data(testdata) m2 <- mafast(testdata,variables=c(\"expend\",\"income\",\"savings\"),aggr=50,by=\"sex\") summary(m2) #>      urbrur           roof           walls           water       #>  Min.   :1.000   Min.   :2.000   Min.   :2.000   Min.   :1.000   #>  1st Qu.:2.000   1st Qu.:4.000   1st Qu.:2.000   1st Qu.:3.000   #>  Median :2.000   Median :4.000   Median :3.000   Median :4.000   #>  Mean   :1.859   Mean   :3.681   Mean   :2.803   Mean   :3.456   #>  3rd Qu.:2.000   3rd Qu.:4.000   3rd Qu.:3.000   3rd Qu.:4.000   #>  Max.   :2.000   Max.   :9.000   Max.   :9.000   Max.   :9.000   #>     electcon         relat           sex             age           hhcivil      #>  Min.   :1.000   Min.   :1.00   Min.   :1.000   Min.   : 0.00   Min.   :1.000   #>  1st Qu.:1.000   1st Qu.:2.00   1st Qu.:1.000   1st Qu.: 9.00   1st Qu.:1.000   #>  Median :1.000   Median :3.00   Median :1.000   Median :19.00   Median :1.000   #>  Mean   :2.002   Mean   :2.52   Mean   :1.499   Mean   :24.11   Mean   :1.509   #>  3rd Qu.:4.000   3rd Qu.:3.00   3rd Qu.:2.000   3rd Qu.:36.00   3rd Qu.:2.000   #>  Max.   :4.000   Max.   :9.00   Max.   :2.000   Max.   :95.00   Max.   :4.000   #>      expend             income            savings           ori_hid       #>  Min.   : 1117110   Min.   :  730220   Min.   : 104676   Min.   :   1.0   #>  1st Qu.:25091280   1st Qu.:24260000   1st Qu.:2370492   1st Qu.: 241.0   #>  Median :50335953   Median :49976000   Median :4999592   Median : 494.0   #>  Mean   :50499785   Mean   :50115690   Mean   :4964039   Mean   : 493.4   #>  3rd Qu.:75280845   3rd Qu.:74544000   3rd Qu.:7486752   3rd Qu.: 742.2   #>  Max.   :98533212   Max.   :98208333   Max.   :9837175   Max.   :1000.0   #>  sampling_weight household_weights #>  Min.   :100     Min.   :  8.333   #>  1st Qu.:100     1st Qu.: 14.286   #>  Median :100     Median : 20.000   #>  Mean   :100     Mean   : 21.834   #>  3rd Qu.:100     3rd Qu.: 25.000   #>  Max.   :100     Max.   :100.000    ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- dRisk(sdc) sdc@risk$numeric #> [1] 1 sdc1 <- mafast(sdc,aggr=4) sdc1@risk$numeric #> [1] 0.483871  sdc2 <- mafast(sdc,aggr=10) sdc2@risk$numeric #> [1] 0.01075269 if (FALSE) { ### Performance tests x <- testdata for(i in 1:20){   x <- rbind(x,testdata) } system.time(xx <- mafast(x,variables=c(\"expend\",\"income\",\"savings\"),aggr=50,by=\"sex\")) }"},{"path":"/reference/measure_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Disclosure Risk for Categorical Variables — measure_risk","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"function measures disclosure risk weighted unweighted data. computes individual risk (household risk reasonable) global risk. also computes risk threshold based global risk value. Prints 'measure_risk'-object Prints 'ldiversity'-object","code":""},{"path":"/reference/measure_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"","code":"measure_risk(obj, ...)  ldiversity(obj, ldiv_index = NULL, l_recurs_c = 2, missing = -999, ...)  # S3 method for measure_risk print(x, ...)  # S3 method for ldiversity print(x, ...)"},{"path":"/reference/measure_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"obj Object class sdcMicroObj-class ... see arguments data: Input data, data.frame. keyVars: names (indices) categorical key variables (data-frame method) w: name variable containing sample weights hid: name clustering variable, e.g. household ID max_global_risk: Maximal global risk threshold computation fast_hier: TRUE fast approximation computed household data provided. ldiv_index indices (names) variables used l-diversity l_recurs_c l-Diversity Constant missing integer value used missing value C++ routine x Output measure_risk() ldiversity()","code":""},{"path":"/reference/measure_risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"modified sdcMicroObj-class object list following elements: global_risk_ER: expected number re-identification. global_risk: global risk (sum indivdual risks). global_risk_pct: global risk percent. Res: matrix risk, frequency sample grossed-frequency population (hierachical risk) observation. global_threshold: given max_global_risk threshold risk observations. max_global_risk: input max_global_risk function. hier_risk_ER: expected number re-identification household structure. hier_risk: global risk household structure (sum indivdual risks). hier_risk_pct: global risk household structure percent. ldiverstiy: Matrix Distinct_Ldiversity, Entropy_Ldiversity Recursive_Ldiversity sensitivity variable. Prints risk-information console Information L-Diversity Measures console","code":""},{"path":"/reference/measure_risk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"used risk disclosure individuals within family considered statistical independent. Internally, function freqCalc() indivRisk used estimation. Measuring individual risk: individual risk approach based -called super-population models. models population frequency counts modeled given certain distribution.  estimation procedure sample frequency counts given population frequency counts modeled assuming negative binomial distribution. used estimation individual risk. extensive theory can found Skinner (1998), approximation formulas individual risk used described Franconi Polettini (2004). Measuring hierarchical risk: “hid” - index variable holding information hierarchical cluster structures (e.g., individuals clustered households) - provided, hierarchical risk additional estimated.  Note risk re-identifying individual within household may also affect probability disclosure members household. Thus, household cluster-structure data must taken account estimating disclosure risks. commonly assumed risk re-identification household risk least one member household can disclosed. Thus probability can simply estimated individual risks 1 minus probability member household can identified. Global risk: sum individual risks dataset gives expected number re-identifications serves measure global risk. l-Diversity: “ldiv_index” unequal NULL, .e. indices sensible variables specified, various measures l-diversity calculated. l-diverstiy extension well-known k-anonymity approach also uniqueness sensible variables pattern spanned key variables evaluated.","code":""},{"path":"/reference/measure_risk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"Franconi, L. Polettini, S. (2004) Individual risk estimation mu-Argus: review. Privacy Statistical Databases, Lecture Notes Computer Science, 262--272. Springer Machanavajjhala, . Kifer, D. Gehrke, J. Venkitasubramaniam, M. (2007) l-Diversity: Privacy Beyond k-Anonymity.  ACM Trans. Knowl. Discov. Data, 1(1) Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4 . #' Templ, M. Kowarik, . Meindl, B. Statistical Disclosure Control Micro-Data Using R Package sdcMicro. Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04","code":""},{"path":[]},{"path":"/reference/measure_risk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"Alexander Kowarik, Bernhard Meindl, Matthias Templ, Bernd Prantner, minor parts IHSN C++ source","code":""},{"path":"/reference/measure_risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disclosure Risk for Categorical Variables — measure_risk","text":"","code":"## measure_risk with sdcMicro objects: data(testdata) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','water','electcon'), numVars=c('expend','income','savings'), w='sampling_weight')  ## risk is already estimated and available in... names(sdc@risk) #> [1] \"global\"     \"individual\" \"numeric\"     ## measure risk on data frames or matrices: res <- measure_risk(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\")) print(res) #>  #> -------------------------- #> 165 obs. with higher risk as the main part #> Expected no. of re-identifications: #> 93 #> (2.03%) #> Threshold:0.03 #>  (for maximal global risk0.01) #> -------------------------- head(res$Res) #>             risk  fk  Fk #> [1,] 0.002785515 359 359 #> [2,] 0.002849003 351 351 #> [3,] 0.002785515 359 359 #> [4,] 0.002785515 359 359 #> [5,] 0.006211180 161 161 #> [6,] 0.006666667 150 150 resw <- measure_risk(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\"),w=\"sampling_weight\") print(resw) #>  #> -------------------------- #> 0 obs. with higher risk as the main part #> Expected no. of re-identifications: #> 1.53 #> (0.03%) #> Threshold:Inf #>  (for maximal global risk0.01) #> -------------------------- head(resw$Res) #>              risk  fk    Fk #> [1,] 2.793218e-05 359 35900 #> [2,] 2.857061e-05 351 35100 #> [3,] 2.793218e-05 359 35900 #> [4,] 2.793218e-05 359 35900 #> [5,] 6.249609e-05 161 16100 #> [6,] 6.710959e-05 150 15000 res1 <- ldiversity(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\"),ldiv_index=\"electcon\") print(res1) #> -------------------------- #> L-Diversity Measures  #> -------------------------- #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.000   2.000   3.000   2.374   3.000   3.000  head(res1) #>      electcon_Distinct_Ldiversity electcon_Entropy_Ldiversity #> [1,]                            3                    1.765424 #> [2,]                            3                    1.855345 #> [3,]                            3                    1.765424 #> [4,]                            3                    1.765424 #> [5,]                            2                    1.172525 #> [6,]                            2                    1.130836 #>      electcon_Recursive_Ldiversity MultiEntropy_Ldiversity #> [1,]                             1                       0 #> [2,]                             1                       0 #> [3,]                             1                       0 #> [4,]                             1                       0 #> [5,]                             1                       0 #> [6,]                             1                       0 #>      MultiRecursive_Ldiversity #> [1,]                         0 #> [2,]                         0 #> [3,]                         0 #> [4,]                         0 #> [5,]                         0 #> [6,]                         0 res2 <- ldiversity(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\"),ldiv_index=c(\"electcon\",\"relat\")) print(res2) #> -------------------------- #> L-Diversity Measures  #> -------------------------- #>  electcon_Distinct_Ldiversity relat_Distinct_Ldiversity #>  Min.   :1.000                Min.   :1.000             #>  1st Qu.:2.000                1st Qu.:5.000             #>  Median :3.000                Median :5.000             #>  Mean   :2.374                Mean   :5.524             #>  3rd Qu.:3.000                3rd Qu.:7.000             #>  Max.   :3.000                Max.   :8.000             head(res2) #>      electcon_Distinct_Ldiversity electcon_Entropy_Ldiversity #> [1,]                            3                    1.765424 #> [2,]                            3                    1.855345 #> [3,]                            3                    1.765424 #> [4,]                            3                    1.765424 #> [5,]                            2                    1.172525 #> [6,]                            2                    1.130836 #>      electcon_Recursive_Ldiversity relat_Distinct_Ldiversity #> [1,]                             1                         5 #> [2,]                             1                         8 #> [3,]                             1                         5 #> [4,]                             1                         5 #> [5,]                             1                         5 #> [6,]                             1                         4 #>      relat_Entropy_Ldiversity relat_Recursive_Ldiversity #> [1,]                 2.276001                          2 #> [2,]                 2.997907                          2 #> [3,]                 2.276001                          2 #> [4,]                 2.276001                          2 #> [5,]                 2.209202                          2 #> [6,]                 2.240133                          2 #>      MultiEntropy_Ldiversity MultiRecursive_Ldiversity #> [1,]                       0                         0 #> [2,]                       0                         0 #> [3,]                       0                         0 #> [4,]                       0                         0 #> [5,]                       0                         0 #> [6,]                       0                         0  # measure risk with household risk resh <- measure_risk(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\"),w=\"sampling_weight\",hid=\"ori_hid\") print(resh) #>  #> -------------------------- #> 0 obs. with higher risk as the main part #> Expected no. of re-identifications: #> 1.53 #> (0.03%) #> Threshold:Inf #>  (for maximal global risk0.01) #> -------------------------- #> -------------------------- #> Hierarchical risk  #> -------------------------- #> Expected no. of re-identifications: #> 7.18 #> (0.16% )  # change max_global_risk rest <- measure_risk(testdata,   keyVars=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\"),   w=\"sampling_weight\",max_global_risk=0.0001) print(rest) #>  #> -------------------------- #> 0 obs. with higher risk as the main part #> Expected no. of re-identifications: #> 1.53 #> (0.03%) #> Threshold:0 #>  (for maximal global risk0) #> --------------------------  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ## already interally applied and availabe in object sdc: ## sdc <- measure_risk(sdc)"},{"path":"/reference/mergeHouseholdData.html","id":null,"dir":"Reference","previous_headings":"","what":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"Replaces raw household-level data anonymized household-level data full dataset anonymization data household structure (hierarchical structure). Requires matching household ID files.","code":""},{"path":"/reference/mergeHouseholdData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"","code":"mergeHouseholdData(dat, hhId, dathh)"},{"path":"/reference/mergeHouseholdData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"dat data.frame full dataset hhId name household (cluster) ID (identical datasets) dathh dataframe treated household level data (generated example selectHouseholdData)","code":""},{"path":"/reference/mergeHouseholdData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"data.frame treated household level variables raw individual level variables","code":""},{"path":"/reference/mergeHouseholdData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"Thijs Benschop Bernhard Meindl","code":""},{"path":"/reference/mergeHouseholdData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replaces the raw household-level data with the anonymized household-level data in the full dataset\nfor anonymization of data with a household structure (or other hierarchical structure).\nRequires a matching household ID in both files. — mergeHouseholdData","text":"","code":"## Load data x <- testdata ## Create household level dataset x_hh <- selectHouseholdData(dat=x, hhId=\"ori_hid\",   hhVars=c(\"urbrur\", \"roof\",  \"walls\", \"water\", \"electcon\", \"household_weights\")) ## Anonymize household level dataset and extract data sdc_hh <- createSdcObj(x_hh, keyVars=c('urbrur','roof'), w='household_weights') sdc_hh <- kAnon(sdc_hh, k = 3) x_hh_anon <- extractManipData(sdc_hh)  ## Merge anonymized household level data back into the full dataset x_anonhh <- mergeHouseholdData(x, \"ori_hid\", x_hh_anon)  ## Anonymize full dataset and extract data sdc_full <- createSdcObj(x_anonhh, keyVars=c('sex', 'age', 'urbrur', 'roof'), w='sampling_weight') sdc_full <- kAnon(sdc_full, k = 3) x_full_anon <- extractManipData(sdc_full)"},{"path":"/reference/microData.html","id":null,"dir":"Reference","previous_headings":"","what":"microData — microData","title":"microData — microData","text":"Small aritificial toy data set.","code":""},{"path":"/reference/microData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"microData — microData","text":"format : num [1:13, 1:5] 5 7 2 1 7 8 12 3 15 4 ...  - attr(*, \"dimnames\")=List 2 ..$ : chr [1:13] \"10000\" \"11000\" \"12000\" \"12100\" ... ..$ : chr [1:5] \"one\" \"two\" \"three\" \"four\" ...","code":""},{"path":"/reference/microData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"microData — microData","text":"","code":"data(microData) microData <- as.data.frame(microData) m1 <- microaggregation(microData, method=\"mdav\") summary(m1) #> $meansx #>       one              two            three         four            five       #>  Min.   : 1.000   Min.   : 3.00   Min.   :21   Min.   :50.00   Min.   : 90.0   #>  1st Qu.: 4.000   1st Qu.:11.00   1st Qu.:49   1st Qu.:52.00   1st Qu.:111.0   #>  Median : 7.000   Median :14.00   Median :65   Median :57.00   Median :133.0   #>  Mean   : 6.538   Mean   :14.92   Mean   :61   Mean   :55.92   Mean   :134.8   #>  3rd Qu.: 8.000   3rd Qu.:19.00   3rd Qu.:73   3rd Qu.:60.00   3rd Qu.:155.0   #>  Max.   :15.000   Max.   :29.00   Max.   :99   Max.   :61.00   Max.   :188.0   #>  #> $meansxm #>       one             two             three            four       #>  Min.   :4.000   Min.   : 8.667   Min.   :30.67   Min.   :51.67   #>  1st Qu.:4.000   1st Qu.:13.333   1st Qu.:52.33   1st Qu.:54.75   #>  Median :4.333   Median :15.000   Median :69.67   Median :54.75   #>  Mean   :6.538   Mean   :14.923   Mean   :61.00   Mean   :55.92   #>  3rd Qu.:9.000   3rd Qu.:15.000   3rd Qu.:83.75   3rd Qu.:58.00   #>  Max.   :9.667   Max.   :22.667   Max.   :83.75   Max.   :59.67   #>       five       #>  Min.   :103.7   #>  1st Qu.:118.7   #>  Median :152.2   #>  Mean   :134.8   #>  3rd Qu.:152.2   #>  Max.   :158.7   #>  #> $amean #> [1] 0 #>  #> $amedian #> [1] 0.7083864 #>  #> $aonestep #> [1] 0.3452408 #>  #> $devvar #> [1] 1.591051 #>  #> $amad #> [1] 2.213889 #>  #> $acov #> [1] 0.7955257 #>  #> $arcov #> [1] NA #>  #> $acor #> [1] 1.686831 #>  #> $arcor #> [1] NA #>  #> $acors #> [1] 2.374987 #>  #> $adlm #> [1] 5.191309 #>  #> $adlts #> [1] NA #>  #> $apcaload #> [1] 8.456233 #>  #> $apppcaload #> [1] 7.476907 #>  #> $totalsOrig #>   one   two three  four  five  #>    85   194   793   727  1752  #>  #> $totalsMicro #> numeric(0) #>  #> $atotals #> [1] 0 #>  #> $pmtotals #> [1] 0 #>  #> $util1 #> [1] 22.84007 #>  #> $deigenvalues #> [1] 3.11481 #>  #> $risk0 #> [1] 0 #>  #> $risk1 #> [1] 0.4615385 #>  #> $risk2 #> [1] 0 #>  #> $wrisk1 #> [1] 0.9314044 #>  #> $wrisk2 #> [1] 0 #>"},{"path":"/reference/microaggrGower.html","id":null,"dir":"Reference","previous_headings":"","what":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"microaggregation based distances computed similar Gower distance. distance function makes distinction variable types factor,ordered,numerical mixed (semi-continuous variables fixed probability mass constant value e.g. 0)","code":""},{"path":"/reference/microaggrGower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"","code":"microaggrGower(   obj,   variables = NULL,   aggr = 3,   dist_var = NULL,   by = NULL,   mixed = NULL,   mixed.constant = NULL,   trace = FALSE,   weights = NULL,   numFun = mean,   catFun = VIM::sampleCat,   addRandom = FALSE )"},{"path":"/reference/microaggrGower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"obj sdcMicroObj-class-object data.frame variables character vector names variables aggregated (Default sdcMicroObj keyVariables numeric key variables) aggr aggregation level (default=3) dist_var character vector variable names distance computation character vector variable names split dataset performing microaggregation (Default sdcMicroObj strataVar) mixed character vector names mixed variables mixed.constant numeric vector length equal mixed, mixed variables probability mass trace TRUE/FALSE console output weights numerical vector length equal number variables distance computation numFun function: used aggregated numerical variables catFun function: used aggregated categorical variables addRandom TRUE/FALSE random value added distance computation.","code":""},{"path":"/reference/microaggrGower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"function returns updated sdcMicroObj simply altered data frame.","code":""},{"path":"/reference/microaggrGower.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"function sampleCat samples probabilities corresponding occurrence level NNs. function maxCat chooses level occurrences random maximum unique.","code":""},{"path":"/reference/microaggrGower.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"group distance computed, therefore introducing -groups significantly decreases computation time memory consumption.","code":""},{"path":[]},{"path":"/reference/microaggrGower.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"Alexander Kowarik","code":""},{"path":"/reference/microaggrGower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Microaggregation for numerical and categorical key variables based on a\ndistance similar to the Gower Distance — microaggrGower","text":"","code":"data(testdata,package=\"sdcMicro\") testdata <- testdata[1:200,] for(i in c(1:7,9)) testdata[,i] <- as.factor(testdata[,i]) test <- microaggrGower(testdata,variables=c(\"relat\",\"age\",\"expend\"),   dist_var=c(\"age\",\"sex\",\"income\",\"savings\"),by=c(\"urbrur\",\"roof\"))  sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight')  sdc <- microaggrGower(sdc)"},{"path":"/reference/microaggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"Microaggregation — microaggregation","title":"Microaggregation — microaggregation","text":"Function perform various methods microaggregation.","code":""},{"path":"/reference/microaggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Microaggregation — microaggregation","text":"","code":"microaggregation(   obj,   variables = NULL,   aggr = 3,   strata_variables = NULL,   method = \"mdav\",   weights = NULL,   nc = 8,   clustermethod = \"clara\",   measure = \"mean\",   trim = 0,   varsort = 1,   transf = \"log\" )"},{"path":"/reference/microaggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Microaggregation — microaggregation","text":"obj either object class sdcMicroObj-class data.frame variables variables microaggregate. NULL: obj class sdcMicroObj, numerical key variables chosen per default. data.frames, columns chosen per default. aggr aggregation level (default=3) strata_variables data.frames, -variables applying microaggregation within strata defined variables. sdcMicroObj-class-objects, stratification-variable defined slot @strataVar used. slot can changed time using strataVar<-. method pca, rmd, onedims, single, simple, clustpca, pppca, clustpppca, mdav, clustmcdpca, influence, mcdpca weights sampling weights. obj class sdcMicroObj vector sampling weights chosen automatically. determined, weighted version aggregation measure chosen automatically, e.g. weighted median weighted mean. nc number cluster, chosen method performs cluster analysis clustermethod clustermethod, necessary measure aggregation statistic, mean, median, trim, onestep (default=mean) trim trimming percentage, measure=trim varsort variable sorting, method=single transf transformation data x","code":""},{"path":"/reference/microaggregation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Microaggregation — microaggregation","text":"‘obj’ class sdcMicroObj-class corresponding slots filled, like manipNumVars, risk utility. ‘obj’ class “data.frame”, object class “micro” following entities returned: x: original data mx: microaggregated dataset method: method aggr: aggregation level measure: proximity measure aggregation","code":""},{"path":"/reference/microaggregation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Microaggregation — microaggregation","text":"https://research.cbs.nl/casc/glossary.htm one can found “official” definition microaggregation: Records grouped based proximity measure variables interest, small groups records used calculating aggregates variables. aggregates released instead individual record values. recommended method “rmd” forms proximity using multivariate distances based robust methods. extension well-known method “mdav”.  However, computational speed important, method “mdav” preferable choice. proximity measure different concepts can used, aggregation naturally done arithmetic mean. Nevertheless, measures location can used aggregation, especially group size aggregation taken higher 3. Since median seems unsuitable microaggregation highly robust, mesures included can chosen. complex sample survey microaggregated, corresponding sampling weights determined either aggregate values weighted arithmetic mean weighted median. function contains also method data can clustered variety different clustering algorithms. Clustering observations applying microaggregation might useful.  Note, data automatically standardised clustering. usage clustering method ‘Mclust’ requires package mclust02, must loaded first. package loaded automatically, since package GPL comes different licence. also projection methods microaggregation included.  robust version ‘pppca’ ‘clustpppca’ (clustering first) fast implementations provide almost everytime best results. Univariate statistics preserved best individual ranking method (called ‘onedims’, however, often method named ‘individual ranking’), multivariate statistics strong affected. method ‘simple’ one can apply microaggregation directly (unsorted) data. useful comparison methods benchmark, .e. replies question much better sorting data aggregation.","code":""},{"path":"/reference/microaggregation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Microaggregation — microaggregation","text":"one variable specified, mafast applied argument method ignored. Parameters measure ignored methods mdav rmd.","code":""},{"path":"/reference/microaggregation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Microaggregation — microaggregation","text":"Templ, M. Meindl, B., Robust Statistics Meets SDC: New Disclosure Risk Measures Continuous Microdata Masking, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 5262, pp. 113-126, 2008. Templ, M. Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008.  http://www.tdp.cat/issues/abs.a004a08.php Templ, M. New Developments Statistical Disclosure Control Imputation: Robust Statistics Applied Official Statistics, Suedwestdeutscher Verlag fuer Hochschulschriften, 2009, ISBN: 3838108280, 264 pages. Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4  doi:10.1007/978-3-319-50272-4 Templ, M. Meindl, B. Kowarik, .: Statistical Disclosure Control Micro-Data Using R Package sdcMicro, Journal Statistical Software, 67 (4), 1--36, 2015.","code":""},{"path":[]},{"path":"/reference/microaggregation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Microaggregation — microaggregation","text":"Matthias Templ, Bernhard Meindl method “mdav”: work supported International Household Survey Network (IHSN) funded DGF Grant provided World Bank PARIS21 Secretariat Organisation Economic Co-operation Development (OECD).  work builds previous work elsewhere acknowledged. Author integration code mdav R: Alexander Kowarik.","code":""},{"path":"/reference/microaggregation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Microaggregation — microaggregation","text":"","code":"data(Tarragona) m1 <- microaggregation(Tarragona, method='onedims', aggr=3) ## summary(m1) data(testdata) m2 <- microaggregation(testdata[1:100,c('expend','income','savings')],   method='mdav', aggr=4) summary(m2) #> $meansx #>      expend             income            savings        #>  Min.   : 1106874   Min.   :    2897   Min.   :  11751   #>  1st Qu.:25977689   1st Qu.:27750000   1st Qu.:2620342   #>  Median :45716872   Median :44850000   Median :4771488   #>  Mean   :48440371   Mean   :49180278   Mean   :4798498   #>  3rd Qu.:69426340   3rd Qu.:70650000   3rd Qu.:6940269   #>  Max.   :98685205   Max.   :99600000   Max.   :9984098   #>  #> $meansxm #>      expend             income            savings        #>  Min.   :14471827   Min.   : 4482460   Min.   : 872137   #>  1st Qu.:22752145   1st Qu.:24675000   1st Qu.:2353262   #>  Median :42916487   Median :46850000   Median :5116959   #>  Mean   :48440371   Mean   :49180278   Mean   :4798498   #>  3rd Qu.:71888065   3rd Qu.:65000000   3rd Qu.:7020042   #>  Max.   :91918606   Max.   :93725000   Max.   :9407783   #>  #> $amean #> [1] 0 #>  #> $amedian #> [1] 0.1782512 #>  #> $aonestep #> [1] 0 #>  #> $devvar #> [1] 0.3747106 #>  #> $amad #> [1] 0.5343033 #>  #> $acov #> [1] 0.1873553 #>  #> $arcov #> [1] NA #>  #> $acor #> [1] 0.25935 #>  #> $arcor #> [1] NA #>  #> $acors #> [1] 0.6424174 #>  #> $adlm #> [1] 0.1699611 #>  #> $adlts #> [1] NA #>  #> $apcaload #> [1] 0.6853318 #>  #> $apppcaload #> [1] 2.27684 #>  #> $totalsOrig #>     expend     income    savings  #> 4844037117 4918027777  479849813  #>  #> $totalsMicro #> numeric(0) #>  #> $atotals #> [1] 0 #>  #> $pmtotals #> [1] 0 #>  #> $util1 #> [1] 53.39995 #>  #> $deigenvalues #> [1] 0.0596172 #>  #> $risk0 #> [1] 0 #>  #> $risk1 #> [1] 0.29 #>  #> $risk2 #> [1] 0 #>  #> $wrisk1 #> [1] 0.7455491 #>  #> $wrisk2 #> [1] 0 #>   ## for objects of class sdcMicro: ## no stratification because @strataVar is NULL data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- microaggregation(sdc, variables=c(\"expend\",\"income\"))  ## with stratification by 'relat' strataVar(sdc) <- \"relat\" sdc <- microaggregation(sdc, variables=c(\"savings\"))"},{"path":"/reference/modRisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Global risk using log-linear models. — modRisk","title":"Global risk using log-linear models. — modRisk","text":"sample frequencies assumed independent following Poisson distribution. parameters corresponding parameters estimated log-linear model including main effects possible interactions.","code":""},{"path":"/reference/modRisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global risk using log-linear models. — modRisk","text":"","code":"modRisk(obj, method = \"default\", weights, formulaM, bound = Inf, ...)"},{"path":"/reference/modRisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global risk using log-linear models. — modRisk","text":"obj sdcMicroObj-class-object numeric matrix data.frame containing variables required specified model. method chose method model-based risk-estimation. Currently, following methods can selected: \"default\": standard log-linear model. \"CE\": Clogg Eliason method, additionally,  considers survey weights using offset term. \"PML\": pseudo maximum likelihood method. \"weightedLLM\": weighted maximum likelihood method, considers survey weights including one predictors. \"IPF\": iterative proportional fitting used deprecated method 'LLmodGlobalRisk'. weights variable name specifying sampling weights formulaM formula specifying model. bound number specifying threshold 'risky' observations sample. ... additional parameters passed , currently ignored.","code":""},{"path":"/reference/modRisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global risk using log-linear models. — modRisk","text":"Two global risk measures model output given specified model. method applied sdcMicroObj-class-object, slot 'risk' object ist updated result model-based risk-calculation.","code":""},{"path":"/reference/modRisk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global risk using log-linear models. — modRisk","text":"measure aims (1) calculate number sample uniques population uniques probabilistic Poisson model (2) estimate expected number correct matches sample uniques. ad 1) risk measure defined sample uniques $$ \\tau_1 = \\sum\\limits_{j:f_j=1} P(F_j=1 | f_j=1) \\quad , $$ .e. expected number sample uniques population uniques. ad 2) risk measure defined sample uniques $$ \\tau_2 = \\sum\\limits_{j:f_j=1} P(1 / F_j | f_j=1) \\quad . $$ Since population frequencies \\(F_k\\) unknown, need estimated. iterative proportional fitting method used fit parameters Poisson distributed frequency counts related model specified fit frequency counts. obtained parameters used estimate global risk, defined Skinner Holmes (1998).","code":""},{"path":"/reference/modRisk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Global risk using log-linear models. — modRisk","text":"Skinner, C.J. Holmes, D.J. (1998) Estimating re-identification risk per record microdata. Journal Official Statistics, 14:361-372, 1998. Rinott, Y. Shlomo, N. (1998). Generalized Negative Binomial Smoothing Model Sample Disclosure Risk Estimation. Privacy Statistical Databases. Lecture Notes Computer Science.  Springer-Verlag, 82--93. Clogg, C.C. Eliasson, S.R. (1987). Common Problems Log-Linear Analysis. Sociological Methods Research, 8-44.","code":""},{"path":[]},{"path":"/reference/modRisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Global risk using log-linear models. — modRisk","text":"Matthias Templ, Marius Totter, Bernhard Meindl","code":""},{"path":"/reference/modRisk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global risk using log-linear models. — modRisk","text":"","code":"## data.frame method data(testdata2) form <- ~sex+water+roof w <- \"sampling_weight\" (modRisk(testdata2, method = \"default\", formulaM = form, weights = w)) #> The estimated model (using method 'default') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.244 (24.436 %) #> \tRisk-Measure 2: 0.384 (38.400 %) (modRisk(testdata2, method = \"CE\", formulaM = form, weights = w)) #> The estimated model (using method 'CE') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.237 (23.740 %) #> \tRisk-Measure 2: 0.379 (37.936 %) (modRisk(testdata2, method = \"PML\", formulaM = form, weights = w)) #> The estimated model (using method 'PML') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.244 (24.436 %) #> \tRisk-Measure 2: 0.384 (38.400 %) (modRisk(testdata2, method = \"weightedLLM\", formulaM = form, weights = w)) #> The estimated model (using method 'weightedLLM') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.314 (31.424 %) #> \tRisk-Measure 2: 0.442 (44.249 %) (modRisk(testdata2, method = \"IPF\", formulaM = form, weights = w)) #> The estimated model (using method 'IPF') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.274 (27.354 %) #> \tRisk-Measure 2: 0.410 (41.038 %)  ## application to a sdcMicroObj data(testdata2) sdc <- createSdcObj(testdata2,  keyVars = c(\"urbrur\", \"roof\", \"walls\", \"electcon\", \"relat\", \"sex\"),  numVars = c(\"expend\", \"income\", \"savings\"),  w = \"sampling_weight\") sdc <- modRisk(sdc, form = ~sex+water+roof) slot(sdc, \"risk\")$model #> The estimated model (using method 'default') was: #> \t~ sex + water + roof #> global risk-measures: #> \tRisk-Measure 1: 0.244 (24.436 %) #> \tRisk-Measure 2: 0.384 (38.400 %)  if (FALSE) { # an example using data from the laeken-pkg library(laeken) data(eusilc) f <- as.formula(paste(\" ~ \", \"db040 + hsize + rb090 +              age + pb220a + age:rb090 + age:hsize +              hsize:rb090\")) w <- \"rb050\" (modRisk(eusilc, method = \"default\", weights = w, formulaM = f, bound = 5)) (modRisk(eusilc, method = \"CE\", weights =  w, formulaM = f, bound = 5)) (modRisk(eusilc, method = \"PML\", weights = w, formulaM = f, bound = 5)) (modRisk(eusilc, method = \"weightedLLM\", weights = w, formulaM = f, bound = 5)) }"},{"path":"/reference/mvTopCoding.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection and winsorization of multivariate outliers — mvTopCoding","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"Imputation detection outliers","code":""},{"path":"/reference/mvTopCoding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"","code":"mvTopCoding(x, maha=NULL,center=NULL,cov=NULL, alpha=0.025)"},{"path":"/reference/mvTopCoding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"x object class matrix numeric entries maha squared mahalanobis distance observation center center data, needed calcualtion mahalanobis distance (provide) cov covariance matrix data, needed calcualtion mahalanobis distance (provide) alpha significance level, determining ellipsoide outliers placed upon","code":""},{"path":"/reference/mvTopCoding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"imputed winsorized data","code":""},{"path":"/reference/mvTopCoding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"Winsorizes potential outliers ellipsoid defined (robust) Mahalanobis distances direction center data","code":""},{"path":"/reference/mvTopCoding.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"Johannes Gussenbauer, Matthias Templ","code":""},{"path":"/reference/mvTopCoding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detection and winsorization of multivariate outliers — mvTopCoding","text":"","code":"set.seed(123) x <- MASS::mvrnorm(20, mu = c(5,5), Sigma = matrix(c(1,0.9,0.9,1), ncol = 2)) x[1,1] <- 3 x[1,2] <- 6 plot(x) ximp <- mvTopCoding(x) points(ximp, col = \"blue\", pch = 4)   # more dimensions Sigma <- diag(5) Sigma[upper.tri(Sigma)] <- 0.9 Sigma[lower.tri(Sigma)] <- 0.9 x <- MASS::mvrnorm(20, mu = rep(5,5), Sigma = Sigma) x[1,1] <- 3 x[1,2] <- 6 par(mfrow = c(1,2)) pairs(x)  ximp <- mvTopCoding(x) xnew <- data.frame(rbind(x, ximp)) xnew$beforeafter <- rep(c(0,1), each = nrow(x))  pairs(xnew, col = xnew$beforeafter, pch = 4)   # by hand (non-robust) x[2,2] <- NA m <- colMeans(x, na.rm = TRUE) s <- cov(x, use = \"complete.obs\") md <- stats::mahalanobis(x, m, s) ximp <- mvTopCoding(x, center = m, cov = s, maha = md) plot(x) points(ximp, col = \"blue\", pch = 4)"},{"path":"/reference/nextSdcObj.html","id":null,"dir":"Reference","previous_headings":"","what":"nextSdcObj — nextSdcObj","title":"nextSdcObj — nextSdcObj","text":"internal function used provide undo-functionality.","code":""},{"path":"/reference/nextSdcObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nextSdcObj — nextSdcObj","text":"","code":"nextSdcObj(obj)"},{"path":"/reference/nextSdcObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nextSdcObj — nextSdcObj","text":"obj sdcMicroObj-class object","code":""},{"path":"/reference/nextSdcObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nextSdcObj — nextSdcObj","text":"modified sdcMicroObj-class object","code":""},{"path":"/reference/orderData_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder data — orderData_cpp","title":"Reorder data — orderData_cpp","text":"Reorders data according column data set. NOTE: internal function used testing C++-function orderData used inside C++-function recordSwap() speed performance.","code":""},{"path":"/reference/orderData_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder data — orderData_cpp","text":"","code":"orderData_cpp(data, orderIndex)"},{"path":"/reference/orderData_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder data — orderData_cpp","text":"data micro data set containing numeric values. orderIndex column index data refering column data ordered.","code":""},{"path":"/reference/orderData_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder data — orderData_cpp","text":"ordered data set.","code":""},{"path":"/reference/plot.localSuppression.html","id":null,"dir":"Reference","previous_headings":"","what":"plot method for localSuppression objects — plot.localSuppression","title":"plot method for localSuppression objects — plot.localSuppression","text":"Barplot objects class localSuppression.","code":""},{"path":"/reference/plot.localSuppression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot method for localSuppression objects — plot.localSuppression","text":"","code":"# S3 method for localSuppression plot(x, ...)"},{"path":"/reference/plot.localSuppression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot method for localSuppression objects — plot.localSuppression","text":"x object class ‘localSuppression’ ... Additional arguments, currently available : showDetails logical, set, plot suppressions strata shown (possible)","code":""},{"path":"/reference/plot.localSuppression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot method for localSuppression objects — plot.localSuppression","text":"Just look resulting plot.","code":""},{"path":[]},{"path":"/reference/plot.localSuppression.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plot method for localSuppression objects — plot.localSuppression","text":"Bernhard Meindl, Matthias Templ","code":""},{"path":"/reference/plot.localSuppression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot method for localSuppression objects — plot.localSuppression","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) l1 <- localSuppression(francdat, keyVars=c(2,4,5,6)) l1 #>  #> ----------------------- #> Total number of suppressions in the key variables: 4 (new: 4) #>  #> Number of suppressions by key variables: #> (in parenthesis, the total number suppressions is shown) #>  #>    Key1  Key2  Key3  Key4 #> 1 1 (1) 1 (1) 0 (0) 2 (2) #>  #> 2-anonymity == TRUE #> ----------------------- plot(l1)   ## with details of suppression by strata data(testdata2) testdata2$ageG <- cut(testdata2$age, 5, labels=paste0(\"AG\",1:5)) keyVars <- c(\"urbrur\",\"roof\",\"walls\",\"water\",\"electcon\",\"relat\",\"sex\") strataVars <- c(\"ageG\") inp <- testdata2[,c(keyVars, strataVars)] ls <- localSuppression(inp, keyVars=1:7, strataVars=8) print(ls) #>  #> ----------------------- #> Total number of suppressions in the key variables: 109 (new: 109) #>  #> Number of suppressions by key variables and strata: #> (in parenthesis, the total number suppressions is shown) #>  #>       urbrur    roof   walls   water electcon relat   sex #> AG5    1 (1)   2 (2)   1 (1)   1 (1)    1 (1) 1 (1) 1 (1) #> AG3    2 (2)   3 (3)   3 (3)   7 (7)    0 (0) 2 (2) 0 (0) #> AG1    0 (0) 10 (10)   5 (5) 24 (24)    0 (0) 3 (3) 5 (5) #> AG2    2 (2)   5 (5)   3 (3) 13 (13)    2 (2) 2 (2) 1 (1) #> AG4    1 (1)   1 (1)   2 (2)   3 (3)    1 (1) 1 (1) 0 (0) #> Total  6 (6) 21 (21) 14 (14) 48 (48)    4 (4) 9 (9) 7 (7) #>  #> 2-anonymity == TRUE in all strata! #> ----------------------- plot(ls)  plot(ls, showDetails=TRUE)"},{"path":"/reference/plot.sdcMicroObj.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","title":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","text":"Descriptive plot function sdcMicroObj-class-objects. Currently visualization local supression implemented.","code":""},{"path":"/reference/plot.sdcMicroObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","text":"","code":"# S3 method for sdcMicroObj plot(x, type = \"ls\", ...)"},{"path":"/reference/plot.sdcMicroObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","text":"x object class sdcMicroObj-class type specified kind plot generated 'ls': plot local suppressions key variables ... currently ignored","code":""},{"path":"/reference/plot.sdcMicroObj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","text":"Bernhard Meindl","code":""},{"path":"/reference/plot.sdcMicroObj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotfunctions for objects of class sdcMicroObj-class — plot.sdcMicroObj","text":"","code":"data(testdata) if (FALSE) { # dontrun because Examples with CPU time > 2.5 times elapsed time sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','relat','sex'),   pramVars=c('water','electcon'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- kAnon(sdc, k=5) plot(sdc, type=\"ls\") }"},{"path":"/reference/plotMicro.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison plots — plotMicro","title":"Comparison plots — plotMicro","text":"Plots comparison original data perturbed data.","code":""},{"path":"/reference/plotMicro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison plots — plotMicro","text":"","code":"plotMicro(x, p, which.plot = 1:3)"},{"path":"/reference/plotMicro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison plots — plotMicro","text":"x object class micro p necessary parameter box cox transformation (lambda) .plot plot created? 1: density traces 2: parallel boxplots 3: differences totals","code":""},{"path":"/reference/plotMicro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparison plots — plotMicro","text":"Univariate multivariate comparison plots implemented detect differences perturbed original data, also compare perturbed data produced different methods.","code":""},{"path":"/reference/plotMicro.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Comparison plots — plotMicro","text":"Templ, M. Meindl, B., Software Development SDC R, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 4302, pp. 347-359, 2006.","code":""},{"path":[]},{"path":"/reference/plotMicro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Comparison plots — plotMicro","text":"Matthias Templ","code":""},{"path":"/reference/plotMicro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison plots — plotMicro","text":"","code":"data(free1) free1 <- as.data.frame(free1) m1 <- microaggregation(free1[, 31:34], method=\"onedims\", aggr=3) m2 <- microaggregation(free1[, 31:34], method=\"pca\", aggr=3) plotMicro(m1, p=1, which.plot=1)"},{"path":"/reference/pram.html","id":null,"dir":"Reference","previous_headings":"","what":"Post Randomization — pram","title":"Post Randomization — pram","text":"used categorical data stored factors. algorithm randomly changes values variables selected records (usually risky ones) according invariant probability transition matrix custom-defined transition matrix.","code":""},{"path":"/reference/pram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post Randomization — pram","text":"","code":"pram(obj, variables = NULL, strata_variables = NULL, pd = 0.8, alpha = 0.5)"},{"path":"/reference/pram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post Randomization — pram","text":"obj Input data. Allowed input data objects class data.frame, factor sdcMicroObj. variables Names variables obj post-randomization applied. obj factor, argument ignored. Please note pram can applied factor-variables. strata_variables names variables stratification (set automatically object class sdcMicroObj. One can also specify integer vector factor specifies desired groups. vector must match dimension input data set, however. possible use case, look examples. pd minimum diagonal entries generated transition matrix P. Either vector length 1 (recycled) vector length number variables postrandomized. also possible set pd numeric matrix. matrix used directly transition matrix. matrix must constructed follows: matrix must square matrix rownames colnames matrix must match levels (order) factor-variable postrandomized. rowSums colSums matrix need equal 1 also possible combine different ways. details look examples. alpha amount perturbation invariant Pram method. numeric vector length 1 (recycled necessary) vector length number variables. one specified transition matrix directly, alpha ignored.","code":""},{"path":"/reference/pram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post Randomization — pram","text":"modified sdcMicroObj object new object containing original post-randomized variables (suffix \"_pram\").","code":""},{"path":"/reference/pram.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Post Randomization — pram","text":"Deprecated method 'pram_strata' longer available sdcMicro > 4.5.0","code":""},{"path":"/reference/pram.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Post Randomization — pram","text":"https://www.gnu.org/software/glpk/ Kowarik, . Templ, M. Meindl, B. Fonteneau, F. Prantner, B.: Testing IHSN Cpp Code Inclusion New Methods sdcMicro, : Lecture Notes Computer Science, J. Domingo-Ferrer, . Tinnirello (editors.); Springer, Berlin, 2012, ISBN: 978-3-642-33626-3, pp. 63-77. doi:10.1007/978-3-642-33627-0_6 Templ, M. Kowarik, . Meindl, B.: Statistical Disclosure Control Micro-Data Using R Package sdcMicro. : Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Templ, M.: Statistical Disclosure Control Microdata: Methods Applications R. : Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4","code":""},{"path":"/reference/pram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Post Randomization — pram","text":"Alexander Kowarik, Matthias Templ, Bernhard Meindl","code":""},{"path":"/reference/pram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post Randomization — pram","text":"","code":"if (FALSE) { data(testdata)  # using a factor variable as input res <- pram(as.factor(testdata$roof)) print(res) summary(res)  # using a data.frame as input # pram can only be applied to factors # -- > we have to recode to factors beforehand testdata$roof <- factor(testdata$roof) testdata$walls <- factor(testdata$walls) testdata$water <- factor(testdata$water)  # pram() is applied within subgroups defined by # variables \"urbrur\" and \"sex\" res <- pram(   obj = testdata,   variables = \"roof\",   strata_variables = c(\"urbrur\", \"sex\")) print(res) summary(res)  # default parameters (pd = 0.8 and alpha = 0.5) for the generation # of the invariant transition matrix will be used for all variables res1 <- pram(   obj = testdata,   variables = c(\"roof\", \"walls\", \"water\")) print(res1)  ## specific parameter settings for each variable res2 <- pram(   obj = testdata,   variables = c(\"roof\", \"walls\", \"water\"),   pd = c(0.95, 0.8, 0.9),   alpha = 0.5) print(res2)  # detailed information on pram-parameters (such as the transition matrix 'Rs') # is stored in the output, eg. for variable 'roof' attr(res2, \"pram_params\")$roof  # we can also specify a custom transition-matrix directly mat <- diag(length(levels(testdata$roof))) rownames(mat) <- colnames(mat) <- levels(testdata$roof) res3 <- pram(   obj = testdata,   variables = \"roof\",   pd = mat) print(res3) # of course, nothing has changed!  # it is possible use a transition matrix for a variable and use the 'traditional' way # of specifying a number for the minimal diagonal entries of the transision matrix # for other variables. In this case we must supply `pd` as list. res4 <- pram(   obj = testdata,   variables = c(\"roof\", \"walls\"),   pd = list(mat, 0.5),   alpha = c(NA, 0.5)) print(res4) summary(res4) attr(res4, \"pram_params\")  # application to objects of class sdcMicro with default parameters data(testdata2) testdata2$urbrur <- factor(testdata2$urbrur) sdc <- createSdcObj(   dat = testdata2,   keyVars = c(\"roof\", \"walls\", \"water\", \"electcon\", \"relat\", \"sex\"),   numVars = c(\"expend\", \"income\", \"savings\"),   w = \"sampling_weight\") sdc <- pram(   obj = sdc,   variables = \"urbrur\") print(sdc, type = \"pram\")  # this is equal to the previous application. If argument 'variables' is NULL, # all variables from slot 'pramVars' will be used if possible. sdc <- createSdcObj(   dat = testdata2,   keyVars = c(\"roof\", \"walls\", \"water\", \"electcon\", \"relat\", \"sex\"),   numVars = c(\"expend\", \"income\", \"savings\"),   w = \"sampling_weight\",   pramVars = \"urbrur\") sdc <- pram(sdc) print(sdc, type=\"pram\")  # we can specify transition matrices for sdcMicroObj-objects too testdata2$roof <- factor(testdata2$roof) sdc <- createSdcObj(   dat = testdata2,   keyVars = c(\"roof\", \"walls\", \"water\", \"electcon\", \"relat\", \"sex\"),   numVars = c(\"expend\", \"income\", \"savings\"),   w = \"sampling_weight\") mat <- diag(length(levels(testdata2$roof)))  rownames(mat) <- colnames(mat) <- levels(testdata2$roof) mat[1,] <- c(0.9, 0, 0, 0.05, 0.05) sdc <- pram(   obj = sdc,   variables = \"roof\",   pd = mat) print(sdc, type = \"pram\")  # we can also have a look at the transitions get.sdcMicroObj(sdc, \"pram\")$transitions }"},{"path":"/reference/print.freqCalc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class freqCalc. — print.freqCalc","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"Print method objects class freqCalc.","code":""},{"path":"/reference/print.freqCalc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"","code":"# S3 method for freqCalc print(x, ...)"},{"path":"/reference/print.freqCalc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"x object class freqCalc ... Additional arguments passed .","code":""},{"path":"/reference/print.freqCalc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"information frequency counts key variables object class freqCalc.","code":""},{"path":[]},{"path":"/reference/print.freqCalc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"Matthias Templ","code":""},{"path":"/reference/print.freqCalc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects from class freqCalc. — print.freqCalc","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) f <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) f #>  #>  -------------------------- #> 4 obs. violate 2-anonymity  #> 8 obs. violate 3-anonymity  #>  --------------------------"},{"path":"/reference/print.indivRisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class indivRisk — print.indivRisk","title":"Print method for objects from class indivRisk — print.indivRisk","text":"Print method objects class indivRisk","code":""},{"path":"/reference/print.indivRisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class indivRisk — print.indivRisk","text":"","code":"# S3 method for indivRisk print(x, ...)"},{"path":"/reference/print.indivRisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class indivRisk — print.indivRisk","text":"x object class indivRisk ... Additional arguments passed .","code":""},{"path":"/reference/print.indivRisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class indivRisk — print.indivRisk","text":"information method final correction factor objects class ‘indivRisk’.","code":""},{"path":[]},{"path":"/reference/print.indivRisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class indivRisk — print.indivRisk","text":"Matthias Templ","code":""},{"path":"/reference/print.indivRisk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects from class indivRisk — print.indivRisk","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) f1 <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) data.frame(fk=f1$fk, Fk=f1$Fk) #>   fk    Fk #> 1  2 110.0 #> 2  2  84.5 #> 3  2  84.5 #> 4  1  17.0 #> 5  1 541.0 #> 6  1   8.0 #> 7  1   5.0 #> 8  2 110.0 ## individual risk calculation: indivRisk(f1)"},{"path":"/reference/print.localSuppression.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class localSuppression — print.localSuppression","title":"Print method for objects from class localSuppression — print.localSuppression","text":"Print method objects class localSuppression","code":""},{"path":"/reference/print.localSuppression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class localSuppression — print.localSuppression","text":"","code":"# S3 method for localSuppression print(x, ...)"},{"path":"/reference/print.localSuppression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class localSuppression — print.localSuppression","text":"x object class localSuppression ... Additional arguments passed .","code":""},{"path":"/reference/print.localSuppression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class localSuppression — print.localSuppression","text":"Information frequency counts key variables object class ‘localSuppression’.","code":""},{"path":[]},{"path":"/reference/print.localSuppression.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class localSuppression — print.localSuppression","text":"Matthias Templ","code":""},{"path":"/reference/print.localSuppression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects from class localSuppression — print.localSuppression","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) l1 <- localSuppression(francdat, keyVars=c(2,4,5,6)) l1 #>  #> ----------------------- #> Total number of suppressions in the key variables: 4 (new: 4) #>  #> Number of suppressions by key variables: #> (in parenthesis, the total number suppressions is shown) #>  #>    Key1  Key2  Key3  Key4 #> 1 1 (1) 1 (1) 0 (0) 2 (2) #>  #> 2-anonymity == TRUE #> -----------------------"},{"path":"/reference/print.micro.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class micro — print.micro","title":"Print method for objects from class micro — print.micro","text":"printing object class micro","code":""},{"path":"/reference/print.micro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class micro — print.micro","text":"","code":"# S3 method for micro print(x, ...)"},{"path":"/reference/print.micro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class micro — print.micro","text":"x object class micro ... Additional arguments passed .","code":""},{"path":"/reference/print.micro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class micro — print.micro","text":"information method aggregation level objects class micro.","code":""},{"path":[]},{"path":"/reference/print.micro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class micro — print.micro","text":"Matthias Templ","code":""},{"path":"/reference/print.micro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects from class micro — print.micro","text":"","code":"data(free1) free1 <- as.data.frame(free1) m1 <- microaggregation(free1[, 31:34], method='onedims', aggr=3) m1 #>  #>  Object created with method onedims and aggregation level 3 #>  #>  ------------------------- #> x ... original values  #>      INCOME           MONEY           ASSETS          DEBTS      #>  Min.   :100100   Min.   : 5532   Min.   :10000   Min.   :1000   #>  1st Qu.:329075   1st Qu.:32311   1st Qu.:31695   1st Qu.:3340   #>  Median :549400   Median :53521   Median :53975   Median :5690   #>  Mean   :547254   Mean   :52610   Mean   :54300   Mean   :5587   #>  3rd Qu.:764875   3rd Qu.:74231   3rd Qu.:76298   3rd Qu.:7840   #>  Max.   :999400   Max.   :95431   Max.   :99960   Max.   :9990   #>  #>  ------------------------- #> mx ... microaggregated values #>      INCOME           MONEY           ASSETS          DEBTS      #>  Min.   :100300   Min.   : 5532   Min.   :10020   Min.   :1000   #>  1st Qu.:329167   1st Qu.:32311   1st Qu.:31707   1st Qu.:3340   #>  Median :549400   Median :53521   Median :53953   Median :5690   #>  Mean   :547254   Mean   :52610   Mean   :54300   Mean   :5587   #>  3rd Qu.:764792   3rd Qu.:74231   3rd Qu.:76299   3rd Qu.:7837   #>  Max.   :999075   Max.   :95431   Max.   :99848   Max.   :9990   #>  #>  ------------------------- #> Try names(your object from class micro) for more details #>"},{"path":"/reference/print.modrisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class modrisk — print.modrisk","title":"Print method for objects from class modrisk — print.modrisk","text":"Print method objects class modrisk","code":""},{"path":"/reference/print.modrisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class modrisk — print.modrisk","text":"","code":"# S3 method for modrisk print(x, ...)"},{"path":"/reference/print.modrisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class modrisk — print.modrisk","text":"x object class modrisk ... Additional arguments passed .","code":""},{"path":"/reference/print.modrisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class modrisk — print.modrisk","text":"Output model-based risk estimation","code":""},{"path":[]},{"path":"/reference/print.modrisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class modrisk — print.modrisk","text":"Bernhard Meindl","code":""},{"path":"/reference/print.pram.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class pram — print.pram","title":"Print method for objects from class pram — print.pram","text":"Print method objects class pram","code":""},{"path":"/reference/print.pram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class pram — print.pram","text":"","code":"# S3 method for pram print(x, ...)"},{"path":"/reference/print.pram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class pram — print.pram","text":"x object class pram ... Additional arguments passed .","code":""},{"path":"/reference/print.pram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class pram — print.pram","text":"absolute relative frequencies changed observations modified variable","code":""},{"path":[]},{"path":"/reference/print.pram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class pram — print.pram","text":"Bernhard Meindl, Matthias Templ Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/print.sdcMicroObj.html","id":null,"dir":"Reference","previous_headings":"","what":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"Descriptive print function Frequencies, local Supression, Recoding, categorical risk numerical risk.","code":""},{"path":"/reference/print.sdcMicroObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"","code":"# S4 method for sdcMicroObj print(x, type = \"kAnon\", docat = TRUE, ...)"},{"path":"/reference/print.sdcMicroObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"x object class sdcMicroObj-class type Selection content returned printed docat logical, TRUE (default) results actually printed ... type argument print method, currently supported : general: basic information input obj number observations variables. kAnon: displays information 2- 3-anonymity ls: displays various information local suppression applied. pram: displays various information post-randomization applied. recode: shows information categorical key variables recoding risk: displays information re-identification risks numrisk: displays risk- utility measures numerical key variables","code":""},{"path":"/reference/print.sdcMicroObj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"Possible values type argument print function : \"freq\": Frequencies, \"ls\": Local Supression output, \"pram\": results post-randomization \"recode\":Recodes, \"risk\": forCategorical risk \"numrisk\": Numerical risk. Possible values type argument freq function : \"fk\": Sample frequencies \"Fk\": weighted frequencies.","code":""},{"path":"/reference/print.sdcMicroObj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"Alexander Kowarik, Matthias Templ, Bernhard Meindl","code":""},{"path":"/reference/print.sdcMicroObj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print and Extractor Functions for objects of class sdcMicroObj-class — print.sdcMicroObj","text":"","code":"data(testdata) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','relat','sex'),   pramVars=c('water','electcon'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- microaggregation(sdc, method=\"mdav\", aggr=3) print(sdc) #> Infos on 2/3-Anonymity: #>  #> Number of observations violating #>   - 2-anonymity: 26 (0.568%) #>   - 3-anonymity: 52 (1.135%) #>   - 5-anonymity: 141 (3.079%) #>  #> ---------------------------------------------------------------------- #>  print(sdc, type=\"general\") #> The input dataset consists of 4580 rows and 15 variables. #>   --> Categorical key variables: urbrur, roof, walls, relat, sex #>   --> Numerical key variables: expend, income, savings #>   --> Weight variable: sampling_weight #> ---------------------------------------------------------------------- #>  print(sdc, type=\"ls\") #> Local suppression has not been applied! print(sdc, type=\"recode\") #> Information on categorical key variables: #>  #> Reported is the number, mean size and size of the smallest category >0 for recoded variables. #> In parenthesis, the same statistics are shown for the unmodified data. #> Note: NA (missings) are counted as seperate categories! #>  #>  Key Variable Number of categories     Mean size            #>        urbrur                    2 (2)  2290.000 (2290.000) #>          roof                    5 (5)   916.000  (916.000) #>         walls                    3 (3)  1526.667 (1526.667) #>         relat                    9 (9)   508.889  (508.889) #>           sex                    2 (2)  2290.000 (2290.000) #>  Size of smallest (>0)        #>                    646  (646) #>                     16   (16) #>                     50   (50) #>                      1    (1) #>                   2284 (2284) #> ---------------------------------------------------------------------- #>  print(sdc, type=\"risk\") #> Risk measures: #>  #> Number of observations with higher risk than the main part of the data: 0 #> Expected number of re-identifications: 2.41 (0.05 %) print(sdc, type=\"numrisk\") #> Numerical key variables: expend, income, savings #>  #> Disclosure risk is currently between [0.00%; 12.95%] #>  #> Current Information Loss: #>   - IL1: 384097.50 #>   - Difference of Eigenvalues: 0.020% #> ---------------------------------------------------------------------- #>  print(sdc, type=\"pram\") #> PRAM has not been applied! print(sdc, type=\"kAnon\") #> Infos on 2/3-Anonymity: #>  #> Number of observations violating #>   - 2-anonymity: 26 (0.568%) #>   - 3-anonymity: 52 (1.135%) #>   - 5-anonymity: 141 (3.079%) #>  #> ---------------------------------------------------------------------- #>  print(sdc, type=\"comp_numvars\") #> Compare original and modified numeric key variables #>  #>   Variable 'expend' has been modified. The correlation is 0.998 #>  #>        Type             Min.     1st Qu.           Median             Mean #> 1:     orig             3377 25610224.75       50462299.5 50499784.5991266 #> 2: modified 1151704.66666667    25359582 50285163.3333333 50499784.5991266 #>             3rd Qu.             Max. #> 1:      75513584.75         99962044 #> 2: 75370230.3333333 99174302.6666667 #>  #>   Variable 'income' has been modified. The correlation is 0.998 #>  #>        Type             Min.          1st Qu.           Median             Mean #> 1:     orig         2897.484         25100000         50750000 50115690.0034852 #> 2: modified 621527.033333333 25066666.6666667 50766666.6666667 50115690.0034852 #>     3rd Qu.     Max. #> 1:  7.5e+07    1e+08 #> 2: 75100000 99200000 #>  #>   Variable 'savings' has been modified. The correlation is 0.998 #>  #>        Type             Min.          1st Qu.  Median             Mean #> 1:     orig         2974.644       2434822.75 4982921 4964039.24334542 #> 2: modified 85811.8536666667 2373826.33333333 4990754 4964039.24334542 #>             3rd Qu.             Max. #> 1:          7487258          9997808 #> 2: 7522210.33333333 9928145.66666667 #>  #> ---------------------------------------------------------------------- #>"},{"path":"/reference/print.suda2.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects from class suda2 — print.suda2","title":"Print method for objects from class suda2 — print.suda2","text":"Print method objects class suda2.","code":""},{"path":"/reference/print.suda2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects from class suda2 — print.suda2","text":"","code":"# S3 method for suda2 print(x, ...)"},{"path":"/reference/print.suda2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects from class suda2 — print.suda2","text":"x object class suda2 ... additional arguments passed .","code":""},{"path":"/reference/print.suda2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects from class suda2 — print.suda2","text":"Table dis suda scores.","code":""},{"path":[]},{"path":"/reference/print.suda2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for objects from class suda2 — print.suda2","text":"Matthias Templ","code":""},{"path":"/reference/print.suda2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects from class suda2 — print.suda2","text":"","code":"if (FALSE) { data(testdata) data_suda2 <- suda2(testdata,variables=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\")) data_suda2 }"},{"path":"/reference/randSample_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Sampling — randSample_cpp","title":"Random Sampling — randSample_cpp","text":"Randomly select records given probability weight vector prob. NOTE: internal function used testing C++-function randSample used inside C++-function recordSwap().","code":""},{"path":"/reference/randSample_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Sampling — randSample_cpp","text":"","code":"randSample_cpp(ID, N, prob, IDused, seed)"},{"path":"/reference/randSample_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Sampling — randSample_cpp","text":"ID vector containing record IDs sample N integer defining number records sampled prob vector probability weights obtaining elements vector sampled. IDused vector containing IDs must sampled seed integer setting sampling seed","code":""},{"path":"/reference/rankSwap.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank Swapping — rankSwap","title":"Rank Swapping — rankSwap","text":"Swapping values within range , first, correlation structure original variables preserved, second, values record disturbed.  used numeric ordinal variables rank can determined correlation coefficient makes sense.","code":""},{"path":"/reference/rankSwap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank Swapping — rankSwap","text":"","code":"rankSwap(   obj,   variables = NULL,   TopPercent = 5,   BottomPercent = 5,   K0 = NULL,   R0 = NULL,   P = NULL,   missing = NA,   seed = NULL )"},{"path":"/reference/rankSwap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank Swapping — rankSwap","text":"obj sdcMicroObj-class-object data.frame variables names index variables rank swapping applied.  object class sdcMicroObj-class, numeric key variables selected variables=NULL. TopPercent Percentage largest values grouped together rank swapping applied. BottomPercent Percentage lowest values grouped together rank swapping applied. K0 Subset-mean preservation factor. Preserves means rank swapping within range based K0.  K0 subset-mean preservation factor \\(| X_1 -X_2 | \\leq \\frac{2 K_0 X_1}{\\sqrt(N_S)}\\), \\(X_1\\) \\(X_2\\) subset means field swapping, \\(N_S\\) sample size subset. R0 Multivariate preservation factor. Preserves correlation variables within certain range based given constant R0.  can specify preservation factor \\(R_0=\\frac{R_1}{R_2}\\) \\(R_1\\) correlation coefficient two fields swapping, \\(R_2\\) correlation coefficient two fields swapping. P Rank range percentage total sample size. can specify rank range directly, noted \\(P\\), percentage records. two records eligible swapping ranks, \\(\\) \\(j\\) respectively, satisfy \\(| -j | \\le \\frac{P N}{100}\\), \\(N\\) total sample size. missing missing - value used missing value C++ routine instead NA. NA, suitable value calculated internally. Note returned dataset, NA-values () replaced value. seed Seed.","code":""},{"path":"/reference/rankSwap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank Swapping — rankSwap","text":"rank-swapped data set modified sdcMicroObj-class object.","code":""},{"path":"/reference/rankSwap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rank Swapping — rankSwap","text":"Rank swapping sorts values one numeric variable numerical values (ranking).  restricted range determined rank two swapped values, differ, definition, \\(P\\) percent total number observations. positive P, R0 K0 used one must supplied. none supplied, sdcMicro sets parameter eqnR0 0.95 internally.","code":""},{"path":"/reference/rankSwap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rank Swapping — rankSwap","text":"Moore, Jr.R. (1996) Controlled data-swapping techniques masking public use microdata, U.S. Bureau Census Statistical Research Division Report Series, RR 96-04. Kowarik, . Templ, M. Meindl, B. Fonteneau, F. Prantner, B.: Testing IHSN Cpp Code Inclusion New Methods sdcMicro, : Lecture Notes Computer Science, J. Domingo-Ferrer, . Tinnirello (editors.); Springer, Berlin, 2012, ISBN: 978-3-642-33626-3, pp. 63-77. doi:10.1007/978-3-642-33627-0_6","code":""},{"path":"/reference/rankSwap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rank Swapping — rankSwap","text":"Alexander Kowarik interface, Bernhard Meindl improvements. underlying C++ code: work supported International Household Survey Network (IHSN) funded DGF Grant provided World Bank PARIS21 Secretariat Organisation Economic Co-operation Development (OECD).  work builds previous work elsewhere acknowledged.","code":""},{"path":"/reference/rankSwap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank Swapping — rankSwap","text":"","code":"data(testdata2) if (FALSE) { data_swap <- rankSwap(   obj = testdata2,   variables = c(\"age\", \"income\", \"expend\", \"savings\") )  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(   dat = testdata2,   keyVars = c(\"urbrur\", \"roof\", \"walls\", \"water\", \"electcon\", \"relat\", \"sex\"),   numVars = c(\"expend\", \"income\", \"savings\"),   w = \"sampling_weight\") sdc <- rankSwap(sdc) }"},{"path":"/reference/readMicrodata.html","id":null,"dir":"Reference","previous_headings":"","what":"readMicrodata — readMicrodata","title":"readMicrodata — readMicrodata","text":"reads data various formats R. Used sdcApp.","code":""},{"path":"/reference/readMicrodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"readMicrodata — readMicrodata","text":"","code":"readMicrodata(   path,   type,   convertCharToFac = TRUE,   drop_all_missings = TRUE,   ... )"},{"path":"/reference/readMicrodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"readMicrodata — readMicrodata","text":"path file path type format file . currently allowed values sas spss stata R rdf csv convertCharToFac (logical) TRUE, character vectors automatically converted factors drop_all_missings (logical) TRUE, variables contain NA-values dropped ... additional parameters. Currently used type='csv' pass arguments read.table().","code":""},{"path":"/reference/readMicrodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"readMicrodata — readMicrodata","text":"data.frame object class 'simple.error'. stata file read , resulting data.frame additional attribute lab variable value labels stored.","code":""},{"path":"/reference/readMicrodata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"readMicrodata — readMicrodata","text":"type either 'sas', 'spss' 'stata', values read NaN converted NA.","code":""},{"path":"/reference/readMicrodata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"readMicrodata — readMicrodata","text":"Bernhard Meindl","code":""},{"path":"/reference/recordSwap.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy Dataset for Record Swapping — createDat","title":"Dummy Dataset for Record Swapping — createDat","text":"[createDat()] returns dummy data illustrate targeted record swapping. generated data contain household ids (`hid`), geographic variables (`nuts1`, `nuts2`, `nuts3`, `lau2`) well household personal variables. Applies targeted record swapping micro data considering identification risk record well geographic topology.","code":""},{"path":"/reference/recordSwap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dummy Dataset for Record Swapping — createDat","text":"","code":"createDat(N = 10000)  recordSwap(data, ...)  # S3 method for sdcMicroObj recordSwap(data, ...)  # S3 method for default recordSwap(   data,   hid,   hierarchy,   similar,   swaprate = 0.05,   risk = NULL,   risk_threshold = 0,   k_anonymity = 3,   risk_variables = NULL,   carry_along = NULL,   return_swapped_id = FALSE,   log_file_name = \"TRS_logfile.txt\",   seed = NULL,   ... )"},{"path":"/reference/recordSwap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dummy Dataset for Record Swapping — createDat","text":"N integer, number household generate data must either micro data set form `data.table` `data.frame`, `sdcObject`, see createSdcObj. ... parameters passed `recordSwap.default()` hid column index column name `data` refers household identifier. hierarchy column indices column names variables `data` refer geographic hierarchy micro data set. instance county > municipality > district. similar vector list integer vectors column names containing similarity profiles, see details explanations. swaprate double 0 1 defining proportion households swapped, see details explanations risk either column indices column names `data` `data.table`, `data.frame` `matrix` indicating risk record hierarchy level. `risk`-matrix supplied swapping procedure use k-anonymity rule values found matrix swapping. ATTENTION: fully implemented yet currently ignored underlying c++ functions tested properly risk_threshold single numeric value indicating household considered \"high risk\", e.g. household must swapped. used `risk` `NULL`. ATTENTION: fully implemented yet currently ignored underlying c++ functions tested properly k_anonymity integer defining threshold high risk households (counts<k) using k-anonymity rule risk_variables column indices column names variables `data` considered estimating risk. used k-anonymity rule applied. carry_along integer vector indicating additional variables swap besides hierarchy variables. variables interfere procedure finding record swap calculating risk. parameter used end procedure swapping hierarchies. return_swapped_id, boolean `TRUE` output includes additional column showing `hid` record swapped . new column name `paste0(hid,\"_swapped\")`. log_file_name character, path writing log file. log file contains list household IDs (`hid`) swapped created households exist. seed integer defining seed random number generator, reproducibility. `NULL` random seed set using `sample(1e5,1)`.","code":""},{"path":"/reference/recordSwap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dummy Dataset for Record Swapping — createDat","text":"`data.table` containing dummy data `data.table` swapped records.","code":""},{"path":"/reference/recordSwap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dummy Dataset for Record Swapping — createDat","text":"procedure accepts `data.frame` `data.table` containing necessary information record swapping, e.g parameter `hid`, `similar`, `hierarchy`, etc ... First micro data `data` ordered `hid` identification risk calculated record hierarchy level. right now counts used identification risk inverse counts used sampling probability. NOTE: possible supply identification risk record hierarchy level passed C++-function. however fully implemented. parameter `k_anonymity` k-anonymity rule applied define risky households hierarchy level. household set risky counts < k_anonymity hierarchy level household needs swapped across hierarchy level. instance geographic hierarchy NUTS1 > NUTS2 > NUTS3 counts calculated geographic variable defined `risk_variables`. counts record falls `k_anonymity` hierarchy county record needs swapped across counties. Setting `k_anonymity = 0` disables feature risky households defined. targeted record swapping applied starting highest lowest hierarchy level cycling possible geographic areas hierarchy level, e.g every county, every municipality every county, etc, ... geographic area set values created records swapped. lowest hierarchy level made records fulfill k-anonymity already swapped. records swapped records belonging geographic area, already swapped beforehand. Swapping refers interchange geographic variables defined `hierarchy`. record swapped record containing `hid` swapped well. lowest hierarchy level every geographic area set records bswapped made records fulfill k-anonymity well remaining numer records proportion swapped records geographic area coherence `swaprate`. , due k-anonymity condition, records already swapped geographic area records fulfill k-anonymity swapped. Using parameter `similar` one can define similarity profiles. `similar` needs list vectors list entry containing column indices `data`. entries used searching donor households, meaning specific record set donor records made records values `similar[[1]]`. however important note, variables can variables related households (persons!). suitable donor can found next similarity profile used, `similar[[2]]` set donors made records values column indices `similar[[2]]`. procedure continues donor record found similarity profiles used. `swaprate` sets swaprate households swapped, single swap counts swapping 2 households, sampled household corresponding donor. Prior procedure swaprate applied lowest hierarchy level, determine target number swapped households lowest hierarchies. target numbers decimal point randomly rounded number households swapped total coherence swaprate.","code":""},{"path":[]},{"path":"/reference/recordSwap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dummy Dataset for Record Swapping — createDat","text":"Johannes Gussenbauer","code":""},{"path":"/reference/recordSwap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dummy Dataset for Record Swapping — createDat","text":"","code":"# generate 10000 dummy households library(data.table) seed <- 2021 set.seed(seed) nhid <- 10000 dat <- sdcMicro::createDat(nhid) #> Warning: Item 7 has 10000 rows but longest item has 34827; recycled with remainder. #> Warning: Item 8 has 10000 rows but longest item has 34827; recycled with remainder. #> Warning: Item 9 has 10000 rows but longest item has 34827; recycled with remainder.  # define paramters for swapping k_anonymity <- 1 swaprate <- .05 # 5% similar <- list(c(\"hsize\")) hier <- c(\"nuts1\", \"nuts2\") risk_variables <- c(\"ageGroup\", \"national\") hid <- \"hid\"  # apply record swapping dat_s <- recordSwap(   data = dat,   hid = hid,   hierarchy = hier,   similar = similar,   swaprate = swaprate,   k_anonymity = k_anonymity,   risk_variables = risk_variables,   carry_along = NULL,   return_swapped_id = TRUE,   seed = seed ) #> Recordswapping was successful!  # number of swapped households dat_s[hid != hid_swapped, uniqueN(hid)] #> [1] 500  # hierarchies are not consistently swapped dat_s[hid != hid_swapped, .(nuts1, nuts2, nuts3, lau2)] #>       nuts1 nuts2 nuts3  lau2 #>    1:     3    35  3406 34062 #>    2:     3    35  3406 34062 #>    3:     3    35  3406 34062 #>    4:     2    21  1104 11042 #>    5:     2    21  1104 11042 #>   ---                         #> 1682:     3    34  3204 32044 #> 1683:     3    34  3204 32044 #> 1684:     3    34  3204 32044 #> 1685:     3    34  3204 32044 #> 1686:     3    34  3204 32044  # use parameter carry_along dat_s <- recordSwap(   data = dat,   hid = hid,   hierarchy = hier,   similar = similar,   swaprate = swaprate,   k_anonymity = k_anonymity,   risk_variables = risk_variables,   carry_along = c(\"nuts3\", \"lau2\"),   return_swapped_id = TRUE,   seed = seed) #> Recordswapping was successful!  dat_s[hid != hid_swapped, .(nuts1, nuts2, nuts3, lau2)] #>       nuts1 nuts2 nuts3  lau2 #>    1:     3    35  3508 35085 #>    2:     3    35  3508 35085 #>    3:     3    35  3508 35085 #>    4:     2    21  2109 21093 #>    5:     2    21  2109 21093 #>   ---                         #> 1682:     3    34  3408 34083 #> 1683:     3    34  3408 34083 #> 1684:     3    34  3408 34083 #> 1685:     3    34  3408 34083 #> 1686:     3    34  3408 34083"},{"path":"/reference/recordSwap_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Targeted Record Swapping — recordSwap_cpp","title":"Targeted Record Swapping — recordSwap_cpp","text":"Applies targeted record swapping micro data set, see ?recordSwap details. NOTE: internal function called R-function recordSwap(). purpose include C++-function recordSwap() using Rcpp.","code":""},{"path":"/reference/recordSwap_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Targeted Record Swapping — recordSwap_cpp","text":"","code":"recordSwap_cpp(   data,   hid,   hierarchy,   similar_cpp,   swaprate,   risk,   risk_threshold,   k_anonymity,   risk_variables,   carry_along,   log_file_name,   seed = 123456L )"},{"path":"/reference/recordSwap_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Targeted Record Swapping — recordSwap_cpp","text":"data micro data set containing integer values. data.frame data.table R needs transposed beforehand data.size() ~ number records - data.[0].size ~ number varaibles per record. NOTE: data ordered hid beforehand. hid column index data refers household identifier. hierarchy column indices variables data refers geographic hierarchy micro data set. instance county > municipality > district. similar_cpp List entry corresponds column indices variables data considered swapping households. swaprate double 0 1 defining proportion households swapped, see details explanations risk vector vectors containing risks individual hierarchy level. risk_threshold double indicating risk threshold every household needs swapped. k_anonymity integer defining threshold high risk households (k-anonymity). used k_anonymity <= counts. risk_variables column indices variables data considered estimating risk. carry_along integer vector indicating additional variables swap besides hierarchy variables. variables interfere procedure finding record swap calculating risk. parameter used end procedure swapping hierarchies. log_file_name character, path writing log file. log file contains list household IDs (`hid`) swapped created households exist. seed integer defining seed random number generator, reproducibility.","code":""},{"path":"/reference/recordSwap_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Targeted Record Swapping — recordSwap_cpp","text":"Returns data set swapped records.","code":""},{"path":"/reference/removeDirectID.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove certain variables from the data set inside a sdc object. — removeDirectID","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"Delete variables without changing anything else sdcObject (writing NAs).","code":""},{"path":"/reference/removeDirectID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"","code":"removeDirectID(obj, var)"},{"path":"/reference/removeDirectID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"obj object class sdcMicroObj-class var name variable(s) remove","code":""},{"path":"/reference/removeDirectID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"modified sdcMicroObj-class","code":""},{"path":"/reference/removeDirectID.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"Alexander Kowarik","code":""},{"path":"/reference/removeDirectID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove certain variables from the data set inside a sdc object. — removeDirectID","text":"","code":"## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata, keyVars=c('urbrur','roof'),  numVars=c('expend','income','savings'), w='sampling_weight') sdc <- removeDirectID(sdc, var=\"age\")"},{"path":"/reference/report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an Html-report from an sdcMicroObj — report","title":"Generate an Html-report from an sdcMicroObj — report","text":"Summary statistics original perturbed data set","code":""},{"path":"/reference/report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an Html-report from an sdcMicroObj — report","text":"","code":"report(   obj,   outdir = getwd(),   filename = \"SDC-Report\",   title = \"SDC-Report\",   internal = FALSE,   verbose = FALSE )"},{"path":"/reference/report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an Html-report from an sdcMicroObj — report","text":"obj object class sdcMicroObj-class reportObj outdir output folder filename output filename title Title report internal TRUE/FALSE, TRUE detailled internal report produced, else non-disclosive overview verbose TRUE/FALSE, TRUE, additional information printed.","code":""},{"path":"/reference/report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an Html-report from an sdcMicroObj — report","text":"application function provides html-report sdcMicro object contains useful summaries anonymization process.","code":""},{"path":"/reference/report.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate an Html-report from an sdcMicroObj — report","text":"Matthias Templ, Bernhard Meindl","code":""},{"path":"/reference/report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an Html-report from an sdcMicroObj — report","text":"","code":"if (FALSE) { data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') report(sdc) }"},{"path":"/reference/riskyCells.html","id":null,"dir":"Reference","previous_headings":"","what":"riskyCells — riskyCells","title":"riskyCells — riskyCells","text":"Allows compute risky (unweighted) combinations key variables either specified dimension using identification level. mimics approach taken mu-argus.","code":""},{"path":"/reference/riskyCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"riskyCells — riskyCells","text":"","code":"riskyCells(obj, useIdentificationLevel = FALSE, threshold, ...)"},{"path":"/reference/riskyCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"riskyCells — riskyCells","text":"obj data.frame, data.table object class sdcMicroObj-class useIdentificationLevel (logical) specifies tabulation done specific dimension (useIdentificationLevel=FALSE using argument maxDim) taking identification levels (useIdentificationLevel=FALSE using argument level) account. threshold numeric vector specifiying thresholds cells considered unsafe. case tabulation done specific level (useIdentificationLevel=FALSE), thresholds may specified differently dimension. case, threshold used tables. ... see possible arguments keyVars: index variable-names within obj used tabulation. case obj class sdcMicroObj-class, argument used pre-defined key-variables used. level: case useIdentificationLevel=TRUE, numeric vector specifies importance key variables. construction output tables follows implementation mu-argus, see e.g https://github.com/sdcTools/manuals/raw/master/mu-argus/MUmanual5.1.pdf. length numeric vector must match number key variables. maxDim: case useIdentificationLevel=FALSE, number specifies maximal number variables tablulate.","code":""},{"path":"/reference/riskyCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"riskyCells — riskyCells","text":"data.table showing number unsafe cells, thresholds combination key variables. input sdcMicroObj-class object modifications already applied categorical key variables, resulting output contains number unsafe cells original modified data.","code":""},{"path":"/reference/riskyCells.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"riskyCells — riskyCells","text":"Bernhard Meindl","code":""},{"path":"/reference/riskyCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"riskyCells — riskyCells","text":"","code":"if (FALSE) { ## data.frame method / all combinations up to maxDim riskyCells(testdata2, keyVars=c(1:5), threshold=c(50,25,10,5),   useIdentificationLevel=FALSE, maxDim=4) riskyCells(testdata2, keyVars=c(1:5), threshold=10,   useIdentificationLevel=FALSE, maxDim=3)  ## data.frame method / using identification levels riskyCells(testdata2, keyVars=c(1:6), threshold=20,   useIdentificationLevel=TRUE, level=c(1,1,2,3,3,5)) riskyCells(testdata2, keyVars=c(1,3,4,6), threshold=10,   useIdentificationLevel=TRUE, level=c(1,2,2,4))  ## sdcMicroObj-method / all combinations up to maxDim testdata2[1:6] <- lapply(1:6, function(x) {   testdata2[[x]] <- as.factor(testdata2[[x]]) }) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight')  r0 <- riskyCells(sdc, useIdentificationLevel=FALSE, threshold=c(20,10,5), maxDim=3) ## in case key-variables have been modified, we get counts for original and modified data sdc <- groupAndRename(sdc, var=\"roof\", before=c(\"5\",\"6\",\"9\"), after=c(\"5+\")) r1 <- riskyCells(sdc, useIdentificationLevel=FALSE, threshold=c(10,5,3), maxDim=3)  ## sdcMicroObj-method / using identification levels riskyCells(sdc, useIdentificationLevel=TRUE, threshold=10, level=c(c(1,1,3,4,5,5,5))) }"},{"path":"/reference/sampleDonor_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Random sample for donor records — sampleDonor_cpp","title":"Random sample for donor records — sampleDonor_cpp","text":"Randomly select donor records given probability weight vector. sampling procedure implemented differently randSample_cpp speed performance C++-function recordSwap(). NOTE: internal function used testing C++-function sampleDonor used inside C++-function recordSwap().","code":""},{"path":"/reference/sampleDonor_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random sample for donor records — sampleDonor_cpp","text":"","code":"sampleDonor_cpp(   data,   similar_cpp,   hid,   IDswap,   IDswap_pool_vec,   prob,   seed = 123456L )"},{"path":"/reference/sampleDonor_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random sample for donor records — sampleDonor_cpp","text":"data micro data containing hierarchy levels household ID similar_cpp List entry corresponds column indices variables data considered swapping households. hid column index data refers household identifier. IDswap vector containing records donor needs sampled IDswap_pool_vec set `IDswap` drawn prob vector probability weights obtaining elements vector sampled. seed integer setting sampling seed","code":""},{"path":"/reference/sdcApp.html","id":null,"dir":"Reference","previous_headings":"","what":"sdcApp — sdcApp","title":"sdcApp — sdcApp","text":"starts graphical user interface developed shiny.","code":""},{"path":"/reference/sdcApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sdcApp — sdcApp","text":"","code":"sdcApp(   maxRequestSize = 50,   debug = FALSE,   theme = \"IHSN\",   ...,   shiny.server = FALSE )"},{"path":"/reference/sdcApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sdcApp — sdcApp","text":"maxRequestSize (numeric) number defining maximum allowed filesize (megabytes) uploaded files, defaults 50MB debug logical TRUE, set shiny-debugging options theme select stylesheet interface. Supported choices 'yeti' 'flatly' 'journal' 'IHSN' ... arguments (e.g host) passed runApp starting shiny application shiny.server Setting parameter TRUE return app form  object rather invoking . useful deploying sdcApp via shiny-server.","code":""},{"path":"/reference/sdcApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sdcApp — sdcApp","text":"starts interactive graphical user interface may used perform anonymisation process.","code":""},{"path":"/reference/sdcApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sdcApp — sdcApp","text":"","code":"if (FALSE) { sdcApp(theme=\"flatly\") }"},{"path":"/reference/sdcMicro-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","title":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","text":"package includes methods popular software mu-Argus plus several new methods. comparison mu-Argus advantages package results fully reproducible even included GUI, package can used batch-mode software, functions can used flexible way, everybody look source code time-consuming meta-data management necessary. However, user detailed knowledge SDC applying methods data.","code":""},{"path":"/reference/sdcMicro-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","text":"package programmed using S4-classes comes well-defined class structure. implemented graphical user interface (GUI) microdata protection serves easy--handle tool users want use sdcMicro package statistical disclosure control used native R command line interface.  addition , interactions objects results anonymization process provided within GUI. allows automated recalculation displaying information frequency counts, individual risk, information loss data utility anonymization step. addition , code every anonymization step carried within GUI saved script can easily modified reloaded.","code":""},{"path":"/reference/sdcMicro-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","text":"Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4 Templ, M. Kowarik, . Meindl, B. Statistical Disclosure Control Micro-Data Using R Package sdcMicro. Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04 Templ, M. Meindl, B. Practical Applications Statistical Disclosure Control Using R, Privacy Anonymity Information Management Systems, Bookchapter, Springer London, pp. 31-62, 2010. doi:10.1007/978-1-84996-238-4_3 Kowarik, . Templ, M. Meindl, B. Fonteneau, F. Prantner, B.: Testing IHSN Cpp Code Inclusion New Methods sdcMicro, : Lecture Notes Computer Science, J. Domingo-Ferrer, . Tinnirello (editors.); Springer, Berlin, 2012, ISBN: 978-3-642-33626-3, pp. 63-77. doi:10.1007/978-3-642-33627-0_6 Templ, M.  Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008. http://www.tdp.cat/issues/abs.a004a08.php Templ, M.  New Developments Statistical Disclosure Control Imputation: Robust Statistics Applied Official Statistics, Suedwestdeutscher Verlag fuer Hochschulschriften, 2009, ISBN: 3838108280, 264 pages.","code":""},{"path":"/reference/sdcMicro-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","text":"Matthias Templ, Alexander Kowarik, Bernhard Meindl Maintainer: Matthias Templ <templ@statistik.tuwien.ac.>","code":""},{"path":"/reference/sdcMicro-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistical Disclosure Control (SDC) for the generation of protected\nmicrodata for researchers and for public use. — sdcMicro-package","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) f <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) f #>  #>  -------------------------- #> 4 obs. violate 2-anonymity  #> 8 obs. violate 3-anonymity  #>  -------------------------- f$fk #> [1] 2 2 2 1 1 1 1 2 f$Fk #> [1] 110.0  84.5  84.5  17.0 541.0   8.0   5.0 110.0 ## with missings: x <- francdat x[3,5] <- NA x[4,2] <- x[4,4] <- NA x[5,6]  <- NA x[6,2]  <- NA f2 <- freqCalc(x,  keyVars=c(2,4,5,6),w=8) f2$Fk #> [1] 149.0  84.5 194.5 563.0 566.0 549.0  22.0 149.0 ## individual risk calculation: indivf <- indivRisk(f) indivf$rk #> [1] 0.01714426 0.02204233 0.02204233 0.17707583 0.01165448 0.29706308 0.40235948 #> [8] 0.01714426 ## Local Suppression localS <- localSupp(f, keyVar=2, threshold=0.25) #> 2observations has individual risks >=0.25and were suppressed! f2 <- freqCalc(localS$freqCalc, keyVars=c(2,4,5,6), w=8) indivf2 <- indivRisk(f2) indivf2$rk #> [1] 0.01714426 0.02204233 0.02204233 0.17707583 0.01165448 0.29706308 0.40235948 #> [8] 0.01714426  ## select another keyVar and run localSupp once again, #if you think the table is not fully protected data(free1) free1 <- as.data.frame(free1) f <- freqCalc(free1, keyVars=1:3, w=30) ind <- indivRisk(f) ## and now you can use the interactive plot for individual risk objects: ## plot(ind)  ## example from Capobianchi, Polettini and Lucarelli: data(francdat) l1 <- localSuppression(francdat, keyVars=c(2,4,5,6), importance=c(1,3,2,4)) l1 #>  #> ----------------------- #> Total number of suppressions in the key variables: 5 (new: 5) #>  #> Number of suppressions by key variables: #> (in parenthesis, the total number suppressions is shown) #>  #>    Key1  Key2  Key3  Key4 #> 1 1 (1) 1 (1) 0 (0) 3 (3) #>  #> 2-anonymity == TRUE #> ----------------------- l1$x #>   Key1 Key2 Key3 Key4 #> 1    1    2    5    1 #> 2    1    2    1    1 #> 3    1    2    1    1 #> 4    3    3    1   NA #> 5    4    3    1   NA #> 6   NA    3    1    1 #> 7    6   NA    1   NA #> 8    1    2    5    1 l2 <- localSuppression(francdat, keyVars=c(2,4,5,6), k=2) l3 <- localSuppression(francdat, keyVars=c(2,4,5,6), k=4)  ## Data from mu-Argus: ## Global recoding: data(free1) free1 <- as.data.frame(free1) free1[, \"AGE\"] <- globalRecode(free1[,\"AGE\"], c(1,9,19,29,39,49,59,69,100), labels=1:8)  ## Top coding: topBotCoding(free1[,\"DEBTS\"], value=9000, replacement=9100, kind=\"top\")  ## Numerical Rank Swapping: ## do not use the mu-Argus test data set (free1) # since the numerical variables are (probably) faked. data(Tarragona) if (FALSE) { Tarragona1 <- rankSwap(Tarragona, P = 10, K0 = NULL, R0 = NULL) }  ## Microaggregation: m1 <- microaggregation(Tarragona, method=\"onedims\", aggr=3) m2 <- microaggregation(Tarragona, method=\"pca\", aggr=3) # summary(m1) ## approx. 1 minute computation time # valTable(Tarragona, method=c(\"simple\",\"onedims\",\"pca\"))   data(microData) microData <- as.data.frame(microData) m1 <- microaggregation(microData, method=\"mdav\") x <- m1$x  ### fix me summary(m1) #> $meansx #>       one              two            three         four            five       #>  Min.   : 1.000   Min.   : 3.00   Min.   :21   Min.   :50.00   Min.   : 90.0   #>  1st Qu.: 4.000   1st Qu.:11.00   1st Qu.:49   1st Qu.:52.00   1st Qu.:111.0   #>  Median : 7.000   Median :14.00   Median :65   Median :57.00   Median :133.0   #>  Mean   : 6.538   Mean   :14.92   Mean   :61   Mean   :55.92   Mean   :134.8   #>  3rd Qu.: 8.000   3rd Qu.:19.00   3rd Qu.:73   3rd Qu.:60.00   3rd Qu.:155.0   #>  Max.   :15.000   Max.   :29.00   Max.   :99   Max.   :61.00   Max.   :188.0   #>  #> $meansxm #>       one             two             three            four       #>  Min.   :4.000   Min.   : 8.667   Min.   :30.67   Min.   :51.67   #>  1st Qu.:4.000   1st Qu.:13.333   1st Qu.:52.33   1st Qu.:54.75   #>  Median :4.333   Median :15.000   Median :69.67   Median :54.75   #>  Mean   :6.538   Mean   :14.923   Mean   :61.00   Mean   :55.92   #>  3rd Qu.:9.000   3rd Qu.:15.000   3rd Qu.:83.75   3rd Qu.:58.00   #>  Max.   :9.667   Max.   :22.667   Max.   :83.75   Max.   :59.67   #>       five       #>  Min.   :103.7   #>  1st Qu.:118.7   #>  Median :152.2   #>  Mean   :134.8   #>  3rd Qu.:152.2   #>  Max.   :158.7   #>  #> $amean #> [1] 0 #>  #> $amedian #> [1] 0.7083864 #>  #> $aonestep #> [1] 0.3452408 #>  #> $devvar #> [1] 1.591051 #>  #> $amad #> [1] 2.213889 #>  #> $acov #> [1] 0.7955257 #>  #> $arcov #> [1] NA #>  #> $acor #> [1] 1.686831 #>  #> $arcor #> [1] NA #>  #> $acors #> [1] 2.374987 #>  #> $adlm #> [1] 5.191309 #>  #> $adlts #> [1] NA #>  #> $apcaload #> [1] 8.456233 #>  #> $apppcaload #> [1] 7.476907 #>  #> $totalsOrig #>   one   two three  four  five  #>    85   194   793   727  1752  #>  #> $totalsMicro #> numeric(0) #>  #> $atotals #> [1] 0 #>  #> $pmtotals #> [1] 0 #>  #> $util1 #> [1] 22.84007 #>  #> $deigenvalues #> [1] 3.11481 #>  #> $risk0 #> [1] 0 #>  #> $risk1 #> [1] 0.4615385 #>  #> $risk2 #> [1] 0 #>  #> $wrisk1 #> [1] 0.9314044 #>  #> $wrisk2 #> [1] 0 #>  plotMicro(m1, 1, which.plot=1)  # too less observations... data(free1) free1 <- as.data.frame(free1) plotMicro(microaggregation(free1[,31:34], method=\"onedims\"), 1, which.plot=1)     ## disclosure risk (interval) and data utility: m1 <- microaggregation(Tarragona, method=\"onedims\", aggr=3) dRisk(obj=Tarragona, xm=m1$mx) #> [1] 0.8717026 dRisk(obj=Tarragona, xm=m2$mx) #> [1] 0.004796163 dUtility(obj=Tarragona, xm=m1$mx) #> [1] 120.8887 dUtility(obj=Tarragona, xm=m2$mx) #> [1] 1512.416  ## S4 class code for Adding Noise methods will be included #in the next version of sdcMicro.  ## Fast generation of synthetic data with aprox. #the same covariance matrix as the original one.  data(mtcars) cov(mtcars[,4:6]) #>              hp        drat         wt #> hp   4700.86694 -16.4511089 44.1926613 #> drat  -16.45111   0.2858814 -0.3727207 #> wt     44.19266  -0.3727207  0.9573790 cov(dataGen(mtcars[,4:6],n=200)) #>              hp        drat         wt #> hp   4884.85671 -20.2554546 50.3170824 #> drat  -20.25545   0.3175838 -0.4234466 #> wt     50.31708  -0.4234466  1.0253063 pairs(mtcars[,4:6])  pairs(dataGen(mtcars[,4:6],n=200))   ## PRAM if (FALSE) { set.seed(123) x <- factor(sample(1:4, 250, replace=TRUE)) pr1 <- pram(x) length(which(pr1$x_pram == x)) summary(pr1) x2 <- factor(sample(1:4, 250, replace=TRUE)) length(which(pram(x2)$x_pram == x2))  data(free1) marstat <- as.factor(free1[,\"MARSTAT\"]) marstatPramed <- pram(marstat) summary(marstatPramed)  # FOR OBJECTS OF CLASS sdcMicro data(testdata)  # undo-functionality is by default restricted to data sets # with <= 1e5 rows; to modify, env-var `sdcMicro_maxsize_undo` # can to be changed before creating a problem instance Sys.setenv(\"sdcMicro_maxsize_undo\" = 1e6)  sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') head(sdc@manipNumVars) ### Display Risks sdc@risk$global sdc <- dRisk(sdc) sdc@risk$numeric ### use addNoise without Parameters sdc <- addNoise(sdc,variables=c(\"expend\",\"income\")) head(sdc@manipNumVars) sdc@risk$numeric ### undolast sdc <- undolast(sdc) head(sdc@manipNumVars) sdc@risk$numeric ### redo addNoise with Parameter sdc <- addNoise(sdc, noise=0.2) head(sdc@manipNumVars) sdc@risk$numeric ### dataGen #sdc <- undolast(sdc) #head(sdc@risk$individual) #sdc@risk$global #sdc <- dataGen(sdc) #head(sdc@risk$individual) #sdc@risk$global ### LocalSuppression sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global sdc <- localSuppression(sdc) head(sdc@risk$individual) sdc@risk$global ### microaggregation sdc <- undolast(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc <- microaggregation(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) ### pram sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global sdc <- pram(sdc,keyVar=\"water\") head(sdc@risk$individual) sdc@risk$global ### rankSwap sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc <- rankSwap(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) head(sdc@risk$individual) sdc@risk$global ### suda2 sdc <- suda2(sdc) sdc@risk$suda2 ### topBotCoding head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc@risk$numeric sdc <- topBotCoding(sdc, value=60000000, replacement=62000000, column=\"income\") head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc@risk$numeric ### LocalRecProg data(testdata2) keyVars <- c(\"urbrur\", \"roof\", \"walls\", \"water\", \"sex\") w <- \"sampling_weight\" sdc <- createSdcObj(testdata2,   keyVars = keyVars,   weightVar = w) sdc@risk$global sdc <- LocalRecProg(sdc) sdc@risk$global ### model-based risks #' formula form <- as.formula(paste(\"~\", paste(keyVars, collapse = \"+\"))) sdc <- modRisk(sdc, method = \"default\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"CE\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"PLM\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"weightedLLM\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"IPF\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model }"},{"path":"/reference/sdcMicroObj-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class save information SDC process","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class ","text":"","code":"createSdcObj(   dat,   keyVars,   numVars = NULL,   pramVars = NULL,   ghostVars = NULL,   weightVar = NULL,   hhId = NULL,   strataVar = NULL,   sensibleVar = NULL,   excludeVars = NULL,   options = NULL,   seed = NULL,   randomizeRecords = FALSE,   alpha = 1 )  undolast(object)  strataVar(object) <- value  # S4 method for sdcMicroObj,characterOrNULL strataVar(object) <- value"},{"path":"/reference/sdcMicroObj-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class ","text":"dat microdata set. numeric matrix data frame containing data. keyVars Indices names categorical key variables. must, course, match columns ‘dat’. numVars Index names continuous key variables. pramVars Indices names categorical variables considered pramed. ghostVars specified list element list exactly two elements. first element must character vector specifying exactly one variable name also specified categorical key variable (keyVars), second element character vector valid variable names (must listed keyVars). localSuppression kAnon applied, resulting suppression pattern key-variable transferred depending variables. weightVar Indices name determining vector sampling weights. hhId Index name cluster ID (available). strataVar Indices names stratification variables. sensibleVar Indices names sensible variables (l-diversity) excludeVars variables dat included result-object? Users may specify vector variable-names available dat specified either keyVars, numVars, pramVars, ghostVars, hhId, strataVar sensibleVar. options additional options (specified, list must used input) seed (numeric) number specifiying seed set allow reproducablity. number rounded saved element seed slot options. randomizeRecords (logical) TRUE, order observations input microdata set randomized. alpha numeric 0 1 specifying fraction much keys containing NAs contribute frequency calculation also crucial risk-estimation. object sdcMicroObj-class object value NULL character vector length 1 specifying valid variable name","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class ","text":"sdcMicroObj-class object object class sdcMicroObj modified slot @strataVar","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"sdcMicroObj\", ...).","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Templ, M. Meindl, B. Kowarik, .: Statistical Disclosure Control Micro-Data Using R Package sdcMicro, Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Bernhard Meindl, Alexander Kowarik, Matthias Templ, Elias Rut","code":""},{"path":"/reference/sdcMicroObj-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"sdcMicroObj\") #> Class \"sdcMicroObj\" [package \"sdcMicro\"] #>  #> Slots: #>                                                                                #> Name:           origData           keyVars          pramVars           numVars #> Class:   dataframeOrNULL     numericOrNULL     numericOrNULL     numericOrNULL #>                                                                                #> Name:          ghostVars         weightVar              hhId         strataVar #> Class:        listOrNULL     numericOrNULL     numericOrNULL     numericOrNULL #>                                                                                #> Name:        sensibleVar      manipKeyVars     manipPramVars      manipNumVars #> Class:     numericOrNULL   dataframeOrNULL   dataframeOrNULL   dataframeOrNULL #>                                                                                #> Name:     manipGhostVars    manipStrataVar      originalRisk              risk #> Class:   dataframeOrNULL      factorOrNULL        listOrNULL        listOrNULL #>                                                                                #> Name:            utility              pram  localSuppression           options #> Class:        listOrNULL        listOrNULL        listOrNULL        listOrNULL #>                                                                                #> Name:  additionalResults               set              prev       deletedVars #> Class:        listOrNULL        listOrNULL    sdcmicroOrNULL   characterOrNULL #>  #> Extends: \"sdcmicroOrNULL\" if (FALSE) { data(testdata) sdc <- createSdcObj(testdata,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') head(sdc@manipNumVars) ### Display Risks sdc@risk$global sdc <- dRisk(sdc) sdc@risk$numeric ### use addNoise without Parameters sdc <- addNoise(sdc,variables=c(\"expend\",\"income\")) head(sdc@manipNumVars) sdc@risk$numeric ### undolast sdc <- undolast(sdc) head(sdc@manipNumVars) sdc@risk$numeric ### redo addNoise with Parameter sdc <- addNoise(sdc, noise=0.2) head(sdc@manipNumVars) sdc@risk$numeric ### dataGen #sdc <- undolast(sdc) #head(sdc@risk$individual) #sdc@risk$global #sdc <- dataGen(sdc) #head(sdc@risk$individual) #sdc@risk$global ### LocalSuppression sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global sdc <- localSuppression(sdc) head(sdc@risk$individual) sdc@risk$global ### microaggregation sdc <- undolast(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc <- microaggregation(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) ### pram sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global sdc <- pram(sdc,keyVar=\"water\") head(sdc@risk$individual) sdc@risk$global ### rankSwap sdc <- undolast(sdc) head(sdc@risk$individual) sdc@risk$global head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc <- rankSwap(sdc) head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) head(sdc@risk$individual) sdc@risk$global ### suda2 sdc <- suda2(sdc) sdc@risk$suda2 ### topBotCoding head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc@risk$numeric sdc <- topBotCoding(sdc, value=60000000, replacement=62000000, column=\"income\") head(get.sdcMicroObj(sdc, type=\"manipNumVars\")) sdc@risk$numeric  ### LocalRecProg data(testdata2) keyVars <- c(\"urbrur\", \"roof\", \"walls\", \"water\", \"sex\") w <- \"sampling_weight\" sdc <- createSdcObj(testdata2,   keyVars = keyVars,   weightVar = w) sdc@risk$global sdc <- LocalRecProg(sdc) sdc@risk$global ### model-based risks #' formula form <- as.formula(paste(\"~\", paste(keyVars, collapse = \"+\"))) sdc <- modRisk(sdc, method = \"default\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"CE\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"PLM\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"weightedLLM\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model sdc <- modRisk(sdc, method = \"IPF\", formulaM = form) get.sdcMicroObj(sdc, \"risk\")$model } ## we can also specify ghost (linked) variables ## these variables are linked to some categorical key variables ## and have the sampe suppression pattern as the variable that they ## are linked to after \\code{\\link{localSuppression}} has been applied data(testdata) testdata$electcon2 <- testdata$electcon testdata$electcon3 <- testdata$electcon testdata$water2 <- testdata$water  keyVars <- c(\"urbrur\",\"roof\",\"walls\",\"water\",\"electcon\",\"relat\",\"sex\") numVars <- c(\"expend\",\"income\",\"savings\") w <- \"sampling_weight\"  ## we want to make sure that some variables not used as key-variables ## have the same suppression pattern as variables that have been ## selected as key variables. Thus, we are using 'ghost'-variables. ghostVars <- list()  ## we want variables 'electcon2' and 'electcon3' to be linked ## to key-variable 'electcon' ghostVars[[1]] <- list() ghostVars[[1]][[1]] <- \"electcon\" ghostVars[[1]][[2]] <- c(\"electcon2\",\"electcon3\")  if (FALSE) { # dontrun because Examples with CPU time > 2.5 times elapsed time ## we want variable 'water2' to be linked to key-variable 'water' ghostVars[[2]] <- list() ghostVars[[2]][[1]] <- \"water\" ghostVars[[2]][[2]] <- \"water2\"  ## create the sdcMicroObj obj <- createSdcObj(testdata, keyVars=keyVars,   numVars=numVars, w=w, ghostVars=ghostVars)  ## apply 3-anonymity to selected key variables obj <- kAnon(obj, k=3); obj  ## check, if the suppression patterns are identical manipGhostVars <- get.sdcMicroObj(obj, \"manipGhostVars\") manipKeyVars <- get.sdcMicroObj(obj, \"manipKeyVars\") all(is.na(manipKeyVars$electcon) == is.na(manipGhostVars$electcon2)) all(is.na(manipKeyVars$electcon) == is.na(manipGhostVars$electcon3)) all(is.na(manipKeyVars$water) == is.na(manipGhostVars$water2))  ## exclude some variables obj <- createSdcObj(testdata, keyVars=c(\"urbrur\",\"roof\",\"walls\"), numVars=\"savings\",    weightVar=w, excludeVars=c(\"relat\",\"electcon\",\"hhcivil\",\"ori_hid\",\"expend\")) colnames(get.sdcMicroObj(obj, \"origData\")) }"},{"path":"/reference/selectHouseholdData.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"removes individual level variables selects one record per household based household ID. function can also used hierachical structures.","code":""},{"path":"/reference/selectHouseholdData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"","code":"selectHouseholdData(dat, hhId, hhVars)"},{"path":"/reference/selectHouseholdData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"dat data.frame full dataset hhId name variable household (cluster) ID hhVars character vector names household level variables","code":""},{"path":"/reference/selectHouseholdData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"data.frame household level variables one record per household","code":""},{"path":"/reference/selectHouseholdData.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"great importance users select variable containing information household-ids weights hhVars.","code":""},{"path":"/reference/selectHouseholdData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"Thijs Benschop Bernhard Meindl","code":""},{"path":"/reference/selectHouseholdData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a household level file from a dataset with a household structure. — selectHouseholdData","text":"","code":"## ori-hid: household-ids; household_weights: sampling weights for households x_hh <- selectHouseholdData(dat=testdata, hhId=\"ori_hid\",   hhVars=c(\"urbrur\", \"roof\",  \"walls\", \"water\", \"electcon\", \"household_weights\"))"},{"path":"/reference/set.sdcMicroObj.html","id":null,"dir":"Reference","previous_headings":"","what":"set.sdcMicroObj — set.sdcMicroObj","title":"set.sdcMicroObj — set.sdcMicroObj","text":"modify sdcMicroObj-class-objects depending argument type","code":""},{"path":"/reference/set.sdcMicroObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set.sdcMicroObj — set.sdcMicroObj","text":"","code":"set.sdcMicroObj(object, type, input)"},{"path":"/reference/set.sdcMicroObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set.sdcMicroObj — set.sdcMicroObj","text":"object sdcMicroObj-class-object type character vector length 1 defining calculate|return|modify. Allowed types listed slot corresponding name replaced content input. origData: keyVars: pramVars: numVars: weightVar: hhId: strataVar: sensibleVar: manipPramVars: manipNumVars: manipGhostVars: manipStrataVar: risk: utility: pram: localSuppression: options: prev: set: additionalResults: deletedVars: input list depending argument type. content list must match allowed data-type slot sdcMicroObj-class-object replaced.","code":""},{"path":"/reference/set.sdcMicroObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set.sdcMicroObj — set.sdcMicroObj","text":"sdcMicroObj-class-object","code":""},{"path":"/reference/set.sdcMicroObj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set.sdcMicroObj — set.sdcMicroObj","text":"","code":"sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') ind_pram <- match(c(\"sex\"), colnames(testdata2)) get.sdcMicroObj(sdc, type=\"pramVars\") #> NULL sdc <- set.sdcMicroObj(sdc, type=\"pramVars\", input=list(ind_pram)) get.sdcMicroObj(sdc, type=\"pramVars\") #> [1] 7"},{"path":"/reference/setLevels_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Swap-Levels — setLevels_cpp","title":"Define Swap-Levels — setLevels_cpp","text":"Define hierarchy levels record needs swapped according risk variables. NOTE: internal function used testing C++-function setLevels() applied inside recordSwap().","code":""},{"path":"/reference/setLevels_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Swap-Levels — setLevels_cpp","text":"","code":"setLevels_cpp(risk, risk_threshold)"},{"path":"/reference/setLevels_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Swap-Levels — setLevels_cpp","text":"risk vector vectors containing risks individual hierarchy level. risk[0] returns vector risks first unit hierarchy levels. risk[1] vector risks hierarchy level unit 2, . risk_threshold double defining risk threshold beyond record/household needs swapped. understood risk>=risk_threshhold.","code":""},{"path":"/reference/setLevels_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Swap-Levels — setLevels_cpp","text":"Integer vector hierarchy level record needs swapped .","code":""},{"path":"/reference/setRisk_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Risk — setRisk_cpp","title":"Calculate Risk — setRisk_cpp","text":"Calculate risk records swapped donor records.  Risks defined 1/counts, counts number records values specified risk_variables geographic hierarchy. risk used sampling probability sampling set donor set. NOTE: internal function used testing C++-function setRisk used inside C++-function recordSwap().","code":""},{"path":"/reference/setRisk_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Risk — setRisk_cpp","text":"","code":"setRisk_cpp(data, hierarchy, risk_variables, hid)"},{"path":"/reference/setRisk_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Risk — setRisk_cpp","text":"data micro data set containing numeric values. hierarchy column indices variables data refere geographic hierarchy micro data set. instance county > municipality > district. risk_variables column indices variables data considered estimating risk. hid column index data refers household identifier.","code":""},{"path":"/reference/show-sdcMicroObj-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show — show,sdcMicroObj-method","title":"Show — show,sdcMicroObj-method","text":"show sdcMicro object","code":""},{"path":"/reference/show-sdcMicroObj-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show — show,sdcMicroObj-method","text":"","code":"# S4 method for sdcMicroObj show(object)"},{"path":"/reference/show-sdcMicroObj-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show — show,sdcMicroObj-method","text":"object sdcmicro obj","code":""},{"path":"/reference/show-sdcMicroObj-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show — show,sdcMicroObj-method","text":"sdcMicro object","code":""},{"path":"/reference/show-sdcMicroObj-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show — show,sdcMicroObj-method","text":"Bernhard Meindl","code":""},{"path":"/reference/shuffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffling and EGADP — shuffle","title":"Shuffling and EGADP — shuffle","text":"Data shuffling General Additive Data Perturbation.","code":""},{"path":"/reference/shuffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffling and EGADP — shuffle","text":"","code":"shuffle(   obj,   form,   method = \"ds\",   weights = NULL,   covmethod = \"spearman\",   regmethod = \"lm\",   gadp = TRUE )"},{"path":"/reference/shuffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffling and EGADP — shuffle","text":"obj object class sdcMicroObj data.frame including data. form object class “formula” (one can coerced class): symbolic description model fitted.  responses consists least two variables class response variables class numeric.  response variables belongs numeric key variables (quasi-identifiers numeric scale). predictors can distributed way (numeric, factor, ordered factor). method currently either original form data shuffling (“ds” - default), “mvn” “mlm”, see details section. last method experimental mode almost untested. weights Survey sampling weights. Automatically chosen obj class sdcMicroObj-class. covmethod Method covariance estimation. “spearman”, “pearson” \\ dQuotemcd possible. latter one, implementation package robustbase used. regmethod Method multivariate regression. “lm” “MM” possible.  method “MM”, function “rlm” package MASS applied. gadp TRUE, egadp results fit original data returned.","code":""},{"path":"/reference/shuffle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffling and EGADP — shuffle","text":"‘obj’ class sdcMicroObj-class corresponding slots filled, like manipNumVars, risk utility.  ‘obj’ class “data.frame” object class “micro” following entities returned: shConf shuffled numeric key variables egadp perturbed (using gadp method) numeric key variables","code":""},{"path":"/reference/shuffle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shuffling and EGADP — shuffle","text":"Perturbed values sensitive variables generated.  sensitive variables stored responses argument ‘form’, usual formula interface regression models R. method “ds” EGADP method applied norm inverse percentiles. Shuffling ranks original values according GADP output. details, please see references. Method “mvn” uses simplification draws normal Copulas directly draws shuffled. Method “mlm” also simplification. linear model applied, expected values used perturbed values shuffling applied.","code":""},{"path":"/reference/shuffle.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shuffling and EGADP — shuffle","text":"version, covariance method chosen used covariance correlation estimations whole gadp shuffling function.","code":""},{"path":"/reference/shuffle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shuffling and EGADP — shuffle","text":"K. Muralidhar, R. Parsa, R. Saranthy (1999). general additive data perturbation method database security. Management Science, 45, 1399-1415. K. Muralidhar, R. Sarathy (2006). Data shuffling - new masking approach numerical data. Management Science, 52(5), 658-670, 2006. M. Templ, B. Meindl. (2008).  Robustification Microdata Masking Methods Comparison Existing Methods, : Lecture Notes Computer Science, J. Domingo-Ferrer, Y. Saygin (editors.); Springer, Berlin/Heidelberg, 2008, ISBN: 978-3-540-87470-6, pp. 14-25.","code":""},{"path":[]},{"path":"/reference/shuffle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shuffling and EGADP — shuffle","text":"Matthias Templ, Alexander Kowarik, Bernhard Meindl","code":""},{"path":"/reference/shuffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffling and EGADP — shuffle","text":"","code":"data(Prestige,package=\"carData\") form <- formula(income + education ~ women + prestige + type, data=Prestige) sh <- shuffle(obj=Prestige,form) #> Warning: rows with missing values have been imputed! plot(Prestige[,c(\"income\", \"education\")])  plot(sh$sh)  colMeans(Prestige[,c(\"income\", \"education\")]) #>     income  education  #> 6797.90196   10.73804  colMeans(sh$sh) #>     income  education  #> 6797.90196   10.73804  cor(Prestige[,c(\"income\", \"education\")], method=\"spearman\") #>             income education #> income    1.000000  0.573999 #> education 0.573999  1.000000 cor(sh$sh, method=\"spearman\") #>              income education #> income    1.0000000 0.5565376 #> education 0.5565376 1.0000000  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- shuffle(sdc, method=c('ds'),regmethod= c('lm'), covmethod=c('spearman'),     form=savings+expend ~ urbrur+walls)"},{"path":"/reference/subsetMicrodata.html","id":null,"dir":"Reference","previous_headings":"","what":"subsetMicrodata — subsetMicrodata","title":"subsetMicrodata — subsetMicrodata","text":"allows restrict original data subset. may useful test anonymization methods. function used graphical user interface sdcApp.","code":""},{"path":"/reference/subsetMicrodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subsetMicrodata — subsetMicrodata","text":"","code":"subsetMicrodata(obj, type, n)"},{"path":"/reference/subsetMicrodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subsetMicrodata — subsetMicrodata","text":"obj object class data.frame containing micro data type algorithm used sample original microdata. Currently supported choices n_perc restricted microdata n-percent sample original microdata. first_n first n observations used. every_n restricted microdata set consists every n-th record. size_n total n observations randomly drawn. n numeric vector length 1 specifying specific parameter respect argument type.","code":""},{"path":"/reference/subsetMicrodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subsetMicrodata — subsetMicrodata","text":"object class sdcMicroObj-class modified slot @origData.","code":""},{"path":"/reference/subsetMicrodata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"subsetMicrodata — subsetMicrodata","text":"Bernhard Meindl","code":""},{"path":"/reference/suda2.html","id":null,"dir":"Reference","previous_headings":"","what":"Suda2: Detecting Special Uniques — suda2","title":"Suda2: Detecting Special Uniques — suda2","text":"SUDA risk measure data (stratified) simple random sampling.","code":""},{"path":"/reference/suda2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suda2: Detecting Special Uniques — suda2","text":"","code":"suda2(obj, ...)"},{"path":"/reference/suda2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suda2: Detecting Special Uniques — suda2","text":"obj data.frame sdcMicroObj-object ... see arguments variables Categorical (key) variables. Either column names index variables used risk measurement. missing: Missing value coding given data set. DisFraction: sampling fraction simple random sampling, common sampling fraction stratified sampling. default, set 0.01. original_scores: argument TRUE (default), suda-scores computed described paper \"SUDA: Program Detecting Special Uniques\" Elliot et al., FALSE, computation scores slightly different done original implementation algorithm IHSN.","code":""},{"path":"/reference/suda2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suda2: Detecting Special Uniques — suda2","text":"modified sdcMicroObj object following list ContributionPercent: contribution key variable SUDA score, calculated row. score: suda score `disscore: dis suda score attribute_contributions: data.frame showing much total risk contributed variable. information stored following two variables: variable: containing name variable contribution: contains much risk variable contributes total risk. attribute_level_contributions: returns risks attribute-level data.frame following three columns: variable: variable name attribute: holding relevant level-codes contribution: contains risk level within variable.","code":""},{"path":"/reference/suda2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suda2: Detecting Special Uniques — suda2","text":"Suda 2 recursive algorithm finding Minimal Sample Uniques. algorithm generates possible variable subsets defined categorical key variables scans unique patterns subsets variables. lower amount variables needed receive uniqueness, higher risk corresponding observation.","code":""},{"path":"/reference/suda2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Suda2: Detecting Special Uniques — suda2","text":"Since version >5.0.2, computation suda-scores changed now default described original paper Elliot et al.","code":""},{"path":"/reference/suda2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Suda2: Detecting Special Uniques — suda2","text":"C. J. Skinner; M. J. Elliot (20xx) Measure Disclosure Risk Microdata. Journal Royal Statistical Society: Series B (Statistical Methodology), Vol. 64 (4), pp 855--867. M. J. Elliot, . Manning, K. Mayes, J. Gurd M. Bane (20xx) SUDA: Program Detecting Special Uniques, Using DIS Modify Classification Special Uniques Anna M. Manning, David J. Haglin, John . Keane (2008) recursive search algorithm statistical disclosure assessment. Data Min Knowl Disc 16:165 -- 196 Templ, M. Statistical Disclosure Control Microdata: Methods Applications R. Springer International Publishing, 287 pages, 2017. ISBN 978-3-319-50272-4. doi:10.1007/978-3-319-50272-4","code":""},{"path":"/reference/suda2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Suda2: Detecting Special Uniques — suda2","text":"Alexander Kowarik Bernhard Meindl (based C++ code Organisation Economic Co-Operation Development. C++ code: work supported International Household Survey Network funded DGF Grant provided World Bank PARIS21 Secretariat Organisation Economic Co-operation Development (OECD). work builds previous work elsewhere acknowledged.","code":""},{"path":"/reference/suda2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suda2: Detecting Special Uniques — suda2","text":"","code":"if (FALSE) { data(testdata2) data_suda2 <- suda2(testdata2,variables=c(\"urbrur\",\"roof\",\"walls\",\"water\",\"sex\")) data_suda2 str(data_suda2) summary(data_suda2)  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- suda2(sdc, original_scores=FALSE) }"},{"path":"/reference/summary.freqCalc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects from class freqCalc — summary.freqCalc","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"Summary method objects class ‘freqCalc’ provide information local suppressions.","code":""},{"path":"/reference/summary.freqCalc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"","code":"# S3 method for freqCalc summary(object, ...)"},{"path":"/reference/summary.freqCalc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"object object class freqCalc ... Additional arguments passed .","code":""},{"path":"/reference/summary.freqCalc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"Information local suppression variable (local suppression already done).","code":""},{"path":"/reference/summary.freqCalc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"Shows amount local suppressions variable local suppression applied.","code":""},{"path":[]},{"path":"/reference/summary.freqCalc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"Matthias Templ","code":""},{"path":"/reference/summary.freqCalc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for objects from class freqCalc — summary.freqCalc","text":"","code":"## example from Capobianchi, Polettini and Lucarelli: data(francdat) f <- freqCalc(francdat, keyVars=c(2,4,5,6),w=8) f #>  #>  -------------------------- #> 4 obs. violate 2-anonymity  #> 8 obs. violate 3-anonymity  #>  -------------------------- f$fk #> [1] 2 2 2 1 1 1 1 2 f$Fk #> [1] 110.0  84.5  84.5  17.0 541.0   8.0   5.0 110.0 ## individual risk calculation: indivf <- indivRisk(f) indivf$rk #> [1] 0.01714426 0.02204233 0.02204233 0.17707583 0.01165448 0.29706308 0.40235948 #> [8] 0.01714426 ## Local Suppression localS <- localSupp(f, keyVar=2, threshold=0.25) #> 2observations has individual risks >=0.25and were suppressed! f2 <- freqCalc(localS$freqCalc, keyVars=c(4,5,6), w=8) summary(f2) #>  #>  Suppressions:"},{"path":"/reference/summary.micro.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects from class micro — summary.micro","title":"Summary method for objects from class micro — summary.micro","text":"Summary method objects class ‘micro’.","code":""},{"path":"/reference/summary.micro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects from class micro — summary.micro","text":"","code":"# S3 method for micro summary(object, ...)"},{"path":"/reference/summary.micro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects from class micro — summary.micro","text":"object objects class micro ... Additional arguments passed .","code":""},{"path":"/reference/summary.micro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for objects from class micro — summary.micro","text":"meanx conventional summary original data meanxm conventional summary microaggregated data amean average relative absolute deviation means amedian average relative absolute deviation medians aonestep average relative absolute deviation onestep median devvar average relative absolute deviation variances amad average relative absolute deviation mad acov average relative absolute deviation covariances arcov average relative absolute deviation robust (mcd) covariances acor average relative absolute deviation correlations arcor average relative absolute deviation robust (mcd) correlations acors average relative absolute deviation rank-correlations adlm average absolute deviation lm regression coefficients (without intercept) adlts average absolute deviation lts regression coefficients (without intercept) apcaload average absolute deviation pca loadings apppacaload average absolute deviation robust (projection pursuit approach) pca loadings atotals average relative absolute deviation totals pmtotals average relative deviation totals","code":""},{"path":"/reference/summary.micro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary method for objects from class micro — summary.micro","text":"function computes several measures information loss, ","code":""},{"path":"/reference/summary.micro.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summary method for objects from class micro — summary.micro","text":"Templ, M. Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008. http://www.tdp.cat/issues/abs.a004a08.php","code":""},{"path":[]},{"path":"/reference/summary.micro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method for objects from class micro — summary.micro","text":"Matthias Templ","code":""},{"path":"/reference/summary.micro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for objects from class micro — summary.micro","text":"","code":"data(Tarragona) m1 <- microaggregation(Tarragona, method='onedims', aggr=3) ## summary(m1)"},{"path":"/reference/summary.pram.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects from class pram — summary.pram","title":"Summary method for objects from class pram — summary.pram","text":"Summary method objects class ‘pram’ provide information transitions.","code":""},{"path":"/reference/summary.pram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects from class pram — summary.pram","text":"","code":"# S3 method for pram summary(object, ...)"},{"path":"/reference/summary.pram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects from class pram — summary.pram","text":"object object class ‘pram’ ... Additional arguments passed .","code":""},{"path":"/reference/summary.pram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for objects from class pram — summary.pram","text":"summary object class ‘pram’.","code":""},{"path":"/reference/summary.pram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary method for objects from class pram — summary.pram","text":"Shows various information transitions.","code":""},{"path":"/reference/summary.pram.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summary method for objects from class pram — summary.pram","text":"Templ, M.  Statistical Disclosure Control Microdata Using R-Package sdcMicro, Transactions Data Privacy, vol. 1, number 2, pp. 67-85, 2008.  http://www.tdp.cat/issues/abs.a004a08.php","code":""},{"path":[]},{"path":"/reference/summary.pram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method for objects from class pram — summary.pram","text":"Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/summary.pram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for objects from class pram — summary.pram","text":"","code":"data(free1) x <- as.factor(free1[,\"MARSTAT\"]) x2 <- pram(x) x2 #> Number of changed observations:  #> - - - - - - - - - - -  #> x != x_pram : 225 (5.62%) summary(x2) #> Variable: x #>  #>  ---------------------- #>  #> Frequencies in original and perturbed data: #>                                 x    1   2   3    4 NA #> 1:           Original Frequencies 2547 162 171 1120  0 #> 2: Frequencies after Perturbation 2561 168 156 1115  0 #>  #> Transitions: #>     transition Frequency #>  1:    1 --> 1      2453 #>  2:    1 --> 2        34 #>  3:    1 --> 3        21 #>  4:    1 --> 4        39 #>  5:    2 --> 1        34 #>  6:    2 --> 2       121 #>  7:    2 --> 3         4 #>  8:    2 --> 4         3 #>  9:    3 --> 1        29 #> 10:    3 --> 2        10 #> 11:    3 --> 3       130 #> 12:    3 --> 4         2 #> 13:    4 --> 1        45 #> 14:    4 --> 2         3 #> 15:    4 --> 3         1 #> 16:    4 --> 4      1071 #>"},{"path":"/reference/testdata.html","id":null,"dir":"Reference","previous_headings":"","what":"A real-world data set on household income and expenditures — testdata","title":"A real-world data set on household income and expenditures — testdata","text":"concise (1-5 lines) description dataset.","code":""},{"path":"/reference/testdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A real-world data set on household income and expenditures — testdata","text":"testdata: data frame 4580 observations following 15 variables. urbrur numeric vector roof numeric vector walls numeric vector water numeric vector electcon numeric vector relat numeric vector sex numeric vector age numeric vector hhcivil numeric vector expend numeric vector income numeric vector savings numeric vector ori_hid numeric vector sampling_weight numeric vector household_weights numeric vector testdata2: data frame 93 observations following 19 variables. urbrur numeric vector roof numeric vector walls numeric vector water numeric vector electcon numeric vector relat numeric vector sex numeric vector age numeric vector hhcivil numeric vector expend numeric vector income numeric vector savings numeric vector ori_hid numeric vector sampling_weight numeric vector represent numeric vector category_count numeric vector relat2 numeric vector water2 numeric vector water3 numeric vector","code":""},{"path":"/reference/testdata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A real-world data set on household income and expenditures — testdata","text":"International Household Survey Network, www.ihsn.org","code":""},{"path":"/reference/testdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A real-world data set on household income and expenditures — testdata","text":"","code":"head(testdata) #>   urbrur roof walls water electcon relat sex age hhcivil   expend   income #> 1      2    4     3     3        1     1   1  46       2 90929693 57800000 #> 2      2    4     3     3        1     2   2  41       2 27338058 25300000 #> 3      2    4     3     3        1     3   1   9       1 26524717 69200000 #> 4      2    4     3     3        1     3   1   6       1 18073948 79600000 #> 5      2    4     2     3        1     1   1  52       2  6713247 90300000 #> 6      2    4     2     3        1     2   2  47       2 49057636 32900000 #>     savings ori_hid sampling_weight household_weights #> 1  116258.5       1             100          25.00000 #> 2  279345.0       1             100          25.00000 #> 3 5495381.0       1             100          25.00000 #> 4 8695862.0       1             100          25.00000 #> 5  203620.2       2             100          16.66667 #> 6 1021268.0       2             100          16.66667 head(testdata2) #>   urbrur roof walls water electcon relat sex age hhcivil   expend   income #> 1      1    2     3     1        4     1   1  69       1 30772412 72500000 #> 2      1    2     3     3        4     3   1  35       1 77536815 10100000 #> 3      1    2     3     3        4     1   2  80       4 15103477 56700000 #> 4      1    2     3     4        1     3   1  14       1 99118978 12300000 #> 5      1    2     3     4        4     2   2  28       2 55576313 26300000 #> 6      1    4     2     1        1     3   1  25       1 46468920 88600000 #>   savings ori_hid sampling_weight represent category_count relat2 water2 water3 #> 1 1230366     893             100         1              1     10     10    100 #> 2 1856943     621             100         1              1     30     10    100 #> 3 4807111     621             100         1              1     10     10    100 #> 4 7195081     667             100         1             11     30     20    200 #> 5 4934387     658             100         1             20     10     20    200 #> 6 8165375     625             100         1             58     30     10    100"},{"path":"/reference/topBotCoding.html","id":null,"dir":"Reference","previous_headings":"","what":"Top and Bottom Coding — topBotCoding","title":"Top and Bottom Coding — topBotCoding","text":"Function Top Bottom Coding.","code":""},{"path":"/reference/topBotCoding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top and Bottom Coding — topBotCoding","text":"","code":"topBotCoding(obj, value, replacement, kind = \"top\", column = NULL)"},{"path":"/reference/topBotCoding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top and Bottom Coding — topBotCoding","text":"obj numeric vector, data.frame sdcMicroObj-class-object value limit, top- bottom-coded replacement replacement value. kind top bottom column variable name case input data.frame object class sdcMicroObj-class.","code":""},{"path":"/reference/topBotCoding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top and Bottom Coding — topBotCoding","text":"Top bottom coded data modified sdcMicroObj-class.","code":""},{"path":"/reference/topBotCoding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Top and Bottom Coding — topBotCoding","text":"Extreme values larger lower value replaced different value (replacement order reduce disclosure risk.","code":""},{"path":"/reference/topBotCoding.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Top and Bottom Coding — topBotCoding","text":"top-/bottom coding factors longer possible sdcMicro >=4.7.0","code":""},{"path":"/reference/topBotCoding.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Top and Bottom Coding — topBotCoding","text":"Templ, M. Kowarik, . Meindl, B.  Statistical Disclosure Control Micro-Data Using R Package sdcMicro.  Journal Statistical Software, 67 (4), 1--36, 2015. doi:10.18637/jss.v067.i04","code":""},{"path":[]},{"path":"/reference/topBotCoding.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Top and Bottom Coding — topBotCoding","text":"Matthias Templ Bernhard Meindl","code":""},{"path":"/reference/topBotCoding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Top and Bottom Coding — topBotCoding","text":"","code":"data(free1) res <- topBotCoding(free1[,\"DEBTS\"], value=9000, replacement=9100, kind=\"top\") max(res) #> [1] 9100  data(testdata) range(testdata$age) #> [1]  0 95 testdata <- topBotCoding(testdata, value=80, replacement=81, kind=\"top\", column=\"age\") range(testdata$age) #> [1]  0 81  ## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2, keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),            numVars=c('expend','income','savings'), w='sampling_weight') sdc <- topBotCoding(sdc, value=500000, replacement=1000, column=\"income\") testdataout <- extractManipData(sdc)"},{"path":"/reference/valTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison of different microaggregation methods — valTable","title":"Comparison of different microaggregation methods — valTable","text":"Function comparison different perturbation methods.","code":""},{"path":"/reference/valTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison of different microaggregation methods — valTable","text":"","code":"valTable(   x,   method = c(\"simple\", \"onedims\", \"clustpppca\", \"addNoise: additive\", \"swappNum\"),   measure = \"mean\",   clustermethod = \"clara\",   aggr = 3,   nc = 8,   transf = \"log\",   p = 15,   noise = 15,   w = 1:dim(x)[2],   delta = 0.1 )"},{"path":"/reference/valTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison of different microaggregation methods — valTable","text":"x data.frame matrix method character vector defining names microaggregation-, adding-noise rank swapping methods. measure FUN aggregation. Possible values mean (default), median, trim, onestep. clustermethod clustermethod, method need clustering procedure aggr aggregation level (default=3) nc number clusters. Necessary, method need clustering procedure transf Transformation variables clustering. p Swapping range, method swappNum chosen noise noise addition, addNoise method chosen w variables swapping, method swappNum chosen delta parameter adding noise method \"correlated2\"","code":""},{"path":"/reference/valTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparison of different microaggregation methods — valTable","text":"Measures information loss splitted comparison different methods.","code":""},{"path":"/reference/valTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparison of different microaggregation methods — valTable","text":"Tabularize output summary.micro(). enhanced perturbation methods future versions. Methods adding noise named via addNoise:{method}, e.g. addNoise:correlated, {method} specifies desired method described addNoise().","code":""},{"path":"/reference/valTable.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Comparison of different microaggregation methods — valTable","text":"Templ, M. Meindl, B., Software Development SDC R, Lecture Notes Computer Science, Privacy Statistical Databases, vol. 4302, pp. 347-359, 2006.","code":""},{"path":[]},{"path":"/reference/valTable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Comparison of different microaggregation methods — valTable","text":"Matthias Templ","code":""},{"path":"/reference/valTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison of different microaggregation methods — valTable","text":"","code":"data(Tarragona) if (FALSE) { valTable(   x = Tarragona[100:200, ],   method=c(\"simple\", \"onedims\", \"pca\"))  valTable(   x = Tarragona,   method = c(\"simple\", \"onedims\", \"pca\", \"clustpppca\", \"mdav\", \"swappNum\"))  ## clustpppca in combination with Mclust outperforms ## the other algorithms for this data set... }"},{"path":"/reference/varToFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","title":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","text":"Change scale variable","code":""},{"path":"/reference/varToFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","text":"","code":"varToFactor(obj, var)  varToNumeric(obj, var)"},{"path":"/reference/varToFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","text":"obj object class sdcMicroObj-class var name keyVariable change","code":""},{"path":"/reference/varToFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","text":"modified sdcMicroObj-class","code":""},{"path":"/reference/varToFactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the a keyVariable of an object of class sdcMicroObj-class from Numeric to\nFactor or from Factor to Numeric — varToFactor","text":"","code":"## for objects of class sdcMicro: data(testdata2) sdc <- createSdcObj(testdata2,   keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),   numVars=c('expend','income','savings'), w='sampling_weight') sdc <- varToFactor(sdc, var=\"urbrur\")"},{"path":"/reference/writeSafeFile.html","id":null,"dir":"Reference","previous_headings":"","what":"writeSafeFile — writeSafeFile","title":"writeSafeFile — writeSafeFile","text":"writes anonymized dataset file. function used graphical user interface sdcApp .","code":""},{"path":"/reference/writeSafeFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"writeSafeFile — writeSafeFile","text":"","code":"writeSafeFile(obj, format, randomizeRecords, fileOut, ...)"},{"path":"/reference/writeSafeFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"writeSafeFile — writeSafeFile","text":"obj object class data.frame containing micro data format (character) specifies output file format. Accepted values : 'rdata' output saved R binary file-format. 'sav' output saved SPSS-file. 'dta' ouput saved STATA-file. 'csv' output saved comma seperated (text)-file. 'sas' output saved SAS-file (sas7bdat). randomizeRecords (logical) specifies, output records randomized. following options possible: '' default, randomization takes place 'simple' records just randomly swapped. 'byHH' slot 'hhId' NULL, clusters defined variable randomized across dataset. slot 'hhId' NULL, records dataset randomly changed. 'withinHH' slot 'hhId' NULL, clusters defined variable randomized across dataset additionally, order records within clusters also randomly changed. slot 'hhId' NULL, records dataset randomly changed. fileOut (character) file output written ... optional arguments used write.table argument format equals csv","code":""},{"path":"/reference/writeSafeFile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"writeSafeFile — writeSafeFile","text":"Bernhard Meindl","code":""}]
